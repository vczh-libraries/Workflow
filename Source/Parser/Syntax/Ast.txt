//////////////////////////////////////////////////////////////////
// AST (Root Types)
//////////////////////////////////////////////////////////////////

class Type
{
}

class Expression
{
}

class Statement
{
}

class Attribute
{
    var category : token;
    var name : token;
    var value : Expression;
}

class Declaration
{
    var attributes : Attribute[];
    var name : token;
}

enum FunctionKind
{
	Static,
	Override,
	Normal,
}

//////////////////////////////////////////////////////////////////
// AST (Types)
//////////////////////////////////////////////////////////////////

enum PredefinedTypeName
{
	Void,
	Object,
	Interface,
	Int,
	UInt,
	Float,
	Double,
	String,
	Char,
	Bool,
}

class PredefinedType : Type
{
    var name : PredefinedTypeName;
}

class TopQualifiedType : Type
{
    var name : token;
}

class ReferenceType : Type
{
    var name : token;
}

class RawPointerType : Type
{
    var element : Type;
}

class SharedPointerType : Type
{
    var element : Type;
}

class NullableType : Type
{
    var element : Type;
}

class EnumerableType : Type
{
    var element : Type;
}

enum MapWritability
{
	Readonly,
	Writable,
}

class MapType : Type
{
    var writability : MapWritability;
    var key : Type;
    var value : Type;
}

class ObservableListType : Type
{
    var element : Type;
}

class FunctionType : Type
{
    var result : Type;
    var arguments : Type[];
}

class ChildType : Type
{
    var parent : Type;
    var name : token;
}

//////////////////////////////////////////////////////////////////
// AST (Declarations)
//////////////////////////////////////////////////////////////////

class NamespaceDeclaration : Declaration
{
    var declarations : Declaration[];
}

class FunctionArgument
{
    var attributes : Attribute[];
    var name : token;
    var type : Type;
}

enum FunctionAnonymity
{
	Named,
	Anonymous,
}

class FunctionDeclaration : Declaration
{
    var functionKind : FunctionKind;
    var anonymity : FunctionAnonymity;
    var arguments : FunctionArgument[];
    var returnType : Type;
    var statement : Statement;
}

class VariableDeclaration : Declaration
{
    var type : Type;
    var expression : Expression;
}

class EventDeclaration : Declaration
{
    var arguments : Type[];
}

class PropertyDeclaration : Declaration
{
    var type : Type;
    var getter : token;
    var setter : token;
    var valueChangedEvent : token;
}

class StaticInitDeclaration : Declaration
{
    var statement : Statement;
}

//////////////////////////////////////////////////////////////////
// AST (Class)
//////////////////////////////////////////////////////////////////

enum ClassKind
{
	Class,
	Interface,
}

enum ConstructorType
{
	Undefined,
	SharedPtr,
	RawPtr,
}

class BaseConstructorCall
{
    var type : Type;
    var arguments : Expression[];
}

class ConstructorDeclaration : Declaration
{
    var constructorType : ConstructorType;
    var baseConstructorCalls : BaseConstructorCall[];
    var arguments : FunctionArgument[];
    var statement : Statement;
}

class DestructorDeclaration : Declaration
{
    var statement : Statement;
}

class ClassDeclaration : Declaration
{
    var kind : ClassKind;
    var constructorType : ConstructorType;
    var baseTypes : Type[];
	var declarations : Declaration[];
}

//////////////////////////////////////////////////////////////////
// AST (Enum)
//////////////////////////////////////////////////////////////////

enum EnumKind
{
	Normal,
	Flag,
}

enum EnumItemKind
{
	Constant,
	Intersection,
}

class EnumItemIntersection
{
    var name : token;
}

class EnumItem
{
    var attributes : Attribute[];
    var name : token;
    var kind : EnumItemKind;
    var number : token;
    var intersections : EnumItemIntersection[];
}

class EnumDeclaration : Declaration
{
    var kind : EnumKind;
    var items : EnumItem[];
}

//////////////////////////////////////////////////////////////////
// AST (Struct)
//////////////////////////////////////////////////////////////////

class StructMember
{
    var attributes : Attribute[];
    var name : token;
    var type : Type;
}

class StructDeclaration : Declaration
{
    var members : StructMember[];
}

//////////////////////////////////////////////////////////////////
// AST (Virtual Context Free Expandable Declarations)
//////////////////////////////////////////////////////////////////

class VirtualCfeDeclaration : Declaration
{
    var expandedDeclarations : Declaration[];
}

enum APConst
{
	Readonly,
	Writable,
}

enum APObserve
{
	Observable,
	NotObservable,
}

class AutoPropertyDeclaration : VirtualCfeDeclaration
{
    var functionKind : FunctionKind;
    var type : Type;
    var configConst : APConst;
    var configObserve : APObserve;
    var expression : Expression;
}

class CastResultInterfaceDeclaration : VirtualCfeDeclaration
{
    var baseType : Type;
    var elementType : Type;
}

//////////////////////////////////////////////////////////////////
// AST (Virtual Context Sensitive Expandable Declarations)
//////////////////////////////////////////////////////////////////

class VirtualCseDeclaration : Declaration
{
    var expandedDeclarations : Declaration[];
}

class StateInput
{
    var name : token;
    var arguments : FunctionArgument[];
}

class StateDeclaration
{
    var name : token;
    var arguments : FunctionArgument[];
    var statement : Statement;
}

class StateMachineDeclaration : VirtualCseDeclaration
{
    var inputs : StateInput[];
    var states : StateDeclaration[];
}

//////////////////////////////////////////////////////////////////
// AST (Statements)
//////////////////////////////////////////////////////////////////

class BreakStatement : Statement
{
}

class ContinueStatement : Statement
{
}

class ReturnStatement : Statement
{
    var expression : Expression;
}

class DeleteStatement : Statement
{
    var expression : Expression;
}

class RaiseExceptionStatement : Statement
{
    var expression : Expression;
}

class IfStatement : Statement
{
    var type : Type;
    var name : token;
    var expression : Expression;
    var trueBranch : Statement;
    var falseBranch : Statement;
}

class WhileStatement : Statement
{
    var condition : Expression;
    var statement : Statement;
}

class TryStatement : Statement
{
    var protectedStatement : Statement;
    var name : token;
    var catchStatement : Statement;
    var finallyStatement : Statement;
}

class BlockStatement : Statement
{
    var statements : Statement[];
    var endLabel : token;
}

class GotoStatement : Statement
{
    var label : token;
}

class VariableStatement : Statement
{
    var variable : VariableDeclaration;
}

class ExpressionStatement : Statement
{
    var expression : Expression;
}

//////////////////////////////////////////////////////////////////
// AST (Virtual Context Sensitive Expandable Statements)
//////////////////////////////////////////////////////////////////

class VirtualCseStatement : Statement
{
    var expandedStatement : Statement;
}

enum ForEachDirection
{
	Normal,
	Reversed,
}

class ForEachStatement : VirtualCseStatement
{
    var name : token;
    var direction : ForEachDirection;
    var collection : Expression;
    var statement : Statement;
}

class SwitchCase
{
    var expression : Expression;
    var statement : Statement;
}

class SwitchStatement : VirtualCseStatement
{
    var expression : Expression;
    var caseBranches : SwitchCase[];
    var defaultBranch : Statement;
}

class CoProviderStatement : VirtualCseStatement
{
    var name : token;
    var statement : Statement;
}

//////////////////////////////////////////////////////////////////
// AST (Coroutine Statements)
//////////////////////////////////////////////////////////////////

class CoroutineStatement : Statement
{
}

class CoPauseStatement : CoroutineStatement
{
    var statement : Statement;
}

class CoOperatorStatement : CoroutineStatement
{
    var varName : token;
    var opName : token;
    var arguments : Expression[];
}

//////////////////////////////////////////////////////////////////
// AST (State Machine Statements)
//////////////////////////////////////////////////////////////////

enum StateSwitchType
{
	Default,
	Pass,
	PassAndReturn,
	Ignore,
	IgnoreAndReturn,
}

enum StateInvokeType
{
	Goto,
	Push,
}

class StateMachineStatement : Statement
{
}

class StateSwitchArgument
{
    var name : token;
}

class StateSwitchCase
{
    var name : token;
    var arguments : StateSwitchArgument[];
    var statement : Statement;
}

class StateSwitchStatement : StateMachineStatement
{
    var type : StateSwitchType;
    var caseBranches : StateSwitchCase[];
}

class StateInvokeStatement : StateMachineStatement
{
    var type : StateInvokeType;
    var name : token;
    var arguments : Expression[];
}

//////////////////////////////////////////////////////////////////
// AST (Expressions)
//////////////////////////////////////////////////////////////////

class ThisExpression : Expression
{
}

class TopQualifiedExpression : Expression
{
    var name : token;
}

class ReferenceExpression : Expression
{
    var name : token;
}

class OrderedNameExpression : Expression
{
    var name : token;
}

class OrderedLambdaExpression : Expression
{
    var body : Expression;
}

class MemberExpression : Expression
{
    var parent : Expression;
    var name : token;
}

class ChildExpression : Expression
{
    var parent : Expression;
    var name : token;
}

enum LiteralValue
{
	Null,
	True,
	False,
}

class LiteralExpression : Expression
{
    var value : LiteralValue;
}

class FloatingExpression : Expression
{
    var value : token;
}

class IntegerExpression : Expression
{
    var value : token;
}

class StringExpression : Expression
{
	var value : token;
}

enum UnaryOperator
{
	Positive,
	Negative,
	Not,
}

class UnaryExpression : Expression
{
    var op : UnaryOperator;
    var operand : Expression;
}

enum BinaryOperator
{
	Assign,
	Index,
	FlagAnd,
	FlagOr,
	FailedThen,
	Exp,
	Add,
	Sub,
	Mul,
	Div,
	Mod,
	Shl,
	Shr,
	LT,
	GT,
	LE,
	GE,
	EQ,
	NE,
	Xor,
	And,
	Or,
}

class BinaryExpression : Expression
{
    var op : BinaryOperator;
    var first : Expression;
    var second : Expression;
}

class LetVariable
{
    var name : token;
    var value : Expression;
}

class LetExpression : Expression
{
    var variables : LetVariable[];
    var expression : Expression;
}

class IfExpression : Expression
{
    var condition : Expression;
    var trueBranch : Expression;
    var falseBranch : Expression;
}

enum RangeBoundary
{
	Inclusive,
	Exclusive,
}

class RangeExpression : Expression
{
    var begin : Expression;
    var beginBoundary : RangeBoundary;
    var end : Expression;
    var endBoundary : RangeBoundary;
}

enum SetTesting
{
	In,
	NotIn,
}

class SetTestingExpression : Expression
{
    var test : SetTesting;
    var element : Expression;
    var collection : Expression;
}

class ConstructorArgument
{
    var key : Expression;
    var value : Expression;
}

class ConstructorExpression : Expression
{
    var arguments : ConstructorArgument[];
}

class InferExpression : Expression
{
    var expression : Expression;
    var type : Type;
}

enum TypeCastingStrategy
{
	Strong,
	Weak,
}

class TypeCastingExpression : Expression
{
    var strategy : TypeCastingStrategy;
    var expression : Expression;
    var type : Type;
}

enum TypeTesting
{
	IsType,
	IsNotType,
	IsNull,
	IsNotNull,
}

class TypeTestingExpression : Expression
{
    var test : TypeTesting;
    var expression : Expression;
    var type : Type;
}

class TypeOfTypeExpression : Expression
{
    var type : Type;
}

class TypeOfExpressionExpression : Expression
{
    var expression : Expression;
}

class AttachEventExpression : Expression
{
    var event : Expression;
    var function : Expression;
}

class DetachEventExpression : Expression
{
    var event : Expression;
    var handler : Expression;
}

enum ObserveType
{
	SimpleObserve,
	ExtendedObserve,
}

class ObserveExpression : Expression
{
    var parent : Expression;
    var observeType : ObserveType;
    var name : token;
    var expression : Expression;
    var events : Expression[];
}

class CallExpression : Expression
{
    var function : Expression;
    var arguments : Expression[];
}

class FunctionExpression : Expression
{
    var function : FunctionDeclaration;
}

class NewClassExpression : Expression
{
    var type : Type;
    var arguments : Expression[];
}

class NewInterfaceExpression : Expression
{
    var type : Type;
	var declarations : Declaration[];
}

//////////////////////////////////////////////////////////////////
// AST (Virtual Context Free Expandable Expressions)
//////////////////////////////////////////////////////////////////

class VirtualCfeExpression : Expression
{
    var expandedExpression : Expression;
}

class FormatExpression : VirtualCfeExpression
{
	var value : token;
}

//////////////////////////////////////////////////////////////////
// AST (Virtual Context Sensitive Expandable Expressions)
//////////////////////////////////////////////////////////////////

class VirtualCseExpression : Expression
{
    var expandedExpression : Expression;
}

class BindExpression : VirtualCseExpression
{
    var expression : Expression;
}

class NewCoroutineExpression : VirtualCseExpression
{
    var name : token;
    var statement : Statement;
}

class MixinCastExpression : VirtualCseExpression
{
    var type : Type;
    var expression : Expression;
}

class ExpectedTypeCastExpression : VirtualCseExpression
{
    var strategy : TypeCastingStrategy;
    var expression : Expression;
}

class CoOperatorExpression : VirtualCseExpression
{
    var name : token;
}

//////////////////////////////////////////////////////////////////
// AST (Module)
//////////////////////////////////////////////////////////////////

class ModuleUsingFragment
{
}

class ModuleUsingNameFragment : ModuleUsingFragment
{
    var name : token;
}

class ModuleUsingWildCardFragment : ModuleUsingFragment
{
}

class ModuleUsingItem
{
    var fragments : ModuleUsingFragment[];
}

class ModuleUsingPath
{
    var items : ModuleUsingItem[];
}

enum ModuleType
{
	Module,
	Unit,
}

class Module
{
    var moduleType : ModuleType;
    var name : token;
    var paths : ModuleUsingPath[];
    var declarations : Declaration[];
}