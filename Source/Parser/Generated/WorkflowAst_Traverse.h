/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Ast
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_WORKFLOW_PARSER_AST_AST_TRAVERSE_VISITOR
#define VCZH_WORKFLOW_PARSER_AST_AST_TRAVERSE_VISITOR

#include "WorkflowAst.h"

namespace vl::workflow::traverse_visitor
{
	/// <summary>A traverse visitor, overriding all abstract methods with AST visiting code.</summary>
	class AstVisitor
		: public vl::Object
		, protected virtual WfType::IVisitor
		, protected virtual WfExpression::IVisitor
		, protected virtual WfStatement::IVisitor
		, protected virtual WfDeclaration::IVisitor
		, protected virtual WfVirtualCfeDeclaration::IVisitor
		, protected virtual WfVirtualCseDeclaration::IVisitor
		, protected virtual WfVirtualCseStatement::IVisitor
		, protected virtual WfCoroutineStatement::IVisitor
		, protected virtual WfStateMachineStatement::IVisitor
		, protected virtual WfVirtualCfeExpression::IVisitor
		, protected virtual WfVirtualCseExpression::IVisitor
		, protected virtual WfModuleUsingFragment::IVisitor
	{
	protected:
		virtual void Traverse(vl::glr::ParsingToken& token);
		virtual void Traverse(vl::glr::ParsingAstBase* node);
		virtual void Traverse(WfAttachEventExpression* node);
		virtual void Traverse(WfAttribute* node);
		virtual void Traverse(WfAutoPropertyDeclaration* node);
		virtual void Traverse(WfBaseConstructorCall* node);
		virtual void Traverse(WfBinaryExpression* node);
		virtual void Traverse(WfBindExpression* node);
		virtual void Traverse(WfBlockStatement* node);
		virtual void Traverse(WfBreakStatement* node);
		virtual void Traverse(WfCallExpression* node);
		virtual void Traverse(WfCastResultInterfaceDeclaration* node);
		virtual void Traverse(WfChildExpression* node);
		virtual void Traverse(WfChildType* node);
		virtual void Traverse(WfClassDeclaration* node);
		virtual void Traverse(WfCoOperatorExpression* node);
		virtual void Traverse(WfCoOperatorStatement* node);
		virtual void Traverse(WfCoPauseStatement* node);
		virtual void Traverse(WfCoProviderStatement* node);
		virtual void Traverse(WfConstructorArgument* node);
		virtual void Traverse(WfConstructorDeclaration* node);
		virtual void Traverse(WfConstructorExpression* node);
		virtual void Traverse(WfContinueStatement* node);
		virtual void Traverse(WfCoroutineStatement* node);
		virtual void Traverse(WfDeclaration* node);
		virtual void Traverse(WfDeleteStatement* node);
		virtual void Traverse(WfDestructorDeclaration* node);
		virtual void Traverse(WfDetachEventExpression* node);
		virtual void Traverse(WfEnumDeclaration* node);
		virtual void Traverse(WfEnumItem* node);
		virtual void Traverse(WfEnumItemIntersection* node);
		virtual void Traverse(WfEnumerableType* node);
		virtual void Traverse(WfEventDeclaration* node);
		virtual void Traverse(WfExpectedTypeCastExpression* node);
		virtual void Traverse(WfExpression* node);
		virtual void Traverse(WfExpressionStatement* node);
		virtual void Traverse(WfFloatingExpression* node);
		virtual void Traverse(WfForEachStatement* node);
		virtual void Traverse(WfFormatExpression* node);
		virtual void Traverse(WfFunctionArgument* node);
		virtual void Traverse(WfFunctionDeclaration* node);
		virtual void Traverse(WfFunctionExpression* node);
		virtual void Traverse(WfFunctionType* node);
		virtual void Traverse(WfGotoStatement* node);
		virtual void Traverse(WfIfExpression* node);
		virtual void Traverse(WfIfStatement* node);
		virtual void Traverse(WfInferExpression* node);
		virtual void Traverse(WfIntegerExpression* node);
		virtual void Traverse(WfLetExpression* node);
		virtual void Traverse(WfLetVariable* node);
		virtual void Traverse(WfLiteralExpression* node);
		virtual void Traverse(WfMapType* node);
		virtual void Traverse(WfMemberExpression* node);
		virtual void Traverse(WfMixinCastExpression* node);
		virtual void Traverse(WfModule* node);
		virtual void Traverse(WfModuleUsingFragment* node);
		virtual void Traverse(WfModuleUsingItem* node);
		virtual void Traverse(WfModuleUsingNameFragment* node);
		virtual void Traverse(WfModuleUsingPath* node);
		virtual void Traverse(WfModuleUsingWildCardFragment* node);
		virtual void Traverse(WfNamespaceDeclaration* node);
		virtual void Traverse(WfNewClassExpression* node);
		virtual void Traverse(WfNewCoroutineExpression* node);
		virtual void Traverse(WfNewInterfaceExpression* node);
		virtual void Traverse(WfNullableType* node);
		virtual void Traverse(WfObservableListType* node);
		virtual void Traverse(WfObserveExpression* node);
		virtual void Traverse(WfOrderedLambdaExpression* node);
		virtual void Traverse(WfOrderedNameExpression* node);
		virtual void Traverse(WfPredefinedType* node);
		virtual void Traverse(WfPropertyDeclaration* node);
		virtual void Traverse(WfRaiseExceptionStatement* node);
		virtual void Traverse(WfRangeExpression* node);
		virtual void Traverse(WfRawPointerType* node);
		virtual void Traverse(WfReferenceExpression* node);
		virtual void Traverse(WfReferenceType* node);
		virtual void Traverse(WfReturnStatement* node);
		virtual void Traverse(WfSetTestingExpression* node);
		virtual void Traverse(WfSharedPointerType* node);
		virtual void Traverse(WfStateDeclaration* node);
		virtual void Traverse(WfStateInput* node);
		virtual void Traverse(WfStateInvokeStatement* node);
		virtual void Traverse(WfStateMachineDeclaration* node);
		virtual void Traverse(WfStateMachineStatement* node);
		virtual void Traverse(WfStateSwitchArgument* node);
		virtual void Traverse(WfStateSwitchCase* node);
		virtual void Traverse(WfStateSwitchStatement* node);
		virtual void Traverse(WfStatement* node);
		virtual void Traverse(WfStaticInitDeclaration* node);
		virtual void Traverse(WfStringExpression* node);
		virtual void Traverse(WfStructDeclaration* node);
		virtual void Traverse(WfStructMember* node);
		virtual void Traverse(WfSwitchCase* node);
		virtual void Traverse(WfSwitchStatement* node);
		virtual void Traverse(WfThisExpression* node);
		virtual void Traverse(WfTopQualifiedExpression* node);
		virtual void Traverse(WfTopQualifiedType* node);
		virtual void Traverse(WfTryStatement* node);
		virtual void Traverse(WfType* node);
		virtual void Traverse(WfTypeCastingExpression* node);
		virtual void Traverse(WfTypeOfExpressionExpression* node);
		virtual void Traverse(WfTypeOfTypeExpression* node);
		virtual void Traverse(WfTypeTestingExpression* node);
		virtual void Traverse(WfUnaryExpression* node);
		virtual void Traverse(WfVariableDeclaration* node);
		virtual void Traverse(WfVariableStatement* node);
		virtual void Traverse(WfVirtualCfeDeclaration* node);
		virtual void Traverse(WfVirtualCfeExpression* node);
		virtual void Traverse(WfVirtualCseDeclaration* node);
		virtual void Traverse(WfVirtualCseExpression* node);
		virtual void Traverse(WfVirtualCseStatement* node);
		virtual void Traverse(WfWhileStatement* node);

	protected:
		virtual void Finishing(vl::glr::ParsingAstBase* node);
		virtual void Finishing(WfAttachEventExpression* node);
		virtual void Finishing(WfAttribute* node);
		virtual void Finishing(WfAutoPropertyDeclaration* node);
		virtual void Finishing(WfBaseConstructorCall* node);
		virtual void Finishing(WfBinaryExpression* node);
		virtual void Finishing(WfBindExpression* node);
		virtual void Finishing(WfBlockStatement* node);
		virtual void Finishing(WfBreakStatement* node);
		virtual void Finishing(WfCallExpression* node);
		virtual void Finishing(WfCastResultInterfaceDeclaration* node);
		virtual void Finishing(WfChildExpression* node);
		virtual void Finishing(WfChildType* node);
		virtual void Finishing(WfClassDeclaration* node);
		virtual void Finishing(WfCoOperatorExpression* node);
		virtual void Finishing(WfCoOperatorStatement* node);
		virtual void Finishing(WfCoPauseStatement* node);
		virtual void Finishing(WfCoProviderStatement* node);
		virtual void Finishing(WfConstructorArgument* node);
		virtual void Finishing(WfConstructorDeclaration* node);
		virtual void Finishing(WfConstructorExpression* node);
		virtual void Finishing(WfContinueStatement* node);
		virtual void Finishing(WfCoroutineStatement* node);
		virtual void Finishing(WfDeclaration* node);
		virtual void Finishing(WfDeleteStatement* node);
		virtual void Finishing(WfDestructorDeclaration* node);
		virtual void Finishing(WfDetachEventExpression* node);
		virtual void Finishing(WfEnumDeclaration* node);
		virtual void Finishing(WfEnumItem* node);
		virtual void Finishing(WfEnumItemIntersection* node);
		virtual void Finishing(WfEnumerableType* node);
		virtual void Finishing(WfEventDeclaration* node);
		virtual void Finishing(WfExpectedTypeCastExpression* node);
		virtual void Finishing(WfExpression* node);
		virtual void Finishing(WfExpressionStatement* node);
		virtual void Finishing(WfFloatingExpression* node);
		virtual void Finishing(WfForEachStatement* node);
		virtual void Finishing(WfFormatExpression* node);
		virtual void Finishing(WfFunctionArgument* node);
		virtual void Finishing(WfFunctionDeclaration* node);
		virtual void Finishing(WfFunctionExpression* node);
		virtual void Finishing(WfFunctionType* node);
		virtual void Finishing(WfGotoStatement* node);
		virtual void Finishing(WfIfExpression* node);
		virtual void Finishing(WfIfStatement* node);
		virtual void Finishing(WfInferExpression* node);
		virtual void Finishing(WfIntegerExpression* node);
		virtual void Finishing(WfLetExpression* node);
		virtual void Finishing(WfLetVariable* node);
		virtual void Finishing(WfLiteralExpression* node);
		virtual void Finishing(WfMapType* node);
		virtual void Finishing(WfMemberExpression* node);
		virtual void Finishing(WfMixinCastExpression* node);
		virtual void Finishing(WfModule* node);
		virtual void Finishing(WfModuleUsingFragment* node);
		virtual void Finishing(WfModuleUsingItem* node);
		virtual void Finishing(WfModuleUsingNameFragment* node);
		virtual void Finishing(WfModuleUsingPath* node);
		virtual void Finishing(WfModuleUsingWildCardFragment* node);
		virtual void Finishing(WfNamespaceDeclaration* node);
		virtual void Finishing(WfNewClassExpression* node);
		virtual void Finishing(WfNewCoroutineExpression* node);
		virtual void Finishing(WfNewInterfaceExpression* node);
		virtual void Finishing(WfNullableType* node);
		virtual void Finishing(WfObservableListType* node);
		virtual void Finishing(WfObserveExpression* node);
		virtual void Finishing(WfOrderedLambdaExpression* node);
		virtual void Finishing(WfOrderedNameExpression* node);
		virtual void Finishing(WfPredefinedType* node);
		virtual void Finishing(WfPropertyDeclaration* node);
		virtual void Finishing(WfRaiseExceptionStatement* node);
		virtual void Finishing(WfRangeExpression* node);
		virtual void Finishing(WfRawPointerType* node);
		virtual void Finishing(WfReferenceExpression* node);
		virtual void Finishing(WfReferenceType* node);
		virtual void Finishing(WfReturnStatement* node);
		virtual void Finishing(WfSetTestingExpression* node);
		virtual void Finishing(WfSharedPointerType* node);
		virtual void Finishing(WfStateDeclaration* node);
		virtual void Finishing(WfStateInput* node);
		virtual void Finishing(WfStateInvokeStatement* node);
		virtual void Finishing(WfStateMachineDeclaration* node);
		virtual void Finishing(WfStateMachineStatement* node);
		virtual void Finishing(WfStateSwitchArgument* node);
		virtual void Finishing(WfStateSwitchCase* node);
		virtual void Finishing(WfStateSwitchStatement* node);
		virtual void Finishing(WfStatement* node);
		virtual void Finishing(WfStaticInitDeclaration* node);
		virtual void Finishing(WfStringExpression* node);
		virtual void Finishing(WfStructDeclaration* node);
		virtual void Finishing(WfStructMember* node);
		virtual void Finishing(WfSwitchCase* node);
		virtual void Finishing(WfSwitchStatement* node);
		virtual void Finishing(WfThisExpression* node);
		virtual void Finishing(WfTopQualifiedExpression* node);
		virtual void Finishing(WfTopQualifiedType* node);
		virtual void Finishing(WfTryStatement* node);
		virtual void Finishing(WfType* node);
		virtual void Finishing(WfTypeCastingExpression* node);
		virtual void Finishing(WfTypeOfExpressionExpression* node);
		virtual void Finishing(WfTypeOfTypeExpression* node);
		virtual void Finishing(WfTypeTestingExpression* node);
		virtual void Finishing(WfUnaryExpression* node);
		virtual void Finishing(WfVariableDeclaration* node);
		virtual void Finishing(WfVariableStatement* node);
		virtual void Finishing(WfVirtualCfeDeclaration* node);
		virtual void Finishing(WfVirtualCfeExpression* node);
		virtual void Finishing(WfVirtualCseDeclaration* node);
		virtual void Finishing(WfVirtualCseExpression* node);
		virtual void Finishing(WfVirtualCseStatement* node);
		virtual void Finishing(WfWhileStatement* node);

	protected:
		void Visit(WfPredefinedType* node) override;
		void Visit(WfTopQualifiedType* node) override;
		void Visit(WfReferenceType* node) override;
		void Visit(WfRawPointerType* node) override;
		void Visit(WfSharedPointerType* node) override;
		void Visit(WfNullableType* node) override;
		void Visit(WfEnumerableType* node) override;
		void Visit(WfMapType* node) override;
		void Visit(WfObservableListType* node) override;
		void Visit(WfFunctionType* node) override;
		void Visit(WfChildType* node) override;

		void Visit(WfThisExpression* node) override;
		void Visit(WfTopQualifiedExpression* node) override;
		void Visit(WfReferenceExpression* node) override;
		void Visit(WfOrderedNameExpression* node) override;
		void Visit(WfOrderedLambdaExpression* node) override;
		void Visit(WfMemberExpression* node) override;
		void Visit(WfChildExpression* node) override;
		void Visit(WfLiteralExpression* node) override;
		void Visit(WfFloatingExpression* node) override;
		void Visit(WfIntegerExpression* node) override;
		void Visit(WfStringExpression* node) override;
		void Visit(WfUnaryExpression* node) override;
		void Visit(WfBinaryExpression* node) override;
		void Visit(WfLetExpression* node) override;
		void Visit(WfIfExpression* node) override;
		void Visit(WfRangeExpression* node) override;
		void Visit(WfSetTestingExpression* node) override;
		void Visit(WfConstructorExpression* node) override;
		void Visit(WfInferExpression* node) override;
		void Visit(WfTypeCastingExpression* node) override;
		void Visit(WfTypeTestingExpression* node) override;
		void Visit(WfTypeOfTypeExpression* node) override;
		void Visit(WfTypeOfExpressionExpression* node) override;
		void Visit(WfAttachEventExpression* node) override;
		void Visit(WfDetachEventExpression* node) override;
		void Visit(WfObserveExpression* node) override;
		void Visit(WfCallExpression* node) override;
		void Visit(WfFunctionExpression* node) override;
		void Visit(WfNewClassExpression* node) override;
		void Visit(WfNewInterfaceExpression* node) override;
		void Visit(WfVirtualCfeExpression* node) override;
		void Visit(WfVirtualCseExpression* node) override;

		void Visit(WfBreakStatement* node) override;
		void Visit(WfContinueStatement* node) override;
		void Visit(WfReturnStatement* node) override;
		void Visit(WfDeleteStatement* node) override;
		void Visit(WfRaiseExceptionStatement* node) override;
		void Visit(WfIfStatement* node) override;
		void Visit(WfWhileStatement* node) override;
		void Visit(WfTryStatement* node) override;
		void Visit(WfBlockStatement* node) override;
		void Visit(WfGotoStatement* node) override;
		void Visit(WfVariableStatement* node) override;
		void Visit(WfExpressionStatement* node) override;
		void Visit(WfVirtualCseStatement* node) override;
		void Visit(WfCoroutineStatement* node) override;
		void Visit(WfStateMachineStatement* node) override;

		void Visit(WfNamespaceDeclaration* node) override;
		void Visit(WfFunctionDeclaration* node) override;
		void Visit(WfVariableDeclaration* node) override;
		void Visit(WfEventDeclaration* node) override;
		void Visit(WfPropertyDeclaration* node) override;
		void Visit(WfStaticInitDeclaration* node) override;
		void Visit(WfConstructorDeclaration* node) override;
		void Visit(WfDestructorDeclaration* node) override;
		void Visit(WfClassDeclaration* node) override;
		void Visit(WfEnumDeclaration* node) override;
		void Visit(WfStructDeclaration* node) override;
		void Visit(WfVirtualCfeDeclaration* node) override;
		void Visit(WfVirtualCseDeclaration* node) override;

		void Visit(WfAutoPropertyDeclaration* node) override;
		void Visit(WfCastResultInterfaceDeclaration* node) override;

		void Visit(WfStateMachineDeclaration* node) override;

		void Visit(WfForEachStatement* node) override;
		void Visit(WfSwitchStatement* node) override;
		void Visit(WfCoProviderStatement* node) override;

		void Visit(WfCoPauseStatement* node) override;
		void Visit(WfCoOperatorStatement* node) override;

		void Visit(WfStateSwitchStatement* node) override;
		void Visit(WfStateInvokeStatement* node) override;

		void Visit(WfFormatExpression* node) override;

		void Visit(WfBindExpression* node) override;
		void Visit(WfNewCoroutineExpression* node) override;
		void Visit(WfMixinCastExpression* node) override;
		void Visit(WfExpectedTypeCastExpression* node) override;
		void Visit(WfCoOperatorExpression* node) override;

		void Visit(WfModuleUsingNameFragment* node) override;
		void Visit(WfModuleUsingWildCardFragment* node) override;

	public:
		void InspectInto(WfType* node);
		void InspectInto(WfExpression* node);
		void InspectInto(WfStatement* node);
		void InspectInto(WfDeclaration* node);
		void InspectInto(WfModuleUsingFragment* node);
		void InspectInto(WfAttribute* node);
		void InspectInto(WfFunctionArgument* node);
		void InspectInto(WfBaseConstructorCall* node);
		void InspectInto(WfEnumItemIntersection* node);
		void InspectInto(WfEnumItem* node);
		void InspectInto(WfStructMember* node);
		void InspectInto(WfStateInput* node);
		void InspectInto(WfStateDeclaration* node);
		void InspectInto(WfSwitchCase* node);
		void InspectInto(WfStateSwitchArgument* node);
		void InspectInto(WfStateSwitchCase* node);
		void InspectInto(WfLetVariable* node);
		void InspectInto(WfConstructorArgument* node);
		void InspectInto(WfModuleUsingItem* node);
		void InspectInto(WfModuleUsingPath* node);
		void InspectInto(WfModule* node);
	};
}
#endif