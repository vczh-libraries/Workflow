/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Ast
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "WorkflowAst_Traverse.h"

namespace vl::workflow::traverse_visitor
{
	void AstVisitor::Traverse(vl::glr::ParsingToken& token) {}
	void AstVisitor::Traverse(vl::glr::ParsingAstBase* node) {}
	void AstVisitor::Traverse(WfAttachEventExpression* node) {}
	void AstVisitor::Traverse(WfAttribute* node) {}
	void AstVisitor::Traverse(WfAutoPropertyDeclaration* node) {}
	void AstVisitor::Traverse(WfBaseConstructorCall* node) {}
	void AstVisitor::Traverse(WfBinaryExpression* node) {}
	void AstVisitor::Traverse(WfBindExpression* node) {}
	void AstVisitor::Traverse(WfBlockStatement* node) {}
	void AstVisitor::Traverse(WfBreakStatement* node) {}
	void AstVisitor::Traverse(WfCallExpression* node) {}
	void AstVisitor::Traverse(WfCastResultInterfaceDeclaration* node) {}
	void AstVisitor::Traverse(WfChildExpression* node) {}
	void AstVisitor::Traverse(WfChildType* node) {}
	void AstVisitor::Traverse(WfClassDeclaration* node) {}
	void AstVisitor::Traverse(WfCoOperatorExpression* node) {}
	void AstVisitor::Traverse(WfCoOperatorStatement* node) {}
	void AstVisitor::Traverse(WfCoPauseStatement* node) {}
	void AstVisitor::Traverse(WfCoProviderStatement* node) {}
	void AstVisitor::Traverse(WfConstructorArgument* node) {}
	void AstVisitor::Traverse(WfConstructorDeclaration* node) {}
	void AstVisitor::Traverse(WfConstructorExpression* node) {}
	void AstVisitor::Traverse(WfContinueStatement* node) {}
	void AstVisitor::Traverse(WfCoroutineStatement* node) {}
	void AstVisitor::Traverse(WfDeclaration* node) {}
	void AstVisitor::Traverse(WfDeleteStatement* node) {}
	void AstVisitor::Traverse(WfDestructorDeclaration* node) {}
	void AstVisitor::Traverse(WfDetachEventExpression* node) {}
	void AstVisitor::Traverse(WfEnumDeclaration* node) {}
	void AstVisitor::Traverse(WfEnumItem* node) {}
	void AstVisitor::Traverse(WfEnumItemIntersection* node) {}
	void AstVisitor::Traverse(WfEnumerableType* node) {}
	void AstVisitor::Traverse(WfEventDeclaration* node) {}
	void AstVisitor::Traverse(WfExpectedTypeCastExpression* node) {}
	void AstVisitor::Traverse(WfExpression* node) {}
	void AstVisitor::Traverse(WfExpressionStatement* node) {}
	void AstVisitor::Traverse(WfFloatingExpression* node) {}
	void AstVisitor::Traverse(WfForEachStatement* node) {}
	void AstVisitor::Traverse(WfFormatExpression* node) {}
	void AstVisitor::Traverse(WfFunctionArgument* node) {}
	void AstVisitor::Traverse(WfFunctionDeclaration* node) {}
	void AstVisitor::Traverse(WfFunctionExpression* node) {}
	void AstVisitor::Traverse(WfFunctionType* node) {}
	void AstVisitor::Traverse(WfGotoStatement* node) {}
	void AstVisitor::Traverse(WfIfExpression* node) {}
	void AstVisitor::Traverse(WfIfStatement* node) {}
	void AstVisitor::Traverse(WfInferExpression* node) {}
	void AstVisitor::Traverse(WfIntegerExpression* node) {}
	void AstVisitor::Traverse(WfLetExpression* node) {}
	void AstVisitor::Traverse(WfLetVariable* node) {}
	void AstVisitor::Traverse(WfLiteralExpression* node) {}
	void AstVisitor::Traverse(WfMapType* node) {}
	void AstVisitor::Traverse(WfMemberExpression* node) {}
	void AstVisitor::Traverse(WfMixinCastExpression* node) {}
	void AstVisitor::Traverse(WfModule* node) {}
	void AstVisitor::Traverse(WfModuleUsingFragment* node) {}
	void AstVisitor::Traverse(WfModuleUsingItem* node) {}
	void AstVisitor::Traverse(WfModuleUsingNameFragment* node) {}
	void AstVisitor::Traverse(WfModuleUsingPath* node) {}
	void AstVisitor::Traverse(WfModuleUsingWildCardFragment* node) {}
	void AstVisitor::Traverse(WfNamespaceDeclaration* node) {}
	void AstVisitor::Traverse(WfNewClassExpression* node) {}
	void AstVisitor::Traverse(WfNewCoroutineExpression* node) {}
	void AstVisitor::Traverse(WfNewInterfaceExpression* node) {}
	void AstVisitor::Traverse(WfNullableType* node) {}
	void AstVisitor::Traverse(WfObservableListType* node) {}
	void AstVisitor::Traverse(WfObserveExpression* node) {}
	void AstVisitor::Traverse(WfOrderedLambdaExpression* node) {}
	void AstVisitor::Traverse(WfOrderedNameExpression* node) {}
	void AstVisitor::Traverse(WfPredefinedType* node) {}
	void AstVisitor::Traverse(WfPropertyDeclaration* node) {}
	void AstVisitor::Traverse(WfRaiseExceptionStatement* node) {}
	void AstVisitor::Traverse(WfRangeExpression* node) {}
	void AstVisitor::Traverse(WfRawPointerType* node) {}
	void AstVisitor::Traverse(WfReferenceExpression* node) {}
	void AstVisitor::Traverse(WfReferenceType* node) {}
	void AstVisitor::Traverse(WfReturnStatement* node) {}
	void AstVisitor::Traverse(WfSetTestingExpression* node) {}
	void AstVisitor::Traverse(WfSharedPointerType* node) {}
	void AstVisitor::Traverse(WfStateDeclaration* node) {}
	void AstVisitor::Traverse(WfStateInput* node) {}
	void AstVisitor::Traverse(WfStateInvokeStatement* node) {}
	void AstVisitor::Traverse(WfStateMachineDeclaration* node) {}
	void AstVisitor::Traverse(WfStateMachineStatement* node) {}
	void AstVisitor::Traverse(WfStateSwitchArgument* node) {}
	void AstVisitor::Traverse(WfStateSwitchCase* node) {}
	void AstVisitor::Traverse(WfStateSwitchStatement* node) {}
	void AstVisitor::Traverse(WfStatement* node) {}
	void AstVisitor::Traverse(WfStringExpression* node) {}
	void AstVisitor::Traverse(WfStructDeclaration* node) {}
	void AstVisitor::Traverse(WfStructMember* node) {}
	void AstVisitor::Traverse(WfSwitchCase* node) {}
	void AstVisitor::Traverse(WfSwitchStatement* node) {}
	void AstVisitor::Traverse(WfThisExpression* node) {}
	void AstVisitor::Traverse(WfTopQualifiedExpression* node) {}
	void AstVisitor::Traverse(WfTopQualifiedType* node) {}
	void AstVisitor::Traverse(WfTryStatement* node) {}
	void AstVisitor::Traverse(WfType* node) {}
	void AstVisitor::Traverse(WfTypeCastingExpression* node) {}
	void AstVisitor::Traverse(WfTypeOfExpressionExpression* node) {}
	void AstVisitor::Traverse(WfTypeOfTypeExpression* node) {}
	void AstVisitor::Traverse(WfTypeTestingExpression* node) {}
	void AstVisitor::Traverse(WfUnaryExpression* node) {}
	void AstVisitor::Traverse(WfVariableDeclaration* node) {}
	void AstVisitor::Traverse(WfVariableStatement* node) {}
	void AstVisitor::Traverse(WfVirtualCfeDeclaration* node) {}
	void AstVisitor::Traverse(WfVirtualCfeExpression* node) {}
	void AstVisitor::Traverse(WfVirtualCseDeclaration* node) {}
	void AstVisitor::Traverse(WfVirtualCseExpression* node) {}
	void AstVisitor::Traverse(WfVirtualCseStatement* node) {}
	void AstVisitor::Traverse(WfWhileStatement* node) {}

	void AstVisitor::Finishing(vl::glr::ParsingAstBase* node) {}
	void AstVisitor::Finishing(WfAttachEventExpression* node) {}
	void AstVisitor::Finishing(WfAttribute* node) {}
	void AstVisitor::Finishing(WfAutoPropertyDeclaration* node) {}
	void AstVisitor::Finishing(WfBaseConstructorCall* node) {}
	void AstVisitor::Finishing(WfBinaryExpression* node) {}
	void AstVisitor::Finishing(WfBindExpression* node) {}
	void AstVisitor::Finishing(WfBlockStatement* node) {}
	void AstVisitor::Finishing(WfBreakStatement* node) {}
	void AstVisitor::Finishing(WfCallExpression* node) {}
	void AstVisitor::Finishing(WfCastResultInterfaceDeclaration* node) {}
	void AstVisitor::Finishing(WfChildExpression* node) {}
	void AstVisitor::Finishing(WfChildType* node) {}
	void AstVisitor::Finishing(WfClassDeclaration* node) {}
	void AstVisitor::Finishing(WfCoOperatorExpression* node) {}
	void AstVisitor::Finishing(WfCoOperatorStatement* node) {}
	void AstVisitor::Finishing(WfCoPauseStatement* node) {}
	void AstVisitor::Finishing(WfCoProviderStatement* node) {}
	void AstVisitor::Finishing(WfConstructorArgument* node) {}
	void AstVisitor::Finishing(WfConstructorDeclaration* node) {}
	void AstVisitor::Finishing(WfConstructorExpression* node) {}
	void AstVisitor::Finishing(WfContinueStatement* node) {}
	void AstVisitor::Finishing(WfCoroutineStatement* node) {}
	void AstVisitor::Finishing(WfDeclaration* node) {}
	void AstVisitor::Finishing(WfDeleteStatement* node) {}
	void AstVisitor::Finishing(WfDestructorDeclaration* node) {}
	void AstVisitor::Finishing(WfDetachEventExpression* node) {}
	void AstVisitor::Finishing(WfEnumDeclaration* node) {}
	void AstVisitor::Finishing(WfEnumItem* node) {}
	void AstVisitor::Finishing(WfEnumItemIntersection* node) {}
	void AstVisitor::Finishing(WfEnumerableType* node) {}
	void AstVisitor::Finishing(WfEventDeclaration* node) {}
	void AstVisitor::Finishing(WfExpectedTypeCastExpression* node) {}
	void AstVisitor::Finishing(WfExpression* node) {}
	void AstVisitor::Finishing(WfExpressionStatement* node) {}
	void AstVisitor::Finishing(WfFloatingExpression* node) {}
	void AstVisitor::Finishing(WfForEachStatement* node) {}
	void AstVisitor::Finishing(WfFormatExpression* node) {}
	void AstVisitor::Finishing(WfFunctionArgument* node) {}
	void AstVisitor::Finishing(WfFunctionDeclaration* node) {}
	void AstVisitor::Finishing(WfFunctionExpression* node) {}
	void AstVisitor::Finishing(WfFunctionType* node) {}
	void AstVisitor::Finishing(WfGotoStatement* node) {}
	void AstVisitor::Finishing(WfIfExpression* node) {}
	void AstVisitor::Finishing(WfIfStatement* node) {}
	void AstVisitor::Finishing(WfInferExpression* node) {}
	void AstVisitor::Finishing(WfIntegerExpression* node) {}
	void AstVisitor::Finishing(WfLetExpression* node) {}
	void AstVisitor::Finishing(WfLetVariable* node) {}
	void AstVisitor::Finishing(WfLiteralExpression* node) {}
	void AstVisitor::Finishing(WfMapType* node) {}
	void AstVisitor::Finishing(WfMemberExpression* node) {}
	void AstVisitor::Finishing(WfMixinCastExpression* node) {}
	void AstVisitor::Finishing(WfModule* node) {}
	void AstVisitor::Finishing(WfModuleUsingFragment* node) {}
	void AstVisitor::Finishing(WfModuleUsingItem* node) {}
	void AstVisitor::Finishing(WfModuleUsingNameFragment* node) {}
	void AstVisitor::Finishing(WfModuleUsingPath* node) {}
	void AstVisitor::Finishing(WfModuleUsingWildCardFragment* node) {}
	void AstVisitor::Finishing(WfNamespaceDeclaration* node) {}
	void AstVisitor::Finishing(WfNewClassExpression* node) {}
	void AstVisitor::Finishing(WfNewCoroutineExpression* node) {}
	void AstVisitor::Finishing(WfNewInterfaceExpression* node) {}
	void AstVisitor::Finishing(WfNullableType* node) {}
	void AstVisitor::Finishing(WfObservableListType* node) {}
	void AstVisitor::Finishing(WfObserveExpression* node) {}
	void AstVisitor::Finishing(WfOrderedLambdaExpression* node) {}
	void AstVisitor::Finishing(WfOrderedNameExpression* node) {}
	void AstVisitor::Finishing(WfPredefinedType* node) {}
	void AstVisitor::Finishing(WfPropertyDeclaration* node) {}
	void AstVisitor::Finishing(WfRaiseExceptionStatement* node) {}
	void AstVisitor::Finishing(WfRangeExpression* node) {}
	void AstVisitor::Finishing(WfRawPointerType* node) {}
	void AstVisitor::Finishing(WfReferenceExpression* node) {}
	void AstVisitor::Finishing(WfReferenceType* node) {}
	void AstVisitor::Finishing(WfReturnStatement* node) {}
	void AstVisitor::Finishing(WfSetTestingExpression* node) {}
	void AstVisitor::Finishing(WfSharedPointerType* node) {}
	void AstVisitor::Finishing(WfStateDeclaration* node) {}
	void AstVisitor::Finishing(WfStateInput* node) {}
	void AstVisitor::Finishing(WfStateInvokeStatement* node) {}
	void AstVisitor::Finishing(WfStateMachineDeclaration* node) {}
	void AstVisitor::Finishing(WfStateMachineStatement* node) {}
	void AstVisitor::Finishing(WfStateSwitchArgument* node) {}
	void AstVisitor::Finishing(WfStateSwitchCase* node) {}
	void AstVisitor::Finishing(WfStateSwitchStatement* node) {}
	void AstVisitor::Finishing(WfStatement* node) {}
	void AstVisitor::Finishing(WfStringExpression* node) {}
	void AstVisitor::Finishing(WfStructDeclaration* node) {}
	void AstVisitor::Finishing(WfStructMember* node) {}
	void AstVisitor::Finishing(WfSwitchCase* node) {}
	void AstVisitor::Finishing(WfSwitchStatement* node) {}
	void AstVisitor::Finishing(WfThisExpression* node) {}
	void AstVisitor::Finishing(WfTopQualifiedExpression* node) {}
	void AstVisitor::Finishing(WfTopQualifiedType* node) {}
	void AstVisitor::Finishing(WfTryStatement* node) {}
	void AstVisitor::Finishing(WfType* node) {}
	void AstVisitor::Finishing(WfTypeCastingExpression* node) {}
	void AstVisitor::Finishing(WfTypeOfExpressionExpression* node) {}
	void AstVisitor::Finishing(WfTypeOfTypeExpression* node) {}
	void AstVisitor::Finishing(WfTypeTestingExpression* node) {}
	void AstVisitor::Finishing(WfUnaryExpression* node) {}
	void AstVisitor::Finishing(WfVariableDeclaration* node) {}
	void AstVisitor::Finishing(WfVariableStatement* node) {}
	void AstVisitor::Finishing(WfVirtualCfeDeclaration* node) {}
	void AstVisitor::Finishing(WfVirtualCfeExpression* node) {}
	void AstVisitor::Finishing(WfVirtualCseDeclaration* node) {}
	void AstVisitor::Finishing(WfVirtualCseExpression* node) {}
	void AstVisitor::Finishing(WfVirtualCseStatement* node) {}
	void AstVisitor::Finishing(WfWhileStatement* node) {}

	void AstVisitor::Visit(WfPredefinedType* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfType*>(node));
		Traverse(static_cast<WfPredefinedType*>(node));
		Finishing(static_cast<WfPredefinedType*>(node));
		Finishing(static_cast<WfType*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfTopQualifiedType* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfType*>(node));
		Traverse(static_cast<WfTopQualifiedType*>(node));
		Traverse(node->name);
		Finishing(static_cast<WfTopQualifiedType*>(node));
		Finishing(static_cast<WfType*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfReferenceType* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfType*>(node));
		Traverse(static_cast<WfReferenceType*>(node));
		Traverse(node->name);
		Finishing(static_cast<WfReferenceType*>(node));
		Finishing(static_cast<WfType*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfRawPointerType* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfType*>(node));
		Traverse(static_cast<WfRawPointerType*>(node));
		InspectInto(node->element.Obj());
		Finishing(static_cast<WfRawPointerType*>(node));
		Finishing(static_cast<WfType*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfSharedPointerType* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfType*>(node));
		Traverse(static_cast<WfSharedPointerType*>(node));
		InspectInto(node->element.Obj());
		Finishing(static_cast<WfSharedPointerType*>(node));
		Finishing(static_cast<WfType*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfNullableType* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfType*>(node));
		Traverse(static_cast<WfNullableType*>(node));
		InspectInto(node->element.Obj());
		Finishing(static_cast<WfNullableType*>(node));
		Finishing(static_cast<WfType*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfEnumerableType* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfType*>(node));
		Traverse(static_cast<WfEnumerableType*>(node));
		InspectInto(node->element.Obj());
		Finishing(static_cast<WfEnumerableType*>(node));
		Finishing(static_cast<WfType*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfMapType* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfType*>(node));
		Traverse(static_cast<WfMapType*>(node));
		InspectInto(node->key.Obj());
		InspectInto(node->value.Obj());
		Finishing(static_cast<WfMapType*>(node));
		Finishing(static_cast<WfType*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfObservableListType* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfType*>(node));
		Traverse(static_cast<WfObservableListType*>(node));
		InspectInto(node->element.Obj());
		Finishing(static_cast<WfObservableListType*>(node));
		Finishing(static_cast<WfType*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfFunctionType* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfType*>(node));
		Traverse(static_cast<WfFunctionType*>(node));
		for (auto&& listItem : node->arguments)
		{
			InspectInto(listItem.Obj());
		}
		InspectInto(node->result.Obj());
		Finishing(static_cast<WfFunctionType*>(node));
		Finishing(static_cast<WfType*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfChildType* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfType*>(node));
		Traverse(static_cast<WfChildType*>(node));
		Traverse(node->name);
		InspectInto(node->parent.Obj());
		Finishing(static_cast<WfChildType*>(node));
		Finishing(static_cast<WfType*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfThisExpression* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfExpression*>(node));
		Traverse(static_cast<WfThisExpression*>(node));
		Finishing(static_cast<WfThisExpression*>(node));
		Finishing(static_cast<WfExpression*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfTopQualifiedExpression* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfExpression*>(node));
		Traverse(static_cast<WfTopQualifiedExpression*>(node));
		Traverse(node->name);
		Finishing(static_cast<WfTopQualifiedExpression*>(node));
		Finishing(static_cast<WfExpression*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfReferenceExpression* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfExpression*>(node));
		Traverse(static_cast<WfReferenceExpression*>(node));
		Traverse(node->name);
		Finishing(static_cast<WfReferenceExpression*>(node));
		Finishing(static_cast<WfExpression*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfOrderedNameExpression* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfExpression*>(node));
		Traverse(static_cast<WfOrderedNameExpression*>(node));
		Traverse(node->name);
		Finishing(static_cast<WfOrderedNameExpression*>(node));
		Finishing(static_cast<WfExpression*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfOrderedLambdaExpression* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfExpression*>(node));
		Traverse(static_cast<WfOrderedLambdaExpression*>(node));
		InspectInto(node->body.Obj());
		Finishing(static_cast<WfOrderedLambdaExpression*>(node));
		Finishing(static_cast<WfExpression*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfMemberExpression* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfExpression*>(node));
		Traverse(static_cast<WfMemberExpression*>(node));
		Traverse(node->name);
		InspectInto(node->parent.Obj());
		Finishing(static_cast<WfMemberExpression*>(node));
		Finishing(static_cast<WfExpression*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfChildExpression* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfExpression*>(node));
		Traverse(static_cast<WfChildExpression*>(node));
		Traverse(node->name);
		InspectInto(node->parent.Obj());
		Finishing(static_cast<WfChildExpression*>(node));
		Finishing(static_cast<WfExpression*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfLiteralExpression* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfExpression*>(node));
		Traverse(static_cast<WfLiteralExpression*>(node));
		Finishing(static_cast<WfLiteralExpression*>(node));
		Finishing(static_cast<WfExpression*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfFloatingExpression* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfExpression*>(node));
		Traverse(static_cast<WfFloatingExpression*>(node));
		Traverse(node->value);
		Finishing(static_cast<WfFloatingExpression*>(node));
		Finishing(static_cast<WfExpression*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfIntegerExpression* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfExpression*>(node));
		Traverse(static_cast<WfIntegerExpression*>(node));
		Traverse(node->value);
		Finishing(static_cast<WfIntegerExpression*>(node));
		Finishing(static_cast<WfExpression*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfStringExpression* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfExpression*>(node));
		Traverse(static_cast<WfStringExpression*>(node));
		Traverse(node->value);
		Finishing(static_cast<WfStringExpression*>(node));
		Finishing(static_cast<WfExpression*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfUnaryExpression* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfExpression*>(node));
		Traverse(static_cast<WfUnaryExpression*>(node));
		InspectInto(node->operand.Obj());
		Finishing(static_cast<WfUnaryExpression*>(node));
		Finishing(static_cast<WfExpression*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfBinaryExpression* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfExpression*>(node));
		Traverse(static_cast<WfBinaryExpression*>(node));
		InspectInto(node->first.Obj());
		InspectInto(node->second.Obj());
		Finishing(static_cast<WfBinaryExpression*>(node));
		Finishing(static_cast<WfExpression*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfLetExpression* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfExpression*>(node));
		Traverse(static_cast<WfLetExpression*>(node));
		InspectInto(node->expression.Obj());
		for (auto&& listItem : node->variables)
		{
			InspectInto(listItem.Obj());
		}
		Finishing(static_cast<WfLetExpression*>(node));
		Finishing(static_cast<WfExpression*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfIfExpression* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfExpression*>(node));
		Traverse(static_cast<WfIfExpression*>(node));
		InspectInto(node->condition.Obj());
		InspectInto(node->falseBranch.Obj());
		InspectInto(node->trueBranch.Obj());
		Finishing(static_cast<WfIfExpression*>(node));
		Finishing(static_cast<WfExpression*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfRangeExpression* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfExpression*>(node));
		Traverse(static_cast<WfRangeExpression*>(node));
		InspectInto(node->begin.Obj());
		InspectInto(node->end.Obj());
		Finishing(static_cast<WfRangeExpression*>(node));
		Finishing(static_cast<WfExpression*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfSetTestingExpression* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfExpression*>(node));
		Traverse(static_cast<WfSetTestingExpression*>(node));
		InspectInto(node->collection.Obj());
		InspectInto(node->element.Obj());
		Finishing(static_cast<WfSetTestingExpression*>(node));
		Finishing(static_cast<WfExpression*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfConstructorExpression* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfExpression*>(node));
		Traverse(static_cast<WfConstructorExpression*>(node));
		for (auto&& listItem : node->arguments)
		{
			InspectInto(listItem.Obj());
		}
		Finishing(static_cast<WfConstructorExpression*>(node));
		Finishing(static_cast<WfExpression*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfInferExpression* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfExpression*>(node));
		Traverse(static_cast<WfInferExpression*>(node));
		InspectInto(node->expression.Obj());
		InspectInto(node->type.Obj());
		Finishing(static_cast<WfInferExpression*>(node));
		Finishing(static_cast<WfExpression*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfTypeCastingExpression* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfExpression*>(node));
		Traverse(static_cast<WfTypeCastingExpression*>(node));
		InspectInto(node->expression.Obj());
		InspectInto(node->type.Obj());
		Finishing(static_cast<WfTypeCastingExpression*>(node));
		Finishing(static_cast<WfExpression*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfTypeTestingExpression* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfExpression*>(node));
		Traverse(static_cast<WfTypeTestingExpression*>(node));
		InspectInto(node->expression.Obj());
		InspectInto(node->type.Obj());
		Finishing(static_cast<WfTypeTestingExpression*>(node));
		Finishing(static_cast<WfExpression*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfTypeOfTypeExpression* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfExpression*>(node));
		Traverse(static_cast<WfTypeOfTypeExpression*>(node));
		InspectInto(node->type.Obj());
		Finishing(static_cast<WfTypeOfTypeExpression*>(node));
		Finishing(static_cast<WfExpression*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfTypeOfExpressionExpression* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfExpression*>(node));
		Traverse(static_cast<WfTypeOfExpressionExpression*>(node));
		InspectInto(node->expression.Obj());
		Finishing(static_cast<WfTypeOfExpressionExpression*>(node));
		Finishing(static_cast<WfExpression*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfAttachEventExpression* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfExpression*>(node));
		Traverse(static_cast<WfAttachEventExpression*>(node));
		InspectInto(node->event.Obj());
		InspectInto(node->function.Obj());
		Finishing(static_cast<WfAttachEventExpression*>(node));
		Finishing(static_cast<WfExpression*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfDetachEventExpression* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfExpression*>(node));
		Traverse(static_cast<WfDetachEventExpression*>(node));
		InspectInto(node->event.Obj());
		InspectInto(node->handler.Obj());
		Finishing(static_cast<WfDetachEventExpression*>(node));
		Finishing(static_cast<WfExpression*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfObserveExpression* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfExpression*>(node));
		Traverse(static_cast<WfObserveExpression*>(node));
		for (auto&& listItem : node->events)
		{
			InspectInto(listItem.Obj());
		}
		InspectInto(node->expression.Obj());
		Traverse(node->name);
		InspectInto(node->parent.Obj());
		Finishing(static_cast<WfObserveExpression*>(node));
		Finishing(static_cast<WfExpression*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfCallExpression* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfExpression*>(node));
		Traverse(static_cast<WfCallExpression*>(node));
		for (auto&& listItem : node->arguments)
		{
			InspectInto(listItem.Obj());
		}
		InspectInto(node->function.Obj());
		Finishing(static_cast<WfCallExpression*>(node));
		Finishing(static_cast<WfExpression*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfFunctionExpression* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfExpression*>(node));
		Traverse(static_cast<WfFunctionExpression*>(node));
		InspectInto(node->function.Obj());
		Finishing(static_cast<WfFunctionExpression*>(node));
		Finishing(static_cast<WfExpression*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfNewClassExpression* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfExpression*>(node));
		Traverse(static_cast<WfNewClassExpression*>(node));
		for (auto&& listItem : node->arguments)
		{
			InspectInto(listItem.Obj());
		}
		InspectInto(node->type.Obj());
		Finishing(static_cast<WfNewClassExpression*>(node));
		Finishing(static_cast<WfExpression*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfNewInterfaceExpression* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfExpression*>(node));
		Traverse(static_cast<WfNewInterfaceExpression*>(node));
		for (auto&& listItem : node->declarations)
		{
			InspectInto(listItem.Obj());
		}
		InspectInto(node->type.Obj());
		Finishing(static_cast<WfNewInterfaceExpression*>(node));
		Finishing(static_cast<WfExpression*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfVirtualCfeExpression* node)
	{
		node->Accept(static_cast<WfVirtualCfeExpression::IVisitor*>(this));
	}

	void AstVisitor::Visit(WfVirtualCseExpression* node)
	{
		node->Accept(static_cast<WfVirtualCseExpression::IVisitor*>(this));
	}

	void AstVisitor::Visit(WfBreakStatement* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfStatement*>(node));
		Traverse(static_cast<WfBreakStatement*>(node));
		Finishing(static_cast<WfBreakStatement*>(node));
		Finishing(static_cast<WfStatement*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfContinueStatement* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfStatement*>(node));
		Traverse(static_cast<WfContinueStatement*>(node));
		Finishing(static_cast<WfContinueStatement*>(node));
		Finishing(static_cast<WfStatement*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfReturnStatement* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfStatement*>(node));
		Traverse(static_cast<WfReturnStatement*>(node));
		InspectInto(node->expression.Obj());
		Finishing(static_cast<WfReturnStatement*>(node));
		Finishing(static_cast<WfStatement*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfDeleteStatement* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfStatement*>(node));
		Traverse(static_cast<WfDeleteStatement*>(node));
		InspectInto(node->expression.Obj());
		Finishing(static_cast<WfDeleteStatement*>(node));
		Finishing(static_cast<WfStatement*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfRaiseExceptionStatement* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfStatement*>(node));
		Traverse(static_cast<WfRaiseExceptionStatement*>(node));
		InspectInto(node->expression.Obj());
		Finishing(static_cast<WfRaiseExceptionStatement*>(node));
		Finishing(static_cast<WfStatement*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfIfStatement* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfStatement*>(node));
		Traverse(static_cast<WfIfStatement*>(node));
		InspectInto(node->expression.Obj());
		InspectInto(node->falseBranch.Obj());
		Traverse(node->name);
		InspectInto(node->trueBranch.Obj());
		InspectInto(node->type.Obj());
		Finishing(static_cast<WfIfStatement*>(node));
		Finishing(static_cast<WfStatement*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfWhileStatement* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfStatement*>(node));
		Traverse(static_cast<WfWhileStatement*>(node));
		InspectInto(node->condition.Obj());
		InspectInto(node->statement.Obj());
		Finishing(static_cast<WfWhileStatement*>(node));
		Finishing(static_cast<WfStatement*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfTryStatement* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfStatement*>(node));
		Traverse(static_cast<WfTryStatement*>(node));
		InspectInto(node->catchStatement.Obj());
		InspectInto(node->finallyStatement.Obj());
		Traverse(node->name);
		InspectInto(node->protectedStatement.Obj());
		Finishing(static_cast<WfTryStatement*>(node));
		Finishing(static_cast<WfStatement*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfBlockStatement* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfStatement*>(node));
		Traverse(static_cast<WfBlockStatement*>(node));
		Traverse(node->endLabel);
		for (auto&& listItem : node->statements)
		{
			InspectInto(listItem.Obj());
		}
		Finishing(static_cast<WfBlockStatement*>(node));
		Finishing(static_cast<WfStatement*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfGotoStatement* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfStatement*>(node));
		Traverse(static_cast<WfGotoStatement*>(node));
		Traverse(node->label);
		Finishing(static_cast<WfGotoStatement*>(node));
		Finishing(static_cast<WfStatement*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfVariableStatement* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfStatement*>(node));
		Traverse(static_cast<WfVariableStatement*>(node));
		InspectInto(node->variable.Obj());
		Finishing(static_cast<WfVariableStatement*>(node));
		Finishing(static_cast<WfStatement*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfExpressionStatement* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfStatement*>(node));
		Traverse(static_cast<WfExpressionStatement*>(node));
		InspectInto(node->expression.Obj());
		Finishing(static_cast<WfExpressionStatement*>(node));
		Finishing(static_cast<WfStatement*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfVirtualCseStatement* node)
	{
		node->Accept(static_cast<WfVirtualCseStatement::IVisitor*>(this));
	}

	void AstVisitor::Visit(WfCoroutineStatement* node)
	{
		node->Accept(static_cast<WfCoroutineStatement::IVisitor*>(this));
	}

	void AstVisitor::Visit(WfStateMachineStatement* node)
	{
		node->Accept(static_cast<WfStateMachineStatement::IVisitor*>(this));
	}

	void AstVisitor::Visit(WfNamespaceDeclaration* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfDeclaration*>(node));
		Traverse(static_cast<WfNamespaceDeclaration*>(node));
		for (auto&& listItem : node->declarations)
		{
			InspectInto(listItem.Obj());
		}
		for (auto&& listItem : node->attributes)
		{
			InspectInto(listItem.Obj());
		}
		Traverse(node->name);
		Finishing(static_cast<WfNamespaceDeclaration*>(node));
		Finishing(static_cast<WfDeclaration*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfFunctionDeclaration* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfDeclaration*>(node));
		Traverse(static_cast<WfFunctionDeclaration*>(node));
		for (auto&& listItem : node->arguments)
		{
			InspectInto(listItem.Obj());
		}
		InspectInto(node->returnType.Obj());
		InspectInto(node->statement.Obj());
		for (auto&& listItem : node->attributes)
		{
			InspectInto(listItem.Obj());
		}
		Traverse(node->name);
		Finishing(static_cast<WfFunctionDeclaration*>(node));
		Finishing(static_cast<WfDeclaration*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfVariableDeclaration* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfDeclaration*>(node));
		Traverse(static_cast<WfVariableDeclaration*>(node));
		InspectInto(node->expression.Obj());
		InspectInto(node->type.Obj());
		for (auto&& listItem : node->attributes)
		{
			InspectInto(listItem.Obj());
		}
		Traverse(node->name);
		Finishing(static_cast<WfVariableDeclaration*>(node));
		Finishing(static_cast<WfDeclaration*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfEventDeclaration* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfDeclaration*>(node));
		Traverse(static_cast<WfEventDeclaration*>(node));
		for (auto&& listItem : node->arguments)
		{
			InspectInto(listItem.Obj());
		}
		for (auto&& listItem : node->attributes)
		{
			InspectInto(listItem.Obj());
		}
		Traverse(node->name);
		Finishing(static_cast<WfEventDeclaration*>(node));
		Finishing(static_cast<WfDeclaration*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfPropertyDeclaration* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfDeclaration*>(node));
		Traverse(static_cast<WfPropertyDeclaration*>(node));
		Traverse(node->getter);
		Traverse(node->setter);
		InspectInto(node->type.Obj());
		Traverse(node->valueChangedEvent);
		for (auto&& listItem : node->attributes)
		{
			InspectInto(listItem.Obj());
		}
		Traverse(node->name);
		Finishing(static_cast<WfPropertyDeclaration*>(node));
		Finishing(static_cast<WfDeclaration*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfConstructorDeclaration* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfDeclaration*>(node));
		Traverse(static_cast<WfConstructorDeclaration*>(node));
		for (auto&& listItem : node->arguments)
		{
			InspectInto(listItem.Obj());
		}
		for (auto&& listItem : node->baseConstructorCalls)
		{
			InspectInto(listItem.Obj());
		}
		InspectInto(node->statement.Obj());
		for (auto&& listItem : node->attributes)
		{
			InspectInto(listItem.Obj());
		}
		Traverse(node->name);
		Finishing(static_cast<WfConstructorDeclaration*>(node));
		Finishing(static_cast<WfDeclaration*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfDestructorDeclaration* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfDeclaration*>(node));
		Traverse(static_cast<WfDestructorDeclaration*>(node));
		InspectInto(node->statement.Obj());
		for (auto&& listItem : node->attributes)
		{
			InspectInto(listItem.Obj());
		}
		Traverse(node->name);
		Finishing(static_cast<WfDestructorDeclaration*>(node));
		Finishing(static_cast<WfDeclaration*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfClassDeclaration* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfDeclaration*>(node));
		Traverse(static_cast<WfClassDeclaration*>(node));
		for (auto&& listItem : node->baseTypes)
		{
			InspectInto(listItem.Obj());
		}
		for (auto&& listItem : node->declarations)
		{
			InspectInto(listItem.Obj());
		}
		for (auto&& listItem : node->attributes)
		{
			InspectInto(listItem.Obj());
		}
		Traverse(node->name);
		Finishing(static_cast<WfClassDeclaration*>(node));
		Finishing(static_cast<WfDeclaration*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfEnumDeclaration* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfDeclaration*>(node));
		Traverse(static_cast<WfEnumDeclaration*>(node));
		for (auto&& listItem : node->items)
		{
			InspectInto(listItem.Obj());
		}
		for (auto&& listItem : node->attributes)
		{
			InspectInto(listItem.Obj());
		}
		Traverse(node->name);
		Finishing(static_cast<WfEnumDeclaration*>(node));
		Finishing(static_cast<WfDeclaration*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfStructDeclaration* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfDeclaration*>(node));
		Traverse(static_cast<WfStructDeclaration*>(node));
		for (auto&& listItem : node->members)
		{
			InspectInto(listItem.Obj());
		}
		for (auto&& listItem : node->attributes)
		{
			InspectInto(listItem.Obj());
		}
		Traverse(node->name);
		Finishing(static_cast<WfStructDeclaration*>(node));
		Finishing(static_cast<WfDeclaration*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfVirtualCfeDeclaration* node)
	{
		node->Accept(static_cast<WfVirtualCfeDeclaration::IVisitor*>(this));
	}

	void AstVisitor::Visit(WfVirtualCseDeclaration* node)
	{
		node->Accept(static_cast<WfVirtualCseDeclaration::IVisitor*>(this));
	}

	void AstVisitor::Visit(WfAutoPropertyDeclaration* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfDeclaration*>(node));
		Traverse(static_cast<WfVirtualCfeDeclaration*>(node));
		Traverse(static_cast<WfAutoPropertyDeclaration*>(node));
		InspectInto(node->expression.Obj());
		InspectInto(node->type.Obj());
		for (auto&& listItem : node->expandedDeclarations)
		{
			InspectInto(listItem.Obj());
		}
		for (auto&& listItem : node->attributes)
		{
			InspectInto(listItem.Obj());
		}
		Traverse(node->name);
		Finishing(static_cast<WfAutoPropertyDeclaration*>(node));
		Finishing(static_cast<WfVirtualCfeDeclaration*>(node));
		Finishing(static_cast<WfDeclaration*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfCastResultInterfaceDeclaration* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfDeclaration*>(node));
		Traverse(static_cast<WfVirtualCfeDeclaration*>(node));
		Traverse(static_cast<WfCastResultInterfaceDeclaration*>(node));
		InspectInto(node->baseType.Obj());
		InspectInto(node->elementType.Obj());
		for (auto&& listItem : node->expandedDeclarations)
		{
			InspectInto(listItem.Obj());
		}
		for (auto&& listItem : node->attributes)
		{
			InspectInto(listItem.Obj());
		}
		Traverse(node->name);
		Finishing(static_cast<WfCastResultInterfaceDeclaration*>(node));
		Finishing(static_cast<WfVirtualCfeDeclaration*>(node));
		Finishing(static_cast<WfDeclaration*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfStateMachineDeclaration* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfDeclaration*>(node));
		Traverse(static_cast<WfVirtualCseDeclaration*>(node));
		Traverse(static_cast<WfStateMachineDeclaration*>(node));
		for (auto&& listItem : node->inputs)
		{
			InspectInto(listItem.Obj());
		}
		for (auto&& listItem : node->states)
		{
			InspectInto(listItem.Obj());
		}
		for (auto&& listItem : node->expandedDeclarations)
		{
			InspectInto(listItem.Obj());
		}
		for (auto&& listItem : node->attributes)
		{
			InspectInto(listItem.Obj());
		}
		Traverse(node->name);
		Finishing(static_cast<WfStateMachineDeclaration*>(node));
		Finishing(static_cast<WfVirtualCseDeclaration*>(node));
		Finishing(static_cast<WfDeclaration*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfForEachStatement* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfStatement*>(node));
		Traverse(static_cast<WfVirtualCseStatement*>(node));
		Traverse(static_cast<WfForEachStatement*>(node));
		InspectInto(node->collection.Obj());
		Traverse(node->name);
		InspectInto(node->statement.Obj());
		InspectInto(node->expandedStatement.Obj());
		Finishing(static_cast<WfForEachStatement*>(node));
		Finishing(static_cast<WfVirtualCseStatement*>(node));
		Finishing(static_cast<WfStatement*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfSwitchStatement* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfStatement*>(node));
		Traverse(static_cast<WfVirtualCseStatement*>(node));
		Traverse(static_cast<WfSwitchStatement*>(node));
		for (auto&& listItem : node->caseBranches)
		{
			InspectInto(listItem.Obj());
		}
		InspectInto(node->defaultBranch.Obj());
		InspectInto(node->expression.Obj());
		InspectInto(node->expandedStatement.Obj());
		Finishing(static_cast<WfSwitchStatement*>(node));
		Finishing(static_cast<WfVirtualCseStatement*>(node));
		Finishing(static_cast<WfStatement*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfCoProviderStatement* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfStatement*>(node));
		Traverse(static_cast<WfVirtualCseStatement*>(node));
		Traverse(static_cast<WfCoProviderStatement*>(node));
		Traverse(node->name);
		InspectInto(node->statement.Obj());
		InspectInto(node->expandedStatement.Obj());
		Finishing(static_cast<WfCoProviderStatement*>(node));
		Finishing(static_cast<WfVirtualCseStatement*>(node));
		Finishing(static_cast<WfStatement*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfCoPauseStatement* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfStatement*>(node));
		Traverse(static_cast<WfCoroutineStatement*>(node));
		Traverse(static_cast<WfCoPauseStatement*>(node));
		InspectInto(node->statement.Obj());
		Finishing(static_cast<WfCoPauseStatement*>(node));
		Finishing(static_cast<WfCoroutineStatement*>(node));
		Finishing(static_cast<WfStatement*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfCoOperatorStatement* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfStatement*>(node));
		Traverse(static_cast<WfCoroutineStatement*>(node));
		Traverse(static_cast<WfCoOperatorStatement*>(node));
		for (auto&& listItem : node->arguments)
		{
			InspectInto(listItem.Obj());
		}
		Traverse(node->opName);
		Traverse(node->varName);
		Finishing(static_cast<WfCoOperatorStatement*>(node));
		Finishing(static_cast<WfCoroutineStatement*>(node));
		Finishing(static_cast<WfStatement*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfStateSwitchStatement* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfStatement*>(node));
		Traverse(static_cast<WfStateMachineStatement*>(node));
		Traverse(static_cast<WfStateSwitchStatement*>(node));
		for (auto&& listItem : node->caseBranches)
		{
			InspectInto(listItem.Obj());
		}
		Finishing(static_cast<WfStateSwitchStatement*>(node));
		Finishing(static_cast<WfStateMachineStatement*>(node));
		Finishing(static_cast<WfStatement*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfStateInvokeStatement* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfStatement*>(node));
		Traverse(static_cast<WfStateMachineStatement*>(node));
		Traverse(static_cast<WfStateInvokeStatement*>(node));
		for (auto&& listItem : node->arguments)
		{
			InspectInto(listItem.Obj());
		}
		Traverse(node->name);
		Finishing(static_cast<WfStateInvokeStatement*>(node));
		Finishing(static_cast<WfStateMachineStatement*>(node));
		Finishing(static_cast<WfStatement*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfFormatExpression* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfExpression*>(node));
		Traverse(static_cast<WfVirtualCfeExpression*>(node));
		Traverse(static_cast<WfFormatExpression*>(node));
		Traverse(node->value);
		InspectInto(node->expandedExpression.Obj());
		Finishing(static_cast<WfFormatExpression*>(node));
		Finishing(static_cast<WfVirtualCfeExpression*>(node));
		Finishing(static_cast<WfExpression*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfBindExpression* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfExpression*>(node));
		Traverse(static_cast<WfVirtualCseExpression*>(node));
		Traverse(static_cast<WfBindExpression*>(node));
		InspectInto(node->expression.Obj());
		InspectInto(node->expandedExpression.Obj());
		Finishing(static_cast<WfBindExpression*>(node));
		Finishing(static_cast<WfVirtualCseExpression*>(node));
		Finishing(static_cast<WfExpression*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfNewCoroutineExpression* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfExpression*>(node));
		Traverse(static_cast<WfVirtualCseExpression*>(node));
		Traverse(static_cast<WfNewCoroutineExpression*>(node));
		Traverse(node->name);
		InspectInto(node->statement.Obj());
		InspectInto(node->expandedExpression.Obj());
		Finishing(static_cast<WfNewCoroutineExpression*>(node));
		Finishing(static_cast<WfVirtualCseExpression*>(node));
		Finishing(static_cast<WfExpression*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfMixinCastExpression* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfExpression*>(node));
		Traverse(static_cast<WfVirtualCseExpression*>(node));
		Traverse(static_cast<WfMixinCastExpression*>(node));
		InspectInto(node->expression.Obj());
		InspectInto(node->type.Obj());
		InspectInto(node->expandedExpression.Obj());
		Finishing(static_cast<WfMixinCastExpression*>(node));
		Finishing(static_cast<WfVirtualCseExpression*>(node));
		Finishing(static_cast<WfExpression*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfExpectedTypeCastExpression* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfExpression*>(node));
		Traverse(static_cast<WfVirtualCseExpression*>(node));
		Traverse(static_cast<WfExpectedTypeCastExpression*>(node));
		InspectInto(node->expression.Obj());
		InspectInto(node->expandedExpression.Obj());
		Finishing(static_cast<WfExpectedTypeCastExpression*>(node));
		Finishing(static_cast<WfVirtualCseExpression*>(node));
		Finishing(static_cast<WfExpression*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfCoOperatorExpression* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfExpression*>(node));
		Traverse(static_cast<WfVirtualCseExpression*>(node));
		Traverse(static_cast<WfCoOperatorExpression*>(node));
		Traverse(node->name);
		InspectInto(node->expandedExpression.Obj());
		Finishing(static_cast<WfCoOperatorExpression*>(node));
		Finishing(static_cast<WfVirtualCseExpression*>(node));
		Finishing(static_cast<WfExpression*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfModuleUsingNameFragment* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfModuleUsingFragment*>(node));
		Traverse(static_cast<WfModuleUsingNameFragment*>(node));
		Traverse(node->name);
		Finishing(static_cast<WfModuleUsingNameFragment*>(node));
		Finishing(static_cast<WfModuleUsingFragment*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::Visit(WfModuleUsingWildCardFragment* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfModuleUsingFragment*>(node));
		Traverse(static_cast<WfModuleUsingWildCardFragment*>(node));
		Finishing(static_cast<WfModuleUsingWildCardFragment*>(node));
		Finishing(static_cast<WfModuleUsingFragment*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::InspectInto(WfType* node)
	{
		if (!node) return;
		node->Accept(static_cast<WfType::IVisitor*>(this));
	}

	void AstVisitor::InspectInto(WfExpression* node)
	{
		if (!node) return;
		node->Accept(static_cast<WfExpression::IVisitor*>(this));
	}

	void AstVisitor::InspectInto(WfStatement* node)
	{
		if (!node) return;
		node->Accept(static_cast<WfStatement::IVisitor*>(this));
	}

	void AstVisitor::InspectInto(WfDeclaration* node)
	{
		if (!node) return;
		node->Accept(static_cast<WfDeclaration::IVisitor*>(this));
	}

	void AstVisitor::InspectInto(WfModuleUsingFragment* node)
	{
		if (!node) return;
		node->Accept(static_cast<WfModuleUsingFragment::IVisitor*>(this));
	}

	void AstVisitor::InspectInto(WfAttribute* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfAttribute*>(node));
		Traverse(node->category);
		Traverse(node->name);
		InspectInto(node->value.Obj());
		Finishing(static_cast<WfAttribute*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::InspectInto(WfFunctionArgument* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfFunctionArgument*>(node));
		for (auto&& listItem : node->attributes)
		{
			InspectInto(listItem.Obj());
		}
		Traverse(node->name);
		InspectInto(node->type.Obj());
		Finishing(static_cast<WfFunctionArgument*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::InspectInto(WfBaseConstructorCall* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfBaseConstructorCall*>(node));
		for (auto&& listItem : node->arguments)
		{
			InspectInto(listItem.Obj());
		}
		InspectInto(node->type.Obj());
		Finishing(static_cast<WfBaseConstructorCall*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::InspectInto(WfEnumItemIntersection* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfEnumItemIntersection*>(node));
		Traverse(node->name);
		Finishing(static_cast<WfEnumItemIntersection*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::InspectInto(WfEnumItem* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfEnumItem*>(node));
		for (auto&& listItem : node->attributes)
		{
			InspectInto(listItem.Obj());
		}
		for (auto&& listItem : node->intersections)
		{
			InspectInto(listItem.Obj());
		}
		Traverse(node->name);
		Traverse(node->number);
		Finishing(static_cast<WfEnumItem*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::InspectInto(WfStructMember* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfStructMember*>(node));
		for (auto&& listItem : node->attributes)
		{
			InspectInto(listItem.Obj());
		}
		Traverse(node->name);
		InspectInto(node->type.Obj());
		Finishing(static_cast<WfStructMember*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::InspectInto(WfStateInput* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfStateInput*>(node));
		for (auto&& listItem : node->arguments)
		{
			InspectInto(listItem.Obj());
		}
		Traverse(node->name);
		Finishing(static_cast<WfStateInput*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::InspectInto(WfStateDeclaration* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfStateDeclaration*>(node));
		for (auto&& listItem : node->arguments)
		{
			InspectInto(listItem.Obj());
		}
		Traverse(node->name);
		InspectInto(node->statement.Obj());
		Finishing(static_cast<WfStateDeclaration*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::InspectInto(WfSwitchCase* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfSwitchCase*>(node));
		InspectInto(node->expression.Obj());
		InspectInto(node->statement.Obj());
		Finishing(static_cast<WfSwitchCase*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::InspectInto(WfStateSwitchArgument* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfStateSwitchArgument*>(node));
		Traverse(node->name);
		Finishing(static_cast<WfStateSwitchArgument*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::InspectInto(WfStateSwitchCase* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfStateSwitchCase*>(node));
		for (auto&& listItem : node->arguments)
		{
			InspectInto(listItem.Obj());
		}
		Traverse(node->name);
		InspectInto(node->statement.Obj());
		Finishing(static_cast<WfStateSwitchCase*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::InspectInto(WfLetVariable* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfLetVariable*>(node));
		Traverse(node->name);
		InspectInto(node->value.Obj());
		Finishing(static_cast<WfLetVariable*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::InspectInto(WfConstructorArgument* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfConstructorArgument*>(node));
		InspectInto(node->key.Obj());
		InspectInto(node->value.Obj());
		Finishing(static_cast<WfConstructorArgument*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::InspectInto(WfModuleUsingItem* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfModuleUsingItem*>(node));
		for (auto&& listItem : node->fragments)
		{
			InspectInto(listItem.Obj());
		}
		Finishing(static_cast<WfModuleUsingItem*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::InspectInto(WfModuleUsingPath* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfModuleUsingPath*>(node));
		for (auto&& listItem : node->items)
		{
			InspectInto(listItem.Obj());
		}
		Finishing(static_cast<WfModuleUsingPath*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

	void AstVisitor::InspectInto(WfModule* node)
	{
		if (!node) return;
		Traverse(static_cast<vl::glr::ParsingAstBase*>(node));
		Traverse(static_cast<WfModule*>(node));
		for (auto&& listItem : node->declarations)
		{
			InspectInto(listItem.Obj());
		}
		Traverse(node->name);
		for (auto&& listItem : node->paths)
		{
			InspectInto(listItem.Obj());
		}
		Finishing(static_cast<WfModule*>(node));
		Finishing(static_cast<vl::glr::ParsingAstBase*>(node));
	}

}
