/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Ast
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "WorkflowAst_Builder.h"

namespace vl::workflow::builder
{

/***********************************************************************
MakeAttachEventExpression
***********************************************************************/

	MakeAttachEventExpression& MakeAttachEventExpression::event(const vl::Ptr<WfExpression>& value)
	{
		node->event = value;
		return *this;
	}

	MakeAttachEventExpression& MakeAttachEventExpression::function(const vl::Ptr<WfExpression>& value)
	{
		node->function = value;
		return *this;
	}

/***********************************************************************
MakeAttribute
***********************************************************************/

	MakeAttribute& MakeAttribute::category(const vl::WString& value)
	{
		node->category.value = value;
		return *this;
	}

	MakeAttribute& MakeAttribute::name(const vl::WString& value)
	{
		node->name.value = value;
		return *this;
	}

	MakeAttribute& MakeAttribute::value(const vl::Ptr<WfExpression>& value)
	{
		node->value = value;
		return *this;
	}

/***********************************************************************
MakeAutoPropertyDeclaration
***********************************************************************/

	MakeAutoPropertyDeclaration& MakeAutoPropertyDeclaration::configConst(WfAPConst value)
	{
		node->configConst = value;
		return *this;
	}

	MakeAutoPropertyDeclaration& MakeAutoPropertyDeclaration::configObserve(WfAPObserve value)
	{
		node->configObserve = value;
		return *this;
	}

	MakeAutoPropertyDeclaration& MakeAutoPropertyDeclaration::expression(const vl::Ptr<WfExpression>& value)
	{
		node->expression = value;
		return *this;
	}

	MakeAutoPropertyDeclaration& MakeAutoPropertyDeclaration::functionKind(WfFunctionKind value)
	{
		node->functionKind = value;
		return *this;
	}

	MakeAutoPropertyDeclaration& MakeAutoPropertyDeclaration::type(const vl::Ptr<WfType>& value)
	{
		node->type = value;
		return *this;
	}

	MakeAutoPropertyDeclaration& MakeAutoPropertyDeclaration::expandedDeclarations(const vl::Ptr<WfDeclaration>& value)
	{
		node->expandedDeclarations.Add(value);
		return *this;
	}

	MakeAutoPropertyDeclaration& MakeAutoPropertyDeclaration::attributes(const vl::Ptr<WfAttribute>& value)
	{
		node->attributes.Add(value);
		return *this;
	}

	MakeAutoPropertyDeclaration& MakeAutoPropertyDeclaration::name(const vl::WString& value)
	{
		node->name.value = value;
		return *this;
	}

/***********************************************************************
MakeBaseConstructorCall
***********************************************************************/

	MakeBaseConstructorCall& MakeBaseConstructorCall::arguments(const vl::Ptr<WfExpression>& value)
	{
		node->arguments.Add(value);
		return *this;
	}

	MakeBaseConstructorCall& MakeBaseConstructorCall::type(const vl::Ptr<WfType>& value)
	{
		node->type = value;
		return *this;
	}

/***********************************************************************
MakeBinaryExpression
***********************************************************************/

	MakeBinaryExpression& MakeBinaryExpression::first(const vl::Ptr<WfExpression>& value)
	{
		node->first = value;
		return *this;
	}

	MakeBinaryExpression& MakeBinaryExpression::op(WfBinaryOperator value)
	{
		node->op = value;
		return *this;
	}

	MakeBinaryExpression& MakeBinaryExpression::second(const vl::Ptr<WfExpression>& value)
	{
		node->second = value;
		return *this;
	}

/***********************************************************************
MakeBindExpression
***********************************************************************/

	MakeBindExpression& MakeBindExpression::expression(const vl::Ptr<WfExpression>& value)
	{
		node->expression = value;
		return *this;
	}

	MakeBindExpression& MakeBindExpression::expandedExpression(const vl::Ptr<WfExpression>& value)
	{
		node->expandedExpression = value;
		return *this;
	}

/***********************************************************************
MakeBlockStatement
***********************************************************************/

	MakeBlockStatement& MakeBlockStatement::endLabel(const vl::WString& value)
	{
		node->endLabel.value = value;
		return *this;
	}

	MakeBlockStatement& MakeBlockStatement::statements(const vl::Ptr<WfStatement>& value)
	{
		node->statements.Add(value);
		return *this;
	}

/***********************************************************************
MakeCallExpression
***********************************************************************/

	MakeCallExpression& MakeCallExpression::arguments(const vl::Ptr<WfExpression>& value)
	{
		node->arguments.Add(value);
		return *this;
	}

	MakeCallExpression& MakeCallExpression::function(const vl::Ptr<WfExpression>& value)
	{
		node->function = value;
		return *this;
	}

/***********************************************************************
MakeCastResultInterfaceDeclaration
***********************************************************************/

	MakeCastResultInterfaceDeclaration& MakeCastResultInterfaceDeclaration::baseType(const vl::Ptr<WfType>& value)
	{
		node->baseType = value;
		return *this;
	}

	MakeCastResultInterfaceDeclaration& MakeCastResultInterfaceDeclaration::elementType(const vl::Ptr<WfType>& value)
	{
		node->elementType = value;
		return *this;
	}

	MakeCastResultInterfaceDeclaration& MakeCastResultInterfaceDeclaration::expandedDeclarations(const vl::Ptr<WfDeclaration>& value)
	{
		node->expandedDeclarations.Add(value);
		return *this;
	}

	MakeCastResultInterfaceDeclaration& MakeCastResultInterfaceDeclaration::attributes(const vl::Ptr<WfAttribute>& value)
	{
		node->attributes.Add(value);
		return *this;
	}

	MakeCastResultInterfaceDeclaration& MakeCastResultInterfaceDeclaration::name(const vl::WString& value)
	{
		node->name.value = value;
		return *this;
	}

/***********************************************************************
MakeChildExpression
***********************************************************************/

	MakeChildExpression& MakeChildExpression::name(const vl::WString& value)
	{
		node->name.value = value;
		return *this;
	}

	MakeChildExpression& MakeChildExpression::parent(const vl::Ptr<WfExpression>& value)
	{
		node->parent = value;
		return *this;
	}

/***********************************************************************
MakeChildType
***********************************************************************/

	MakeChildType& MakeChildType::name(const vl::WString& value)
	{
		node->name.value = value;
		return *this;
	}

	MakeChildType& MakeChildType::parent(const vl::Ptr<WfType>& value)
	{
		node->parent = value;
		return *this;
	}

/***********************************************************************
MakeClassDeclaration
***********************************************************************/

	MakeClassDeclaration& MakeClassDeclaration::baseTypes(const vl::Ptr<WfType>& value)
	{
		node->baseTypes.Add(value);
		return *this;
	}

	MakeClassDeclaration& MakeClassDeclaration::constructorType(WfConstructorType value)
	{
		node->constructorType = value;
		return *this;
	}

	MakeClassDeclaration& MakeClassDeclaration::declarations(const vl::Ptr<WfDeclaration>& value)
	{
		node->declarations.Add(value);
		return *this;
	}

	MakeClassDeclaration& MakeClassDeclaration::kind(WfClassKind value)
	{
		node->kind = value;
		return *this;
	}

	MakeClassDeclaration& MakeClassDeclaration::attributes(const vl::Ptr<WfAttribute>& value)
	{
		node->attributes.Add(value);
		return *this;
	}

	MakeClassDeclaration& MakeClassDeclaration::name(const vl::WString& value)
	{
		node->name.value = value;
		return *this;
	}

/***********************************************************************
MakeCoOperatorExpression
***********************************************************************/

	MakeCoOperatorExpression& MakeCoOperatorExpression::name(const vl::WString& value)
	{
		node->name.value = value;
		return *this;
	}

	MakeCoOperatorExpression& MakeCoOperatorExpression::expandedExpression(const vl::Ptr<WfExpression>& value)
	{
		node->expandedExpression = value;
		return *this;
	}

/***********************************************************************
MakeCoOperatorStatement
***********************************************************************/

	MakeCoOperatorStatement& MakeCoOperatorStatement::arguments(const vl::Ptr<WfExpression>& value)
	{
		node->arguments.Add(value);
		return *this;
	}

	MakeCoOperatorStatement& MakeCoOperatorStatement::opName(const vl::WString& value)
	{
		node->opName.value = value;
		return *this;
	}

	MakeCoOperatorStatement& MakeCoOperatorStatement::varName(const vl::WString& value)
	{
		node->varName.value = value;
		return *this;
	}

/***********************************************************************
MakeCoPauseStatement
***********************************************************************/

	MakeCoPauseStatement& MakeCoPauseStatement::statement(const vl::Ptr<WfStatement>& value)
	{
		node->statement = value;
		return *this;
	}

/***********************************************************************
MakeCoProviderStatement
***********************************************************************/

	MakeCoProviderStatement& MakeCoProviderStatement::name(const vl::WString& value)
	{
		node->name.value = value;
		return *this;
	}

	MakeCoProviderStatement& MakeCoProviderStatement::statement(const vl::Ptr<WfStatement>& value)
	{
		node->statement = value;
		return *this;
	}

	MakeCoProviderStatement& MakeCoProviderStatement::expandedStatement(const vl::Ptr<WfStatement>& value)
	{
		node->expandedStatement = value;
		return *this;
	}

/***********************************************************************
MakeConstructorArgument
***********************************************************************/

	MakeConstructorArgument& MakeConstructorArgument::key(const vl::Ptr<WfExpression>& value)
	{
		node->key = value;
		return *this;
	}

	MakeConstructorArgument& MakeConstructorArgument::value(const vl::Ptr<WfExpression>& value)
	{
		node->value = value;
		return *this;
	}

/***********************************************************************
MakeConstructorDeclaration
***********************************************************************/

	MakeConstructorDeclaration& MakeConstructorDeclaration::arguments(const vl::Ptr<WfFunctionArgument>& value)
	{
		node->arguments.Add(value);
		return *this;
	}

	MakeConstructorDeclaration& MakeConstructorDeclaration::baseConstructorCalls(const vl::Ptr<WfBaseConstructorCall>& value)
	{
		node->baseConstructorCalls.Add(value);
		return *this;
	}

	MakeConstructorDeclaration& MakeConstructorDeclaration::constructorType(WfConstructorType value)
	{
		node->constructorType = value;
		return *this;
	}

	MakeConstructorDeclaration& MakeConstructorDeclaration::statement(const vl::Ptr<WfStatement>& value)
	{
		node->statement = value;
		return *this;
	}

	MakeConstructorDeclaration& MakeConstructorDeclaration::attributes(const vl::Ptr<WfAttribute>& value)
	{
		node->attributes.Add(value);
		return *this;
	}

	MakeConstructorDeclaration& MakeConstructorDeclaration::name(const vl::WString& value)
	{
		node->name.value = value;
		return *this;
	}

/***********************************************************************
MakeConstructorExpression
***********************************************************************/

	MakeConstructorExpression& MakeConstructorExpression::arguments(const vl::Ptr<WfConstructorArgument>& value)
	{
		node->arguments.Add(value);
		return *this;
	}

/***********************************************************************
MakeDeclaration
***********************************************************************/

	MakeDeclaration& MakeDeclaration::attributes(const vl::Ptr<WfAttribute>& value)
	{
		node->attributes.Add(value);
		return *this;
	}

	MakeDeclaration& MakeDeclaration::name(const vl::WString& value)
	{
		node->name.value = value;
		return *this;
	}

/***********************************************************************
MakeDeleteStatement
***********************************************************************/

	MakeDeleteStatement& MakeDeleteStatement::expression(const vl::Ptr<WfExpression>& value)
	{
		node->expression = value;
		return *this;
	}

/***********************************************************************
MakeDestructorDeclaration
***********************************************************************/

	MakeDestructorDeclaration& MakeDestructorDeclaration::statement(const vl::Ptr<WfStatement>& value)
	{
		node->statement = value;
		return *this;
	}

	MakeDestructorDeclaration& MakeDestructorDeclaration::attributes(const vl::Ptr<WfAttribute>& value)
	{
		node->attributes.Add(value);
		return *this;
	}

	MakeDestructorDeclaration& MakeDestructorDeclaration::name(const vl::WString& value)
	{
		node->name.value = value;
		return *this;
	}

/***********************************************************************
MakeDetachEventExpression
***********************************************************************/

	MakeDetachEventExpression& MakeDetachEventExpression::event(const vl::Ptr<WfExpression>& value)
	{
		node->event = value;
		return *this;
	}

	MakeDetachEventExpression& MakeDetachEventExpression::handler(const vl::Ptr<WfExpression>& value)
	{
		node->handler = value;
		return *this;
	}

/***********************************************************************
MakeEnumDeclaration
***********************************************************************/

	MakeEnumDeclaration& MakeEnumDeclaration::items(const vl::Ptr<WfEnumItem>& value)
	{
		node->items.Add(value);
		return *this;
	}

	MakeEnumDeclaration& MakeEnumDeclaration::kind(WfEnumKind value)
	{
		node->kind = value;
		return *this;
	}

	MakeEnumDeclaration& MakeEnumDeclaration::attributes(const vl::Ptr<WfAttribute>& value)
	{
		node->attributes.Add(value);
		return *this;
	}

	MakeEnumDeclaration& MakeEnumDeclaration::name(const vl::WString& value)
	{
		node->name.value = value;
		return *this;
	}

/***********************************************************************
MakeEnumItem
***********************************************************************/

	MakeEnumItem& MakeEnumItem::attributes(const vl::Ptr<WfAttribute>& value)
	{
		node->attributes.Add(value);
		return *this;
	}

	MakeEnumItem& MakeEnumItem::intersections(const vl::Ptr<WfEnumItemIntersection>& value)
	{
		node->intersections.Add(value);
		return *this;
	}

	MakeEnumItem& MakeEnumItem::kind(WfEnumItemKind value)
	{
		node->kind = value;
		return *this;
	}

	MakeEnumItem& MakeEnumItem::name(const vl::WString& value)
	{
		node->name.value = value;
		return *this;
	}

	MakeEnumItem& MakeEnumItem::number(const vl::WString& value)
	{
		node->number.value = value;
		return *this;
	}

/***********************************************************************
MakeEnumItemIntersection
***********************************************************************/

	MakeEnumItemIntersection& MakeEnumItemIntersection::name(const vl::WString& value)
	{
		node->name.value = value;
		return *this;
	}

/***********************************************************************
MakeEnumerableType
***********************************************************************/

	MakeEnumerableType& MakeEnumerableType::element(const vl::Ptr<WfType>& value)
	{
		node->element = value;
		return *this;
	}

/***********************************************************************
MakeEventDeclaration
***********************************************************************/

	MakeEventDeclaration& MakeEventDeclaration::arguments(const vl::Ptr<WfType>& value)
	{
		node->arguments.Add(value);
		return *this;
	}

	MakeEventDeclaration& MakeEventDeclaration::attributes(const vl::Ptr<WfAttribute>& value)
	{
		node->attributes.Add(value);
		return *this;
	}

	MakeEventDeclaration& MakeEventDeclaration::name(const vl::WString& value)
	{
		node->name.value = value;
		return *this;
	}

/***********************************************************************
MakeExpectedTypeCastExpression
***********************************************************************/

	MakeExpectedTypeCastExpression& MakeExpectedTypeCastExpression::expression(const vl::Ptr<WfExpression>& value)
	{
		node->expression = value;
		return *this;
	}

	MakeExpectedTypeCastExpression& MakeExpectedTypeCastExpression::strategy(WfTypeCastingStrategy value)
	{
		node->strategy = value;
		return *this;
	}

	MakeExpectedTypeCastExpression& MakeExpectedTypeCastExpression::expandedExpression(const vl::Ptr<WfExpression>& value)
	{
		node->expandedExpression = value;
		return *this;
	}

/***********************************************************************
MakeExpressionStatement
***********************************************************************/

	MakeExpressionStatement& MakeExpressionStatement::expression(const vl::Ptr<WfExpression>& value)
	{
		node->expression = value;
		return *this;
	}

/***********************************************************************
MakeFloatingExpression
***********************************************************************/

	MakeFloatingExpression& MakeFloatingExpression::value(const vl::WString& value)
	{
		node->value.value = value;
		return *this;
	}

/***********************************************************************
MakeForEachStatement
***********************************************************************/

	MakeForEachStatement& MakeForEachStatement::collection(const vl::Ptr<WfExpression>& value)
	{
		node->collection = value;
		return *this;
	}

	MakeForEachStatement& MakeForEachStatement::direction(WfForEachDirection value)
	{
		node->direction = value;
		return *this;
	}

	MakeForEachStatement& MakeForEachStatement::name(const vl::WString& value)
	{
		node->name.value = value;
		return *this;
	}

	MakeForEachStatement& MakeForEachStatement::statement(const vl::Ptr<WfStatement>& value)
	{
		node->statement = value;
		return *this;
	}

	MakeForEachStatement& MakeForEachStatement::expandedStatement(const vl::Ptr<WfStatement>& value)
	{
		node->expandedStatement = value;
		return *this;
	}

/***********************************************************************
MakeFormatExpression
***********************************************************************/

	MakeFormatExpression& MakeFormatExpression::value(const vl::WString& value)
	{
		node->value.value = value;
		return *this;
	}

	MakeFormatExpression& MakeFormatExpression::expandedExpression(const vl::Ptr<WfExpression>& value)
	{
		node->expandedExpression = value;
		return *this;
	}

/***********************************************************************
MakeFunctionArgument
***********************************************************************/

	MakeFunctionArgument& MakeFunctionArgument::attributes(const vl::Ptr<WfAttribute>& value)
	{
		node->attributes.Add(value);
		return *this;
	}

	MakeFunctionArgument& MakeFunctionArgument::name(const vl::WString& value)
	{
		node->name.value = value;
		return *this;
	}

	MakeFunctionArgument& MakeFunctionArgument::type(const vl::Ptr<WfType>& value)
	{
		node->type = value;
		return *this;
	}

/***********************************************************************
MakeFunctionDeclaration
***********************************************************************/

	MakeFunctionDeclaration& MakeFunctionDeclaration::anonymity(WfFunctionAnonymity value)
	{
		node->anonymity = value;
		return *this;
	}

	MakeFunctionDeclaration& MakeFunctionDeclaration::arguments(const vl::Ptr<WfFunctionArgument>& value)
	{
		node->arguments.Add(value);
		return *this;
	}

	MakeFunctionDeclaration& MakeFunctionDeclaration::functionKind(WfFunctionKind value)
	{
		node->functionKind = value;
		return *this;
	}

	MakeFunctionDeclaration& MakeFunctionDeclaration::returnType(const vl::Ptr<WfType>& value)
	{
		node->returnType = value;
		return *this;
	}

	MakeFunctionDeclaration& MakeFunctionDeclaration::statement(const vl::Ptr<WfStatement>& value)
	{
		node->statement = value;
		return *this;
	}

	MakeFunctionDeclaration& MakeFunctionDeclaration::attributes(const vl::Ptr<WfAttribute>& value)
	{
		node->attributes.Add(value);
		return *this;
	}

	MakeFunctionDeclaration& MakeFunctionDeclaration::name(const vl::WString& value)
	{
		node->name.value = value;
		return *this;
	}

/***********************************************************************
MakeFunctionExpression
***********************************************************************/

	MakeFunctionExpression& MakeFunctionExpression::function(const vl::Ptr<WfFunctionDeclaration>& value)
	{
		node->function = value;
		return *this;
	}

/***********************************************************************
MakeFunctionType
***********************************************************************/

	MakeFunctionType& MakeFunctionType::arguments(const vl::Ptr<WfType>& value)
	{
		node->arguments.Add(value);
		return *this;
	}

	MakeFunctionType& MakeFunctionType::result(const vl::Ptr<WfType>& value)
	{
		node->result = value;
		return *this;
	}

/***********************************************************************
MakeGotoStatement
***********************************************************************/

	MakeGotoStatement& MakeGotoStatement::label(const vl::WString& value)
	{
		node->label.value = value;
		return *this;
	}

/***********************************************************************
MakeIfExpression
***********************************************************************/

	MakeIfExpression& MakeIfExpression::condition(const vl::Ptr<WfExpression>& value)
	{
		node->condition = value;
		return *this;
	}

	MakeIfExpression& MakeIfExpression::falseBranch(const vl::Ptr<WfExpression>& value)
	{
		node->falseBranch = value;
		return *this;
	}

	MakeIfExpression& MakeIfExpression::trueBranch(const vl::Ptr<WfExpression>& value)
	{
		node->trueBranch = value;
		return *this;
	}

/***********************************************************************
MakeIfStatement
***********************************************************************/

	MakeIfStatement& MakeIfStatement::expression(const vl::Ptr<WfExpression>& value)
	{
		node->expression = value;
		return *this;
	}

	MakeIfStatement& MakeIfStatement::falseBranch(const vl::Ptr<WfStatement>& value)
	{
		node->falseBranch = value;
		return *this;
	}

	MakeIfStatement& MakeIfStatement::name(const vl::WString& value)
	{
		node->name.value = value;
		return *this;
	}

	MakeIfStatement& MakeIfStatement::trueBranch(const vl::Ptr<WfStatement>& value)
	{
		node->trueBranch = value;
		return *this;
	}

	MakeIfStatement& MakeIfStatement::type(const vl::Ptr<WfType>& value)
	{
		node->type = value;
		return *this;
	}

/***********************************************************************
MakeInferExpression
***********************************************************************/

	MakeInferExpression& MakeInferExpression::expression(const vl::Ptr<WfExpression>& value)
	{
		node->expression = value;
		return *this;
	}

	MakeInferExpression& MakeInferExpression::type(const vl::Ptr<WfType>& value)
	{
		node->type = value;
		return *this;
	}

/***********************************************************************
MakeIntegerExpression
***********************************************************************/

	MakeIntegerExpression& MakeIntegerExpression::value(const vl::WString& value)
	{
		node->value.value = value;
		return *this;
	}

/***********************************************************************
MakeLetExpression
***********************************************************************/

	MakeLetExpression& MakeLetExpression::expression(const vl::Ptr<WfExpression>& value)
	{
		node->expression = value;
		return *this;
	}

	MakeLetExpression& MakeLetExpression::variables(const vl::Ptr<WfLetVariable>& value)
	{
		node->variables.Add(value);
		return *this;
	}

/***********************************************************************
MakeLetVariable
***********************************************************************/

	MakeLetVariable& MakeLetVariable::name(const vl::WString& value)
	{
		node->name.value = value;
		return *this;
	}

	MakeLetVariable& MakeLetVariable::value(const vl::Ptr<WfExpression>& value)
	{
		node->value = value;
		return *this;
	}

/***********************************************************************
MakeLiteralExpression
***********************************************************************/

	MakeLiteralExpression& MakeLiteralExpression::value(WfLiteralValue value)
	{
		node->value = value;
		return *this;
	}

/***********************************************************************
MakeMapType
***********************************************************************/

	MakeMapType& MakeMapType::key(const vl::Ptr<WfType>& value)
	{
		node->key = value;
		return *this;
	}

	MakeMapType& MakeMapType::value(const vl::Ptr<WfType>& value)
	{
		node->value = value;
		return *this;
	}

	MakeMapType& MakeMapType::writability(WfMapWritability value)
	{
		node->writability = value;
		return *this;
	}

/***********************************************************************
MakeMemberExpression
***********************************************************************/

	MakeMemberExpression& MakeMemberExpression::name(const vl::WString& value)
	{
		node->name.value = value;
		return *this;
	}

	MakeMemberExpression& MakeMemberExpression::parent(const vl::Ptr<WfExpression>& value)
	{
		node->parent = value;
		return *this;
	}

/***********************************************************************
MakeMixinCastExpression
***********************************************************************/

	MakeMixinCastExpression& MakeMixinCastExpression::expression(const vl::Ptr<WfExpression>& value)
	{
		node->expression = value;
		return *this;
	}

	MakeMixinCastExpression& MakeMixinCastExpression::type(const vl::Ptr<WfType>& value)
	{
		node->type = value;
		return *this;
	}

	MakeMixinCastExpression& MakeMixinCastExpression::expandedExpression(const vl::Ptr<WfExpression>& value)
	{
		node->expandedExpression = value;
		return *this;
	}

/***********************************************************************
MakeModule
***********************************************************************/

	MakeModule& MakeModule::declarations(const vl::Ptr<WfDeclaration>& value)
	{
		node->declarations.Add(value);
		return *this;
	}

	MakeModule& MakeModule::moduleType(WfModuleType value)
	{
		node->moduleType = value;
		return *this;
	}

	MakeModule& MakeModule::name(const vl::WString& value)
	{
		node->name.value = value;
		return *this;
	}

	MakeModule& MakeModule::paths(const vl::Ptr<WfModuleUsingPath>& value)
	{
		node->paths.Add(value);
		return *this;
	}

/***********************************************************************
MakeModuleUsingItem
***********************************************************************/

	MakeModuleUsingItem& MakeModuleUsingItem::fragments(const vl::Ptr<WfModuleUsingFragment>& value)
	{
		node->fragments.Add(value);
		return *this;
	}

/***********************************************************************
MakeModuleUsingNameFragment
***********************************************************************/

	MakeModuleUsingNameFragment& MakeModuleUsingNameFragment::name(const vl::WString& value)
	{
		node->name.value = value;
		return *this;
	}

/***********************************************************************
MakeModuleUsingPath
***********************************************************************/

	MakeModuleUsingPath& MakeModuleUsingPath::items(const vl::Ptr<WfModuleUsingItem>& value)
	{
		node->items.Add(value);
		return *this;
	}

/***********************************************************************
MakeNamespaceDeclaration
***********************************************************************/

	MakeNamespaceDeclaration& MakeNamespaceDeclaration::declarations(const vl::Ptr<WfDeclaration>& value)
	{
		node->declarations.Add(value);
		return *this;
	}

	MakeNamespaceDeclaration& MakeNamespaceDeclaration::attributes(const vl::Ptr<WfAttribute>& value)
	{
		node->attributes.Add(value);
		return *this;
	}

	MakeNamespaceDeclaration& MakeNamespaceDeclaration::name(const vl::WString& value)
	{
		node->name.value = value;
		return *this;
	}

/***********************************************************************
MakeNewClassExpression
***********************************************************************/

	MakeNewClassExpression& MakeNewClassExpression::arguments(const vl::Ptr<WfExpression>& value)
	{
		node->arguments.Add(value);
		return *this;
	}

	MakeNewClassExpression& MakeNewClassExpression::type(const vl::Ptr<WfType>& value)
	{
		node->type = value;
		return *this;
	}

/***********************************************************************
MakeNewCoroutineExpression
***********************************************************************/

	MakeNewCoroutineExpression& MakeNewCoroutineExpression::name(const vl::WString& value)
	{
		node->name.value = value;
		return *this;
	}

	MakeNewCoroutineExpression& MakeNewCoroutineExpression::statement(const vl::Ptr<WfStatement>& value)
	{
		node->statement = value;
		return *this;
	}

	MakeNewCoroutineExpression& MakeNewCoroutineExpression::expandedExpression(const vl::Ptr<WfExpression>& value)
	{
		node->expandedExpression = value;
		return *this;
	}

/***********************************************************************
MakeNewInterfaceExpression
***********************************************************************/

	MakeNewInterfaceExpression& MakeNewInterfaceExpression::declarations(const vl::Ptr<WfDeclaration>& value)
	{
		node->declarations.Add(value);
		return *this;
	}

	MakeNewInterfaceExpression& MakeNewInterfaceExpression::type(const vl::Ptr<WfType>& value)
	{
		node->type = value;
		return *this;
	}

/***********************************************************************
MakeNullableType
***********************************************************************/

	MakeNullableType& MakeNullableType::element(const vl::Ptr<WfType>& value)
	{
		node->element = value;
		return *this;
	}

/***********************************************************************
MakeObservableListType
***********************************************************************/

	MakeObservableListType& MakeObservableListType::element(const vl::Ptr<WfType>& value)
	{
		node->element = value;
		return *this;
	}

/***********************************************************************
MakeObserveExpression
***********************************************************************/

	MakeObserveExpression& MakeObserveExpression::events(const vl::Ptr<WfExpression>& value)
	{
		node->events.Add(value);
		return *this;
	}

	MakeObserveExpression& MakeObserveExpression::expression(const vl::Ptr<WfExpression>& value)
	{
		node->expression = value;
		return *this;
	}

	MakeObserveExpression& MakeObserveExpression::name(const vl::WString& value)
	{
		node->name.value = value;
		return *this;
	}

	MakeObserveExpression& MakeObserveExpression::observeType(WfObserveType value)
	{
		node->observeType = value;
		return *this;
	}

	MakeObserveExpression& MakeObserveExpression::parent(const vl::Ptr<WfExpression>& value)
	{
		node->parent = value;
		return *this;
	}

/***********************************************************************
MakeOrderedLambdaExpression
***********************************************************************/

	MakeOrderedLambdaExpression& MakeOrderedLambdaExpression::body(const vl::Ptr<WfExpression>& value)
	{
		node->body = value;
		return *this;
	}

/***********************************************************************
MakeOrderedNameExpression
***********************************************************************/

	MakeOrderedNameExpression& MakeOrderedNameExpression::name(const vl::WString& value)
	{
		node->name.value = value;
		return *this;
	}

/***********************************************************************
MakePredefinedType
***********************************************************************/

	MakePredefinedType& MakePredefinedType::name(WfPredefinedTypeName value)
	{
		node->name = value;
		return *this;
	}

/***********************************************************************
MakePropertyDeclaration
***********************************************************************/

	MakePropertyDeclaration& MakePropertyDeclaration::getter(const vl::WString& value)
	{
		node->getter.value = value;
		return *this;
	}

	MakePropertyDeclaration& MakePropertyDeclaration::setter(const vl::WString& value)
	{
		node->setter.value = value;
		return *this;
	}

	MakePropertyDeclaration& MakePropertyDeclaration::type(const vl::Ptr<WfType>& value)
	{
		node->type = value;
		return *this;
	}

	MakePropertyDeclaration& MakePropertyDeclaration::valueChangedEvent(const vl::WString& value)
	{
		node->valueChangedEvent.value = value;
		return *this;
	}

	MakePropertyDeclaration& MakePropertyDeclaration::attributes(const vl::Ptr<WfAttribute>& value)
	{
		node->attributes.Add(value);
		return *this;
	}

	MakePropertyDeclaration& MakePropertyDeclaration::name(const vl::WString& value)
	{
		node->name.value = value;
		return *this;
	}

/***********************************************************************
MakeRaiseExceptionStatement
***********************************************************************/

	MakeRaiseExceptionStatement& MakeRaiseExceptionStatement::expression(const vl::Ptr<WfExpression>& value)
	{
		node->expression = value;
		return *this;
	}

/***********************************************************************
MakeRangeExpression
***********************************************************************/

	MakeRangeExpression& MakeRangeExpression::begin(const vl::Ptr<WfExpression>& value)
	{
		node->begin = value;
		return *this;
	}

	MakeRangeExpression& MakeRangeExpression::beginBoundary(WfRangeBoundary value)
	{
		node->beginBoundary = value;
		return *this;
	}

	MakeRangeExpression& MakeRangeExpression::end(const vl::Ptr<WfExpression>& value)
	{
		node->end = value;
		return *this;
	}

	MakeRangeExpression& MakeRangeExpression::endBoundary(WfRangeBoundary value)
	{
		node->endBoundary = value;
		return *this;
	}

/***********************************************************************
MakeRawPointerType
***********************************************************************/

	MakeRawPointerType& MakeRawPointerType::element(const vl::Ptr<WfType>& value)
	{
		node->element = value;
		return *this;
	}

/***********************************************************************
MakeReferenceExpression
***********************************************************************/

	MakeReferenceExpression& MakeReferenceExpression::name(const vl::WString& value)
	{
		node->name.value = value;
		return *this;
	}

/***********************************************************************
MakeReferenceType
***********************************************************************/

	MakeReferenceType& MakeReferenceType::name(const vl::WString& value)
	{
		node->name.value = value;
		return *this;
	}

/***********************************************************************
MakeReturnStatement
***********************************************************************/

	MakeReturnStatement& MakeReturnStatement::expression(const vl::Ptr<WfExpression>& value)
	{
		node->expression = value;
		return *this;
	}

/***********************************************************************
MakeSetTestingExpression
***********************************************************************/

	MakeSetTestingExpression& MakeSetTestingExpression::collection(const vl::Ptr<WfExpression>& value)
	{
		node->collection = value;
		return *this;
	}

	MakeSetTestingExpression& MakeSetTestingExpression::element(const vl::Ptr<WfExpression>& value)
	{
		node->element = value;
		return *this;
	}

	MakeSetTestingExpression& MakeSetTestingExpression::test(WfSetTesting value)
	{
		node->test = value;
		return *this;
	}

/***********************************************************************
MakeSharedPointerType
***********************************************************************/

	MakeSharedPointerType& MakeSharedPointerType::element(const vl::Ptr<WfType>& value)
	{
		node->element = value;
		return *this;
	}

/***********************************************************************
MakeStateDeclaration
***********************************************************************/

	MakeStateDeclaration& MakeStateDeclaration::arguments(const vl::Ptr<WfFunctionArgument>& value)
	{
		node->arguments.Add(value);
		return *this;
	}

	MakeStateDeclaration& MakeStateDeclaration::name(const vl::WString& value)
	{
		node->name.value = value;
		return *this;
	}

	MakeStateDeclaration& MakeStateDeclaration::statement(const vl::Ptr<WfStatement>& value)
	{
		node->statement = value;
		return *this;
	}

/***********************************************************************
MakeStateInput
***********************************************************************/

	MakeStateInput& MakeStateInput::arguments(const vl::Ptr<WfFunctionArgument>& value)
	{
		node->arguments.Add(value);
		return *this;
	}

	MakeStateInput& MakeStateInput::name(const vl::WString& value)
	{
		node->name.value = value;
		return *this;
	}

/***********************************************************************
MakeStateInvokeStatement
***********************************************************************/

	MakeStateInvokeStatement& MakeStateInvokeStatement::arguments(const vl::Ptr<WfExpression>& value)
	{
		node->arguments.Add(value);
		return *this;
	}

	MakeStateInvokeStatement& MakeStateInvokeStatement::name(const vl::WString& value)
	{
		node->name.value = value;
		return *this;
	}

	MakeStateInvokeStatement& MakeStateInvokeStatement::type(WfStateInvokeType value)
	{
		node->type = value;
		return *this;
	}

/***********************************************************************
MakeStateMachineDeclaration
***********************************************************************/

	MakeStateMachineDeclaration& MakeStateMachineDeclaration::inputs(const vl::Ptr<WfStateInput>& value)
	{
		node->inputs.Add(value);
		return *this;
	}

	MakeStateMachineDeclaration& MakeStateMachineDeclaration::states(const vl::Ptr<WfStateDeclaration>& value)
	{
		node->states.Add(value);
		return *this;
	}

	MakeStateMachineDeclaration& MakeStateMachineDeclaration::expandedDeclarations(const vl::Ptr<WfDeclaration>& value)
	{
		node->expandedDeclarations.Add(value);
		return *this;
	}

	MakeStateMachineDeclaration& MakeStateMachineDeclaration::attributes(const vl::Ptr<WfAttribute>& value)
	{
		node->attributes.Add(value);
		return *this;
	}

	MakeStateMachineDeclaration& MakeStateMachineDeclaration::name(const vl::WString& value)
	{
		node->name.value = value;
		return *this;
	}

/***********************************************************************
MakeStateSwitchArgument
***********************************************************************/

	MakeStateSwitchArgument& MakeStateSwitchArgument::name(const vl::WString& value)
	{
		node->name.value = value;
		return *this;
	}

/***********************************************************************
MakeStateSwitchCase
***********************************************************************/

	MakeStateSwitchCase& MakeStateSwitchCase::arguments(const vl::Ptr<WfStateSwitchArgument>& value)
	{
		node->arguments.Add(value);
		return *this;
	}

	MakeStateSwitchCase& MakeStateSwitchCase::name(const vl::WString& value)
	{
		node->name.value = value;
		return *this;
	}

	MakeStateSwitchCase& MakeStateSwitchCase::statement(const vl::Ptr<WfStatement>& value)
	{
		node->statement = value;
		return *this;
	}

/***********************************************************************
MakeStateSwitchStatement
***********************************************************************/

	MakeStateSwitchStatement& MakeStateSwitchStatement::caseBranches(const vl::Ptr<WfStateSwitchCase>& value)
	{
		node->caseBranches.Add(value);
		return *this;
	}

	MakeStateSwitchStatement& MakeStateSwitchStatement::type(WfStateSwitchType value)
	{
		node->type = value;
		return *this;
	}

/***********************************************************************
MakeStringExpression
***********************************************************************/

	MakeStringExpression& MakeStringExpression::value(const vl::WString& value)
	{
		node->value.value = value;
		return *this;
	}

/***********************************************************************
MakeStructDeclaration
***********************************************************************/

	MakeStructDeclaration& MakeStructDeclaration::members(const vl::Ptr<WfStructMember>& value)
	{
		node->members.Add(value);
		return *this;
	}

	MakeStructDeclaration& MakeStructDeclaration::attributes(const vl::Ptr<WfAttribute>& value)
	{
		node->attributes.Add(value);
		return *this;
	}

	MakeStructDeclaration& MakeStructDeclaration::name(const vl::WString& value)
	{
		node->name.value = value;
		return *this;
	}

/***********************************************************************
MakeStructMember
***********************************************************************/

	MakeStructMember& MakeStructMember::attributes(const vl::Ptr<WfAttribute>& value)
	{
		node->attributes.Add(value);
		return *this;
	}

	MakeStructMember& MakeStructMember::name(const vl::WString& value)
	{
		node->name.value = value;
		return *this;
	}

	MakeStructMember& MakeStructMember::type(const vl::Ptr<WfType>& value)
	{
		node->type = value;
		return *this;
	}

/***********************************************************************
MakeSwitchCase
***********************************************************************/

	MakeSwitchCase& MakeSwitchCase::expression(const vl::Ptr<WfExpression>& value)
	{
		node->expression = value;
		return *this;
	}

	MakeSwitchCase& MakeSwitchCase::statement(const vl::Ptr<WfStatement>& value)
	{
		node->statement = value;
		return *this;
	}

/***********************************************************************
MakeSwitchStatement
***********************************************************************/

	MakeSwitchStatement& MakeSwitchStatement::caseBranches(const vl::Ptr<WfSwitchCase>& value)
	{
		node->caseBranches.Add(value);
		return *this;
	}

	MakeSwitchStatement& MakeSwitchStatement::defaultBranch(const vl::Ptr<WfStatement>& value)
	{
		node->defaultBranch = value;
		return *this;
	}

	MakeSwitchStatement& MakeSwitchStatement::expression(const vl::Ptr<WfExpression>& value)
	{
		node->expression = value;
		return *this;
	}

	MakeSwitchStatement& MakeSwitchStatement::expandedStatement(const vl::Ptr<WfStatement>& value)
	{
		node->expandedStatement = value;
		return *this;
	}

/***********************************************************************
MakeTopQualifiedExpression
***********************************************************************/

	MakeTopQualifiedExpression& MakeTopQualifiedExpression::name(const vl::WString& value)
	{
		node->name.value = value;
		return *this;
	}

/***********************************************************************
MakeTopQualifiedType
***********************************************************************/

	MakeTopQualifiedType& MakeTopQualifiedType::name(const vl::WString& value)
	{
		node->name.value = value;
		return *this;
	}

/***********************************************************************
MakeTryStatement
***********************************************************************/

	MakeTryStatement& MakeTryStatement::catchStatement(const vl::Ptr<WfStatement>& value)
	{
		node->catchStatement = value;
		return *this;
	}

	MakeTryStatement& MakeTryStatement::finallyStatement(const vl::Ptr<WfStatement>& value)
	{
		node->finallyStatement = value;
		return *this;
	}

	MakeTryStatement& MakeTryStatement::name(const vl::WString& value)
	{
		node->name.value = value;
		return *this;
	}

	MakeTryStatement& MakeTryStatement::protectedStatement(const vl::Ptr<WfStatement>& value)
	{
		node->protectedStatement = value;
		return *this;
	}

/***********************************************************************
MakeTypeCastingExpression
***********************************************************************/

	MakeTypeCastingExpression& MakeTypeCastingExpression::expression(const vl::Ptr<WfExpression>& value)
	{
		node->expression = value;
		return *this;
	}

	MakeTypeCastingExpression& MakeTypeCastingExpression::strategy(WfTypeCastingStrategy value)
	{
		node->strategy = value;
		return *this;
	}

	MakeTypeCastingExpression& MakeTypeCastingExpression::type(const vl::Ptr<WfType>& value)
	{
		node->type = value;
		return *this;
	}

/***********************************************************************
MakeTypeOfExpressionExpression
***********************************************************************/

	MakeTypeOfExpressionExpression& MakeTypeOfExpressionExpression::expression(const vl::Ptr<WfExpression>& value)
	{
		node->expression = value;
		return *this;
	}

/***********************************************************************
MakeTypeOfTypeExpression
***********************************************************************/

	MakeTypeOfTypeExpression& MakeTypeOfTypeExpression::type(const vl::Ptr<WfType>& value)
	{
		node->type = value;
		return *this;
	}

/***********************************************************************
MakeTypeTestingExpression
***********************************************************************/

	MakeTypeTestingExpression& MakeTypeTestingExpression::expression(const vl::Ptr<WfExpression>& value)
	{
		node->expression = value;
		return *this;
	}

	MakeTypeTestingExpression& MakeTypeTestingExpression::test(WfTypeTesting value)
	{
		node->test = value;
		return *this;
	}

	MakeTypeTestingExpression& MakeTypeTestingExpression::type(const vl::Ptr<WfType>& value)
	{
		node->type = value;
		return *this;
	}

/***********************************************************************
MakeUnaryExpression
***********************************************************************/

	MakeUnaryExpression& MakeUnaryExpression::op(WfUnaryOperator value)
	{
		node->op = value;
		return *this;
	}

	MakeUnaryExpression& MakeUnaryExpression::operand(const vl::Ptr<WfExpression>& value)
	{
		node->operand = value;
		return *this;
	}

/***********************************************************************
MakeVariableDeclaration
***********************************************************************/

	MakeVariableDeclaration& MakeVariableDeclaration::expression(const vl::Ptr<WfExpression>& value)
	{
		node->expression = value;
		return *this;
	}

	MakeVariableDeclaration& MakeVariableDeclaration::type(const vl::Ptr<WfType>& value)
	{
		node->type = value;
		return *this;
	}

	MakeVariableDeclaration& MakeVariableDeclaration::attributes(const vl::Ptr<WfAttribute>& value)
	{
		node->attributes.Add(value);
		return *this;
	}

	MakeVariableDeclaration& MakeVariableDeclaration::name(const vl::WString& value)
	{
		node->name.value = value;
		return *this;
	}

/***********************************************************************
MakeVariableStatement
***********************************************************************/

	MakeVariableStatement& MakeVariableStatement::variable(const vl::Ptr<WfVariableDeclaration>& value)
	{
		node->variable = value;
		return *this;
	}

/***********************************************************************
MakeVirtualCfeDeclaration
***********************************************************************/

	MakeVirtualCfeDeclaration& MakeVirtualCfeDeclaration::expandedDeclarations(const vl::Ptr<WfDeclaration>& value)
	{
		node->expandedDeclarations.Add(value);
		return *this;
	}

	MakeVirtualCfeDeclaration& MakeVirtualCfeDeclaration::attributes(const vl::Ptr<WfAttribute>& value)
	{
		node->attributes.Add(value);
		return *this;
	}

	MakeVirtualCfeDeclaration& MakeVirtualCfeDeclaration::name(const vl::WString& value)
	{
		node->name.value = value;
		return *this;
	}

/***********************************************************************
MakeVirtualCfeExpression
***********************************************************************/

	MakeVirtualCfeExpression& MakeVirtualCfeExpression::expandedExpression(const vl::Ptr<WfExpression>& value)
	{
		node->expandedExpression = value;
		return *this;
	}

/***********************************************************************
MakeVirtualCseDeclaration
***********************************************************************/

	MakeVirtualCseDeclaration& MakeVirtualCseDeclaration::expandedDeclarations(const vl::Ptr<WfDeclaration>& value)
	{
		node->expandedDeclarations.Add(value);
		return *this;
	}

	MakeVirtualCseDeclaration& MakeVirtualCseDeclaration::attributes(const vl::Ptr<WfAttribute>& value)
	{
		node->attributes.Add(value);
		return *this;
	}

	MakeVirtualCseDeclaration& MakeVirtualCseDeclaration::name(const vl::WString& value)
	{
		node->name.value = value;
		return *this;
	}

/***********************************************************************
MakeVirtualCseExpression
***********************************************************************/

	MakeVirtualCseExpression& MakeVirtualCseExpression::expandedExpression(const vl::Ptr<WfExpression>& value)
	{
		node->expandedExpression = value;
		return *this;
	}

/***********************************************************************
MakeVirtualCseStatement
***********************************************************************/

	MakeVirtualCseStatement& MakeVirtualCseStatement::expandedStatement(const vl::Ptr<WfStatement>& value)
	{
		node->expandedStatement = value;
		return *this;
	}

/***********************************************************************
MakeWhileStatement
***********************************************************************/

	MakeWhileStatement& MakeWhileStatement::condition(const vl::Ptr<WfExpression>& value)
	{
		node->condition = value;
		return *this;
	}

	MakeWhileStatement& MakeWhileStatement::statement(const vl::Ptr<WfStatement>& value)
	{
		node->statement = value;
		return *this;
	}
}
