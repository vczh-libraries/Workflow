/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Workflow
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#ifndef VCZH_WORKFLOW_PARSER_PARSER_SYNTAX
#define VCZH_WORKFLOW_PARSER_PARSER_SYNTAX

#include "Workflow_Assembler.h"
#include "Workflow_Lexer.h"

namespace vl::workflow
{
	enum class ParserStates
	{
		_Type = 0,
		_CtorFragment = 50,
		_LetVariable = 55,
		_VirtualExpression = 60,
		_BeginBoundary = 81,
		_EndBoundary = 85,
		_SetTestingOperator = 89,
		_ExpPrimitive = 94,
		_Exp0 = 231,
		_Exp1 = 246,
		_Exp2 = 252,
		_Exp3 = 264,
		_Exp4 = 279,
		_Exp5 = 288,
		_Exp6 = 309,
		_Exp7 = 315,
		_Exp8 = 321,
		_Exp9 = 327,
		_Exp10 = 333,
		_Exp11 = 341,
		_Expression = 347,
		_SwitchCase = 350,
		_Block = 356,
		_ElseStat = 364,
		_If = 368,
		_ForOperator = 382,
		_VirtualStatement = 387,
		_CoStatement = 406,
		_CoProvider = 418,
		_StateSwitchHead = 423,
		_StateSwitchArgument = 446,
		_StateSwitchCase = 449,
		_StateStatement = 460,
		_Statement = 480,
		_StateInput = 520,
		_StateDecl = 529,
		_StateMachine = 539,
		_Attribute = 546,
		_Namespace = 555,
		_FunctionArgument = 562,
		_FunctionArgumentList = 568,
		_FunctionStat = 574,
		_FunctionBody = 578,
		_FunctionKind = 588,
		_Function = 595,
		_Variable = 602,
		_Event = 611,
		_Property = 620,
		_StaticInit = 633,
		_BaseConstructorCall = 637,
		_ConstructorType = 645,
		_Constructor = 650,
		_Destructor = 661,
		_ClassBody = 665,
		_Class = 674,
		_EnumItemInt = 686,
		_EnumItemA = 689,
		_EnumItemB = 696,
		_Enum = 705,
		_StructMember = 720,
		_Struct = 727,
		_APConfig = 734,
		_AutoPropertyKind = 751,
		_AutoProperty = 758,
		_CastResultInterface = 767,
		_DeclarationCandidates = 777,
		_Declaration = 792,
		_UsingFragment = 796,
		_UsingItem = 800,
		_UsingPath = 804,
		_ModuleBody = 811,
		_Module = 817,
	};

	const wchar_t* ParserRuleName(vl::vint index);
	const wchar_t* ParserStateLabel(vl::vint index);
	extern void WorkflowParserData(vl::stream::IStream& outputStream);

	class Parser
		: public vl::glr::ParserBase<WorkflowTokens, ParserStates, WorkflowAstInsReceiver>
		, protected vl::glr::automaton::IExecutor::ITypeCallback
	{
	protected:
		vl::WString GetClassName(vl::vint32_t classIndex) const override;
		vl::vint32_t FindCommonBaseClass(vl::vint32_t class1, vl::vint32_t class2) const override;
	public:
		Parser();

		vl::Ptr<vl::workflow::WfType> Parse_Type(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<vl::workflow::WfType> Parse_Type(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<vl::workflow::WfExpression> Parse_Expression(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<vl::workflow::WfExpression> Parse_Expression(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<vl::workflow::WfCoProviderStatement> Parse_CoProvider(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<vl::workflow::WfCoProviderStatement> Parse_CoProvider(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<vl::workflow::WfStatement> Parse_Statement(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<vl::workflow::WfStatement> Parse_Statement(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<vl::workflow::WfDeclaration> Parse_Declaration(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<vl::workflow::WfDeclaration> Parse_Declaration(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
		vl::Ptr<vl::workflow::WfModule> Parse_Module(const vl::WString& input, vl::vint codeIndex = -1) const;
		vl::Ptr<vl::workflow::WfModule> Parse_Module(vl::collections::List<vl::regex::RegexToken>& tokens, vl::vint codeIndex = -1) const;
	};
}
#endif