/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Ast
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "WorkflowAst_Json.h"

namespace vl::workflow::json_visitor
{
	void AstVisitor::PrintFields(WfAttachEventExpression* node)
	{
		BeginField(L"event");
		Print(node->event.Obj());
		EndField();
		BeginField(L"function");
		Print(node->function.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfAttribute* node)
	{
		BeginField(L"category");
		WriteToken(node->category);
		EndField();
		BeginField(L"name");
		WriteToken(node->name);
		EndField();
		BeginField(L"value");
		Print(node->value.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfAutoPropertyDeclaration* node)
	{
		BeginField(L"configConst");
		switch (node->configConst)
		{
		case vl::workflow::WfAPConst::Readonly:
			WriteString(L"Readonly");
			break;
		case vl::workflow::WfAPConst::Writable:
			WriteString(L"Writable");
			break;
		default:
			WriteNull();
		}
		EndField();
		BeginField(L"configObserve");
		switch (node->configObserve)
		{
		case vl::workflow::WfAPObserve::NotObservable:
			WriteString(L"NotObservable");
			break;
		case vl::workflow::WfAPObserve::Observable:
			WriteString(L"Observable");
			break;
		default:
			WriteNull();
		}
		EndField();
		BeginField(L"expression");
		Print(node->expression.Obj());
		EndField();
		BeginField(L"functionKind");
		switch (node->functionKind)
		{
		case vl::workflow::WfFunctionKind::Normal:
			WriteString(L"Normal");
			break;
		case vl::workflow::WfFunctionKind::Override:
			WriteString(L"Override");
			break;
		case vl::workflow::WfFunctionKind::Static:
			WriteString(L"Static");
			break;
		default:
			WriteNull();
		}
		EndField();
		BeginField(L"type");
		Print(node->type.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfBaseConstructorCall* node)
	{
		BeginField(L"arguments");
		BeginArray();
		for (auto&& listItem : node->arguments)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(L"type");
		Print(node->type.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfBinaryExpression* node)
	{
		BeginField(L"first");
		Print(node->first.Obj());
		EndField();
		BeginField(L"op");
		switch (node->op)
		{
		case vl::workflow::WfBinaryOperator::Add:
			WriteString(L"Add");
			break;
		case vl::workflow::WfBinaryOperator::And:
			WriteString(L"And");
			break;
		case vl::workflow::WfBinaryOperator::Assign:
			WriteString(L"Assign");
			break;
		case vl::workflow::WfBinaryOperator::Div:
			WriteString(L"Div");
			break;
		case vl::workflow::WfBinaryOperator::EQ:
			WriteString(L"EQ");
			break;
		case vl::workflow::WfBinaryOperator::Exp:
			WriteString(L"Exp");
			break;
		case vl::workflow::WfBinaryOperator::FailedThen:
			WriteString(L"FailedThen");
			break;
		case vl::workflow::WfBinaryOperator::FlagAnd:
			WriteString(L"FlagAnd");
			break;
		case vl::workflow::WfBinaryOperator::FlagOr:
			WriteString(L"FlagOr");
			break;
		case vl::workflow::WfBinaryOperator::GE:
			WriteString(L"GE");
			break;
		case vl::workflow::WfBinaryOperator::GT:
			WriteString(L"GT");
			break;
		case vl::workflow::WfBinaryOperator::Index:
			WriteString(L"Index");
			break;
		case vl::workflow::WfBinaryOperator::LE:
			WriteString(L"LE");
			break;
		case vl::workflow::WfBinaryOperator::LT:
			WriteString(L"LT");
			break;
		case vl::workflow::WfBinaryOperator::Mod:
			WriteString(L"Mod");
			break;
		case vl::workflow::WfBinaryOperator::Mul:
			WriteString(L"Mul");
			break;
		case vl::workflow::WfBinaryOperator::NE:
			WriteString(L"NE");
			break;
		case vl::workflow::WfBinaryOperator::Or:
			WriteString(L"Or");
			break;
		case vl::workflow::WfBinaryOperator::Shl:
			WriteString(L"Shl");
			break;
		case vl::workflow::WfBinaryOperator::Shr:
			WriteString(L"Shr");
			break;
		case vl::workflow::WfBinaryOperator::Sub:
			WriteString(L"Sub");
			break;
		case vl::workflow::WfBinaryOperator::Xor:
			WriteString(L"Xor");
			break;
		default:
			WriteNull();
		}
		EndField();
		BeginField(L"second");
		Print(node->second.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfBindExpression* node)
	{
		BeginField(L"expression");
		Print(node->expression.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfBlockStatement* node)
	{
		BeginField(L"endLabel");
		WriteToken(node->endLabel);
		EndField();
		BeginField(L"statements");
		BeginArray();
		for (auto&& listItem : node->statements)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
	}
	void AstVisitor::PrintFields(WfBreakStatement* node)
	{
	}
	void AstVisitor::PrintFields(WfCallExpression* node)
	{
		BeginField(L"arguments");
		BeginArray();
		for (auto&& listItem : node->arguments)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(L"function");
		Print(node->function.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfCastResultInterfaceDeclaration* node)
	{
		BeginField(L"baseType");
		Print(node->baseType.Obj());
		EndField();
		BeginField(L"elementType");
		Print(node->elementType.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfChildExpression* node)
	{
		BeginField(L"name");
		WriteToken(node->name);
		EndField();
		BeginField(L"parent");
		Print(node->parent.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfChildType* node)
	{
		BeginField(L"name");
		WriteToken(node->name);
		EndField();
		BeginField(L"parent");
		Print(node->parent.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfClassDeclaration* node)
	{
		BeginField(L"baseTypes");
		BeginArray();
		for (auto&& listItem : node->baseTypes)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(L"constructorType");
		switch (node->constructorType)
		{
		case vl::workflow::WfConstructorType::RawPtr:
			WriteString(L"RawPtr");
			break;
		case vl::workflow::WfConstructorType::SharedPtr:
			WriteString(L"SharedPtr");
			break;
		case vl::workflow::WfConstructorType::Undefined:
			WriteString(L"Undefined");
			break;
		default:
			WriteNull();
		}
		EndField();
		BeginField(L"declarations");
		BeginArray();
		for (auto&& listItem : node->declarations)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(L"kind");
		switch (node->kind)
		{
		case vl::workflow::WfClassKind::Class:
			WriteString(L"Class");
			break;
		case vl::workflow::WfClassKind::Interface:
			WriteString(L"Interface");
			break;
		default:
			WriteNull();
		}
		EndField();
	}
	void AstVisitor::PrintFields(WfCoOperatorExpression* node)
	{
		BeginField(L"name");
		WriteToken(node->name);
		EndField();
	}
	void AstVisitor::PrintFields(WfCoOperatorStatement* node)
	{
		BeginField(L"arguments");
		BeginArray();
		for (auto&& listItem : node->arguments)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(L"opName");
		WriteToken(node->opName);
		EndField();
		BeginField(L"varName");
		WriteToken(node->varName);
		EndField();
	}
	void AstVisitor::PrintFields(WfCoPauseStatement* node)
	{
		BeginField(L"statement");
		Print(node->statement.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfCoProviderStatement* node)
	{
		BeginField(L"name");
		WriteToken(node->name);
		EndField();
		BeginField(L"statement");
		Print(node->statement.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfConstructorArgument* node)
	{
		BeginField(L"key");
		Print(node->key.Obj());
		EndField();
		BeginField(L"value");
		Print(node->value.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfConstructorDeclaration* node)
	{
		BeginField(L"arguments");
		BeginArray();
		for (auto&& listItem : node->arguments)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(L"baseConstructorCalls");
		BeginArray();
		for (auto&& listItem : node->baseConstructorCalls)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(L"constructorType");
		switch (node->constructorType)
		{
		case vl::workflow::WfConstructorType::RawPtr:
			WriteString(L"RawPtr");
			break;
		case vl::workflow::WfConstructorType::SharedPtr:
			WriteString(L"SharedPtr");
			break;
		case vl::workflow::WfConstructorType::Undefined:
			WriteString(L"Undefined");
			break;
		default:
			WriteNull();
		}
		EndField();
		BeginField(L"statement");
		Print(node->statement.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfConstructorExpression* node)
	{
		BeginField(L"arguments");
		BeginArray();
		for (auto&& listItem : node->arguments)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
	}
	void AstVisitor::PrintFields(WfContinueStatement* node)
	{
	}
	void AstVisitor::PrintFields(WfCoroutineStatement* node)
	{
	}
	void AstVisitor::PrintFields(WfDeclaration* node)
	{
		BeginField(L"attributes");
		BeginArray();
		for (auto&& listItem : node->attributes)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(L"name");
		WriteToken(node->name);
		EndField();
	}
	void AstVisitor::PrintFields(WfDeleteStatement* node)
	{
		BeginField(L"expression");
		Print(node->expression.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfDestructorDeclaration* node)
	{
		BeginField(L"statement");
		Print(node->statement.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfDetachEventExpression* node)
	{
		BeginField(L"event");
		Print(node->event.Obj());
		EndField();
		BeginField(L"handler");
		Print(node->handler.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfEnumDeclaration* node)
	{
		BeginField(L"items");
		BeginArray();
		for (auto&& listItem : node->items)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(L"kind");
		switch (node->kind)
		{
		case vl::workflow::WfEnumKind::Flag:
			WriteString(L"Flag");
			break;
		case vl::workflow::WfEnumKind::Normal:
			WriteString(L"Normal");
			break;
		default:
			WriteNull();
		}
		EndField();
	}
	void AstVisitor::PrintFields(WfEnumItem* node)
	{
		BeginField(L"attributes");
		BeginArray();
		for (auto&& listItem : node->attributes)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(L"intersections");
		BeginArray();
		for (auto&& listItem : node->intersections)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(L"kind");
		switch (node->kind)
		{
		case vl::workflow::WfEnumItemKind::Constant:
			WriteString(L"Constant");
			break;
		case vl::workflow::WfEnumItemKind::Intersection:
			WriteString(L"Intersection");
			break;
		default:
			WriteNull();
		}
		EndField();
		BeginField(L"name");
		WriteToken(node->name);
		EndField();
		BeginField(L"number");
		WriteToken(node->number);
		EndField();
	}
	void AstVisitor::PrintFields(WfEnumItemIntersection* node)
	{
		BeginField(L"name");
		WriteToken(node->name);
		EndField();
	}
	void AstVisitor::PrintFields(WfEnumerableType* node)
	{
		BeginField(L"element");
		Print(node->element.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfEventDeclaration* node)
	{
		BeginField(L"arguments");
		BeginArray();
		for (auto&& listItem : node->arguments)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
	}
	void AstVisitor::PrintFields(WfExpectedTypeCastExpression* node)
	{
		BeginField(L"expression");
		Print(node->expression.Obj());
		EndField();
		BeginField(L"strategy");
		switch (node->strategy)
		{
		case vl::workflow::WfTypeCastingStrategy::Strong:
			WriteString(L"Strong");
			break;
		case vl::workflow::WfTypeCastingStrategy::Weak:
			WriteString(L"Weak");
			break;
		default:
			WriteNull();
		}
		EndField();
	}
	void AstVisitor::PrintFields(WfExpression* node)
	{
	}
	void AstVisitor::PrintFields(WfExpressionStatement* node)
	{
		BeginField(L"expression");
		Print(node->expression.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfFloatingExpression* node)
	{
		BeginField(L"value");
		WriteToken(node->value);
		EndField();
	}
	void AstVisitor::PrintFields(WfForEachStatement* node)
	{
		BeginField(L"collection");
		Print(node->collection.Obj());
		EndField();
		BeginField(L"direction");
		switch (node->direction)
		{
		case vl::workflow::WfForEachDirection::Normal:
			WriteString(L"Normal");
			break;
		case vl::workflow::WfForEachDirection::Reversed:
			WriteString(L"Reversed");
			break;
		default:
			WriteNull();
		}
		EndField();
		BeginField(L"name");
		WriteToken(node->name);
		EndField();
		BeginField(L"statement");
		Print(node->statement.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfFormatExpression* node)
	{
		BeginField(L"value");
		WriteToken(node->value);
		EndField();
	}
	void AstVisitor::PrintFields(WfFunctionArgument* node)
	{
		BeginField(L"attributes");
		BeginArray();
		for (auto&& listItem : node->attributes)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(L"name");
		WriteToken(node->name);
		EndField();
		BeginField(L"type");
		Print(node->type.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfFunctionDeclaration* node)
	{
		BeginField(L"anonymity");
		switch (node->anonymity)
		{
		case vl::workflow::WfFunctionAnonymity::Anonymous:
			WriteString(L"Anonymous");
			break;
		case vl::workflow::WfFunctionAnonymity::Named:
			WriteString(L"Named");
			break;
		default:
			WriteNull();
		}
		EndField();
		BeginField(L"arguments");
		BeginArray();
		for (auto&& listItem : node->arguments)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(L"functionKind");
		switch (node->functionKind)
		{
		case vl::workflow::WfFunctionKind::Normal:
			WriteString(L"Normal");
			break;
		case vl::workflow::WfFunctionKind::Override:
			WriteString(L"Override");
			break;
		case vl::workflow::WfFunctionKind::Static:
			WriteString(L"Static");
			break;
		default:
			WriteNull();
		}
		EndField();
		BeginField(L"returnType");
		Print(node->returnType.Obj());
		EndField();
		BeginField(L"statement");
		Print(node->statement.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfFunctionExpression* node)
	{
		BeginField(L"function");
		Print(node->function.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfFunctionType* node)
	{
		BeginField(L"arguments");
		BeginArray();
		for (auto&& listItem : node->arguments)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(L"result");
		Print(node->result.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfGotoStatement* node)
	{
		BeginField(L"label");
		WriteToken(node->label);
		EndField();
	}
	void AstVisitor::PrintFields(WfIfExpression* node)
	{
		BeginField(L"condition");
		Print(node->condition.Obj());
		EndField();
		BeginField(L"falseBranch");
		Print(node->falseBranch.Obj());
		EndField();
		BeginField(L"trueBranch");
		Print(node->trueBranch.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfIfStatement* node)
	{
		BeginField(L"expression");
		Print(node->expression.Obj());
		EndField();
		BeginField(L"falseBranch");
		Print(node->falseBranch.Obj());
		EndField();
		BeginField(L"name");
		WriteToken(node->name);
		EndField();
		BeginField(L"trueBranch");
		Print(node->trueBranch.Obj());
		EndField();
		BeginField(L"type");
		Print(node->type.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfInferExpression* node)
	{
		BeginField(L"expression");
		Print(node->expression.Obj());
		EndField();
		BeginField(L"type");
		Print(node->type.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfIntegerExpression* node)
	{
		BeginField(L"value");
		WriteToken(node->value);
		EndField();
	}
	void AstVisitor::PrintFields(WfLetExpression* node)
	{
		BeginField(L"expression");
		Print(node->expression.Obj());
		EndField();
		BeginField(L"variables");
		BeginArray();
		for (auto&& listItem : node->variables)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
	}
	void AstVisitor::PrintFields(WfLetVariable* node)
	{
		BeginField(L"name");
		WriteToken(node->name);
		EndField();
		BeginField(L"value");
		Print(node->value.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfLiteralExpression* node)
	{
		BeginField(L"value");
		switch (node->value)
		{
		case vl::workflow::WfLiteralValue::False:
			WriteString(L"False");
			break;
		case vl::workflow::WfLiteralValue::Null:
			WriteString(L"Null");
			break;
		case vl::workflow::WfLiteralValue::True:
			WriteString(L"True");
			break;
		default:
			WriteNull();
		}
		EndField();
	}
	void AstVisitor::PrintFields(WfMapType* node)
	{
		BeginField(L"key");
		Print(node->key.Obj());
		EndField();
		BeginField(L"value");
		Print(node->value.Obj());
		EndField();
		BeginField(L"writability");
		switch (node->writability)
		{
		case vl::workflow::WfMapWritability::Readonly:
			WriteString(L"Readonly");
			break;
		case vl::workflow::WfMapWritability::Writable:
			WriteString(L"Writable");
			break;
		default:
			WriteNull();
		}
		EndField();
	}
	void AstVisitor::PrintFields(WfMemberExpression* node)
	{
		BeginField(L"name");
		WriteToken(node->name);
		EndField();
		BeginField(L"parent");
		Print(node->parent.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfMixinCastExpression* node)
	{
		BeginField(L"expression");
		Print(node->expression.Obj());
		EndField();
		BeginField(L"type");
		Print(node->type.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfModule* node)
	{
		BeginField(L"declarations");
		BeginArray();
		for (auto&& listItem : node->declarations)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(L"moduleType");
		switch (node->moduleType)
		{
		case vl::workflow::WfModuleType::Module:
			WriteString(L"Module");
			break;
		case vl::workflow::WfModuleType::Unit:
			WriteString(L"Unit");
			break;
		default:
			WriteNull();
		}
		EndField();
		BeginField(L"name");
		WriteToken(node->name);
		EndField();
		BeginField(L"paths");
		BeginArray();
		for (auto&& listItem : node->paths)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
	}
	void AstVisitor::PrintFields(WfModuleUsingFragment* node)
	{
	}
	void AstVisitor::PrintFields(WfModuleUsingItem* node)
	{
		BeginField(L"fragments");
		BeginArray();
		for (auto&& listItem : node->fragments)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
	}
	void AstVisitor::PrintFields(WfModuleUsingNameFragment* node)
	{
		BeginField(L"name");
		WriteToken(node->name);
		EndField();
	}
	void AstVisitor::PrintFields(WfModuleUsingPath* node)
	{
		BeginField(L"items");
		BeginArray();
		for (auto&& listItem : node->items)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
	}
	void AstVisitor::PrintFields(WfModuleUsingWildCardFragment* node)
	{
	}
	void AstVisitor::PrintFields(WfNamespaceDeclaration* node)
	{
		BeginField(L"declarations");
		BeginArray();
		for (auto&& listItem : node->declarations)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
	}
	void AstVisitor::PrintFields(WfNewClassExpression* node)
	{
		BeginField(L"arguments");
		BeginArray();
		for (auto&& listItem : node->arguments)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(L"type");
		Print(node->type.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfNewCoroutineExpression* node)
	{
		BeginField(L"name");
		WriteToken(node->name);
		EndField();
		BeginField(L"statement");
		Print(node->statement.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfNewInterfaceExpression* node)
	{
		BeginField(L"declarations");
		BeginArray();
		for (auto&& listItem : node->declarations)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(L"type");
		Print(node->type.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfNullableType* node)
	{
		BeginField(L"element");
		Print(node->element.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfObservableListType* node)
	{
		BeginField(L"element");
		Print(node->element.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfObserveExpression* node)
	{
		BeginField(L"events");
		BeginArray();
		for (auto&& listItem : node->events)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(L"expression");
		Print(node->expression.Obj());
		EndField();
		BeginField(L"name");
		WriteToken(node->name);
		EndField();
		BeginField(L"observeType");
		switch (node->observeType)
		{
		case vl::workflow::WfObserveType::ExtendedObserve:
			WriteString(L"ExtendedObserve");
			break;
		case vl::workflow::WfObserveType::SimpleObserve:
			WriteString(L"SimpleObserve");
			break;
		default:
			WriteNull();
		}
		EndField();
		BeginField(L"parent");
		Print(node->parent.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfOrderedLambdaExpression* node)
	{
		BeginField(L"body");
		Print(node->body.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfOrderedNameExpression* node)
	{
		BeginField(L"name");
		WriteToken(node->name);
		EndField();
	}
	void AstVisitor::PrintFields(WfPredefinedType* node)
	{
		BeginField(L"name");
		switch (node->name)
		{
		case vl::workflow::WfPredefinedTypeName::Bool:
			WriteString(L"Bool");
			break;
		case vl::workflow::WfPredefinedTypeName::Char:
			WriteString(L"Char");
			break;
		case vl::workflow::WfPredefinedTypeName::Double:
			WriteString(L"Double");
			break;
		case vl::workflow::WfPredefinedTypeName::Float:
			WriteString(L"Float");
			break;
		case vl::workflow::WfPredefinedTypeName::Int:
			WriteString(L"Int");
			break;
		case vl::workflow::WfPredefinedTypeName::Interface:
			WriteString(L"Interface");
			break;
		case vl::workflow::WfPredefinedTypeName::Object:
			WriteString(L"Object");
			break;
		case vl::workflow::WfPredefinedTypeName::String:
			WriteString(L"String");
			break;
		case vl::workflow::WfPredefinedTypeName::UInt:
			WriteString(L"UInt");
			break;
		case vl::workflow::WfPredefinedTypeName::Void:
			WriteString(L"Void");
			break;
		default:
			WriteNull();
		}
		EndField();
	}
	void AstVisitor::PrintFields(WfPropertyDeclaration* node)
	{
		BeginField(L"getter");
		WriteToken(node->getter);
		EndField();
		BeginField(L"setter");
		WriteToken(node->setter);
		EndField();
		BeginField(L"type");
		Print(node->type.Obj());
		EndField();
		BeginField(L"valueChangedEvent");
		WriteToken(node->valueChangedEvent);
		EndField();
	}
	void AstVisitor::PrintFields(WfRaiseExceptionStatement* node)
	{
		BeginField(L"expression");
		Print(node->expression.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfRangeExpression* node)
	{
		BeginField(L"begin");
		Print(node->begin.Obj());
		EndField();
		BeginField(L"beginBoundary");
		switch (node->beginBoundary)
		{
		case vl::workflow::WfRangeBoundary::Exclusive:
			WriteString(L"Exclusive");
			break;
		case vl::workflow::WfRangeBoundary::Inclusive:
			WriteString(L"Inclusive");
			break;
		default:
			WriteNull();
		}
		EndField();
		BeginField(L"end");
		Print(node->end.Obj());
		EndField();
		BeginField(L"endBoundary");
		switch (node->endBoundary)
		{
		case vl::workflow::WfRangeBoundary::Exclusive:
			WriteString(L"Exclusive");
			break;
		case vl::workflow::WfRangeBoundary::Inclusive:
			WriteString(L"Inclusive");
			break;
		default:
			WriteNull();
		}
		EndField();
	}
	void AstVisitor::PrintFields(WfRawPointerType* node)
	{
		BeginField(L"element");
		Print(node->element.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfReferenceExpression* node)
	{
		BeginField(L"name");
		WriteToken(node->name);
		EndField();
	}
	void AstVisitor::PrintFields(WfReferenceType* node)
	{
		BeginField(L"name");
		WriteToken(node->name);
		EndField();
	}
	void AstVisitor::PrintFields(WfReturnStatement* node)
	{
		BeginField(L"expression");
		Print(node->expression.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfSetTestingExpression* node)
	{
		BeginField(L"collection");
		Print(node->collection.Obj());
		EndField();
		BeginField(L"element");
		Print(node->element.Obj());
		EndField();
		BeginField(L"test");
		switch (node->test)
		{
		case vl::workflow::WfSetTesting::In:
			WriteString(L"In");
			break;
		case vl::workflow::WfSetTesting::NotIn:
			WriteString(L"NotIn");
			break;
		default:
			WriteNull();
		}
		EndField();
	}
	void AstVisitor::PrintFields(WfSharedPointerType* node)
	{
		BeginField(L"element");
		Print(node->element.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfStateDeclaration* node)
	{
		BeginField(L"arguments");
		BeginArray();
		for (auto&& listItem : node->arguments)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(L"name");
		WriteToken(node->name);
		EndField();
		BeginField(L"statement");
		Print(node->statement.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfStateInput* node)
	{
		BeginField(L"arguments");
		BeginArray();
		for (auto&& listItem : node->arguments)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(L"name");
		WriteToken(node->name);
		EndField();
	}
	void AstVisitor::PrintFields(WfStateInvokeStatement* node)
	{
		BeginField(L"arguments");
		BeginArray();
		for (auto&& listItem : node->arguments)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(L"name");
		WriteToken(node->name);
		EndField();
		BeginField(L"type");
		switch (node->type)
		{
		case vl::workflow::WfStateInvokeType::Goto:
			WriteString(L"Goto");
			break;
		case vl::workflow::WfStateInvokeType::Push:
			WriteString(L"Push");
			break;
		default:
			WriteNull();
		}
		EndField();
	}
	void AstVisitor::PrintFields(WfStateMachineDeclaration* node)
	{
		BeginField(L"inputs");
		BeginArray();
		for (auto&& listItem : node->inputs)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(L"states");
		BeginArray();
		for (auto&& listItem : node->states)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
	}
	void AstVisitor::PrintFields(WfStateMachineStatement* node)
	{
	}
	void AstVisitor::PrintFields(WfStateSwitchArgument* node)
	{
		BeginField(L"name");
		WriteToken(node->name);
		EndField();
	}
	void AstVisitor::PrintFields(WfStateSwitchCase* node)
	{
		BeginField(L"arguments");
		BeginArray();
		for (auto&& listItem : node->arguments)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(L"name");
		WriteToken(node->name);
		EndField();
		BeginField(L"statement");
		Print(node->statement.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfStateSwitchStatement* node)
	{
		BeginField(L"caseBranches");
		BeginArray();
		for (auto&& listItem : node->caseBranches)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(L"type");
		switch (node->type)
		{
		case vl::workflow::WfStateSwitchType::Default:
			WriteString(L"Default");
			break;
		case vl::workflow::WfStateSwitchType::Ignore:
			WriteString(L"Ignore");
			break;
		case vl::workflow::WfStateSwitchType::IgnoreAndReturn:
			WriteString(L"IgnoreAndReturn");
			break;
		case vl::workflow::WfStateSwitchType::Pass:
			WriteString(L"Pass");
			break;
		case vl::workflow::WfStateSwitchType::PassAndReturn:
			WriteString(L"PassAndReturn");
			break;
		default:
			WriteNull();
		}
		EndField();
	}
	void AstVisitor::PrintFields(WfStatement* node)
	{
	}
	void AstVisitor::PrintFields(WfStringExpression* node)
	{
		BeginField(L"value");
		WriteToken(node->value);
		EndField();
	}
	void AstVisitor::PrintFields(WfStructDeclaration* node)
	{
		BeginField(L"members");
		BeginArray();
		for (auto&& listItem : node->members)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
	}
	void AstVisitor::PrintFields(WfStructMember* node)
	{
		BeginField(L"attributes");
		BeginArray();
		for (auto&& listItem : node->attributes)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(L"name");
		WriteToken(node->name);
		EndField();
		BeginField(L"type");
		Print(node->type.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfSwitchCase* node)
	{
		BeginField(L"expression");
		Print(node->expression.Obj());
		EndField();
		BeginField(L"statement");
		Print(node->statement.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfSwitchStatement* node)
	{
		BeginField(L"caseBranches");
		BeginArray();
		for (auto&& listItem : node->caseBranches)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(L"defaultBranch");
		Print(node->defaultBranch.Obj());
		EndField();
		BeginField(L"expression");
		Print(node->expression.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfThisExpression* node)
	{
	}
	void AstVisitor::PrintFields(WfTopQualifiedExpression* node)
	{
		BeginField(L"name");
		WriteToken(node->name);
		EndField();
	}
	void AstVisitor::PrintFields(WfTopQualifiedType* node)
	{
		BeginField(L"name");
		WriteToken(node->name);
		EndField();
	}
	void AstVisitor::PrintFields(WfTryStatement* node)
	{
		BeginField(L"catchStatement");
		Print(node->catchStatement.Obj());
		EndField();
		BeginField(L"finallyStatement");
		Print(node->finallyStatement.Obj());
		EndField();
		BeginField(L"name");
		WriteToken(node->name);
		EndField();
		BeginField(L"protectedStatement");
		Print(node->protectedStatement.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfType* node)
	{
	}
	void AstVisitor::PrintFields(WfTypeCastingExpression* node)
	{
		BeginField(L"expression");
		Print(node->expression.Obj());
		EndField();
		BeginField(L"strategy");
		switch (node->strategy)
		{
		case vl::workflow::WfTypeCastingStrategy::Strong:
			WriteString(L"Strong");
			break;
		case vl::workflow::WfTypeCastingStrategy::Weak:
			WriteString(L"Weak");
			break;
		default:
			WriteNull();
		}
		EndField();
		BeginField(L"type");
		Print(node->type.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfTypeOfExpressionExpression* node)
	{
		BeginField(L"expression");
		Print(node->expression.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfTypeOfTypeExpression* node)
	{
		BeginField(L"type");
		Print(node->type.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfTypeTestingExpression* node)
	{
		BeginField(L"expression");
		Print(node->expression.Obj());
		EndField();
		BeginField(L"test");
		switch (node->test)
		{
		case vl::workflow::WfTypeTesting::IsNotNull:
			WriteString(L"IsNotNull");
			break;
		case vl::workflow::WfTypeTesting::IsNotType:
			WriteString(L"IsNotType");
			break;
		case vl::workflow::WfTypeTesting::IsNull:
			WriteString(L"IsNull");
			break;
		case vl::workflow::WfTypeTesting::IsType:
			WriteString(L"IsType");
			break;
		default:
			WriteNull();
		}
		EndField();
		BeginField(L"type");
		Print(node->type.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfUnaryExpression* node)
	{
		BeginField(L"op");
		switch (node->op)
		{
		case vl::workflow::WfUnaryOperator::Negative:
			WriteString(L"Negative");
			break;
		case vl::workflow::WfUnaryOperator::Not:
			WriteString(L"Not");
			break;
		case vl::workflow::WfUnaryOperator::Positive:
			WriteString(L"Positive");
			break;
		default:
			WriteNull();
		}
		EndField();
		BeginField(L"operand");
		Print(node->operand.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfVariableDeclaration* node)
	{
		BeginField(L"expression");
		Print(node->expression.Obj());
		EndField();
		BeginField(L"type");
		Print(node->type.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfVariableStatement* node)
	{
		BeginField(L"variable");
		Print(node->variable.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfVirtualCfeDeclaration* node)
	{
		BeginField(L"expandedDeclarations");
		BeginArray();
		for (auto&& listItem : node->expandedDeclarations)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
	}
	void AstVisitor::PrintFields(WfVirtualCfeExpression* node)
	{
		BeginField(L"expandedExpression");
		Print(node->expandedExpression.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfVirtualCseDeclaration* node)
	{
		BeginField(L"expandedDeclarations");
		BeginArray();
		for (auto&& listItem : node->expandedDeclarations)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
	}
	void AstVisitor::PrintFields(WfVirtualCseExpression* node)
	{
		BeginField(L"expandedExpression");
		Print(node->expandedExpression.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfVirtualCseStatement* node)
	{
		BeginField(L"expandedStatement");
		Print(node->expandedStatement.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfWhileStatement* node)
	{
		BeginField(L"condition");
		Print(node->condition.Obj());
		EndField();
		BeginField(L"statement");
		Print(node->statement.Obj());
		EndField();
	}

	void AstVisitor::Visit(WfPredefinedType* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"PredefinedType", node);
		PrintFields(static_cast<WfType*>(node));
		PrintFields(static_cast<WfPredefinedType*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfTopQualifiedType* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"TopQualifiedType", node);
		PrintFields(static_cast<WfType*>(node));
		PrintFields(static_cast<WfTopQualifiedType*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfReferenceType* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"ReferenceType", node);
		PrintFields(static_cast<WfType*>(node));
		PrintFields(static_cast<WfReferenceType*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfRawPointerType* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"RawPointerType", node);
		PrintFields(static_cast<WfType*>(node));
		PrintFields(static_cast<WfRawPointerType*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfSharedPointerType* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"SharedPointerType", node);
		PrintFields(static_cast<WfType*>(node));
		PrintFields(static_cast<WfSharedPointerType*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfNullableType* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"NullableType", node);
		PrintFields(static_cast<WfType*>(node));
		PrintFields(static_cast<WfNullableType*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfEnumerableType* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"EnumerableType", node);
		PrintFields(static_cast<WfType*>(node));
		PrintFields(static_cast<WfEnumerableType*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfMapType* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"MapType", node);
		PrintFields(static_cast<WfType*>(node));
		PrintFields(static_cast<WfMapType*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfObservableListType* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"ObservableListType", node);
		PrintFields(static_cast<WfType*>(node));
		PrintFields(static_cast<WfObservableListType*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfFunctionType* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"FunctionType", node);
		PrintFields(static_cast<WfType*>(node));
		PrintFields(static_cast<WfFunctionType*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfChildType* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"ChildType", node);
		PrintFields(static_cast<WfType*>(node));
		PrintFields(static_cast<WfChildType*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfThisExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"ThisExpression", node);
		PrintFields(static_cast<WfExpression*>(node));
		PrintFields(static_cast<WfThisExpression*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfTopQualifiedExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"TopQualifiedExpression", node);
		PrintFields(static_cast<WfExpression*>(node));
		PrintFields(static_cast<WfTopQualifiedExpression*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfReferenceExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"ReferenceExpression", node);
		PrintFields(static_cast<WfExpression*>(node));
		PrintFields(static_cast<WfReferenceExpression*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfOrderedNameExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"OrderedNameExpression", node);
		PrintFields(static_cast<WfExpression*>(node));
		PrintFields(static_cast<WfOrderedNameExpression*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfOrderedLambdaExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"OrderedLambdaExpression", node);
		PrintFields(static_cast<WfExpression*>(node));
		PrintFields(static_cast<WfOrderedLambdaExpression*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfMemberExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"MemberExpression", node);
		PrintFields(static_cast<WfExpression*>(node));
		PrintFields(static_cast<WfMemberExpression*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfChildExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"ChildExpression", node);
		PrintFields(static_cast<WfExpression*>(node));
		PrintFields(static_cast<WfChildExpression*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfLiteralExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"LiteralExpression", node);
		PrintFields(static_cast<WfExpression*>(node));
		PrintFields(static_cast<WfLiteralExpression*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfFloatingExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"FloatingExpression", node);
		PrintFields(static_cast<WfExpression*>(node));
		PrintFields(static_cast<WfFloatingExpression*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfIntegerExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"IntegerExpression", node);
		PrintFields(static_cast<WfExpression*>(node));
		PrintFields(static_cast<WfIntegerExpression*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfStringExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"StringExpression", node);
		PrintFields(static_cast<WfExpression*>(node));
		PrintFields(static_cast<WfStringExpression*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfUnaryExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"UnaryExpression", node);
		PrintFields(static_cast<WfExpression*>(node));
		PrintFields(static_cast<WfUnaryExpression*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfBinaryExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"BinaryExpression", node);
		PrintFields(static_cast<WfExpression*>(node));
		PrintFields(static_cast<WfBinaryExpression*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfLetExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"LetExpression", node);
		PrintFields(static_cast<WfExpression*>(node));
		PrintFields(static_cast<WfLetExpression*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfIfExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"IfExpression", node);
		PrintFields(static_cast<WfExpression*>(node));
		PrintFields(static_cast<WfIfExpression*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfRangeExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"RangeExpression", node);
		PrintFields(static_cast<WfExpression*>(node));
		PrintFields(static_cast<WfRangeExpression*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfSetTestingExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"SetTestingExpression", node);
		PrintFields(static_cast<WfExpression*>(node));
		PrintFields(static_cast<WfSetTestingExpression*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfConstructorExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"ConstructorExpression", node);
		PrintFields(static_cast<WfExpression*>(node));
		PrintFields(static_cast<WfConstructorExpression*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfInferExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"InferExpression", node);
		PrintFields(static_cast<WfExpression*>(node));
		PrintFields(static_cast<WfInferExpression*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfTypeCastingExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"TypeCastingExpression", node);
		PrintFields(static_cast<WfExpression*>(node));
		PrintFields(static_cast<WfTypeCastingExpression*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfTypeTestingExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"TypeTestingExpression", node);
		PrintFields(static_cast<WfExpression*>(node));
		PrintFields(static_cast<WfTypeTestingExpression*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfTypeOfTypeExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"TypeOfTypeExpression", node);
		PrintFields(static_cast<WfExpression*>(node));
		PrintFields(static_cast<WfTypeOfTypeExpression*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfTypeOfExpressionExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"TypeOfExpressionExpression", node);
		PrintFields(static_cast<WfExpression*>(node));
		PrintFields(static_cast<WfTypeOfExpressionExpression*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfAttachEventExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"AttachEventExpression", node);
		PrintFields(static_cast<WfExpression*>(node));
		PrintFields(static_cast<WfAttachEventExpression*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfDetachEventExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"DetachEventExpression", node);
		PrintFields(static_cast<WfExpression*>(node));
		PrintFields(static_cast<WfDetachEventExpression*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfObserveExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"ObserveExpression", node);
		PrintFields(static_cast<WfExpression*>(node));
		PrintFields(static_cast<WfObserveExpression*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfCallExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"CallExpression", node);
		PrintFields(static_cast<WfExpression*>(node));
		PrintFields(static_cast<WfCallExpression*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfFunctionExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"FunctionExpression", node);
		PrintFields(static_cast<WfExpression*>(node));
		PrintFields(static_cast<WfFunctionExpression*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfNewClassExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"NewClassExpression", node);
		PrintFields(static_cast<WfExpression*>(node));
		PrintFields(static_cast<WfNewClassExpression*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfNewInterfaceExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"NewInterfaceExpression", node);
		PrintFields(static_cast<WfExpression*>(node));
		PrintFields(static_cast<WfNewInterfaceExpression*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfVirtualCfeExpression* node)
	{
		node->Accept(static_cast<WfVirtualCfeExpression::IVisitor*>(this));
	}

	void AstVisitor::Visit(WfVirtualCseExpression* node)
	{
		node->Accept(static_cast<WfVirtualCseExpression::IVisitor*>(this));
	}

	void AstVisitor::Visit(WfBreakStatement* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"BreakStatement", node);
		PrintFields(static_cast<WfStatement*>(node));
		PrintFields(static_cast<WfBreakStatement*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfContinueStatement* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"ContinueStatement", node);
		PrintFields(static_cast<WfStatement*>(node));
		PrintFields(static_cast<WfContinueStatement*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfReturnStatement* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"ReturnStatement", node);
		PrintFields(static_cast<WfStatement*>(node));
		PrintFields(static_cast<WfReturnStatement*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfDeleteStatement* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"DeleteStatement", node);
		PrintFields(static_cast<WfStatement*>(node));
		PrintFields(static_cast<WfDeleteStatement*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfRaiseExceptionStatement* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"RaiseExceptionStatement", node);
		PrintFields(static_cast<WfStatement*>(node));
		PrintFields(static_cast<WfRaiseExceptionStatement*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfIfStatement* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"IfStatement", node);
		PrintFields(static_cast<WfStatement*>(node));
		PrintFields(static_cast<WfIfStatement*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfWhileStatement* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"WhileStatement", node);
		PrintFields(static_cast<WfStatement*>(node));
		PrintFields(static_cast<WfWhileStatement*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfTryStatement* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"TryStatement", node);
		PrintFields(static_cast<WfStatement*>(node));
		PrintFields(static_cast<WfTryStatement*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfBlockStatement* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"BlockStatement", node);
		PrintFields(static_cast<WfStatement*>(node));
		PrintFields(static_cast<WfBlockStatement*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfGotoStatement* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"GotoStatement", node);
		PrintFields(static_cast<WfStatement*>(node));
		PrintFields(static_cast<WfGotoStatement*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfVariableStatement* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"VariableStatement", node);
		PrintFields(static_cast<WfStatement*>(node));
		PrintFields(static_cast<WfVariableStatement*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfExpressionStatement* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"ExpressionStatement", node);
		PrintFields(static_cast<WfStatement*>(node));
		PrintFields(static_cast<WfExpressionStatement*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfVirtualCseStatement* node)
	{
		node->Accept(static_cast<WfVirtualCseStatement::IVisitor*>(this));
	}

	void AstVisitor::Visit(WfCoroutineStatement* node)
	{
		node->Accept(static_cast<WfCoroutineStatement::IVisitor*>(this));
	}

	void AstVisitor::Visit(WfStateMachineStatement* node)
	{
		node->Accept(static_cast<WfStateMachineStatement::IVisitor*>(this));
	}

	void AstVisitor::Visit(WfNamespaceDeclaration* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"NamespaceDeclaration", node);
		PrintFields(static_cast<WfDeclaration*>(node));
		PrintFields(static_cast<WfNamespaceDeclaration*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfFunctionDeclaration* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"FunctionDeclaration", node);
		PrintFields(static_cast<WfDeclaration*>(node));
		PrintFields(static_cast<WfFunctionDeclaration*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfVariableDeclaration* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"VariableDeclaration", node);
		PrintFields(static_cast<WfDeclaration*>(node));
		PrintFields(static_cast<WfVariableDeclaration*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfEventDeclaration* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"EventDeclaration", node);
		PrintFields(static_cast<WfDeclaration*>(node));
		PrintFields(static_cast<WfEventDeclaration*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfPropertyDeclaration* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"PropertyDeclaration", node);
		PrintFields(static_cast<WfDeclaration*>(node));
		PrintFields(static_cast<WfPropertyDeclaration*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfConstructorDeclaration* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"ConstructorDeclaration", node);
		PrintFields(static_cast<WfDeclaration*>(node));
		PrintFields(static_cast<WfConstructorDeclaration*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfDestructorDeclaration* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"DestructorDeclaration", node);
		PrintFields(static_cast<WfDeclaration*>(node));
		PrintFields(static_cast<WfDestructorDeclaration*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfClassDeclaration* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"ClassDeclaration", node);
		PrintFields(static_cast<WfDeclaration*>(node));
		PrintFields(static_cast<WfClassDeclaration*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfEnumDeclaration* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"EnumDeclaration", node);
		PrintFields(static_cast<WfDeclaration*>(node));
		PrintFields(static_cast<WfEnumDeclaration*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfStructDeclaration* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"StructDeclaration", node);
		PrintFields(static_cast<WfDeclaration*>(node));
		PrintFields(static_cast<WfStructDeclaration*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfVirtualCfeDeclaration* node)
	{
		node->Accept(static_cast<WfVirtualCfeDeclaration::IVisitor*>(this));
	}

	void AstVisitor::Visit(WfVirtualCseDeclaration* node)
	{
		node->Accept(static_cast<WfVirtualCseDeclaration::IVisitor*>(this));
	}

	void AstVisitor::Visit(WfAutoPropertyDeclaration* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"AutoPropertyDeclaration", node);
		PrintFields(static_cast<WfDeclaration*>(node));
		PrintFields(static_cast<WfVirtualCfeDeclaration*>(node));
		PrintFields(static_cast<WfAutoPropertyDeclaration*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfCastResultInterfaceDeclaration* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"CastResultInterfaceDeclaration", node);
		PrintFields(static_cast<WfDeclaration*>(node));
		PrintFields(static_cast<WfVirtualCfeDeclaration*>(node));
		PrintFields(static_cast<WfCastResultInterfaceDeclaration*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfStateMachineDeclaration* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"StateMachineDeclaration", node);
		PrintFields(static_cast<WfDeclaration*>(node));
		PrintFields(static_cast<WfVirtualCseDeclaration*>(node));
		PrintFields(static_cast<WfStateMachineDeclaration*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfForEachStatement* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"ForEachStatement", node);
		PrintFields(static_cast<WfStatement*>(node));
		PrintFields(static_cast<WfVirtualCseStatement*>(node));
		PrintFields(static_cast<WfForEachStatement*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfSwitchStatement* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"SwitchStatement", node);
		PrintFields(static_cast<WfStatement*>(node));
		PrintFields(static_cast<WfVirtualCseStatement*>(node));
		PrintFields(static_cast<WfSwitchStatement*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfCoProviderStatement* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"CoProviderStatement", node);
		PrintFields(static_cast<WfStatement*>(node));
		PrintFields(static_cast<WfVirtualCseStatement*>(node));
		PrintFields(static_cast<WfCoProviderStatement*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfCoPauseStatement* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"CoPauseStatement", node);
		PrintFields(static_cast<WfStatement*>(node));
		PrintFields(static_cast<WfCoroutineStatement*>(node));
		PrintFields(static_cast<WfCoPauseStatement*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfCoOperatorStatement* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"CoOperatorStatement", node);
		PrintFields(static_cast<WfStatement*>(node));
		PrintFields(static_cast<WfCoroutineStatement*>(node));
		PrintFields(static_cast<WfCoOperatorStatement*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfStateSwitchStatement* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"StateSwitchStatement", node);
		PrintFields(static_cast<WfStatement*>(node));
		PrintFields(static_cast<WfStateMachineStatement*>(node));
		PrintFields(static_cast<WfStateSwitchStatement*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfStateInvokeStatement* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"StateInvokeStatement", node);
		PrintFields(static_cast<WfStatement*>(node));
		PrintFields(static_cast<WfStateMachineStatement*>(node));
		PrintFields(static_cast<WfStateInvokeStatement*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfFormatExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"FormatExpression", node);
		PrintFields(static_cast<WfExpression*>(node));
		PrintFields(static_cast<WfVirtualCfeExpression*>(node));
		PrintFields(static_cast<WfFormatExpression*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfBindExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"BindExpression", node);
		PrintFields(static_cast<WfExpression*>(node));
		PrintFields(static_cast<WfVirtualCseExpression*>(node));
		PrintFields(static_cast<WfBindExpression*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfNewCoroutineExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"NewCoroutineExpression", node);
		PrintFields(static_cast<WfExpression*>(node));
		PrintFields(static_cast<WfVirtualCseExpression*>(node));
		PrintFields(static_cast<WfNewCoroutineExpression*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfMixinCastExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"MixinCastExpression", node);
		PrintFields(static_cast<WfExpression*>(node));
		PrintFields(static_cast<WfVirtualCseExpression*>(node));
		PrintFields(static_cast<WfMixinCastExpression*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfExpectedTypeCastExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"ExpectedTypeCastExpression", node);
		PrintFields(static_cast<WfExpression*>(node));
		PrintFields(static_cast<WfVirtualCseExpression*>(node));
		PrintFields(static_cast<WfExpectedTypeCastExpression*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfCoOperatorExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"CoOperatorExpression", node);
		PrintFields(static_cast<WfExpression*>(node));
		PrintFields(static_cast<WfVirtualCseExpression*>(node));
		PrintFields(static_cast<WfCoOperatorExpression*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfModuleUsingNameFragment* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"ModuleUsingNameFragment", node);
		PrintFields(static_cast<WfModuleUsingFragment*>(node));
		PrintFields(static_cast<WfModuleUsingNameFragment*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfModuleUsingWildCardFragment* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"ModuleUsingWildCardFragment", node);
		PrintFields(static_cast<WfModuleUsingFragment*>(node));
		PrintFields(static_cast<WfModuleUsingWildCardFragment*>(node));
		EndObject();
	}

	AstVisitor::AstVisitor(vl::stream::StreamWriter& _writer)
		: vl::glr::JsonVisitorBase(_writer)
	{
	}

	void AstVisitor::Print(WfType* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		node->Accept(static_cast<WfType::IVisitor*>(this));
	}

	void AstVisitor::Print(WfExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		node->Accept(static_cast<WfExpression::IVisitor*>(this));
	}

	void AstVisitor::Print(WfStatement* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		node->Accept(static_cast<WfStatement::IVisitor*>(this));
	}

	void AstVisitor::Print(WfDeclaration* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		node->Accept(static_cast<WfDeclaration::IVisitor*>(this));
	}

	void AstVisitor::Print(WfModuleUsingFragment* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		node->Accept(static_cast<WfModuleUsingFragment::IVisitor*>(this));
	}

	void AstVisitor::Print(WfAttribute* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"Attribute", node);
		PrintFields(static_cast<WfAttribute*>(node));
		EndObject();
	}

	void AstVisitor::Print(WfFunctionArgument* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"FunctionArgument", node);
		PrintFields(static_cast<WfFunctionArgument*>(node));
		EndObject();
	}

	void AstVisitor::Print(WfBaseConstructorCall* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"BaseConstructorCall", node);
		PrintFields(static_cast<WfBaseConstructorCall*>(node));
		EndObject();
	}

	void AstVisitor::Print(WfEnumItemIntersection* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"EnumItemIntersection", node);
		PrintFields(static_cast<WfEnumItemIntersection*>(node));
		EndObject();
	}

	void AstVisitor::Print(WfEnumItem* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"EnumItem", node);
		PrintFields(static_cast<WfEnumItem*>(node));
		EndObject();
	}

	void AstVisitor::Print(WfStructMember* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"StructMember", node);
		PrintFields(static_cast<WfStructMember*>(node));
		EndObject();
	}

	void AstVisitor::Print(WfStateInput* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"StateInput", node);
		PrintFields(static_cast<WfStateInput*>(node));
		EndObject();
	}

	void AstVisitor::Print(WfStateDeclaration* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"StateDeclaration", node);
		PrintFields(static_cast<WfStateDeclaration*>(node));
		EndObject();
	}

	void AstVisitor::Print(WfSwitchCase* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"SwitchCase", node);
		PrintFields(static_cast<WfSwitchCase*>(node));
		EndObject();
	}

	void AstVisitor::Print(WfStateSwitchArgument* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"StateSwitchArgument", node);
		PrintFields(static_cast<WfStateSwitchArgument*>(node));
		EndObject();
	}

	void AstVisitor::Print(WfStateSwitchCase* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"StateSwitchCase", node);
		PrintFields(static_cast<WfStateSwitchCase*>(node));
		EndObject();
	}

	void AstVisitor::Print(WfLetVariable* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"LetVariable", node);
		PrintFields(static_cast<WfLetVariable*>(node));
		EndObject();
	}

	void AstVisitor::Print(WfConstructorArgument* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"ConstructorArgument", node);
		PrintFields(static_cast<WfConstructorArgument*>(node));
		EndObject();
	}

	void AstVisitor::Print(WfModuleUsingItem* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"ModuleUsingItem", node);
		PrintFields(static_cast<WfModuleUsingItem*>(node));
		EndObject();
	}

	void AstVisitor::Print(WfModuleUsingPath* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"ModuleUsingPath", node);
		PrintFields(static_cast<WfModuleUsingPath*>(node));
		EndObject();
	}

	void AstVisitor::Print(WfModule* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"Module", node);
		PrintFields(static_cast<WfModule*>(node));
		EndObject();
	}

}
