/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Ast
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "WorkflowAst_Json.h"

namespace vl::workflow::json_visitor
{
	void AstVisitor::PrintFields(WfAttachEventExpression* node)
	{
		BeginField(vl::WString::Unmanaged(L"event"));
		Print(node->event.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"function"));
		Print(node->function.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfAttribute* node)
	{
		BeginField(vl::WString::Unmanaged(L"category"));
		WriteToken(node->category);
		EndField();
		BeginField(vl::WString::Unmanaged(L"name"));
		WriteToken(node->name);
		EndField();
		BeginField(vl::WString::Unmanaged(L"value"));
		Print(node->value.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfAutoPropertyDeclaration* node)
	{
		BeginField(vl::WString::Unmanaged(L"configConst"));
		switch (node->configConst)
		{
		case vl::workflow::WfAPConst::Readonly:
			WriteString(vl::WString::Unmanaged(L"Readonly"));
			break;
		case vl::workflow::WfAPConst::Writable:
			WriteString(vl::WString::Unmanaged(L"Writable"));
			break;
		default:
			WriteNull();
		}
		EndField();
		BeginField(vl::WString::Unmanaged(L"configObserve"));
		switch (node->configObserve)
		{
		case vl::workflow::WfAPObserve::NotObservable:
			WriteString(vl::WString::Unmanaged(L"NotObservable"));
			break;
		case vl::workflow::WfAPObserve::Observable:
			WriteString(vl::WString::Unmanaged(L"Observable"));
			break;
		default:
			WriteNull();
		}
		EndField();
		BeginField(vl::WString::Unmanaged(L"expression"));
		Print(node->expression.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"functionKind"));
		switch (node->functionKind)
		{
		case vl::workflow::WfFunctionKind::Normal:
			WriteString(vl::WString::Unmanaged(L"Normal"));
			break;
		case vl::workflow::WfFunctionKind::Override:
			WriteString(vl::WString::Unmanaged(L"Override"));
			break;
		case vl::workflow::WfFunctionKind::Static:
			WriteString(vl::WString::Unmanaged(L"Static"));
			break;
		default:
			WriteNull();
		}
		EndField();
		BeginField(vl::WString::Unmanaged(L"type"));
		Print(node->type.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfBaseConstructorCall* node)
	{
		BeginField(vl::WString::Unmanaged(L"arguments"));
		BeginArray();
		for (auto&& listItem : node->arguments)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(vl::WString::Unmanaged(L"type"));
		Print(node->type.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfBinaryExpression* node)
	{
		BeginField(vl::WString::Unmanaged(L"first"));
		Print(node->first.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"op"));
		switch (node->op)
		{
		case vl::workflow::WfBinaryOperator::Add:
			WriteString(vl::WString::Unmanaged(L"Add"));
			break;
		case vl::workflow::WfBinaryOperator::And:
			WriteString(vl::WString::Unmanaged(L"And"));
			break;
		case vl::workflow::WfBinaryOperator::Assign:
			WriteString(vl::WString::Unmanaged(L"Assign"));
			break;
		case vl::workflow::WfBinaryOperator::Div:
			WriteString(vl::WString::Unmanaged(L"Div"));
			break;
		case vl::workflow::WfBinaryOperator::EQ:
			WriteString(vl::WString::Unmanaged(L"EQ"));
			break;
		case vl::workflow::WfBinaryOperator::Exp:
			WriteString(vl::WString::Unmanaged(L"Exp"));
			break;
		case vl::workflow::WfBinaryOperator::FailedThen:
			WriteString(vl::WString::Unmanaged(L"FailedThen"));
			break;
		case vl::workflow::WfBinaryOperator::FlagAnd:
			WriteString(vl::WString::Unmanaged(L"FlagAnd"));
			break;
		case vl::workflow::WfBinaryOperator::FlagOr:
			WriteString(vl::WString::Unmanaged(L"FlagOr"));
			break;
		case vl::workflow::WfBinaryOperator::GE:
			WriteString(vl::WString::Unmanaged(L"GE"));
			break;
		case vl::workflow::WfBinaryOperator::GT:
			WriteString(vl::WString::Unmanaged(L"GT"));
			break;
		case vl::workflow::WfBinaryOperator::Index:
			WriteString(vl::WString::Unmanaged(L"Index"));
			break;
		case vl::workflow::WfBinaryOperator::LE:
			WriteString(vl::WString::Unmanaged(L"LE"));
			break;
		case vl::workflow::WfBinaryOperator::LT:
			WriteString(vl::WString::Unmanaged(L"LT"));
			break;
		case vl::workflow::WfBinaryOperator::Mod:
			WriteString(vl::WString::Unmanaged(L"Mod"));
			break;
		case vl::workflow::WfBinaryOperator::Mul:
			WriteString(vl::WString::Unmanaged(L"Mul"));
			break;
		case vl::workflow::WfBinaryOperator::NE:
			WriteString(vl::WString::Unmanaged(L"NE"));
			break;
		case vl::workflow::WfBinaryOperator::Or:
			WriteString(vl::WString::Unmanaged(L"Or"));
			break;
		case vl::workflow::WfBinaryOperator::Shl:
			WriteString(vl::WString::Unmanaged(L"Shl"));
			break;
		case vl::workflow::WfBinaryOperator::Shr:
			WriteString(vl::WString::Unmanaged(L"Shr"));
			break;
		case vl::workflow::WfBinaryOperator::Sub:
			WriteString(vl::WString::Unmanaged(L"Sub"));
			break;
		case vl::workflow::WfBinaryOperator::Xor:
			WriteString(vl::WString::Unmanaged(L"Xor"));
			break;
		default:
			WriteNull();
		}
		EndField();
		BeginField(vl::WString::Unmanaged(L"second"));
		Print(node->second.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfBindExpression* node)
	{
		BeginField(vl::WString::Unmanaged(L"expression"));
		Print(node->expression.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfBlockStatement* node)
	{
		BeginField(vl::WString::Unmanaged(L"endLabel"));
		WriteToken(node->endLabel);
		EndField();
		BeginField(vl::WString::Unmanaged(L"statements"));
		BeginArray();
		for (auto&& listItem : node->statements)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
	}
	void AstVisitor::PrintFields(WfBreakStatement* node)
	{
	}
	void AstVisitor::PrintFields(WfCallExpression* node)
	{
		BeginField(vl::WString::Unmanaged(L"arguments"));
		BeginArray();
		for (auto&& listItem : node->arguments)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(vl::WString::Unmanaged(L"function"));
		Print(node->function.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfCastResultInterfaceDeclaration* node)
	{
		BeginField(vl::WString::Unmanaged(L"baseType"));
		Print(node->baseType.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"elementType"));
		Print(node->elementType.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfChildExpression* node)
	{
		BeginField(vl::WString::Unmanaged(L"name"));
		WriteToken(node->name);
		EndField();
		BeginField(vl::WString::Unmanaged(L"parent"));
		Print(node->parent.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfChildType* node)
	{
		BeginField(vl::WString::Unmanaged(L"name"));
		WriteToken(node->name);
		EndField();
		BeginField(vl::WString::Unmanaged(L"parent"));
		Print(node->parent.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfClassDeclaration* node)
	{
		BeginField(vl::WString::Unmanaged(L"baseTypes"));
		BeginArray();
		for (auto&& listItem : node->baseTypes)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(vl::WString::Unmanaged(L"constructorType"));
		switch (node->constructorType)
		{
		case vl::workflow::WfConstructorType::RawPtr:
			WriteString(vl::WString::Unmanaged(L"RawPtr"));
			break;
		case vl::workflow::WfConstructorType::SharedPtr:
			WriteString(vl::WString::Unmanaged(L"SharedPtr"));
			break;
		case vl::workflow::WfConstructorType::Undefined:
			WriteString(vl::WString::Unmanaged(L"Undefined"));
			break;
		default:
			WriteNull();
		}
		EndField();
		BeginField(vl::WString::Unmanaged(L"declarations"));
		BeginArray();
		for (auto&& listItem : node->declarations)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(vl::WString::Unmanaged(L"kind"));
		switch (node->kind)
		{
		case vl::workflow::WfClassKind::Class:
			WriteString(vl::WString::Unmanaged(L"Class"));
			break;
		case vl::workflow::WfClassKind::Interface:
			WriteString(vl::WString::Unmanaged(L"Interface"));
			break;
		default:
			WriteNull();
		}
		EndField();
	}
	void AstVisitor::PrintFields(WfCoOperatorExpression* node)
	{
		BeginField(vl::WString::Unmanaged(L"name"));
		WriteToken(node->name);
		EndField();
	}
	void AstVisitor::PrintFields(WfCoOperatorStatement* node)
	{
		BeginField(vl::WString::Unmanaged(L"arguments"));
		BeginArray();
		for (auto&& listItem : node->arguments)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(vl::WString::Unmanaged(L"opName"));
		WriteToken(node->opName);
		EndField();
		BeginField(vl::WString::Unmanaged(L"varName"));
		WriteToken(node->varName);
		EndField();
	}
	void AstVisitor::PrintFields(WfCoPauseStatement* node)
	{
		BeginField(vl::WString::Unmanaged(L"statement"));
		Print(node->statement.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfCoProviderStatement* node)
	{
		BeginField(vl::WString::Unmanaged(L"name"));
		WriteToken(node->name);
		EndField();
		BeginField(vl::WString::Unmanaged(L"statement"));
		Print(node->statement.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfConstructorArgument* node)
	{
		BeginField(vl::WString::Unmanaged(L"key"));
		Print(node->key.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"value"));
		Print(node->value.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfConstructorDeclaration* node)
	{
		BeginField(vl::WString::Unmanaged(L"arguments"));
		BeginArray();
		for (auto&& listItem : node->arguments)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(vl::WString::Unmanaged(L"baseConstructorCalls"));
		BeginArray();
		for (auto&& listItem : node->baseConstructorCalls)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(vl::WString::Unmanaged(L"constructorType"));
		switch (node->constructorType)
		{
		case vl::workflow::WfConstructorType::RawPtr:
			WriteString(vl::WString::Unmanaged(L"RawPtr"));
			break;
		case vl::workflow::WfConstructorType::SharedPtr:
			WriteString(vl::WString::Unmanaged(L"SharedPtr"));
			break;
		case vl::workflow::WfConstructorType::Undefined:
			WriteString(vl::WString::Unmanaged(L"Undefined"));
			break;
		default:
			WriteNull();
		}
		EndField();
		BeginField(vl::WString::Unmanaged(L"statement"));
		Print(node->statement.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfConstructorExpression* node)
	{
		BeginField(vl::WString::Unmanaged(L"arguments"));
		BeginArray();
		for (auto&& listItem : node->arguments)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
	}
	void AstVisitor::PrintFields(WfContinueStatement* node)
	{
	}
	void AstVisitor::PrintFields(WfCoroutineStatement* node)
	{
	}
	void AstVisitor::PrintFields(WfDeclaration* node)
	{
		BeginField(vl::WString::Unmanaged(L"attributes"));
		BeginArray();
		for (auto&& listItem : node->attributes)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(vl::WString::Unmanaged(L"name"));
		WriteToken(node->name);
		EndField();
	}
	void AstVisitor::PrintFields(WfDeleteStatement* node)
	{
		BeginField(vl::WString::Unmanaged(L"expression"));
		Print(node->expression.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfDestructorDeclaration* node)
	{
		BeginField(vl::WString::Unmanaged(L"statement"));
		Print(node->statement.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfDetachEventExpression* node)
	{
		BeginField(vl::WString::Unmanaged(L"event"));
		Print(node->event.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"handler"));
		Print(node->handler.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfEnumDeclaration* node)
	{
		BeginField(vl::WString::Unmanaged(L"items"));
		BeginArray();
		for (auto&& listItem : node->items)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(vl::WString::Unmanaged(L"kind"));
		switch (node->kind)
		{
		case vl::workflow::WfEnumKind::Flag:
			WriteString(vl::WString::Unmanaged(L"Flag"));
			break;
		case vl::workflow::WfEnumKind::Normal:
			WriteString(vl::WString::Unmanaged(L"Normal"));
			break;
		default:
			WriteNull();
		}
		EndField();
	}
	void AstVisitor::PrintFields(WfEnumItem* node)
	{
		BeginField(vl::WString::Unmanaged(L"attributes"));
		BeginArray();
		for (auto&& listItem : node->attributes)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(vl::WString::Unmanaged(L"intersections"));
		BeginArray();
		for (auto&& listItem : node->intersections)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(vl::WString::Unmanaged(L"kind"));
		switch (node->kind)
		{
		case vl::workflow::WfEnumItemKind::Constant:
			WriteString(vl::WString::Unmanaged(L"Constant"));
			break;
		case vl::workflow::WfEnumItemKind::Intersection:
			WriteString(vl::WString::Unmanaged(L"Intersection"));
			break;
		default:
			WriteNull();
		}
		EndField();
		BeginField(vl::WString::Unmanaged(L"name"));
		WriteToken(node->name);
		EndField();
		BeginField(vl::WString::Unmanaged(L"number"));
		WriteToken(node->number);
		EndField();
	}
	void AstVisitor::PrintFields(WfEnumItemIntersection* node)
	{
		BeginField(vl::WString::Unmanaged(L"name"));
		WriteToken(node->name);
		EndField();
	}
	void AstVisitor::PrintFields(WfEnumerableType* node)
	{
		BeginField(vl::WString::Unmanaged(L"element"));
		Print(node->element.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfEventDeclaration* node)
	{
		BeginField(vl::WString::Unmanaged(L"arguments"));
		BeginArray();
		for (auto&& listItem : node->arguments)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
	}
	void AstVisitor::PrintFields(WfExpectedTypeCastExpression* node)
	{
		BeginField(vl::WString::Unmanaged(L"expression"));
		Print(node->expression.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"strategy"));
		switch (node->strategy)
		{
		case vl::workflow::WfTypeCastingStrategy::Strong:
			WriteString(vl::WString::Unmanaged(L"Strong"));
			break;
		case vl::workflow::WfTypeCastingStrategy::Weak:
			WriteString(vl::WString::Unmanaged(L"Weak"));
			break;
		default:
			WriteNull();
		}
		EndField();
	}
	void AstVisitor::PrintFields(WfExpression* node)
	{
	}
	void AstVisitor::PrintFields(WfExpressionStatement* node)
	{
		BeginField(vl::WString::Unmanaged(L"expression"));
		Print(node->expression.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfFloatingExpression* node)
	{
		BeginField(vl::WString::Unmanaged(L"value"));
		WriteToken(node->value);
		EndField();
	}
	void AstVisitor::PrintFields(WfForEachStatement* node)
	{
		BeginField(vl::WString::Unmanaged(L"collection"));
		Print(node->collection.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"direction"));
		switch (node->direction)
		{
		case vl::workflow::WfForEachDirection::Normal:
			WriteString(vl::WString::Unmanaged(L"Normal"));
			break;
		case vl::workflow::WfForEachDirection::Reversed:
			WriteString(vl::WString::Unmanaged(L"Reversed"));
			break;
		default:
			WriteNull();
		}
		EndField();
		BeginField(vl::WString::Unmanaged(L"name"));
		WriteToken(node->name);
		EndField();
		BeginField(vl::WString::Unmanaged(L"statement"));
		Print(node->statement.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfFormatExpression* node)
	{
		BeginField(vl::WString::Unmanaged(L"value"));
		WriteToken(node->value);
		EndField();
	}
	void AstVisitor::PrintFields(WfFunctionArgument* node)
	{
		BeginField(vl::WString::Unmanaged(L"attributes"));
		BeginArray();
		for (auto&& listItem : node->attributes)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(vl::WString::Unmanaged(L"name"));
		WriteToken(node->name);
		EndField();
		BeginField(vl::WString::Unmanaged(L"type"));
		Print(node->type.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfFunctionDeclaration* node)
	{
		BeginField(vl::WString::Unmanaged(L"anonymity"));
		switch (node->anonymity)
		{
		case vl::workflow::WfFunctionAnonymity::Anonymous:
			WriteString(vl::WString::Unmanaged(L"Anonymous"));
			break;
		case vl::workflow::WfFunctionAnonymity::Named:
			WriteString(vl::WString::Unmanaged(L"Named"));
			break;
		default:
			WriteNull();
		}
		EndField();
		BeginField(vl::WString::Unmanaged(L"arguments"));
		BeginArray();
		for (auto&& listItem : node->arguments)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(vl::WString::Unmanaged(L"functionKind"));
		switch (node->functionKind)
		{
		case vl::workflow::WfFunctionKind::Normal:
			WriteString(vl::WString::Unmanaged(L"Normal"));
			break;
		case vl::workflow::WfFunctionKind::Override:
			WriteString(vl::WString::Unmanaged(L"Override"));
			break;
		case vl::workflow::WfFunctionKind::Static:
			WriteString(vl::WString::Unmanaged(L"Static"));
			break;
		default:
			WriteNull();
		}
		EndField();
		BeginField(vl::WString::Unmanaged(L"returnType"));
		Print(node->returnType.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"statement"));
		Print(node->statement.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfFunctionExpression* node)
	{
		BeginField(vl::WString::Unmanaged(L"function"));
		Print(node->function.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfFunctionType* node)
	{
		BeginField(vl::WString::Unmanaged(L"arguments"));
		BeginArray();
		for (auto&& listItem : node->arguments)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(vl::WString::Unmanaged(L"result"));
		Print(node->result.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfGotoStatement* node)
	{
		BeginField(vl::WString::Unmanaged(L"label"));
		WriteToken(node->label);
		EndField();
	}
	void AstVisitor::PrintFields(WfIfExpression* node)
	{
		BeginField(vl::WString::Unmanaged(L"condition"));
		Print(node->condition.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"falseBranch"));
		Print(node->falseBranch.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"trueBranch"));
		Print(node->trueBranch.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfIfStatement* node)
	{
		BeginField(vl::WString::Unmanaged(L"expression"));
		Print(node->expression.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"falseBranch"));
		Print(node->falseBranch.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"name"));
		WriteToken(node->name);
		EndField();
		BeginField(vl::WString::Unmanaged(L"trueBranch"));
		Print(node->trueBranch.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"type"));
		Print(node->type.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfInferExpression* node)
	{
		BeginField(vl::WString::Unmanaged(L"expression"));
		Print(node->expression.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"type"));
		Print(node->type.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfIntegerExpression* node)
	{
		BeginField(vl::WString::Unmanaged(L"value"));
		WriteToken(node->value);
		EndField();
	}
	void AstVisitor::PrintFields(WfLetExpression* node)
	{
		BeginField(vl::WString::Unmanaged(L"expression"));
		Print(node->expression.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"variables"));
		BeginArray();
		for (auto&& listItem : node->variables)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
	}
	void AstVisitor::PrintFields(WfLetVariable* node)
	{
		BeginField(vl::WString::Unmanaged(L"name"));
		WriteToken(node->name);
		EndField();
		BeginField(vl::WString::Unmanaged(L"value"));
		Print(node->value.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfLiteralExpression* node)
	{
		BeginField(vl::WString::Unmanaged(L"value"));
		switch (node->value)
		{
		case vl::workflow::WfLiteralValue::False:
			WriteString(vl::WString::Unmanaged(L"False"));
			break;
		case vl::workflow::WfLiteralValue::Null:
			WriteString(vl::WString::Unmanaged(L"Null"));
			break;
		case vl::workflow::WfLiteralValue::True:
			WriteString(vl::WString::Unmanaged(L"True"));
			break;
		default:
			WriteNull();
		}
		EndField();
	}
	void AstVisitor::PrintFields(WfMapType* node)
	{
		BeginField(vl::WString::Unmanaged(L"key"));
		Print(node->key.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"value"));
		Print(node->value.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"writability"));
		switch (node->writability)
		{
		case vl::workflow::WfMapWritability::Readonly:
			WriteString(vl::WString::Unmanaged(L"Readonly"));
			break;
		case vl::workflow::WfMapWritability::Writable:
			WriteString(vl::WString::Unmanaged(L"Writable"));
			break;
		default:
			WriteNull();
		}
		EndField();
	}
	void AstVisitor::PrintFields(WfMemberExpression* node)
	{
		BeginField(vl::WString::Unmanaged(L"name"));
		WriteToken(node->name);
		EndField();
		BeginField(vl::WString::Unmanaged(L"parent"));
		Print(node->parent.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfMixinCastExpression* node)
	{
		BeginField(vl::WString::Unmanaged(L"expression"));
		Print(node->expression.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"type"));
		Print(node->type.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfModule* node)
	{
		BeginField(vl::WString::Unmanaged(L"declarations"));
		BeginArray();
		for (auto&& listItem : node->declarations)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(vl::WString::Unmanaged(L"moduleType"));
		switch (node->moduleType)
		{
		case vl::workflow::WfModuleType::Module:
			WriteString(vl::WString::Unmanaged(L"Module"));
			break;
		case vl::workflow::WfModuleType::Unit:
			WriteString(vl::WString::Unmanaged(L"Unit"));
			break;
		default:
			WriteNull();
		}
		EndField();
		BeginField(vl::WString::Unmanaged(L"name"));
		WriteToken(node->name);
		EndField();
		BeginField(vl::WString::Unmanaged(L"paths"));
		BeginArray();
		for (auto&& listItem : node->paths)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
	}
	void AstVisitor::PrintFields(WfModuleUsingFragment* node)
	{
	}
	void AstVisitor::PrintFields(WfModuleUsingItem* node)
	{
		BeginField(vl::WString::Unmanaged(L"fragments"));
		BeginArray();
		for (auto&& listItem : node->fragments)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
	}
	void AstVisitor::PrintFields(WfModuleUsingNameFragment* node)
	{
		BeginField(vl::WString::Unmanaged(L"name"));
		WriteToken(node->name);
		EndField();
	}
	void AstVisitor::PrintFields(WfModuleUsingPath* node)
	{
		BeginField(vl::WString::Unmanaged(L"items"));
		BeginArray();
		for (auto&& listItem : node->items)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
	}
	void AstVisitor::PrintFields(WfModuleUsingWildCardFragment* node)
	{
	}
	void AstVisitor::PrintFields(WfNamespaceDeclaration* node)
	{
		BeginField(vl::WString::Unmanaged(L"declarations"));
		BeginArray();
		for (auto&& listItem : node->declarations)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
	}
	void AstVisitor::PrintFields(WfNewClassExpression* node)
	{
		BeginField(vl::WString::Unmanaged(L"arguments"));
		BeginArray();
		for (auto&& listItem : node->arguments)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(vl::WString::Unmanaged(L"type"));
		Print(node->type.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfNewCoroutineExpression* node)
	{
		BeginField(vl::WString::Unmanaged(L"name"));
		WriteToken(node->name);
		EndField();
		BeginField(vl::WString::Unmanaged(L"statement"));
		Print(node->statement.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfNewInterfaceExpression* node)
	{
		BeginField(vl::WString::Unmanaged(L"declarations"));
		BeginArray();
		for (auto&& listItem : node->declarations)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(vl::WString::Unmanaged(L"type"));
		Print(node->type.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfNullableType* node)
	{
		BeginField(vl::WString::Unmanaged(L"element"));
		Print(node->element.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfObservableListType* node)
	{
		BeginField(vl::WString::Unmanaged(L"element"));
		Print(node->element.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfObserveExpression* node)
	{
		BeginField(vl::WString::Unmanaged(L"events"));
		BeginArray();
		for (auto&& listItem : node->events)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(vl::WString::Unmanaged(L"expression"));
		Print(node->expression.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"name"));
		WriteToken(node->name);
		EndField();
		BeginField(vl::WString::Unmanaged(L"observeType"));
		switch (node->observeType)
		{
		case vl::workflow::WfObserveType::ExtendedObserve:
			WriteString(vl::WString::Unmanaged(L"ExtendedObserve"));
			break;
		case vl::workflow::WfObserveType::SimpleObserve:
			WriteString(vl::WString::Unmanaged(L"SimpleObserve"));
			break;
		default:
			WriteNull();
		}
		EndField();
		BeginField(vl::WString::Unmanaged(L"parent"));
		Print(node->parent.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfOrderedLambdaExpression* node)
	{
		BeginField(vl::WString::Unmanaged(L"body"));
		Print(node->body.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfOrderedNameExpression* node)
	{
		BeginField(vl::WString::Unmanaged(L"name"));
		WriteToken(node->name);
		EndField();
	}
	void AstVisitor::PrintFields(WfPredefinedType* node)
	{
		BeginField(vl::WString::Unmanaged(L"name"));
		switch (node->name)
		{
		case vl::workflow::WfPredefinedTypeName::Bool:
			WriteString(vl::WString::Unmanaged(L"Bool"));
			break;
		case vl::workflow::WfPredefinedTypeName::Char:
			WriteString(vl::WString::Unmanaged(L"Char"));
			break;
		case vl::workflow::WfPredefinedTypeName::Double:
			WriteString(vl::WString::Unmanaged(L"Double"));
			break;
		case vl::workflow::WfPredefinedTypeName::Float:
			WriteString(vl::WString::Unmanaged(L"Float"));
			break;
		case vl::workflow::WfPredefinedTypeName::Int:
			WriteString(vl::WString::Unmanaged(L"Int"));
			break;
		case vl::workflow::WfPredefinedTypeName::Interface:
			WriteString(vl::WString::Unmanaged(L"Interface"));
			break;
		case vl::workflow::WfPredefinedTypeName::Object:
			WriteString(vl::WString::Unmanaged(L"Object"));
			break;
		case vl::workflow::WfPredefinedTypeName::String:
			WriteString(vl::WString::Unmanaged(L"String"));
			break;
		case vl::workflow::WfPredefinedTypeName::UInt:
			WriteString(vl::WString::Unmanaged(L"UInt"));
			break;
		case vl::workflow::WfPredefinedTypeName::Void:
			WriteString(vl::WString::Unmanaged(L"Void"));
			break;
		default:
			WriteNull();
		}
		EndField();
	}
	void AstVisitor::PrintFields(WfPropertyDeclaration* node)
	{
		BeginField(vl::WString::Unmanaged(L"getter"));
		WriteToken(node->getter);
		EndField();
		BeginField(vl::WString::Unmanaged(L"setter"));
		WriteToken(node->setter);
		EndField();
		BeginField(vl::WString::Unmanaged(L"type"));
		Print(node->type.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"valueChangedEvent"));
		WriteToken(node->valueChangedEvent);
		EndField();
	}
	void AstVisitor::PrintFields(WfRaiseExceptionStatement* node)
	{
		BeginField(vl::WString::Unmanaged(L"expression"));
		Print(node->expression.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfRangeExpression* node)
	{
		BeginField(vl::WString::Unmanaged(L"begin"));
		Print(node->begin.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"beginBoundary"));
		switch (node->beginBoundary)
		{
		case vl::workflow::WfRangeBoundary::Exclusive:
			WriteString(vl::WString::Unmanaged(L"Exclusive"));
			break;
		case vl::workflow::WfRangeBoundary::Inclusive:
			WriteString(vl::WString::Unmanaged(L"Inclusive"));
			break;
		default:
			WriteNull();
		}
		EndField();
		BeginField(vl::WString::Unmanaged(L"end"));
		Print(node->end.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"endBoundary"));
		switch (node->endBoundary)
		{
		case vl::workflow::WfRangeBoundary::Exclusive:
			WriteString(vl::WString::Unmanaged(L"Exclusive"));
			break;
		case vl::workflow::WfRangeBoundary::Inclusive:
			WriteString(vl::WString::Unmanaged(L"Inclusive"));
			break;
		default:
			WriteNull();
		}
		EndField();
	}
	void AstVisitor::PrintFields(WfRawPointerType* node)
	{
		BeginField(vl::WString::Unmanaged(L"element"));
		Print(node->element.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfReferenceExpression* node)
	{
		BeginField(vl::WString::Unmanaged(L"name"));
		WriteToken(node->name);
		EndField();
	}
	void AstVisitor::PrintFields(WfReferenceType* node)
	{
		BeginField(vl::WString::Unmanaged(L"name"));
		WriteToken(node->name);
		EndField();
	}
	void AstVisitor::PrintFields(WfReturnStatement* node)
	{
		BeginField(vl::WString::Unmanaged(L"expression"));
		Print(node->expression.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfSetTestingExpression* node)
	{
		BeginField(vl::WString::Unmanaged(L"collection"));
		Print(node->collection.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"element"));
		Print(node->element.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"test"));
		switch (node->test)
		{
		case vl::workflow::WfSetTesting::In:
			WriteString(vl::WString::Unmanaged(L"In"));
			break;
		case vl::workflow::WfSetTesting::NotIn:
			WriteString(vl::WString::Unmanaged(L"NotIn"));
			break;
		default:
			WriteNull();
		}
		EndField();
	}
	void AstVisitor::PrintFields(WfSharedPointerType* node)
	{
		BeginField(vl::WString::Unmanaged(L"element"));
		Print(node->element.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfStateDeclaration* node)
	{
		BeginField(vl::WString::Unmanaged(L"arguments"));
		BeginArray();
		for (auto&& listItem : node->arguments)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(vl::WString::Unmanaged(L"name"));
		WriteToken(node->name);
		EndField();
		BeginField(vl::WString::Unmanaged(L"statement"));
		Print(node->statement.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfStateInput* node)
	{
		BeginField(vl::WString::Unmanaged(L"arguments"));
		BeginArray();
		for (auto&& listItem : node->arguments)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(vl::WString::Unmanaged(L"name"));
		WriteToken(node->name);
		EndField();
	}
	void AstVisitor::PrintFields(WfStateInvokeStatement* node)
	{
		BeginField(vl::WString::Unmanaged(L"arguments"));
		BeginArray();
		for (auto&& listItem : node->arguments)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(vl::WString::Unmanaged(L"name"));
		WriteToken(node->name);
		EndField();
		BeginField(vl::WString::Unmanaged(L"type"));
		switch (node->type)
		{
		case vl::workflow::WfStateInvokeType::Goto:
			WriteString(vl::WString::Unmanaged(L"Goto"));
			break;
		case vl::workflow::WfStateInvokeType::Push:
			WriteString(vl::WString::Unmanaged(L"Push"));
			break;
		default:
			WriteNull();
		}
		EndField();
	}
	void AstVisitor::PrintFields(WfStateMachineDeclaration* node)
	{
		BeginField(vl::WString::Unmanaged(L"inputs"));
		BeginArray();
		for (auto&& listItem : node->inputs)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(vl::WString::Unmanaged(L"states"));
		BeginArray();
		for (auto&& listItem : node->states)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
	}
	void AstVisitor::PrintFields(WfStateMachineStatement* node)
	{
	}
	void AstVisitor::PrintFields(WfStateSwitchArgument* node)
	{
		BeginField(vl::WString::Unmanaged(L"name"));
		WriteToken(node->name);
		EndField();
	}
	void AstVisitor::PrintFields(WfStateSwitchCase* node)
	{
		BeginField(vl::WString::Unmanaged(L"arguments"));
		BeginArray();
		for (auto&& listItem : node->arguments)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(vl::WString::Unmanaged(L"name"));
		WriteToken(node->name);
		EndField();
		BeginField(vl::WString::Unmanaged(L"statement"));
		Print(node->statement.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfStateSwitchStatement* node)
	{
		BeginField(vl::WString::Unmanaged(L"caseBranches"));
		BeginArray();
		for (auto&& listItem : node->caseBranches)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(vl::WString::Unmanaged(L"type"));
		switch (node->type)
		{
		case vl::workflow::WfStateSwitchType::Default:
			WriteString(vl::WString::Unmanaged(L"Default"));
			break;
		case vl::workflow::WfStateSwitchType::Ignore:
			WriteString(vl::WString::Unmanaged(L"Ignore"));
			break;
		case vl::workflow::WfStateSwitchType::IgnoreAndReturn:
			WriteString(vl::WString::Unmanaged(L"IgnoreAndReturn"));
			break;
		case vl::workflow::WfStateSwitchType::Pass:
			WriteString(vl::WString::Unmanaged(L"Pass"));
			break;
		case vl::workflow::WfStateSwitchType::PassAndReturn:
			WriteString(vl::WString::Unmanaged(L"PassAndReturn"));
			break;
		default:
			WriteNull();
		}
		EndField();
	}
	void AstVisitor::PrintFields(WfStatement* node)
	{
	}
	void AstVisitor::PrintFields(WfStaticInitDeclaration* node)
	{
		BeginField(vl::WString::Unmanaged(L"statement"));
		Print(node->statement.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfStringExpression* node)
	{
		BeginField(vl::WString::Unmanaged(L"value"));
		WriteToken(node->value);
		EndField();
	}
	void AstVisitor::PrintFields(WfStructDeclaration* node)
	{
		BeginField(vl::WString::Unmanaged(L"members"));
		BeginArray();
		for (auto&& listItem : node->members)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
	}
	void AstVisitor::PrintFields(WfStructMember* node)
	{
		BeginField(vl::WString::Unmanaged(L"attributes"));
		BeginArray();
		for (auto&& listItem : node->attributes)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(vl::WString::Unmanaged(L"name"));
		WriteToken(node->name);
		EndField();
		BeginField(vl::WString::Unmanaged(L"type"));
		Print(node->type.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfSwitchCase* node)
	{
		BeginField(vl::WString::Unmanaged(L"expression"));
		Print(node->expression.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"statement"));
		Print(node->statement.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfSwitchStatement* node)
	{
		BeginField(vl::WString::Unmanaged(L"caseBranches"));
		BeginArray();
		for (auto&& listItem : node->caseBranches)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(vl::WString::Unmanaged(L"defaultBranch"));
		Print(node->defaultBranch.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"expression"));
		Print(node->expression.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfThisExpression* node)
	{
	}
	void AstVisitor::PrintFields(WfTopQualifiedExpression* node)
	{
		BeginField(vl::WString::Unmanaged(L"name"));
		WriteToken(node->name);
		EndField();
	}
	void AstVisitor::PrintFields(WfTopQualifiedType* node)
	{
		BeginField(vl::WString::Unmanaged(L"name"));
		WriteToken(node->name);
		EndField();
	}
	void AstVisitor::PrintFields(WfTryStatement* node)
	{
		BeginField(vl::WString::Unmanaged(L"catchStatement"));
		Print(node->catchStatement.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"finallyStatement"));
		Print(node->finallyStatement.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"name"));
		WriteToken(node->name);
		EndField();
		BeginField(vl::WString::Unmanaged(L"protectedStatement"));
		Print(node->protectedStatement.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfType* node)
	{
	}
	void AstVisitor::PrintFields(WfTypeCastingExpression* node)
	{
		BeginField(vl::WString::Unmanaged(L"expression"));
		Print(node->expression.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"strategy"));
		switch (node->strategy)
		{
		case vl::workflow::WfTypeCastingStrategy::Strong:
			WriteString(vl::WString::Unmanaged(L"Strong"));
			break;
		case vl::workflow::WfTypeCastingStrategy::Weak:
			WriteString(vl::WString::Unmanaged(L"Weak"));
			break;
		default:
			WriteNull();
		}
		EndField();
		BeginField(vl::WString::Unmanaged(L"type"));
		Print(node->type.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfTypeOfExpressionExpression* node)
	{
		BeginField(vl::WString::Unmanaged(L"expression"));
		Print(node->expression.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfTypeOfTypeExpression* node)
	{
		BeginField(vl::WString::Unmanaged(L"type"));
		Print(node->type.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfTypeTestingExpression* node)
	{
		BeginField(vl::WString::Unmanaged(L"expression"));
		Print(node->expression.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"test"));
		switch (node->test)
		{
		case vl::workflow::WfTypeTesting::IsNotNull:
			WriteString(vl::WString::Unmanaged(L"IsNotNull"));
			break;
		case vl::workflow::WfTypeTesting::IsNotType:
			WriteString(vl::WString::Unmanaged(L"IsNotType"));
			break;
		case vl::workflow::WfTypeTesting::IsNull:
			WriteString(vl::WString::Unmanaged(L"IsNull"));
			break;
		case vl::workflow::WfTypeTesting::IsType:
			WriteString(vl::WString::Unmanaged(L"IsType"));
			break;
		default:
			WriteNull();
		}
		EndField();
		BeginField(vl::WString::Unmanaged(L"type"));
		Print(node->type.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfUnaryExpression* node)
	{
		BeginField(vl::WString::Unmanaged(L"op"));
		switch (node->op)
		{
		case vl::workflow::WfUnaryOperator::Negative:
			WriteString(vl::WString::Unmanaged(L"Negative"));
			break;
		case vl::workflow::WfUnaryOperator::Not:
			WriteString(vl::WString::Unmanaged(L"Not"));
			break;
		case vl::workflow::WfUnaryOperator::Positive:
			WriteString(vl::WString::Unmanaged(L"Positive"));
			break;
		default:
			WriteNull();
		}
		EndField();
		BeginField(vl::WString::Unmanaged(L"operand"));
		Print(node->operand.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfVariableDeclaration* node)
	{
		BeginField(vl::WString::Unmanaged(L"expression"));
		Print(node->expression.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"type"));
		Print(node->type.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfVariableStatement* node)
	{
		BeginField(vl::WString::Unmanaged(L"variable"));
		Print(node->variable.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfVirtualCfeDeclaration* node)
	{
		BeginField(vl::WString::Unmanaged(L"expandedDeclarations"));
		BeginArray();
		for (auto&& listItem : node->expandedDeclarations)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
	}
	void AstVisitor::PrintFields(WfVirtualCfeExpression* node)
	{
		BeginField(vl::WString::Unmanaged(L"expandedExpression"));
		Print(node->expandedExpression.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfVirtualCseDeclaration* node)
	{
		BeginField(vl::WString::Unmanaged(L"expandedDeclarations"));
		BeginArray();
		for (auto&& listItem : node->expandedDeclarations)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
	}
	void AstVisitor::PrintFields(WfVirtualCseExpression* node)
	{
		BeginField(vl::WString::Unmanaged(L"expandedExpression"));
		Print(node->expandedExpression.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfVirtualCseStatement* node)
	{
		BeginField(vl::WString::Unmanaged(L"expandedStatement"));
		Print(node->expandedStatement.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(WfWhileStatement* node)
	{
		BeginField(vl::WString::Unmanaged(L"condition"));
		Print(node->condition.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"statement"));
		Print(node->statement.Obj());
		EndField();
	}

	void AstVisitor::Visit(WfPredefinedType* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"PredefinedType"), node);
		PrintFields(static_cast<WfType*>(node));
		PrintFields(static_cast<WfPredefinedType*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfTopQualifiedType* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"TopQualifiedType"), node);
		PrintFields(static_cast<WfType*>(node));
		PrintFields(static_cast<WfTopQualifiedType*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfReferenceType* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"ReferenceType"), node);
		PrintFields(static_cast<WfType*>(node));
		PrintFields(static_cast<WfReferenceType*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfRawPointerType* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"RawPointerType"), node);
		PrintFields(static_cast<WfType*>(node));
		PrintFields(static_cast<WfRawPointerType*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfSharedPointerType* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"SharedPointerType"), node);
		PrintFields(static_cast<WfType*>(node));
		PrintFields(static_cast<WfSharedPointerType*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfNullableType* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"NullableType"), node);
		PrintFields(static_cast<WfType*>(node));
		PrintFields(static_cast<WfNullableType*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfEnumerableType* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"EnumerableType"), node);
		PrintFields(static_cast<WfType*>(node));
		PrintFields(static_cast<WfEnumerableType*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfMapType* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"MapType"), node);
		PrintFields(static_cast<WfType*>(node));
		PrintFields(static_cast<WfMapType*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfObservableListType* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"ObservableListType"), node);
		PrintFields(static_cast<WfType*>(node));
		PrintFields(static_cast<WfObservableListType*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfFunctionType* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"FunctionType"), node);
		PrintFields(static_cast<WfType*>(node));
		PrintFields(static_cast<WfFunctionType*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfChildType* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"ChildType"), node);
		PrintFields(static_cast<WfType*>(node));
		PrintFields(static_cast<WfChildType*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfThisExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"ThisExpression"), node);
		PrintFields(static_cast<WfExpression*>(node));
		PrintFields(static_cast<WfThisExpression*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfTopQualifiedExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"TopQualifiedExpression"), node);
		PrintFields(static_cast<WfExpression*>(node));
		PrintFields(static_cast<WfTopQualifiedExpression*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfReferenceExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"ReferenceExpression"), node);
		PrintFields(static_cast<WfExpression*>(node));
		PrintFields(static_cast<WfReferenceExpression*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfOrderedNameExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"OrderedNameExpression"), node);
		PrintFields(static_cast<WfExpression*>(node));
		PrintFields(static_cast<WfOrderedNameExpression*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfOrderedLambdaExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"OrderedLambdaExpression"), node);
		PrintFields(static_cast<WfExpression*>(node));
		PrintFields(static_cast<WfOrderedLambdaExpression*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfMemberExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"MemberExpression"), node);
		PrintFields(static_cast<WfExpression*>(node));
		PrintFields(static_cast<WfMemberExpression*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfChildExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"ChildExpression"), node);
		PrintFields(static_cast<WfExpression*>(node));
		PrintFields(static_cast<WfChildExpression*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfLiteralExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"LiteralExpression"), node);
		PrintFields(static_cast<WfExpression*>(node));
		PrintFields(static_cast<WfLiteralExpression*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfFloatingExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"FloatingExpression"), node);
		PrintFields(static_cast<WfExpression*>(node));
		PrintFields(static_cast<WfFloatingExpression*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfIntegerExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"IntegerExpression"), node);
		PrintFields(static_cast<WfExpression*>(node));
		PrintFields(static_cast<WfIntegerExpression*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfStringExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"StringExpression"), node);
		PrintFields(static_cast<WfExpression*>(node));
		PrintFields(static_cast<WfStringExpression*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfUnaryExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"UnaryExpression"), node);
		PrintFields(static_cast<WfExpression*>(node));
		PrintFields(static_cast<WfUnaryExpression*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfBinaryExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"BinaryExpression"), node);
		PrintFields(static_cast<WfExpression*>(node));
		PrintFields(static_cast<WfBinaryExpression*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfLetExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"LetExpression"), node);
		PrintFields(static_cast<WfExpression*>(node));
		PrintFields(static_cast<WfLetExpression*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfIfExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"IfExpression"), node);
		PrintFields(static_cast<WfExpression*>(node));
		PrintFields(static_cast<WfIfExpression*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfRangeExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"RangeExpression"), node);
		PrintFields(static_cast<WfExpression*>(node));
		PrintFields(static_cast<WfRangeExpression*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfSetTestingExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"SetTestingExpression"), node);
		PrintFields(static_cast<WfExpression*>(node));
		PrintFields(static_cast<WfSetTestingExpression*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfConstructorExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"ConstructorExpression"), node);
		PrintFields(static_cast<WfExpression*>(node));
		PrintFields(static_cast<WfConstructorExpression*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfInferExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"InferExpression"), node);
		PrintFields(static_cast<WfExpression*>(node));
		PrintFields(static_cast<WfInferExpression*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfTypeCastingExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"TypeCastingExpression"), node);
		PrintFields(static_cast<WfExpression*>(node));
		PrintFields(static_cast<WfTypeCastingExpression*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfTypeTestingExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"TypeTestingExpression"), node);
		PrintFields(static_cast<WfExpression*>(node));
		PrintFields(static_cast<WfTypeTestingExpression*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfTypeOfTypeExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"TypeOfTypeExpression"), node);
		PrintFields(static_cast<WfExpression*>(node));
		PrintFields(static_cast<WfTypeOfTypeExpression*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfTypeOfExpressionExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"TypeOfExpressionExpression"), node);
		PrintFields(static_cast<WfExpression*>(node));
		PrintFields(static_cast<WfTypeOfExpressionExpression*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfAttachEventExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"AttachEventExpression"), node);
		PrintFields(static_cast<WfExpression*>(node));
		PrintFields(static_cast<WfAttachEventExpression*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfDetachEventExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"DetachEventExpression"), node);
		PrintFields(static_cast<WfExpression*>(node));
		PrintFields(static_cast<WfDetachEventExpression*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfObserveExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"ObserveExpression"), node);
		PrintFields(static_cast<WfExpression*>(node));
		PrintFields(static_cast<WfObserveExpression*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfCallExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"CallExpression"), node);
		PrintFields(static_cast<WfExpression*>(node));
		PrintFields(static_cast<WfCallExpression*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfFunctionExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"FunctionExpression"), node);
		PrintFields(static_cast<WfExpression*>(node));
		PrintFields(static_cast<WfFunctionExpression*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfNewClassExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"NewClassExpression"), node);
		PrintFields(static_cast<WfExpression*>(node));
		PrintFields(static_cast<WfNewClassExpression*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfNewInterfaceExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"NewInterfaceExpression"), node);
		PrintFields(static_cast<WfExpression*>(node));
		PrintFields(static_cast<WfNewInterfaceExpression*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfVirtualCfeExpression* node)
	{
		node->Accept(static_cast<WfVirtualCfeExpression::IVisitor*>(this));
	}

	void AstVisitor::Visit(WfVirtualCseExpression* node)
	{
		node->Accept(static_cast<WfVirtualCseExpression::IVisitor*>(this));
	}

	void AstVisitor::Visit(WfBreakStatement* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"BreakStatement"), node);
		PrintFields(static_cast<WfStatement*>(node));
		PrintFields(static_cast<WfBreakStatement*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfContinueStatement* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"ContinueStatement"), node);
		PrintFields(static_cast<WfStatement*>(node));
		PrintFields(static_cast<WfContinueStatement*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfReturnStatement* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"ReturnStatement"), node);
		PrintFields(static_cast<WfStatement*>(node));
		PrintFields(static_cast<WfReturnStatement*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfDeleteStatement* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"DeleteStatement"), node);
		PrintFields(static_cast<WfStatement*>(node));
		PrintFields(static_cast<WfDeleteStatement*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfRaiseExceptionStatement* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"RaiseExceptionStatement"), node);
		PrintFields(static_cast<WfStatement*>(node));
		PrintFields(static_cast<WfRaiseExceptionStatement*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfIfStatement* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"IfStatement"), node);
		PrintFields(static_cast<WfStatement*>(node));
		PrintFields(static_cast<WfIfStatement*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfWhileStatement* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"WhileStatement"), node);
		PrintFields(static_cast<WfStatement*>(node));
		PrintFields(static_cast<WfWhileStatement*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfTryStatement* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"TryStatement"), node);
		PrintFields(static_cast<WfStatement*>(node));
		PrintFields(static_cast<WfTryStatement*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfBlockStatement* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"BlockStatement"), node);
		PrintFields(static_cast<WfStatement*>(node));
		PrintFields(static_cast<WfBlockStatement*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfGotoStatement* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"GotoStatement"), node);
		PrintFields(static_cast<WfStatement*>(node));
		PrintFields(static_cast<WfGotoStatement*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfVariableStatement* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"VariableStatement"), node);
		PrintFields(static_cast<WfStatement*>(node));
		PrintFields(static_cast<WfVariableStatement*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfExpressionStatement* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"ExpressionStatement"), node);
		PrintFields(static_cast<WfStatement*>(node));
		PrintFields(static_cast<WfExpressionStatement*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfVirtualCseStatement* node)
	{
		node->Accept(static_cast<WfVirtualCseStatement::IVisitor*>(this));
	}

	void AstVisitor::Visit(WfCoroutineStatement* node)
	{
		node->Accept(static_cast<WfCoroutineStatement::IVisitor*>(this));
	}

	void AstVisitor::Visit(WfStateMachineStatement* node)
	{
		node->Accept(static_cast<WfStateMachineStatement::IVisitor*>(this));
	}

	void AstVisitor::Visit(WfNamespaceDeclaration* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"NamespaceDeclaration"), node);
		PrintFields(static_cast<WfDeclaration*>(node));
		PrintFields(static_cast<WfNamespaceDeclaration*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfFunctionDeclaration* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"FunctionDeclaration"), node);
		PrintFields(static_cast<WfDeclaration*>(node));
		PrintFields(static_cast<WfFunctionDeclaration*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfVariableDeclaration* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"VariableDeclaration"), node);
		PrintFields(static_cast<WfDeclaration*>(node));
		PrintFields(static_cast<WfVariableDeclaration*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfEventDeclaration* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"EventDeclaration"), node);
		PrintFields(static_cast<WfDeclaration*>(node));
		PrintFields(static_cast<WfEventDeclaration*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfPropertyDeclaration* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"PropertyDeclaration"), node);
		PrintFields(static_cast<WfDeclaration*>(node));
		PrintFields(static_cast<WfPropertyDeclaration*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfStaticInitDeclaration* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"StaticInitDeclaration"), node);
		PrintFields(static_cast<WfDeclaration*>(node));
		PrintFields(static_cast<WfStaticInitDeclaration*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfConstructorDeclaration* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"ConstructorDeclaration"), node);
		PrintFields(static_cast<WfDeclaration*>(node));
		PrintFields(static_cast<WfConstructorDeclaration*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfDestructorDeclaration* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"DestructorDeclaration"), node);
		PrintFields(static_cast<WfDeclaration*>(node));
		PrintFields(static_cast<WfDestructorDeclaration*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfClassDeclaration* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"ClassDeclaration"), node);
		PrintFields(static_cast<WfDeclaration*>(node));
		PrintFields(static_cast<WfClassDeclaration*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfEnumDeclaration* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"EnumDeclaration"), node);
		PrintFields(static_cast<WfDeclaration*>(node));
		PrintFields(static_cast<WfEnumDeclaration*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfStructDeclaration* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"StructDeclaration"), node);
		PrintFields(static_cast<WfDeclaration*>(node));
		PrintFields(static_cast<WfStructDeclaration*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfVirtualCfeDeclaration* node)
	{
		node->Accept(static_cast<WfVirtualCfeDeclaration::IVisitor*>(this));
	}

	void AstVisitor::Visit(WfVirtualCseDeclaration* node)
	{
		node->Accept(static_cast<WfVirtualCseDeclaration::IVisitor*>(this));
	}

	void AstVisitor::Visit(WfAutoPropertyDeclaration* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"AutoPropertyDeclaration"), node);
		PrintFields(static_cast<WfDeclaration*>(node));
		PrintFields(static_cast<WfVirtualCfeDeclaration*>(node));
		PrintFields(static_cast<WfAutoPropertyDeclaration*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfCastResultInterfaceDeclaration* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"CastResultInterfaceDeclaration"), node);
		PrintFields(static_cast<WfDeclaration*>(node));
		PrintFields(static_cast<WfVirtualCfeDeclaration*>(node));
		PrintFields(static_cast<WfCastResultInterfaceDeclaration*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfStateMachineDeclaration* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"StateMachineDeclaration"), node);
		PrintFields(static_cast<WfDeclaration*>(node));
		PrintFields(static_cast<WfVirtualCseDeclaration*>(node));
		PrintFields(static_cast<WfStateMachineDeclaration*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfForEachStatement* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"ForEachStatement"), node);
		PrintFields(static_cast<WfStatement*>(node));
		PrintFields(static_cast<WfVirtualCseStatement*>(node));
		PrintFields(static_cast<WfForEachStatement*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfSwitchStatement* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"SwitchStatement"), node);
		PrintFields(static_cast<WfStatement*>(node));
		PrintFields(static_cast<WfVirtualCseStatement*>(node));
		PrintFields(static_cast<WfSwitchStatement*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfCoProviderStatement* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"CoProviderStatement"), node);
		PrintFields(static_cast<WfStatement*>(node));
		PrintFields(static_cast<WfVirtualCseStatement*>(node));
		PrintFields(static_cast<WfCoProviderStatement*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfCoPauseStatement* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"CoPauseStatement"), node);
		PrintFields(static_cast<WfStatement*>(node));
		PrintFields(static_cast<WfCoroutineStatement*>(node));
		PrintFields(static_cast<WfCoPauseStatement*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfCoOperatorStatement* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"CoOperatorStatement"), node);
		PrintFields(static_cast<WfStatement*>(node));
		PrintFields(static_cast<WfCoroutineStatement*>(node));
		PrintFields(static_cast<WfCoOperatorStatement*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfStateSwitchStatement* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"StateSwitchStatement"), node);
		PrintFields(static_cast<WfStatement*>(node));
		PrintFields(static_cast<WfStateMachineStatement*>(node));
		PrintFields(static_cast<WfStateSwitchStatement*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfStateInvokeStatement* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"StateInvokeStatement"), node);
		PrintFields(static_cast<WfStatement*>(node));
		PrintFields(static_cast<WfStateMachineStatement*>(node));
		PrintFields(static_cast<WfStateInvokeStatement*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfFormatExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"FormatExpression"), node);
		PrintFields(static_cast<WfExpression*>(node));
		PrintFields(static_cast<WfVirtualCfeExpression*>(node));
		PrintFields(static_cast<WfFormatExpression*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfBindExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"BindExpression"), node);
		PrintFields(static_cast<WfExpression*>(node));
		PrintFields(static_cast<WfVirtualCseExpression*>(node));
		PrintFields(static_cast<WfBindExpression*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfNewCoroutineExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"NewCoroutineExpression"), node);
		PrintFields(static_cast<WfExpression*>(node));
		PrintFields(static_cast<WfVirtualCseExpression*>(node));
		PrintFields(static_cast<WfNewCoroutineExpression*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfMixinCastExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"MixinCastExpression"), node);
		PrintFields(static_cast<WfExpression*>(node));
		PrintFields(static_cast<WfVirtualCseExpression*>(node));
		PrintFields(static_cast<WfMixinCastExpression*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfExpectedTypeCastExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"ExpectedTypeCastExpression"), node);
		PrintFields(static_cast<WfExpression*>(node));
		PrintFields(static_cast<WfVirtualCseExpression*>(node));
		PrintFields(static_cast<WfExpectedTypeCastExpression*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfCoOperatorExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"CoOperatorExpression"), node);
		PrintFields(static_cast<WfExpression*>(node));
		PrintFields(static_cast<WfVirtualCseExpression*>(node));
		PrintFields(static_cast<WfCoOperatorExpression*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfModuleUsingNameFragment* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"ModuleUsingNameFragment"), node);
		PrintFields(static_cast<WfModuleUsingFragment*>(node));
		PrintFields(static_cast<WfModuleUsingNameFragment*>(node));
		EndObject();
	}

	void AstVisitor::Visit(WfModuleUsingWildCardFragment* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"ModuleUsingWildCardFragment"), node);
		PrintFields(static_cast<WfModuleUsingFragment*>(node));
		PrintFields(static_cast<WfModuleUsingWildCardFragment*>(node));
		EndObject();
	}

	AstVisitor::AstVisitor(vl::stream::StreamWriter& _writer)
		: vl::glr::JsonVisitorBase(_writer)
	{
	}

	void AstVisitor::Print(WfType* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		node->Accept(static_cast<WfType::IVisitor*>(this));
	}

	void AstVisitor::Print(WfExpression* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		node->Accept(static_cast<WfExpression::IVisitor*>(this));
	}

	void AstVisitor::Print(WfStatement* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		node->Accept(static_cast<WfStatement::IVisitor*>(this));
	}

	void AstVisitor::Print(WfDeclaration* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		node->Accept(static_cast<WfDeclaration::IVisitor*>(this));
	}

	void AstVisitor::Print(WfModuleUsingFragment* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		node->Accept(static_cast<WfModuleUsingFragment::IVisitor*>(this));
	}

	void AstVisitor::Print(WfAttribute* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"Attribute"), node);
		PrintFields(static_cast<WfAttribute*>(node));
		EndObject();
	}

	void AstVisitor::Print(WfFunctionArgument* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"FunctionArgument"), node);
		PrintFields(static_cast<WfFunctionArgument*>(node));
		EndObject();
	}

	void AstVisitor::Print(WfBaseConstructorCall* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"BaseConstructorCall"), node);
		PrintFields(static_cast<WfBaseConstructorCall*>(node));
		EndObject();
	}

	void AstVisitor::Print(WfEnumItemIntersection* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"EnumItemIntersection"), node);
		PrintFields(static_cast<WfEnumItemIntersection*>(node));
		EndObject();
	}

	void AstVisitor::Print(WfEnumItem* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"EnumItem"), node);
		PrintFields(static_cast<WfEnumItem*>(node));
		EndObject();
	}

	void AstVisitor::Print(WfStructMember* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"StructMember"), node);
		PrintFields(static_cast<WfStructMember*>(node));
		EndObject();
	}

	void AstVisitor::Print(WfStateInput* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"StateInput"), node);
		PrintFields(static_cast<WfStateInput*>(node));
		EndObject();
	}

	void AstVisitor::Print(WfStateDeclaration* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"StateDeclaration"), node);
		PrintFields(static_cast<WfStateDeclaration*>(node));
		EndObject();
	}

	void AstVisitor::Print(WfSwitchCase* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"SwitchCase"), node);
		PrintFields(static_cast<WfSwitchCase*>(node));
		EndObject();
	}

	void AstVisitor::Print(WfStateSwitchArgument* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"StateSwitchArgument"), node);
		PrintFields(static_cast<WfStateSwitchArgument*>(node));
		EndObject();
	}

	void AstVisitor::Print(WfStateSwitchCase* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"StateSwitchCase"), node);
		PrintFields(static_cast<WfStateSwitchCase*>(node));
		EndObject();
	}

	void AstVisitor::Print(WfLetVariable* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"LetVariable"), node);
		PrintFields(static_cast<WfLetVariable*>(node));
		EndObject();
	}

	void AstVisitor::Print(WfConstructorArgument* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"ConstructorArgument"), node);
		PrintFields(static_cast<WfConstructorArgument*>(node));
		EndObject();
	}

	void AstVisitor::Print(WfModuleUsingItem* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"ModuleUsingItem"), node);
		PrintFields(static_cast<WfModuleUsingItem*>(node));
		EndObject();
	}

	void AstVisitor::Print(WfModuleUsingPath* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"ModuleUsingPath"), node);
		PrintFields(static_cast<WfModuleUsingPath*>(node));
		EndObject();
	}

	void AstVisitor::Print(WfModule* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"Module"), node);
		PrintFields(static_cast<WfModule*>(node));
		EndObject();
	}

}
