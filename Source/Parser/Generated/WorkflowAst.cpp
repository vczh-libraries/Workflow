/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Ast
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "WorkflowAst.h"

namespace vl
{
	namespace workflow
	{
/***********************************************************************
Visitor Pattern Implementation
***********************************************************************/

		void WfPredefinedType::Accept(WfType::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfTopQualifiedType::Accept(WfType::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfReferenceType::Accept(WfType::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfRawPointerType::Accept(WfType::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfSharedPointerType::Accept(WfType::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfNullableType::Accept(WfType::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfEnumerableType::Accept(WfType::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfMapType::Accept(WfType::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfObservableListType::Accept(WfType::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfFunctionType::Accept(WfType::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfChildType::Accept(WfType::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfNamespaceDeclaration::Accept(WfDeclaration::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfFunctionDeclaration::Accept(WfDeclaration::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfVariableDeclaration::Accept(WfDeclaration::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfEventDeclaration::Accept(WfDeclaration::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfPropertyDeclaration::Accept(WfDeclaration::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfConstructorDeclaration::Accept(WfDeclaration::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfDestructorDeclaration::Accept(WfDeclaration::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfClassDeclaration::Accept(WfDeclaration::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfEnumDeclaration::Accept(WfDeclaration::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfStructDeclaration::Accept(WfDeclaration::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfVirtualCfeDeclaration::Accept(WfDeclaration::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfAutoPropertyDeclaration::Accept(WfVirtualCfeDeclaration::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfCastResultInterfaceDeclaration::Accept(WfVirtualCfeDeclaration::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfVirtualCseDeclaration::Accept(WfDeclaration::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfStateMachineDeclaration::Accept(WfVirtualCseDeclaration::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfBreakStatement::Accept(WfStatement::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfContinueStatement::Accept(WfStatement::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfReturnStatement::Accept(WfStatement::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfDeleteStatement::Accept(WfStatement::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfRaiseExceptionStatement::Accept(WfStatement::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfIfStatement::Accept(WfStatement::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfWhileStatement::Accept(WfStatement::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfTryStatement::Accept(WfStatement::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfBlockStatement::Accept(WfStatement::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfGotoStatement::Accept(WfStatement::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfVariableStatement::Accept(WfStatement::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfExpressionStatement::Accept(WfStatement::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfVirtualCseStatement::Accept(WfStatement::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfForEachStatement::Accept(WfVirtualCseStatement::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfSwitchStatement::Accept(WfVirtualCseStatement::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfCoProviderStatement::Accept(WfVirtualCseStatement::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfCoroutineStatement::Accept(WfStatement::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfCoPauseStatement::Accept(WfCoroutineStatement::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfCoOperatorStatement::Accept(WfCoroutineStatement::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfStateMachineStatement::Accept(WfStatement::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfStateSwitchStatement::Accept(WfStateMachineStatement::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfStateInvokeStatement::Accept(WfStateMachineStatement::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfThisExpression::Accept(WfExpression::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfTopQualifiedExpression::Accept(WfExpression::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfReferenceExpression::Accept(WfExpression::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfOrderedNameExpression::Accept(WfExpression::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfOrderedLambdaExpression::Accept(WfExpression::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfMemberExpression::Accept(WfExpression::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfChildExpression::Accept(WfExpression::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfLiteralExpression::Accept(WfExpression::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfFloatingExpression::Accept(WfExpression::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfIntegerExpression::Accept(WfExpression::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfStringExpression::Accept(WfExpression::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfUnaryExpression::Accept(WfExpression::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfBinaryExpression::Accept(WfExpression::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfLetExpression::Accept(WfExpression::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfIfExpression::Accept(WfExpression::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfRangeExpression::Accept(WfExpression::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfSetTestingExpression::Accept(WfExpression::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfConstructorExpression::Accept(WfExpression::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfInferExpression::Accept(WfExpression::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfTypeCastingExpression::Accept(WfExpression::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfTypeTestingExpression::Accept(WfExpression::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfTypeOfTypeExpression::Accept(WfExpression::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfTypeOfExpressionExpression::Accept(WfExpression::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfAttachEventExpression::Accept(WfExpression::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfDetachEventExpression::Accept(WfExpression::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfObserveExpression::Accept(WfExpression::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfCallExpression::Accept(WfExpression::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfFunctionExpression::Accept(WfExpression::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfNewClassExpression::Accept(WfExpression::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfNewInterfaceExpression::Accept(WfExpression::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfVirtualCfeExpression::Accept(WfExpression::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfFormatExpression::Accept(WfVirtualCfeExpression::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfVirtualCseExpression::Accept(WfExpression::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfBindExpression::Accept(WfVirtualCseExpression::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfNewCoroutineExpression::Accept(WfVirtualCseExpression::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfMixinCastExpression::Accept(WfVirtualCseExpression::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfExpectedTypeCastExpression::Accept(WfVirtualCseExpression::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfCoOperatorExpression::Accept(WfVirtualCseExpression::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfModuleUsingNameFragment::Accept(WfModuleUsingFragment::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void WfModuleUsingWildCardFragment::Accept(WfModuleUsingFragment::IVisitor* visitor)
		{
			visitor->Visit(this);
		}
	}
}
namespace vl
{
	namespace reflection
	{
		namespace description
		{
#ifndef VCZH_DEBUG_NO_REFLECTION

			IMPL_TYPE_INFO_RENAME(vl::workflow::WfType, system::workflow::WfType)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfType::IVisitor, system::workflow::WfType::IVisitor)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfExpression, system::workflow::WfExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfExpression::IVisitor, system::workflow::WfExpression::IVisitor)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfStatement, system::workflow::WfStatement)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfStatement::IVisitor, system::workflow::WfStatement::IVisitor)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfAttribute, system::workflow::WfAttribute)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfDeclaration, system::workflow::WfDeclaration)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfDeclaration::IVisitor, system::workflow::WfDeclaration::IVisitor)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfFunctionKind, system::workflow::WfFunctionKind)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfPredefinedTypeName, system::workflow::WfPredefinedTypeName)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfPredefinedType, system::workflow::WfPredefinedType)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfTopQualifiedType, system::workflow::WfTopQualifiedType)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfReferenceType, system::workflow::WfReferenceType)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfRawPointerType, system::workflow::WfRawPointerType)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfSharedPointerType, system::workflow::WfSharedPointerType)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfNullableType, system::workflow::WfNullableType)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfEnumerableType, system::workflow::WfEnumerableType)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfMapWritability, system::workflow::WfMapWritability)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfMapType, system::workflow::WfMapType)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfObservableListType, system::workflow::WfObservableListType)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfFunctionType, system::workflow::WfFunctionType)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfChildType, system::workflow::WfChildType)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfNamespaceDeclaration, system::workflow::WfNamespaceDeclaration)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfFunctionArgument, system::workflow::WfFunctionArgument)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfFunctionAnonymity, system::workflow::WfFunctionAnonymity)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfFunctionDeclaration, system::workflow::WfFunctionDeclaration)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfVariableDeclaration, system::workflow::WfVariableDeclaration)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfEventDeclaration, system::workflow::WfEventDeclaration)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfPropertyDeclaration, system::workflow::WfPropertyDeclaration)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfClassKind, system::workflow::WfClassKind)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfConstructorType, system::workflow::WfConstructorType)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfBaseConstructorCall, system::workflow::WfBaseConstructorCall)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfConstructorDeclaration, system::workflow::WfConstructorDeclaration)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfDestructorDeclaration, system::workflow::WfDestructorDeclaration)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfClassDeclaration, system::workflow::WfClassDeclaration)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfEnumKind, system::workflow::WfEnumKind)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfEnumItemKind, system::workflow::WfEnumItemKind)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfEnumItemIntersection, system::workflow::WfEnumItemIntersection)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfEnumItem, system::workflow::WfEnumItem)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfEnumDeclaration, system::workflow::WfEnumDeclaration)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfStructMember, system::workflow::WfStructMember)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfStructDeclaration, system::workflow::WfStructDeclaration)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfVirtualCfeDeclaration, system::workflow::WfVirtualCfeDeclaration)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfVirtualCfeDeclaration::IVisitor, system::workflow::WfVirtualCfeDeclaration::IVisitor)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfAPConst, system::workflow::WfAPConst)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfAPObserve, system::workflow::WfAPObserve)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfAutoPropertyDeclaration, system::workflow::WfAutoPropertyDeclaration)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfCastResultInterfaceDeclaration, system::workflow::WfCastResultInterfaceDeclaration)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfVirtualCseDeclaration, system::workflow::WfVirtualCseDeclaration)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfVirtualCseDeclaration::IVisitor, system::workflow::WfVirtualCseDeclaration::IVisitor)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfStateInput, system::workflow::WfStateInput)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfStateDeclaration, system::workflow::WfStateDeclaration)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfStateMachineDeclaration, system::workflow::WfStateMachineDeclaration)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfBreakStatement, system::workflow::WfBreakStatement)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfContinueStatement, system::workflow::WfContinueStatement)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfReturnStatement, system::workflow::WfReturnStatement)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfDeleteStatement, system::workflow::WfDeleteStatement)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfRaiseExceptionStatement, system::workflow::WfRaiseExceptionStatement)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfIfStatement, system::workflow::WfIfStatement)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfWhileStatement, system::workflow::WfWhileStatement)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfTryStatement, system::workflow::WfTryStatement)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfBlockStatement, system::workflow::WfBlockStatement)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfGotoStatement, system::workflow::WfGotoStatement)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfVariableStatement, system::workflow::WfVariableStatement)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfExpressionStatement, system::workflow::WfExpressionStatement)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfVirtualCseStatement, system::workflow::WfVirtualCseStatement)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfVirtualCseStatement::IVisitor, system::workflow::WfVirtualCseStatement::IVisitor)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfForEachDirection, system::workflow::WfForEachDirection)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfForEachStatement, system::workflow::WfForEachStatement)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfSwitchCase, system::workflow::WfSwitchCase)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfSwitchStatement, system::workflow::WfSwitchStatement)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfCoProviderStatement, system::workflow::WfCoProviderStatement)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfCoroutineStatement, system::workflow::WfCoroutineStatement)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfCoroutineStatement::IVisitor, system::workflow::WfCoroutineStatement::IVisitor)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfCoPauseStatement, system::workflow::WfCoPauseStatement)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfCoOperatorStatement, system::workflow::WfCoOperatorStatement)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfStateSwitchType, system::workflow::WfStateSwitchType)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfStateInvokeType, system::workflow::WfStateInvokeType)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfStateMachineStatement, system::workflow::WfStateMachineStatement)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfStateMachineStatement::IVisitor, system::workflow::WfStateMachineStatement::IVisitor)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfStateSwitchArgument, system::workflow::WfStateSwitchArgument)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfStateSwitchCase, system::workflow::WfStateSwitchCase)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfStateSwitchStatement, system::workflow::WfStateSwitchStatement)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfStateInvokeStatement, system::workflow::WfStateInvokeStatement)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfThisExpression, system::workflow::WfThisExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfTopQualifiedExpression, system::workflow::WfTopQualifiedExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfReferenceExpression, system::workflow::WfReferenceExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfOrderedNameExpression, system::workflow::WfOrderedNameExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfOrderedLambdaExpression, system::workflow::WfOrderedLambdaExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfMemberExpression, system::workflow::WfMemberExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfChildExpression, system::workflow::WfChildExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfLiteralValue, system::workflow::WfLiteralValue)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfLiteralExpression, system::workflow::WfLiteralExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfFloatingExpression, system::workflow::WfFloatingExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfIntegerExpression, system::workflow::WfIntegerExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfStringExpression, system::workflow::WfStringExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfUnaryOperator, system::workflow::WfUnaryOperator)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfUnaryExpression, system::workflow::WfUnaryExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfBinaryOperator, system::workflow::WfBinaryOperator)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfBinaryExpression, system::workflow::WfBinaryExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfLetVariable, system::workflow::WfLetVariable)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfLetExpression, system::workflow::WfLetExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfIfExpression, system::workflow::WfIfExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfRangeBoundary, system::workflow::WfRangeBoundary)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfRangeExpression, system::workflow::WfRangeExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfSetTesting, system::workflow::WfSetTesting)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfSetTestingExpression, system::workflow::WfSetTestingExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfConstructorArgument, system::workflow::WfConstructorArgument)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfConstructorExpression, system::workflow::WfConstructorExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfInferExpression, system::workflow::WfInferExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfTypeCastingStrategy, system::workflow::WfTypeCastingStrategy)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfTypeCastingExpression, system::workflow::WfTypeCastingExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfTypeTesting, system::workflow::WfTypeTesting)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfTypeTestingExpression, system::workflow::WfTypeTestingExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfTypeOfTypeExpression, system::workflow::WfTypeOfTypeExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfTypeOfExpressionExpression, system::workflow::WfTypeOfExpressionExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfAttachEventExpression, system::workflow::WfAttachEventExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfDetachEventExpression, system::workflow::WfDetachEventExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfObserveType, system::workflow::WfObserveType)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfObserveExpression, system::workflow::WfObserveExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfCallExpression, system::workflow::WfCallExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfFunctionExpression, system::workflow::WfFunctionExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfNewClassExpression, system::workflow::WfNewClassExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfNewInterfaceExpression, system::workflow::WfNewInterfaceExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfVirtualCfeExpression, system::workflow::WfVirtualCfeExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfVirtualCfeExpression::IVisitor, system::workflow::WfVirtualCfeExpression::IVisitor)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfFormatExpression, system::workflow::WfFormatExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfVirtualCseExpression, system::workflow::WfVirtualCseExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfVirtualCseExpression::IVisitor, system::workflow::WfVirtualCseExpression::IVisitor)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfBindExpression, system::workflow::WfBindExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfNewCoroutineExpression, system::workflow::WfNewCoroutineExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfMixinCastExpression, system::workflow::WfMixinCastExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfExpectedTypeCastExpression, system::workflow::WfExpectedTypeCastExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfCoOperatorExpression, system::workflow::WfCoOperatorExpression)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfModuleUsingFragment, system::workflow::WfModuleUsingFragment)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfModuleUsingFragment::IVisitor, system::workflow::WfModuleUsingFragment::IVisitor)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfModuleUsingNameFragment, system::workflow::WfModuleUsingNameFragment)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfModuleUsingWildCardFragment, system::workflow::WfModuleUsingWildCardFragment)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfModuleUsingItem, system::workflow::WfModuleUsingItem)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfModuleUsingPath, system::workflow::WfModuleUsingPath)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfModuleType, system::workflow::WfModuleType)
			IMPL_TYPE_INFO_RENAME(vl::workflow::WfModule, system::workflow::WfModule)

#ifdef VCZH_DESCRIPTABLEOBJECT_WITH_METADATA

			BEGIN_CLASS_MEMBER(vl::workflow::WfType)
				CLASS_MEMBER_BASE(vl::glr::ParsingAstBase)

			END_CLASS_MEMBER(vl::workflow::WfType)

			BEGIN_CLASS_MEMBER(vl::workflow::WfExpression)
				CLASS_MEMBER_BASE(vl::glr::ParsingAstBase)

			END_CLASS_MEMBER(vl::workflow::WfExpression)

			BEGIN_CLASS_MEMBER(vl::workflow::WfStatement)
				CLASS_MEMBER_BASE(vl::glr::ParsingAstBase)

			END_CLASS_MEMBER(vl::workflow::WfStatement)

			BEGIN_CLASS_MEMBER(vl::workflow::WfAttribute)
				CLASS_MEMBER_BASE(vl::glr::ParsingAstBase)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfAttribute>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(category)
				CLASS_MEMBER_FIELD(name)
				CLASS_MEMBER_FIELD(value)
			END_CLASS_MEMBER(vl::workflow::WfAttribute)

			BEGIN_CLASS_MEMBER(vl::workflow::WfDeclaration)
				CLASS_MEMBER_BASE(vl::glr::ParsingAstBase)

				CLASS_MEMBER_FIELD(attributes)
				CLASS_MEMBER_FIELD(name)
			END_CLASS_MEMBER(vl::workflow::WfDeclaration)

			BEGIN_ENUM_ITEM(vl::workflow::WfFunctionKind)
				ENUM_ITEM_NAMESPACE(vl::workflow::WfFunctionKind)
				ENUM_NAMESPACE_ITEM(Static)
				ENUM_NAMESPACE_ITEM(Override)
				ENUM_NAMESPACE_ITEM(Normal)
			END_ENUM_ITEM(vl::workflow::WfFunctionKind)

			BEGIN_ENUM_ITEM(vl::workflow::WfPredefinedTypeName)
				ENUM_ITEM_NAMESPACE(vl::workflow::WfPredefinedTypeName)
				ENUM_NAMESPACE_ITEM(Void)
				ENUM_NAMESPACE_ITEM(Object)
				ENUM_NAMESPACE_ITEM(Interface)
				ENUM_NAMESPACE_ITEM(Int)
				ENUM_NAMESPACE_ITEM(UInt)
				ENUM_NAMESPACE_ITEM(Float)
				ENUM_NAMESPACE_ITEM(Double)
				ENUM_NAMESPACE_ITEM(String)
				ENUM_NAMESPACE_ITEM(Char)
				ENUM_NAMESPACE_ITEM(Bool)
			END_ENUM_ITEM(vl::workflow::WfPredefinedTypeName)

			BEGIN_CLASS_MEMBER(vl::workflow::WfPredefinedType)
				CLASS_MEMBER_BASE(vl::workflow::WfType)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfPredefinedType>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(name)
			END_CLASS_MEMBER(vl::workflow::WfPredefinedType)

			BEGIN_CLASS_MEMBER(vl::workflow::WfTopQualifiedType)
				CLASS_MEMBER_BASE(vl::workflow::WfType)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfTopQualifiedType>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(name)
			END_CLASS_MEMBER(vl::workflow::WfTopQualifiedType)

			BEGIN_CLASS_MEMBER(vl::workflow::WfReferenceType)
				CLASS_MEMBER_BASE(vl::workflow::WfType)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfReferenceType>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(name)
			END_CLASS_MEMBER(vl::workflow::WfReferenceType)

			BEGIN_CLASS_MEMBER(vl::workflow::WfRawPointerType)
				CLASS_MEMBER_BASE(vl::workflow::WfType)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfRawPointerType>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(element)
			END_CLASS_MEMBER(vl::workflow::WfRawPointerType)

			BEGIN_CLASS_MEMBER(vl::workflow::WfSharedPointerType)
				CLASS_MEMBER_BASE(vl::workflow::WfType)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfSharedPointerType>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(element)
			END_CLASS_MEMBER(vl::workflow::WfSharedPointerType)

			BEGIN_CLASS_MEMBER(vl::workflow::WfNullableType)
				CLASS_MEMBER_BASE(vl::workflow::WfType)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfNullableType>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(element)
			END_CLASS_MEMBER(vl::workflow::WfNullableType)

			BEGIN_CLASS_MEMBER(vl::workflow::WfEnumerableType)
				CLASS_MEMBER_BASE(vl::workflow::WfType)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfEnumerableType>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(element)
			END_CLASS_MEMBER(vl::workflow::WfEnumerableType)

			BEGIN_ENUM_ITEM(vl::workflow::WfMapWritability)
				ENUM_ITEM_NAMESPACE(vl::workflow::WfMapWritability)
				ENUM_NAMESPACE_ITEM(Readonly)
				ENUM_NAMESPACE_ITEM(Writable)
			END_ENUM_ITEM(vl::workflow::WfMapWritability)

			BEGIN_CLASS_MEMBER(vl::workflow::WfMapType)
				CLASS_MEMBER_BASE(vl::workflow::WfType)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfMapType>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(writability)
				CLASS_MEMBER_FIELD(key)
				CLASS_MEMBER_FIELD(value)
			END_CLASS_MEMBER(vl::workflow::WfMapType)

			BEGIN_CLASS_MEMBER(vl::workflow::WfObservableListType)
				CLASS_MEMBER_BASE(vl::workflow::WfType)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfObservableListType>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(element)
			END_CLASS_MEMBER(vl::workflow::WfObservableListType)

			BEGIN_CLASS_MEMBER(vl::workflow::WfFunctionType)
				CLASS_MEMBER_BASE(vl::workflow::WfType)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfFunctionType>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(result)
				CLASS_MEMBER_FIELD(arguments)
			END_CLASS_MEMBER(vl::workflow::WfFunctionType)

			BEGIN_CLASS_MEMBER(vl::workflow::WfChildType)
				CLASS_MEMBER_BASE(vl::workflow::WfType)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfChildType>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(parent)
				CLASS_MEMBER_FIELD(name)
			END_CLASS_MEMBER(vl::workflow::WfChildType)

			BEGIN_CLASS_MEMBER(vl::workflow::WfNamespaceDeclaration)
				CLASS_MEMBER_BASE(vl::workflow::WfDeclaration)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfNamespaceDeclaration>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(declarations)
			END_CLASS_MEMBER(vl::workflow::WfNamespaceDeclaration)

			BEGIN_CLASS_MEMBER(vl::workflow::WfFunctionArgument)
				CLASS_MEMBER_BASE(vl::glr::ParsingAstBase)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfFunctionArgument>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(attributes)
				CLASS_MEMBER_FIELD(name)
				CLASS_MEMBER_FIELD(type)
			END_CLASS_MEMBER(vl::workflow::WfFunctionArgument)

			BEGIN_ENUM_ITEM(vl::workflow::WfFunctionAnonymity)
				ENUM_ITEM_NAMESPACE(vl::workflow::WfFunctionAnonymity)
				ENUM_NAMESPACE_ITEM(Named)
				ENUM_NAMESPACE_ITEM(Anonymous)
			END_ENUM_ITEM(vl::workflow::WfFunctionAnonymity)

			BEGIN_CLASS_MEMBER(vl::workflow::WfFunctionDeclaration)
				CLASS_MEMBER_BASE(vl::workflow::WfDeclaration)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfFunctionDeclaration>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(functionKind)
				CLASS_MEMBER_FIELD(anonymity)
				CLASS_MEMBER_FIELD(arguments)
				CLASS_MEMBER_FIELD(returnType)
				CLASS_MEMBER_FIELD(statement)
			END_CLASS_MEMBER(vl::workflow::WfFunctionDeclaration)

			BEGIN_CLASS_MEMBER(vl::workflow::WfVariableDeclaration)
				CLASS_MEMBER_BASE(vl::workflow::WfDeclaration)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfVariableDeclaration>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(type)
				CLASS_MEMBER_FIELD(expression)
			END_CLASS_MEMBER(vl::workflow::WfVariableDeclaration)

			BEGIN_CLASS_MEMBER(vl::workflow::WfEventDeclaration)
				CLASS_MEMBER_BASE(vl::workflow::WfDeclaration)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfEventDeclaration>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(arguments)
			END_CLASS_MEMBER(vl::workflow::WfEventDeclaration)

			BEGIN_CLASS_MEMBER(vl::workflow::WfPropertyDeclaration)
				CLASS_MEMBER_BASE(vl::workflow::WfDeclaration)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfPropertyDeclaration>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(type)
				CLASS_MEMBER_FIELD(getter)
				CLASS_MEMBER_FIELD(setter)
				CLASS_MEMBER_FIELD(valueChangedEvent)
			END_CLASS_MEMBER(vl::workflow::WfPropertyDeclaration)

			BEGIN_ENUM_ITEM(vl::workflow::WfClassKind)
				ENUM_ITEM_NAMESPACE(vl::workflow::WfClassKind)
				ENUM_NAMESPACE_ITEM(Class)
				ENUM_NAMESPACE_ITEM(Interface)
			END_ENUM_ITEM(vl::workflow::WfClassKind)

			BEGIN_ENUM_ITEM(vl::workflow::WfConstructorType)
				ENUM_ITEM_NAMESPACE(vl::workflow::WfConstructorType)
				ENUM_NAMESPACE_ITEM(Undefined)
				ENUM_NAMESPACE_ITEM(SharedPtr)
				ENUM_NAMESPACE_ITEM(RawPtr)
			END_ENUM_ITEM(vl::workflow::WfConstructorType)

			BEGIN_CLASS_MEMBER(vl::workflow::WfBaseConstructorCall)
				CLASS_MEMBER_BASE(vl::glr::ParsingAstBase)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfBaseConstructorCall>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(type)
				CLASS_MEMBER_FIELD(arguments)
			END_CLASS_MEMBER(vl::workflow::WfBaseConstructorCall)

			BEGIN_CLASS_MEMBER(vl::workflow::WfConstructorDeclaration)
				CLASS_MEMBER_BASE(vl::workflow::WfDeclaration)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfConstructorDeclaration>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(constructorType)
				CLASS_MEMBER_FIELD(baseConstructorCalls)
				CLASS_MEMBER_FIELD(arguments)
				CLASS_MEMBER_FIELD(statement)
			END_CLASS_MEMBER(vl::workflow::WfConstructorDeclaration)

			BEGIN_CLASS_MEMBER(vl::workflow::WfDestructorDeclaration)
				CLASS_MEMBER_BASE(vl::workflow::WfDeclaration)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfDestructorDeclaration>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(statement)
			END_CLASS_MEMBER(vl::workflow::WfDestructorDeclaration)

			BEGIN_CLASS_MEMBER(vl::workflow::WfClassDeclaration)
				CLASS_MEMBER_BASE(vl::workflow::WfDeclaration)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfClassDeclaration>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(kind)
				CLASS_MEMBER_FIELD(constructorType)
				CLASS_MEMBER_FIELD(baseTypes)
				CLASS_MEMBER_FIELD(declarations)
			END_CLASS_MEMBER(vl::workflow::WfClassDeclaration)

			BEGIN_ENUM_ITEM(vl::workflow::WfEnumKind)
				ENUM_ITEM_NAMESPACE(vl::workflow::WfEnumKind)
				ENUM_NAMESPACE_ITEM(Normal)
				ENUM_NAMESPACE_ITEM(Flag)
			END_ENUM_ITEM(vl::workflow::WfEnumKind)

			BEGIN_ENUM_ITEM(vl::workflow::WfEnumItemKind)
				ENUM_ITEM_NAMESPACE(vl::workflow::WfEnumItemKind)
				ENUM_NAMESPACE_ITEM(Constant)
				ENUM_NAMESPACE_ITEM(Intersection)
			END_ENUM_ITEM(vl::workflow::WfEnumItemKind)

			BEGIN_CLASS_MEMBER(vl::workflow::WfEnumItemIntersection)
				CLASS_MEMBER_BASE(vl::glr::ParsingAstBase)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfEnumItemIntersection>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(name)
			END_CLASS_MEMBER(vl::workflow::WfEnumItemIntersection)

			BEGIN_CLASS_MEMBER(vl::workflow::WfEnumItem)
				CLASS_MEMBER_BASE(vl::glr::ParsingAstBase)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfEnumItem>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(attributes)
				CLASS_MEMBER_FIELD(name)
				CLASS_MEMBER_FIELD(kind)
				CLASS_MEMBER_FIELD(number)
				CLASS_MEMBER_FIELD(intersections)
			END_CLASS_MEMBER(vl::workflow::WfEnumItem)

			BEGIN_CLASS_MEMBER(vl::workflow::WfEnumDeclaration)
				CLASS_MEMBER_BASE(vl::workflow::WfDeclaration)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfEnumDeclaration>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(kind)
				CLASS_MEMBER_FIELD(items)
			END_CLASS_MEMBER(vl::workflow::WfEnumDeclaration)

			BEGIN_CLASS_MEMBER(vl::workflow::WfStructMember)
				CLASS_MEMBER_BASE(vl::glr::ParsingAstBase)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfStructMember>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(attributes)
				CLASS_MEMBER_FIELD(name)
				CLASS_MEMBER_FIELD(type)
			END_CLASS_MEMBER(vl::workflow::WfStructMember)

			BEGIN_CLASS_MEMBER(vl::workflow::WfStructDeclaration)
				CLASS_MEMBER_BASE(vl::workflow::WfDeclaration)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfStructDeclaration>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(members)
			END_CLASS_MEMBER(vl::workflow::WfStructDeclaration)

			BEGIN_CLASS_MEMBER(vl::workflow::WfVirtualCfeDeclaration)
				CLASS_MEMBER_BASE(vl::workflow::WfDeclaration)

				CLASS_MEMBER_FIELD(expandedDeclarations)
			END_CLASS_MEMBER(vl::workflow::WfVirtualCfeDeclaration)

			BEGIN_ENUM_ITEM(vl::workflow::WfAPConst)
				ENUM_ITEM_NAMESPACE(vl::workflow::WfAPConst)
				ENUM_NAMESPACE_ITEM(Readonly)
				ENUM_NAMESPACE_ITEM(Writable)
			END_ENUM_ITEM(vl::workflow::WfAPConst)

			BEGIN_ENUM_ITEM(vl::workflow::WfAPObserve)
				ENUM_ITEM_NAMESPACE(vl::workflow::WfAPObserve)
				ENUM_NAMESPACE_ITEM(Observable)
				ENUM_NAMESPACE_ITEM(NotObservable)
			END_ENUM_ITEM(vl::workflow::WfAPObserve)

			BEGIN_CLASS_MEMBER(vl::workflow::WfAutoPropertyDeclaration)
				CLASS_MEMBER_BASE(vl::workflow::WfVirtualCfeDeclaration)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfAutoPropertyDeclaration>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(functionKind)
				CLASS_MEMBER_FIELD(type)
				CLASS_MEMBER_FIELD(configConst)
				CLASS_MEMBER_FIELD(configObserve)
				CLASS_MEMBER_FIELD(expression)
			END_CLASS_MEMBER(vl::workflow::WfAutoPropertyDeclaration)

			BEGIN_CLASS_MEMBER(vl::workflow::WfCastResultInterfaceDeclaration)
				CLASS_MEMBER_BASE(vl::workflow::WfVirtualCfeDeclaration)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfCastResultInterfaceDeclaration>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(baseType)
				CLASS_MEMBER_FIELD(elementType)
			END_CLASS_MEMBER(vl::workflow::WfCastResultInterfaceDeclaration)

			BEGIN_CLASS_MEMBER(vl::workflow::WfVirtualCseDeclaration)
				CLASS_MEMBER_BASE(vl::workflow::WfDeclaration)

				CLASS_MEMBER_FIELD(expandedDeclarations)
			END_CLASS_MEMBER(vl::workflow::WfVirtualCseDeclaration)

			BEGIN_CLASS_MEMBER(vl::workflow::WfStateInput)
				CLASS_MEMBER_BASE(vl::glr::ParsingAstBase)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfStateInput>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(name)
				CLASS_MEMBER_FIELD(arguments)
			END_CLASS_MEMBER(vl::workflow::WfStateInput)

			BEGIN_CLASS_MEMBER(vl::workflow::WfStateDeclaration)
				CLASS_MEMBER_BASE(vl::glr::ParsingAstBase)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfStateDeclaration>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(name)
				CLASS_MEMBER_FIELD(arguments)
				CLASS_MEMBER_FIELD(statement)
			END_CLASS_MEMBER(vl::workflow::WfStateDeclaration)

			BEGIN_CLASS_MEMBER(vl::workflow::WfStateMachineDeclaration)
				CLASS_MEMBER_BASE(vl::workflow::WfVirtualCseDeclaration)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfStateMachineDeclaration>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(inputs)
				CLASS_MEMBER_FIELD(states)
			END_CLASS_MEMBER(vl::workflow::WfStateMachineDeclaration)

			BEGIN_CLASS_MEMBER(vl::workflow::WfBreakStatement)
				CLASS_MEMBER_BASE(vl::workflow::WfStatement)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfBreakStatement>(), NO_PARAMETER)

			END_CLASS_MEMBER(vl::workflow::WfBreakStatement)

			BEGIN_CLASS_MEMBER(vl::workflow::WfContinueStatement)
				CLASS_MEMBER_BASE(vl::workflow::WfStatement)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfContinueStatement>(), NO_PARAMETER)

			END_CLASS_MEMBER(vl::workflow::WfContinueStatement)

			BEGIN_CLASS_MEMBER(vl::workflow::WfReturnStatement)
				CLASS_MEMBER_BASE(vl::workflow::WfStatement)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfReturnStatement>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(expression)
			END_CLASS_MEMBER(vl::workflow::WfReturnStatement)

			BEGIN_CLASS_MEMBER(vl::workflow::WfDeleteStatement)
				CLASS_MEMBER_BASE(vl::workflow::WfStatement)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfDeleteStatement>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(expression)
			END_CLASS_MEMBER(vl::workflow::WfDeleteStatement)

			BEGIN_CLASS_MEMBER(vl::workflow::WfRaiseExceptionStatement)
				CLASS_MEMBER_BASE(vl::workflow::WfStatement)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfRaiseExceptionStatement>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(expression)
			END_CLASS_MEMBER(vl::workflow::WfRaiseExceptionStatement)

			BEGIN_CLASS_MEMBER(vl::workflow::WfIfStatement)
				CLASS_MEMBER_BASE(vl::workflow::WfStatement)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfIfStatement>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(type)
				CLASS_MEMBER_FIELD(name)
				CLASS_MEMBER_FIELD(expression)
				CLASS_MEMBER_FIELD(trueBranch)
				CLASS_MEMBER_FIELD(falseBranch)
			END_CLASS_MEMBER(vl::workflow::WfIfStatement)

			BEGIN_CLASS_MEMBER(vl::workflow::WfWhileStatement)
				CLASS_MEMBER_BASE(vl::workflow::WfStatement)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfWhileStatement>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(condition)
				CLASS_MEMBER_FIELD(statement)
			END_CLASS_MEMBER(vl::workflow::WfWhileStatement)

			BEGIN_CLASS_MEMBER(vl::workflow::WfTryStatement)
				CLASS_MEMBER_BASE(vl::workflow::WfStatement)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfTryStatement>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(protectedStatement)
				CLASS_MEMBER_FIELD(name)
				CLASS_MEMBER_FIELD(catchStatement)
				CLASS_MEMBER_FIELD(finallyStatement)
			END_CLASS_MEMBER(vl::workflow::WfTryStatement)

			BEGIN_CLASS_MEMBER(vl::workflow::WfBlockStatement)
				CLASS_MEMBER_BASE(vl::workflow::WfStatement)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfBlockStatement>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(statements)
				CLASS_MEMBER_FIELD(endLabel)
			END_CLASS_MEMBER(vl::workflow::WfBlockStatement)

			BEGIN_CLASS_MEMBER(vl::workflow::WfGotoStatement)
				CLASS_MEMBER_BASE(vl::workflow::WfStatement)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfGotoStatement>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(label)
			END_CLASS_MEMBER(vl::workflow::WfGotoStatement)

			BEGIN_CLASS_MEMBER(vl::workflow::WfVariableStatement)
				CLASS_MEMBER_BASE(vl::workflow::WfStatement)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfVariableStatement>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(variable)
			END_CLASS_MEMBER(vl::workflow::WfVariableStatement)

			BEGIN_CLASS_MEMBER(vl::workflow::WfExpressionStatement)
				CLASS_MEMBER_BASE(vl::workflow::WfStatement)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfExpressionStatement>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(expression)
			END_CLASS_MEMBER(vl::workflow::WfExpressionStatement)

			BEGIN_CLASS_MEMBER(vl::workflow::WfVirtualCseStatement)
				CLASS_MEMBER_BASE(vl::workflow::WfStatement)

				CLASS_MEMBER_FIELD(expandedStatement)
			END_CLASS_MEMBER(vl::workflow::WfVirtualCseStatement)

			BEGIN_ENUM_ITEM(vl::workflow::WfForEachDirection)
				ENUM_ITEM_NAMESPACE(vl::workflow::WfForEachDirection)
				ENUM_NAMESPACE_ITEM(Normal)
				ENUM_NAMESPACE_ITEM(Reversed)
			END_ENUM_ITEM(vl::workflow::WfForEachDirection)

			BEGIN_CLASS_MEMBER(vl::workflow::WfForEachStatement)
				CLASS_MEMBER_BASE(vl::workflow::WfVirtualCseStatement)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfForEachStatement>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(name)
				CLASS_MEMBER_FIELD(direction)
				CLASS_MEMBER_FIELD(collection)
				CLASS_MEMBER_FIELD(statement)
			END_CLASS_MEMBER(vl::workflow::WfForEachStatement)

			BEGIN_CLASS_MEMBER(vl::workflow::WfSwitchCase)
				CLASS_MEMBER_BASE(vl::glr::ParsingAstBase)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfSwitchCase>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(expression)
				CLASS_MEMBER_FIELD(statement)
			END_CLASS_MEMBER(vl::workflow::WfSwitchCase)

			BEGIN_CLASS_MEMBER(vl::workflow::WfSwitchStatement)
				CLASS_MEMBER_BASE(vl::workflow::WfVirtualCseStatement)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfSwitchStatement>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(expression)
				CLASS_MEMBER_FIELD(caseBranches)
				CLASS_MEMBER_FIELD(defaultBranch)
			END_CLASS_MEMBER(vl::workflow::WfSwitchStatement)

			BEGIN_CLASS_MEMBER(vl::workflow::WfCoProviderStatement)
				CLASS_MEMBER_BASE(vl::workflow::WfVirtualCseStatement)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfCoProviderStatement>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(name)
				CLASS_MEMBER_FIELD(statement)
			END_CLASS_MEMBER(vl::workflow::WfCoProviderStatement)

			BEGIN_CLASS_MEMBER(vl::workflow::WfCoroutineStatement)
				CLASS_MEMBER_BASE(vl::workflow::WfStatement)

			END_CLASS_MEMBER(vl::workflow::WfCoroutineStatement)

			BEGIN_CLASS_MEMBER(vl::workflow::WfCoPauseStatement)
				CLASS_MEMBER_BASE(vl::workflow::WfCoroutineStatement)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfCoPauseStatement>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(statement)
			END_CLASS_MEMBER(vl::workflow::WfCoPauseStatement)

			BEGIN_CLASS_MEMBER(vl::workflow::WfCoOperatorStatement)
				CLASS_MEMBER_BASE(vl::workflow::WfCoroutineStatement)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfCoOperatorStatement>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(varName)
				CLASS_MEMBER_FIELD(opName)
				CLASS_MEMBER_FIELD(arguments)
			END_CLASS_MEMBER(vl::workflow::WfCoOperatorStatement)

			BEGIN_ENUM_ITEM(vl::workflow::WfStateSwitchType)
				ENUM_ITEM_NAMESPACE(vl::workflow::WfStateSwitchType)
				ENUM_NAMESPACE_ITEM(Default)
				ENUM_NAMESPACE_ITEM(Pass)
				ENUM_NAMESPACE_ITEM(PassAndReturn)
				ENUM_NAMESPACE_ITEM(Ignore)
				ENUM_NAMESPACE_ITEM(IgnoreAndReturn)
			END_ENUM_ITEM(vl::workflow::WfStateSwitchType)

			BEGIN_ENUM_ITEM(vl::workflow::WfStateInvokeType)
				ENUM_ITEM_NAMESPACE(vl::workflow::WfStateInvokeType)
				ENUM_NAMESPACE_ITEM(Goto)
				ENUM_NAMESPACE_ITEM(Push)
			END_ENUM_ITEM(vl::workflow::WfStateInvokeType)

			BEGIN_CLASS_MEMBER(vl::workflow::WfStateMachineStatement)
				CLASS_MEMBER_BASE(vl::workflow::WfStatement)

			END_CLASS_MEMBER(vl::workflow::WfStateMachineStatement)

			BEGIN_CLASS_MEMBER(vl::workflow::WfStateSwitchArgument)
				CLASS_MEMBER_BASE(vl::glr::ParsingAstBase)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfStateSwitchArgument>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(name)
			END_CLASS_MEMBER(vl::workflow::WfStateSwitchArgument)

			BEGIN_CLASS_MEMBER(vl::workflow::WfStateSwitchCase)
				CLASS_MEMBER_BASE(vl::glr::ParsingAstBase)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfStateSwitchCase>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(name)
				CLASS_MEMBER_FIELD(arguments)
				CLASS_MEMBER_FIELD(statement)
			END_CLASS_MEMBER(vl::workflow::WfStateSwitchCase)

			BEGIN_CLASS_MEMBER(vl::workflow::WfStateSwitchStatement)
				CLASS_MEMBER_BASE(vl::workflow::WfStateMachineStatement)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfStateSwitchStatement>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(type)
				CLASS_MEMBER_FIELD(caseBranches)
			END_CLASS_MEMBER(vl::workflow::WfStateSwitchStatement)

			BEGIN_CLASS_MEMBER(vl::workflow::WfStateInvokeStatement)
				CLASS_MEMBER_BASE(vl::workflow::WfStateMachineStatement)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfStateInvokeStatement>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(type)
				CLASS_MEMBER_FIELD(name)
				CLASS_MEMBER_FIELD(arguments)
			END_CLASS_MEMBER(vl::workflow::WfStateInvokeStatement)

			BEGIN_CLASS_MEMBER(vl::workflow::WfThisExpression)
				CLASS_MEMBER_BASE(vl::workflow::WfExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfThisExpression>(), NO_PARAMETER)

			END_CLASS_MEMBER(vl::workflow::WfThisExpression)

			BEGIN_CLASS_MEMBER(vl::workflow::WfTopQualifiedExpression)
				CLASS_MEMBER_BASE(vl::workflow::WfExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfTopQualifiedExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(name)
			END_CLASS_MEMBER(vl::workflow::WfTopQualifiedExpression)

			BEGIN_CLASS_MEMBER(vl::workflow::WfReferenceExpression)
				CLASS_MEMBER_BASE(vl::workflow::WfExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfReferenceExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(name)
			END_CLASS_MEMBER(vl::workflow::WfReferenceExpression)

			BEGIN_CLASS_MEMBER(vl::workflow::WfOrderedNameExpression)
				CLASS_MEMBER_BASE(vl::workflow::WfExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfOrderedNameExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(name)
			END_CLASS_MEMBER(vl::workflow::WfOrderedNameExpression)

			BEGIN_CLASS_MEMBER(vl::workflow::WfOrderedLambdaExpression)
				CLASS_MEMBER_BASE(vl::workflow::WfExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfOrderedLambdaExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(body)
			END_CLASS_MEMBER(vl::workflow::WfOrderedLambdaExpression)

			BEGIN_CLASS_MEMBER(vl::workflow::WfMemberExpression)
				CLASS_MEMBER_BASE(vl::workflow::WfExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfMemberExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(parent)
				CLASS_MEMBER_FIELD(name)
			END_CLASS_MEMBER(vl::workflow::WfMemberExpression)

			BEGIN_CLASS_MEMBER(vl::workflow::WfChildExpression)
				CLASS_MEMBER_BASE(vl::workflow::WfExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfChildExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(parent)
				CLASS_MEMBER_FIELD(name)
			END_CLASS_MEMBER(vl::workflow::WfChildExpression)

			BEGIN_ENUM_ITEM(vl::workflow::WfLiteralValue)
				ENUM_ITEM_NAMESPACE(vl::workflow::WfLiteralValue)
				ENUM_NAMESPACE_ITEM(Null)
				ENUM_NAMESPACE_ITEM(True)
				ENUM_NAMESPACE_ITEM(False)
			END_ENUM_ITEM(vl::workflow::WfLiteralValue)

			BEGIN_CLASS_MEMBER(vl::workflow::WfLiteralExpression)
				CLASS_MEMBER_BASE(vl::workflow::WfExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfLiteralExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(value)
			END_CLASS_MEMBER(vl::workflow::WfLiteralExpression)

			BEGIN_CLASS_MEMBER(vl::workflow::WfFloatingExpression)
				CLASS_MEMBER_BASE(vl::workflow::WfExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfFloatingExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(value)
			END_CLASS_MEMBER(vl::workflow::WfFloatingExpression)

			BEGIN_CLASS_MEMBER(vl::workflow::WfIntegerExpression)
				CLASS_MEMBER_BASE(vl::workflow::WfExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfIntegerExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(value)
			END_CLASS_MEMBER(vl::workflow::WfIntegerExpression)

			BEGIN_CLASS_MEMBER(vl::workflow::WfStringExpression)
				CLASS_MEMBER_BASE(vl::workflow::WfExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfStringExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(value)
			END_CLASS_MEMBER(vl::workflow::WfStringExpression)

			BEGIN_ENUM_ITEM(vl::workflow::WfUnaryOperator)
				ENUM_ITEM_NAMESPACE(vl::workflow::WfUnaryOperator)
				ENUM_NAMESPACE_ITEM(Positive)
				ENUM_NAMESPACE_ITEM(Negative)
				ENUM_NAMESPACE_ITEM(Not)
			END_ENUM_ITEM(vl::workflow::WfUnaryOperator)

			BEGIN_CLASS_MEMBER(vl::workflow::WfUnaryExpression)
				CLASS_MEMBER_BASE(vl::workflow::WfExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfUnaryExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(op)
				CLASS_MEMBER_FIELD(operand)
			END_CLASS_MEMBER(vl::workflow::WfUnaryExpression)

			BEGIN_ENUM_ITEM(vl::workflow::WfBinaryOperator)
				ENUM_ITEM_NAMESPACE(vl::workflow::WfBinaryOperator)
				ENUM_NAMESPACE_ITEM(Assign)
				ENUM_NAMESPACE_ITEM(Index)
				ENUM_NAMESPACE_ITEM(FlagAnd)
				ENUM_NAMESPACE_ITEM(FlagOr)
				ENUM_NAMESPACE_ITEM(FailedThen)
				ENUM_NAMESPACE_ITEM(Exp)
				ENUM_NAMESPACE_ITEM(Add)
				ENUM_NAMESPACE_ITEM(Sub)
				ENUM_NAMESPACE_ITEM(Mul)
				ENUM_NAMESPACE_ITEM(Div)
				ENUM_NAMESPACE_ITEM(Mod)
				ENUM_NAMESPACE_ITEM(Shl)
				ENUM_NAMESPACE_ITEM(Shr)
				ENUM_NAMESPACE_ITEM(LT)
				ENUM_NAMESPACE_ITEM(GT)
				ENUM_NAMESPACE_ITEM(LE)
				ENUM_NAMESPACE_ITEM(GE)
				ENUM_NAMESPACE_ITEM(EQ)
				ENUM_NAMESPACE_ITEM(NE)
				ENUM_NAMESPACE_ITEM(Xor)
				ENUM_NAMESPACE_ITEM(And)
				ENUM_NAMESPACE_ITEM(Or)
			END_ENUM_ITEM(vl::workflow::WfBinaryOperator)

			BEGIN_CLASS_MEMBER(vl::workflow::WfBinaryExpression)
				CLASS_MEMBER_BASE(vl::workflow::WfExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfBinaryExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(op)
				CLASS_MEMBER_FIELD(first)
				CLASS_MEMBER_FIELD(second)
			END_CLASS_MEMBER(vl::workflow::WfBinaryExpression)

			BEGIN_CLASS_MEMBER(vl::workflow::WfLetVariable)
				CLASS_MEMBER_BASE(vl::glr::ParsingAstBase)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfLetVariable>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(name)
				CLASS_MEMBER_FIELD(value)
			END_CLASS_MEMBER(vl::workflow::WfLetVariable)

			BEGIN_CLASS_MEMBER(vl::workflow::WfLetExpression)
				CLASS_MEMBER_BASE(vl::workflow::WfExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfLetExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(variables)
				CLASS_MEMBER_FIELD(expression)
			END_CLASS_MEMBER(vl::workflow::WfLetExpression)

			BEGIN_CLASS_MEMBER(vl::workflow::WfIfExpression)
				CLASS_MEMBER_BASE(vl::workflow::WfExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfIfExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(condition)
				CLASS_MEMBER_FIELD(trueBranch)
				CLASS_MEMBER_FIELD(falseBranch)
			END_CLASS_MEMBER(vl::workflow::WfIfExpression)

			BEGIN_ENUM_ITEM(vl::workflow::WfRangeBoundary)
				ENUM_ITEM_NAMESPACE(vl::workflow::WfRangeBoundary)
				ENUM_NAMESPACE_ITEM(Inclusive)
				ENUM_NAMESPACE_ITEM(Exclusive)
			END_ENUM_ITEM(vl::workflow::WfRangeBoundary)

			BEGIN_CLASS_MEMBER(vl::workflow::WfRangeExpression)
				CLASS_MEMBER_BASE(vl::workflow::WfExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfRangeExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(begin)
				CLASS_MEMBER_FIELD(beginBoundary)
				CLASS_MEMBER_FIELD(end)
				CLASS_MEMBER_FIELD(endBoundary)
			END_CLASS_MEMBER(vl::workflow::WfRangeExpression)

			BEGIN_ENUM_ITEM(vl::workflow::WfSetTesting)
				ENUM_ITEM_NAMESPACE(vl::workflow::WfSetTesting)
				ENUM_NAMESPACE_ITEM(In)
				ENUM_NAMESPACE_ITEM(NotIn)
			END_ENUM_ITEM(vl::workflow::WfSetTesting)

			BEGIN_CLASS_MEMBER(vl::workflow::WfSetTestingExpression)
				CLASS_MEMBER_BASE(vl::workflow::WfExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfSetTestingExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(test)
				CLASS_MEMBER_FIELD(element)
				CLASS_MEMBER_FIELD(collection)
			END_CLASS_MEMBER(vl::workflow::WfSetTestingExpression)

			BEGIN_CLASS_MEMBER(vl::workflow::WfConstructorArgument)
				CLASS_MEMBER_BASE(vl::glr::ParsingAstBase)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfConstructorArgument>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(key)
				CLASS_MEMBER_FIELD(value)
			END_CLASS_MEMBER(vl::workflow::WfConstructorArgument)

			BEGIN_CLASS_MEMBER(vl::workflow::WfConstructorExpression)
				CLASS_MEMBER_BASE(vl::workflow::WfExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfConstructorExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(arguments)
			END_CLASS_MEMBER(vl::workflow::WfConstructorExpression)

			BEGIN_CLASS_MEMBER(vl::workflow::WfInferExpression)
				CLASS_MEMBER_BASE(vl::workflow::WfExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfInferExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(expression)
				CLASS_MEMBER_FIELD(type)
			END_CLASS_MEMBER(vl::workflow::WfInferExpression)

			BEGIN_ENUM_ITEM(vl::workflow::WfTypeCastingStrategy)
				ENUM_ITEM_NAMESPACE(vl::workflow::WfTypeCastingStrategy)
				ENUM_NAMESPACE_ITEM(Strong)
				ENUM_NAMESPACE_ITEM(Weak)
			END_ENUM_ITEM(vl::workflow::WfTypeCastingStrategy)

			BEGIN_CLASS_MEMBER(vl::workflow::WfTypeCastingExpression)
				CLASS_MEMBER_BASE(vl::workflow::WfExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfTypeCastingExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(strategy)
				CLASS_MEMBER_FIELD(expression)
				CLASS_MEMBER_FIELD(type)
			END_CLASS_MEMBER(vl::workflow::WfTypeCastingExpression)

			BEGIN_ENUM_ITEM(vl::workflow::WfTypeTesting)
				ENUM_ITEM_NAMESPACE(vl::workflow::WfTypeTesting)
				ENUM_NAMESPACE_ITEM(IsType)
				ENUM_NAMESPACE_ITEM(IsNotType)
				ENUM_NAMESPACE_ITEM(IsNull)
				ENUM_NAMESPACE_ITEM(IsNotNull)
			END_ENUM_ITEM(vl::workflow::WfTypeTesting)

			BEGIN_CLASS_MEMBER(vl::workflow::WfTypeTestingExpression)
				CLASS_MEMBER_BASE(vl::workflow::WfExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfTypeTestingExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(test)
				CLASS_MEMBER_FIELD(expression)
				CLASS_MEMBER_FIELD(type)
			END_CLASS_MEMBER(vl::workflow::WfTypeTestingExpression)

			BEGIN_CLASS_MEMBER(vl::workflow::WfTypeOfTypeExpression)
				CLASS_MEMBER_BASE(vl::workflow::WfExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfTypeOfTypeExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(type)
			END_CLASS_MEMBER(vl::workflow::WfTypeOfTypeExpression)

			BEGIN_CLASS_MEMBER(vl::workflow::WfTypeOfExpressionExpression)
				CLASS_MEMBER_BASE(vl::workflow::WfExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfTypeOfExpressionExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(expression)
			END_CLASS_MEMBER(vl::workflow::WfTypeOfExpressionExpression)

			BEGIN_CLASS_MEMBER(vl::workflow::WfAttachEventExpression)
				CLASS_MEMBER_BASE(vl::workflow::WfExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfAttachEventExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(event)
				CLASS_MEMBER_FIELD(function)
			END_CLASS_MEMBER(vl::workflow::WfAttachEventExpression)

			BEGIN_CLASS_MEMBER(vl::workflow::WfDetachEventExpression)
				CLASS_MEMBER_BASE(vl::workflow::WfExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfDetachEventExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(event)
				CLASS_MEMBER_FIELD(handler)
			END_CLASS_MEMBER(vl::workflow::WfDetachEventExpression)

			BEGIN_ENUM_ITEM(vl::workflow::WfObserveType)
				ENUM_ITEM_NAMESPACE(vl::workflow::WfObserveType)
				ENUM_NAMESPACE_ITEM(SimpleObserve)
				ENUM_NAMESPACE_ITEM(ExtendedObserve)
			END_ENUM_ITEM(vl::workflow::WfObserveType)

			BEGIN_CLASS_MEMBER(vl::workflow::WfObserveExpression)
				CLASS_MEMBER_BASE(vl::workflow::WfExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfObserveExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(parent)
				CLASS_MEMBER_FIELD(observeType)
				CLASS_MEMBER_FIELD(name)
				CLASS_MEMBER_FIELD(expression)
				CLASS_MEMBER_FIELD(events)
			END_CLASS_MEMBER(vl::workflow::WfObserveExpression)

			BEGIN_CLASS_MEMBER(vl::workflow::WfCallExpression)
				CLASS_MEMBER_BASE(vl::workflow::WfExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfCallExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(function)
				CLASS_MEMBER_FIELD(arguments)
			END_CLASS_MEMBER(vl::workflow::WfCallExpression)

			BEGIN_CLASS_MEMBER(vl::workflow::WfFunctionExpression)
				CLASS_MEMBER_BASE(vl::workflow::WfExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfFunctionExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(function)
			END_CLASS_MEMBER(vl::workflow::WfFunctionExpression)

			BEGIN_CLASS_MEMBER(vl::workflow::WfNewClassExpression)
				CLASS_MEMBER_BASE(vl::workflow::WfExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfNewClassExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(type)
				CLASS_MEMBER_FIELD(arguments)
			END_CLASS_MEMBER(vl::workflow::WfNewClassExpression)

			BEGIN_CLASS_MEMBER(vl::workflow::WfNewInterfaceExpression)
				CLASS_MEMBER_BASE(vl::workflow::WfExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfNewInterfaceExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(type)
				CLASS_MEMBER_FIELD(declarations)
			END_CLASS_MEMBER(vl::workflow::WfNewInterfaceExpression)

			BEGIN_CLASS_MEMBER(vl::workflow::WfVirtualCfeExpression)
				CLASS_MEMBER_BASE(vl::workflow::WfExpression)

				CLASS_MEMBER_FIELD(expandedExpression)
			END_CLASS_MEMBER(vl::workflow::WfVirtualCfeExpression)

			BEGIN_CLASS_MEMBER(vl::workflow::WfFormatExpression)
				CLASS_MEMBER_BASE(vl::workflow::WfVirtualCfeExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfFormatExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(value)
			END_CLASS_MEMBER(vl::workflow::WfFormatExpression)

			BEGIN_CLASS_MEMBER(vl::workflow::WfVirtualCseExpression)
				CLASS_MEMBER_BASE(vl::workflow::WfExpression)

				CLASS_MEMBER_FIELD(expandedExpression)
			END_CLASS_MEMBER(vl::workflow::WfVirtualCseExpression)

			BEGIN_CLASS_MEMBER(vl::workflow::WfBindExpression)
				CLASS_MEMBER_BASE(vl::workflow::WfVirtualCseExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfBindExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(expression)
			END_CLASS_MEMBER(vl::workflow::WfBindExpression)

			BEGIN_CLASS_MEMBER(vl::workflow::WfNewCoroutineExpression)
				CLASS_MEMBER_BASE(vl::workflow::WfVirtualCseExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfNewCoroutineExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(name)
				CLASS_MEMBER_FIELD(statement)
			END_CLASS_MEMBER(vl::workflow::WfNewCoroutineExpression)

			BEGIN_CLASS_MEMBER(vl::workflow::WfMixinCastExpression)
				CLASS_MEMBER_BASE(vl::workflow::WfVirtualCseExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfMixinCastExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(type)
				CLASS_MEMBER_FIELD(expression)
			END_CLASS_MEMBER(vl::workflow::WfMixinCastExpression)

			BEGIN_CLASS_MEMBER(vl::workflow::WfExpectedTypeCastExpression)
				CLASS_MEMBER_BASE(vl::workflow::WfVirtualCseExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfExpectedTypeCastExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(strategy)
				CLASS_MEMBER_FIELD(expression)
			END_CLASS_MEMBER(vl::workflow::WfExpectedTypeCastExpression)

			BEGIN_CLASS_MEMBER(vl::workflow::WfCoOperatorExpression)
				CLASS_MEMBER_BASE(vl::workflow::WfVirtualCseExpression)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfCoOperatorExpression>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(name)
			END_CLASS_MEMBER(vl::workflow::WfCoOperatorExpression)

			BEGIN_CLASS_MEMBER(vl::workflow::WfModuleUsingFragment)
				CLASS_MEMBER_BASE(vl::glr::ParsingAstBase)

			END_CLASS_MEMBER(vl::workflow::WfModuleUsingFragment)

			BEGIN_CLASS_MEMBER(vl::workflow::WfModuleUsingNameFragment)
				CLASS_MEMBER_BASE(vl::workflow::WfModuleUsingFragment)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfModuleUsingNameFragment>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(name)
			END_CLASS_MEMBER(vl::workflow::WfModuleUsingNameFragment)

			BEGIN_CLASS_MEMBER(vl::workflow::WfModuleUsingWildCardFragment)
				CLASS_MEMBER_BASE(vl::workflow::WfModuleUsingFragment)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfModuleUsingWildCardFragment>(), NO_PARAMETER)

			END_CLASS_MEMBER(vl::workflow::WfModuleUsingWildCardFragment)

			BEGIN_CLASS_MEMBER(vl::workflow::WfModuleUsingItem)
				CLASS_MEMBER_BASE(vl::glr::ParsingAstBase)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfModuleUsingItem>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(fragments)
			END_CLASS_MEMBER(vl::workflow::WfModuleUsingItem)

			BEGIN_CLASS_MEMBER(vl::workflow::WfModuleUsingPath)
				CLASS_MEMBER_BASE(vl::glr::ParsingAstBase)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfModuleUsingPath>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(items)
			END_CLASS_MEMBER(vl::workflow::WfModuleUsingPath)

			BEGIN_ENUM_ITEM(vl::workflow::WfModuleType)
				ENUM_ITEM_NAMESPACE(vl::workflow::WfModuleType)
				ENUM_NAMESPACE_ITEM(Module)
				ENUM_NAMESPACE_ITEM(Unit)
			END_ENUM_ITEM(vl::workflow::WfModuleType)

			BEGIN_CLASS_MEMBER(vl::workflow::WfModule)
				CLASS_MEMBER_BASE(vl::glr::ParsingAstBase)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<vl::workflow::WfModule>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(moduleType)
				CLASS_MEMBER_FIELD(name)
				CLASS_MEMBER_FIELD(paths)
				CLASS_MEMBER_FIELD(declarations)
			END_CLASS_MEMBER(vl::workflow::WfModule)

			BEGIN_INTERFACE_MEMBER(vl::workflow::WfType::IVisitor)
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfType::IVisitor::*)(vl::workflow::WfPredefinedType* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfType::IVisitor::*)(vl::workflow::WfTopQualifiedType* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfType::IVisitor::*)(vl::workflow::WfReferenceType* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfType::IVisitor::*)(vl::workflow::WfRawPointerType* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfType::IVisitor::*)(vl::workflow::WfSharedPointerType* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfType::IVisitor::*)(vl::workflow::WfNullableType* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfType::IVisitor::*)(vl::workflow::WfEnumerableType* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfType::IVisitor::*)(vl::workflow::WfMapType* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfType::IVisitor::*)(vl::workflow::WfObservableListType* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfType::IVisitor::*)(vl::workflow::WfFunctionType* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfType::IVisitor::*)(vl::workflow::WfChildType* node))
			END_INTERFACE_MEMBER(vl::workflow::WfType)

			BEGIN_INTERFACE_MEMBER(vl::workflow::WfExpression::IVisitor)
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfExpression::IVisitor::*)(vl::workflow::WfThisExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfExpression::IVisitor::*)(vl::workflow::WfTopQualifiedExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfExpression::IVisitor::*)(vl::workflow::WfReferenceExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfExpression::IVisitor::*)(vl::workflow::WfOrderedNameExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfExpression::IVisitor::*)(vl::workflow::WfOrderedLambdaExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfExpression::IVisitor::*)(vl::workflow::WfMemberExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfExpression::IVisitor::*)(vl::workflow::WfChildExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfExpression::IVisitor::*)(vl::workflow::WfLiteralExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfExpression::IVisitor::*)(vl::workflow::WfFloatingExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfExpression::IVisitor::*)(vl::workflow::WfIntegerExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfExpression::IVisitor::*)(vl::workflow::WfStringExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfExpression::IVisitor::*)(vl::workflow::WfUnaryExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfExpression::IVisitor::*)(vl::workflow::WfBinaryExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfExpression::IVisitor::*)(vl::workflow::WfLetExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfExpression::IVisitor::*)(vl::workflow::WfIfExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfExpression::IVisitor::*)(vl::workflow::WfRangeExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfExpression::IVisitor::*)(vl::workflow::WfSetTestingExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfExpression::IVisitor::*)(vl::workflow::WfConstructorExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfExpression::IVisitor::*)(vl::workflow::WfInferExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfExpression::IVisitor::*)(vl::workflow::WfTypeCastingExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfExpression::IVisitor::*)(vl::workflow::WfTypeTestingExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfExpression::IVisitor::*)(vl::workflow::WfTypeOfTypeExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfExpression::IVisitor::*)(vl::workflow::WfTypeOfExpressionExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfExpression::IVisitor::*)(vl::workflow::WfAttachEventExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfExpression::IVisitor::*)(vl::workflow::WfDetachEventExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfExpression::IVisitor::*)(vl::workflow::WfObserveExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfExpression::IVisitor::*)(vl::workflow::WfCallExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfExpression::IVisitor::*)(vl::workflow::WfFunctionExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfExpression::IVisitor::*)(vl::workflow::WfNewClassExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfExpression::IVisitor::*)(vl::workflow::WfNewInterfaceExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfExpression::IVisitor::*)(vl::workflow::WfVirtualCfeExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfExpression::IVisitor::*)(vl::workflow::WfVirtualCseExpression* node))
			END_INTERFACE_MEMBER(vl::workflow::WfExpression)

			BEGIN_INTERFACE_MEMBER(vl::workflow::WfStatement::IVisitor)
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfStatement::IVisitor::*)(vl::workflow::WfBreakStatement* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfStatement::IVisitor::*)(vl::workflow::WfContinueStatement* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfStatement::IVisitor::*)(vl::workflow::WfReturnStatement* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfStatement::IVisitor::*)(vl::workflow::WfDeleteStatement* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfStatement::IVisitor::*)(vl::workflow::WfRaiseExceptionStatement* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfStatement::IVisitor::*)(vl::workflow::WfIfStatement* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfStatement::IVisitor::*)(vl::workflow::WfWhileStatement* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfStatement::IVisitor::*)(vl::workflow::WfTryStatement* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfStatement::IVisitor::*)(vl::workflow::WfBlockStatement* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfStatement::IVisitor::*)(vl::workflow::WfGotoStatement* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfStatement::IVisitor::*)(vl::workflow::WfVariableStatement* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfStatement::IVisitor::*)(vl::workflow::WfExpressionStatement* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfStatement::IVisitor::*)(vl::workflow::WfVirtualCseStatement* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfStatement::IVisitor::*)(vl::workflow::WfCoroutineStatement* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfStatement::IVisitor::*)(vl::workflow::WfStateMachineStatement* node))
			END_INTERFACE_MEMBER(vl::workflow::WfStatement)

			BEGIN_INTERFACE_MEMBER(vl::workflow::WfDeclaration::IVisitor)
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfDeclaration::IVisitor::*)(vl::workflow::WfNamespaceDeclaration* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfDeclaration::IVisitor::*)(vl::workflow::WfFunctionDeclaration* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfDeclaration::IVisitor::*)(vl::workflow::WfVariableDeclaration* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfDeclaration::IVisitor::*)(vl::workflow::WfEventDeclaration* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfDeclaration::IVisitor::*)(vl::workflow::WfPropertyDeclaration* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfDeclaration::IVisitor::*)(vl::workflow::WfConstructorDeclaration* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfDeclaration::IVisitor::*)(vl::workflow::WfDestructorDeclaration* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfDeclaration::IVisitor::*)(vl::workflow::WfClassDeclaration* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfDeclaration::IVisitor::*)(vl::workflow::WfEnumDeclaration* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfDeclaration::IVisitor::*)(vl::workflow::WfStructDeclaration* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfDeclaration::IVisitor::*)(vl::workflow::WfVirtualCfeDeclaration* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfDeclaration::IVisitor::*)(vl::workflow::WfVirtualCseDeclaration* node))
			END_INTERFACE_MEMBER(vl::workflow::WfDeclaration)

			BEGIN_INTERFACE_MEMBER(vl::workflow::WfVirtualCfeDeclaration::IVisitor)
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfVirtualCfeDeclaration::IVisitor::*)(vl::workflow::WfAutoPropertyDeclaration* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfVirtualCfeDeclaration::IVisitor::*)(vl::workflow::WfCastResultInterfaceDeclaration* node))
			END_INTERFACE_MEMBER(vl::workflow::WfVirtualCfeDeclaration)

			BEGIN_INTERFACE_MEMBER(vl::workflow::WfVirtualCseDeclaration::IVisitor)
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfVirtualCseDeclaration::IVisitor::*)(vl::workflow::WfStateMachineDeclaration* node))
			END_INTERFACE_MEMBER(vl::workflow::WfVirtualCseDeclaration)

			BEGIN_INTERFACE_MEMBER(vl::workflow::WfVirtualCseStatement::IVisitor)
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfVirtualCseStatement::IVisitor::*)(vl::workflow::WfForEachStatement* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfVirtualCseStatement::IVisitor::*)(vl::workflow::WfSwitchStatement* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfVirtualCseStatement::IVisitor::*)(vl::workflow::WfCoProviderStatement* node))
			END_INTERFACE_MEMBER(vl::workflow::WfVirtualCseStatement)

			BEGIN_INTERFACE_MEMBER(vl::workflow::WfCoroutineStatement::IVisitor)
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfCoroutineStatement::IVisitor::*)(vl::workflow::WfCoPauseStatement* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfCoroutineStatement::IVisitor::*)(vl::workflow::WfCoOperatorStatement* node))
			END_INTERFACE_MEMBER(vl::workflow::WfCoroutineStatement)

			BEGIN_INTERFACE_MEMBER(vl::workflow::WfStateMachineStatement::IVisitor)
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfStateMachineStatement::IVisitor::*)(vl::workflow::WfStateSwitchStatement* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfStateMachineStatement::IVisitor::*)(vl::workflow::WfStateInvokeStatement* node))
			END_INTERFACE_MEMBER(vl::workflow::WfStateMachineStatement)

			BEGIN_INTERFACE_MEMBER(vl::workflow::WfVirtualCfeExpression::IVisitor)
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfVirtualCfeExpression::IVisitor::*)(vl::workflow::WfFormatExpression* node))
			END_INTERFACE_MEMBER(vl::workflow::WfVirtualCfeExpression)

			BEGIN_INTERFACE_MEMBER(vl::workflow::WfVirtualCseExpression::IVisitor)
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfVirtualCseExpression::IVisitor::*)(vl::workflow::WfBindExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfVirtualCseExpression::IVisitor::*)(vl::workflow::WfNewCoroutineExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfVirtualCseExpression::IVisitor::*)(vl::workflow::WfMixinCastExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfVirtualCseExpression::IVisitor::*)(vl::workflow::WfExpectedTypeCastExpression* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfVirtualCseExpression::IVisitor::*)(vl::workflow::WfCoOperatorExpression* node))
			END_INTERFACE_MEMBER(vl::workflow::WfVirtualCseExpression)

			BEGIN_INTERFACE_MEMBER(vl::workflow::WfModuleUsingFragment::IVisitor)
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfModuleUsingFragment::IVisitor::*)(vl::workflow::WfModuleUsingNameFragment* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(vl::workflow::WfModuleUsingFragment::IVisitor::*)(vl::workflow::WfModuleUsingWildCardFragment* node))
			END_INTERFACE_MEMBER(vl::workflow::WfModuleUsingFragment)

#endif

#ifdef VCZH_DESCRIPTABLEOBJECT_WITH_METADATA
			class WorkflowAstTypeLoader : public vl::Object, public ITypeLoader
			{
			public:
				void Load(ITypeManager* manager)
				{
					ADD_TYPE_INFO(vl::workflow::WfType)
					ADD_TYPE_INFO(vl::workflow::WfType::IVisitor)
					ADD_TYPE_INFO(vl::workflow::WfExpression)
					ADD_TYPE_INFO(vl::workflow::WfExpression::IVisitor)
					ADD_TYPE_INFO(vl::workflow::WfStatement)
					ADD_TYPE_INFO(vl::workflow::WfStatement::IVisitor)
					ADD_TYPE_INFO(vl::workflow::WfAttribute)
					ADD_TYPE_INFO(vl::workflow::WfDeclaration)
					ADD_TYPE_INFO(vl::workflow::WfDeclaration::IVisitor)
					ADD_TYPE_INFO(vl::workflow::WfFunctionKind)
					ADD_TYPE_INFO(vl::workflow::WfPredefinedTypeName)
					ADD_TYPE_INFO(vl::workflow::WfPredefinedType)
					ADD_TYPE_INFO(vl::workflow::WfTopQualifiedType)
					ADD_TYPE_INFO(vl::workflow::WfReferenceType)
					ADD_TYPE_INFO(vl::workflow::WfRawPointerType)
					ADD_TYPE_INFO(vl::workflow::WfSharedPointerType)
					ADD_TYPE_INFO(vl::workflow::WfNullableType)
					ADD_TYPE_INFO(vl::workflow::WfEnumerableType)
					ADD_TYPE_INFO(vl::workflow::WfMapWritability)
					ADD_TYPE_INFO(vl::workflow::WfMapType)
					ADD_TYPE_INFO(vl::workflow::WfObservableListType)
					ADD_TYPE_INFO(vl::workflow::WfFunctionType)
					ADD_TYPE_INFO(vl::workflow::WfChildType)
					ADD_TYPE_INFO(vl::workflow::WfNamespaceDeclaration)
					ADD_TYPE_INFO(vl::workflow::WfFunctionArgument)
					ADD_TYPE_INFO(vl::workflow::WfFunctionAnonymity)
					ADD_TYPE_INFO(vl::workflow::WfFunctionDeclaration)
					ADD_TYPE_INFO(vl::workflow::WfVariableDeclaration)
					ADD_TYPE_INFO(vl::workflow::WfEventDeclaration)
					ADD_TYPE_INFO(vl::workflow::WfPropertyDeclaration)
					ADD_TYPE_INFO(vl::workflow::WfClassKind)
					ADD_TYPE_INFO(vl::workflow::WfConstructorType)
					ADD_TYPE_INFO(vl::workflow::WfBaseConstructorCall)
					ADD_TYPE_INFO(vl::workflow::WfConstructorDeclaration)
					ADD_TYPE_INFO(vl::workflow::WfDestructorDeclaration)
					ADD_TYPE_INFO(vl::workflow::WfClassDeclaration)
					ADD_TYPE_INFO(vl::workflow::WfEnumKind)
					ADD_TYPE_INFO(vl::workflow::WfEnumItemKind)
					ADD_TYPE_INFO(vl::workflow::WfEnumItemIntersection)
					ADD_TYPE_INFO(vl::workflow::WfEnumItem)
					ADD_TYPE_INFO(vl::workflow::WfEnumDeclaration)
					ADD_TYPE_INFO(vl::workflow::WfStructMember)
					ADD_TYPE_INFO(vl::workflow::WfStructDeclaration)
					ADD_TYPE_INFO(vl::workflow::WfVirtualCfeDeclaration)
					ADD_TYPE_INFO(vl::workflow::WfVirtualCfeDeclaration::IVisitor)
					ADD_TYPE_INFO(vl::workflow::WfAPConst)
					ADD_TYPE_INFO(vl::workflow::WfAPObserve)
					ADD_TYPE_INFO(vl::workflow::WfAutoPropertyDeclaration)
					ADD_TYPE_INFO(vl::workflow::WfCastResultInterfaceDeclaration)
					ADD_TYPE_INFO(vl::workflow::WfVirtualCseDeclaration)
					ADD_TYPE_INFO(vl::workflow::WfVirtualCseDeclaration::IVisitor)
					ADD_TYPE_INFO(vl::workflow::WfStateInput)
					ADD_TYPE_INFO(vl::workflow::WfStateDeclaration)
					ADD_TYPE_INFO(vl::workflow::WfStateMachineDeclaration)
					ADD_TYPE_INFO(vl::workflow::WfBreakStatement)
					ADD_TYPE_INFO(vl::workflow::WfContinueStatement)
					ADD_TYPE_INFO(vl::workflow::WfReturnStatement)
					ADD_TYPE_INFO(vl::workflow::WfDeleteStatement)
					ADD_TYPE_INFO(vl::workflow::WfRaiseExceptionStatement)
					ADD_TYPE_INFO(vl::workflow::WfIfStatement)
					ADD_TYPE_INFO(vl::workflow::WfWhileStatement)
					ADD_TYPE_INFO(vl::workflow::WfTryStatement)
					ADD_TYPE_INFO(vl::workflow::WfBlockStatement)
					ADD_TYPE_INFO(vl::workflow::WfGotoStatement)
					ADD_TYPE_INFO(vl::workflow::WfVariableStatement)
					ADD_TYPE_INFO(vl::workflow::WfExpressionStatement)
					ADD_TYPE_INFO(vl::workflow::WfVirtualCseStatement)
					ADD_TYPE_INFO(vl::workflow::WfVirtualCseStatement::IVisitor)
					ADD_TYPE_INFO(vl::workflow::WfForEachDirection)
					ADD_TYPE_INFO(vl::workflow::WfForEachStatement)
					ADD_TYPE_INFO(vl::workflow::WfSwitchCase)
					ADD_TYPE_INFO(vl::workflow::WfSwitchStatement)
					ADD_TYPE_INFO(vl::workflow::WfCoProviderStatement)
					ADD_TYPE_INFO(vl::workflow::WfCoroutineStatement)
					ADD_TYPE_INFO(vl::workflow::WfCoroutineStatement::IVisitor)
					ADD_TYPE_INFO(vl::workflow::WfCoPauseStatement)
					ADD_TYPE_INFO(vl::workflow::WfCoOperatorStatement)
					ADD_TYPE_INFO(vl::workflow::WfStateSwitchType)
					ADD_TYPE_INFO(vl::workflow::WfStateInvokeType)
					ADD_TYPE_INFO(vl::workflow::WfStateMachineStatement)
					ADD_TYPE_INFO(vl::workflow::WfStateMachineStatement::IVisitor)
					ADD_TYPE_INFO(vl::workflow::WfStateSwitchArgument)
					ADD_TYPE_INFO(vl::workflow::WfStateSwitchCase)
					ADD_TYPE_INFO(vl::workflow::WfStateSwitchStatement)
					ADD_TYPE_INFO(vl::workflow::WfStateInvokeStatement)
					ADD_TYPE_INFO(vl::workflow::WfThisExpression)
					ADD_TYPE_INFO(vl::workflow::WfTopQualifiedExpression)
					ADD_TYPE_INFO(vl::workflow::WfReferenceExpression)
					ADD_TYPE_INFO(vl::workflow::WfOrderedNameExpression)
					ADD_TYPE_INFO(vl::workflow::WfOrderedLambdaExpression)
					ADD_TYPE_INFO(vl::workflow::WfMemberExpression)
					ADD_TYPE_INFO(vl::workflow::WfChildExpression)
					ADD_TYPE_INFO(vl::workflow::WfLiteralValue)
					ADD_TYPE_INFO(vl::workflow::WfLiteralExpression)
					ADD_TYPE_INFO(vl::workflow::WfFloatingExpression)
					ADD_TYPE_INFO(vl::workflow::WfIntegerExpression)
					ADD_TYPE_INFO(vl::workflow::WfStringExpression)
					ADD_TYPE_INFO(vl::workflow::WfUnaryOperator)
					ADD_TYPE_INFO(vl::workflow::WfUnaryExpression)
					ADD_TYPE_INFO(vl::workflow::WfBinaryOperator)
					ADD_TYPE_INFO(vl::workflow::WfBinaryExpression)
					ADD_TYPE_INFO(vl::workflow::WfLetVariable)
					ADD_TYPE_INFO(vl::workflow::WfLetExpression)
					ADD_TYPE_INFO(vl::workflow::WfIfExpression)
					ADD_TYPE_INFO(vl::workflow::WfRangeBoundary)
					ADD_TYPE_INFO(vl::workflow::WfRangeExpression)
					ADD_TYPE_INFO(vl::workflow::WfSetTesting)
					ADD_TYPE_INFO(vl::workflow::WfSetTestingExpression)
					ADD_TYPE_INFO(vl::workflow::WfConstructorArgument)
					ADD_TYPE_INFO(vl::workflow::WfConstructorExpression)
					ADD_TYPE_INFO(vl::workflow::WfInferExpression)
					ADD_TYPE_INFO(vl::workflow::WfTypeCastingStrategy)
					ADD_TYPE_INFO(vl::workflow::WfTypeCastingExpression)
					ADD_TYPE_INFO(vl::workflow::WfTypeTesting)
					ADD_TYPE_INFO(vl::workflow::WfTypeTestingExpression)
					ADD_TYPE_INFO(vl::workflow::WfTypeOfTypeExpression)
					ADD_TYPE_INFO(vl::workflow::WfTypeOfExpressionExpression)
					ADD_TYPE_INFO(vl::workflow::WfAttachEventExpression)
					ADD_TYPE_INFO(vl::workflow::WfDetachEventExpression)
					ADD_TYPE_INFO(vl::workflow::WfObserveType)
					ADD_TYPE_INFO(vl::workflow::WfObserveExpression)
					ADD_TYPE_INFO(vl::workflow::WfCallExpression)
					ADD_TYPE_INFO(vl::workflow::WfFunctionExpression)
					ADD_TYPE_INFO(vl::workflow::WfNewClassExpression)
					ADD_TYPE_INFO(vl::workflow::WfNewInterfaceExpression)
					ADD_TYPE_INFO(vl::workflow::WfVirtualCfeExpression)
					ADD_TYPE_INFO(vl::workflow::WfVirtualCfeExpression::IVisitor)
					ADD_TYPE_INFO(vl::workflow::WfFormatExpression)
					ADD_TYPE_INFO(vl::workflow::WfVirtualCseExpression)
					ADD_TYPE_INFO(vl::workflow::WfVirtualCseExpression::IVisitor)
					ADD_TYPE_INFO(vl::workflow::WfBindExpression)
					ADD_TYPE_INFO(vl::workflow::WfNewCoroutineExpression)
					ADD_TYPE_INFO(vl::workflow::WfMixinCastExpression)
					ADD_TYPE_INFO(vl::workflow::WfExpectedTypeCastExpression)
					ADD_TYPE_INFO(vl::workflow::WfCoOperatorExpression)
					ADD_TYPE_INFO(vl::workflow::WfModuleUsingFragment)
					ADD_TYPE_INFO(vl::workflow::WfModuleUsingFragment::IVisitor)
					ADD_TYPE_INFO(vl::workflow::WfModuleUsingNameFragment)
					ADD_TYPE_INFO(vl::workflow::WfModuleUsingWildCardFragment)
					ADD_TYPE_INFO(vl::workflow::WfModuleUsingItem)
					ADD_TYPE_INFO(vl::workflow::WfModuleUsingPath)
					ADD_TYPE_INFO(vl::workflow::WfModuleType)
					ADD_TYPE_INFO(vl::workflow::WfModule)
				}

				void Unload(ITypeManager* manager)
				{
				}
			};
#endif
#endif

			bool WorkflowAstLoadTypes()
			{
#ifdef VCZH_DESCRIPTABLEOBJECT_WITH_METADATA
				if (auto manager = GetGlobalTypeManager())
				{
					auto loader = Ptr(new WorkflowAstTypeLoader);
					return manager->AddTypeLoader(loader);
				}
#endif
				return false;
			}
		}
	}
}
