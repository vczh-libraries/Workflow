========================================================
Global Variables:
========================================================

========================================================
Functions:
========================================================
main (2 .. 83)
    Arguments:
    Captured Variables:
    Local Variables:
        b
        i8
        i16
        i32
        i64
        u8
        u16
        u32
        u64
        f32
        f64
        s

<initialize> (0 .. 1)
    Arguments:
    Captured Variables:
    Local Variables:

========================================================
Instructions:
========================================================
0    :     LoadValue     : value = <null>
1    :     Return        
//  false
2    :     LoadValue     : value = <Bool, false>
//  var b = false;
3    :     StoreLocalVar : var = 0(b)
//  1
4    :     LoadValue     : value = <I1, 1>
//  var i8 = 1 of (Int8);
5    :     StoreLocalVar : var = 1(i8)
//  2
6    :     LoadValue     : value = <I2, 2>
//  var i16 = 2 of (Int16);
7    :     StoreLocalVar : var = 2(i16)
//  4
8    :     LoadValue     : value = <I4, 4>
//  var i32 = 4 of (Int32);
9    :     StoreLocalVar : var = 3(i32)
//  8
10   :     LoadValue     : value = <I8, 8>
//  var i64 = 8 of (Int64);
11   :     StoreLocalVar : var = 4(i64)
//  1
12   :     LoadValue     : value = <U1, 1>
//  var u8 = 1 of (UInt8);
13   :     StoreLocalVar : var = 5(u8)
//  2
14   :     LoadValue     : value = <U2, 2>
//  var u16 = 2 of (UInt16);
15   :     StoreLocalVar : var = 6(u16)
//  4
16   :     LoadValue     : value = <U4, 4>
//  var u32 = 4 of (UInt32);
17   :     StoreLocalVar : var = 7(u32)
//  8
18   :     LoadValue     : value = <U8, 8>
//  var u64 = 8 of (UInt64);
19   :     StoreLocalVar : var = 8(u64)
//  1.5
20   :     LoadValue     : value = <F4, 1.5>
//  var f32 = 1.5 of (float);
21   :     StoreLocalVar : var = 9(f32)
//  3
22   :     LoadValue     : value = <F8, 3>
//  var f64 = 3 of (double);
23   :     StoreLocalVar : var = 10(f64)
//  "text"
24   :     LoadValue     : value = <Bool, text>
//  var s = "text" of (string);
25   :     StoreLocalVar : var = 11(s)
//  i8
26   :     LoadLocalVar  : var = 1(i8)
//  i8
27   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::Int32
//  i16
28   :     LoadLocalVar  : var = 2(i16)
//  i16
29   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::Int32
//  (i8 / i16)
30   :     OpDiv         : type = I4
//  (i8 / i16)
31   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  ", "
32   :     LoadValue     : value = <Bool, , >
//  ((i8 / i16) & ", ")
33   :     OpConcat      
//  i16
34   :     LoadLocalVar  : var = 2(i16)
//  i16
35   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::Int32
//  i32
36   :     LoadLocalVar  : var = 3(i32)
//  (i16 / i32)
37   :     OpDiv         : type = I4
//  (i16 / i32)
38   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  (((i8 / i16) & ", ") & (i16 / i32))
39   :     OpConcat      
//  ", "
40   :     LoadValue     : value = <Bool, , >
//  ((((i8 / i16) & ", ") & (i16 / i32)) & ", ")
41   :     OpConcat      
//  i32
42   :     LoadLocalVar  : var = 3(i32)
//  i32
43   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::Int64
//  i64
44   :     LoadLocalVar  : var = 4(i64)
//  (i32 / i64)
45   :     OpDiv         : type = I8
//  (i32 / i64)
46   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  (((((i8 / i16) & ", ") & (i16 / i32)) & ", ") & (i32 / i64))
47   :     OpConcat      
//  ", "
48   :     LoadValue     : value = <Bool, , >
//  ((((((i8 / i16) & ", ") & (i16 / i32)) & ", ") & (i32 / i64)) & ", ")
49   :     OpConcat      
//  u8
50   :     LoadLocalVar  : var = 5(u8)
//  u8
51   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::UInt32
//  u16
52   :     LoadLocalVar  : var = 6(u16)
//  u16
53   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::UInt32
//  (u8 / u16)
54   :     OpDiv         : type = U4
//  (u8 / u16)
55   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  (((((((i8 / i16) & ", ") & (i16 / i32)) & ", ") & (i32 / i64)) & ", ") & (u8 / u16))
56   :     OpConcat      
//  ", "
57   :     LoadValue     : value = <Bool, , >
//  ((((((((i8 / i16) & ", ") & (i16 / i32)) & ", ") & (i32 / i64)) & ", ") & (u8 / u16)) & ", ")
58   :     OpConcat      
//  u16
59   :     LoadLocalVar  : var = 6(u16)
//  u16
60   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::UInt32
//  u32
61   :     LoadLocalVar  : var = 7(u32)
//  (u16 / u32)
62   :     OpDiv         : type = U4
//  (u16 / u32)
63   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  (((((((((i8 / i16) & ", ") & (i16 / i32)) & ", ") & (i32 / i64)) & ", ") & (u8 / u16)) & ", ") & (u16 / u32))
64   :     OpConcat      
//  ", "
65   :     LoadValue     : value = <Bool, , >
//  ((((((((((i8 / i16) & ", ") & (i16 / i32)) & ", ") & (i32 / i64)) & ", ") & (u8 / u16)) & ", ") & (u16 / u32)) & ", ")
66   :     OpConcat      
//  u32
67   :     LoadLocalVar  : var = 7(u32)
//  u32
68   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::UInt64
//  u64
69   :     LoadLocalVar  : var = 8(u64)
//  (u32 / u64)
70   :     OpDiv         : type = U8
//  (u32 / u64)
71   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  (((((((((((i8 / i16) & ", ") & (i16 / i32)) & ", ") & (i32 / i64)) & ", ") & (u8 / u16)) & ", ") & (u16 / u32)) & ", ") & (u32 / u64))
72   :     OpConcat      
//  ", "
73   :     LoadValue     : value = <Bool, , >
//  ((((((((((((i8 / i16) & ", ") & (i16 / i32)) & ", ") & (i32 / i64)) & ", ") & (u8 / u16)) & ", ") & (u16 / u32)) & ", ") & (u32 / u64)) & ", ")
74   :     OpConcat      
//  f32
75   :     LoadLocalVar  : var = 9(f32)
//  f32
76   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::Double
//  f64
77   :     LoadLocalVar  : var = 10(f64)
//  (f32 / f64)
78   :     OpDiv         : type = F8
//  (f32 / f64)
79   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  (((((((((((((i8 / i16) & ", ") & (i16 / i32)) & ", ") & (i32 / i64)) & ", ") & (u8 / u16)) & ", ") & (u16 / u32)) & ", ") & (u32 / u64)) & ", ") & (f32 / f64))
80   :     OpConcat      
//  return (((((((((((((i8 / i16) & ", ") & (i16 / i32)) & ", ") & (i32 / i64)) & ", ") & (u8 / u16)) & ", ") & (u16 / u32)) & ", ") & (u32 / u64)) & ", ") & (f32 / f64));
81   :     Return        
//  func main() : (string)
82   :     LoadValue     : value = <null>
//  func main() : (string)
83   :     Return        
