========================================================
Global Variables:
========================================================
s

========================================================
Functions:
========================================================
CoAsync2_types::IStringAsync::CastResult (4 .. 8)
    Arguments:
        value
    Captured Variables:
    Local Variables:

CoAsync2_types::IStringAsync::StoreResult (9 .. 12)
    Arguments:
        value
    Captured Variables:
    Local Variables:

GetStringAsync (13 .. 30)
    Arguments:
        x
    Captured Variables:
    Local Variables:
        <co-mixin-source-variable>

GetMultipleString (203 .. 210)
    Arguments:
    Captured Variables:
    Local Variables:

main (472 .. 481)
    Arguments:
    Captured Variables:
    Local Variables:

<initialize> (0 .. 3)
    Arguments:
    Captured Variables:
    Local Variables:

<lambda:(6)> in GetStringAsync (31 .. 49)
    Arguments:
        <co-impl>
    Captured Variables:
        <captured>x
    Local Variables:

<method:Execute<CoAsync2_types::IStringAsync>(7)> in GetStringAsync (191 .. 197)
    Arguments:
        <mixin-parameter>callback
        <mixin-parameter>context
    Captured Variables:
        <captured><mixin-source>
        <captured-this>0
    Local Variables:

<method:GetStatus<CoAsync2_types::IStringAsync>(8)> in GetStringAsync (198 .. 202)
    Arguments:
    Captured Variables:
        <captured><mixin-source>
        <captured-this>0
    Local Variables:

<method:SetFailure<system::Coroutine>(9)> in <lambda:(6)> in GetStringAsync (50 .. 55)
    Arguments:
        <value>
    Captured Variables:
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured><co-impl>
        <captured>x
        <captured-this>0
    Local Variables:

<method:SetStatus<system::Coroutine>(10)> in <lambda:(6)> in GetStringAsync (56 .. 61)
    Arguments:
        <value>
    Captured Variables:
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured><co-impl>
        <captured>x
        <captured-this>0
    Local Variables:

<method:GetFailure<system::Coroutine>(13)> in <lambda:(6)> in GetStringAsync (62 .. 65)
    Arguments:
    Captured Variables:
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured><co-impl>
        <captured>x
        <captured-this>0
    Local Variables:

<method:GetStatus<system::Coroutine>(14)> in <lambda:(6)> in GetStringAsync (66 .. 69)
    Arguments:
    Captured Variables:
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured><co-impl>
        <captured>x
        <captured-this>0
    Local Variables:

<method:Resume<system::Coroutine>(15)> in <lambda:(6)> in GetStringAsync (70 .. 190)
    Arguments:
        <raise-exception>
        <co-result>
    Captured Variables:
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured><co-impl>
        <captured>x
        <captured-this>0
    Local Variables:
        <catch><co-ex>

<lambda:(14)> in GetMultipleString (211 .. 232)
    Arguments:
        <co-impl>
    Captured Variables:
    Local Variables:

<method:SetFailure<system::Coroutine>(15)> in <lambda:(14)> in GetMultipleString (233 .. 238)
    Arguments:
        <value>
    Captured Variables:
        <captured><co0>x
        <captured><co1-for-begin>i
        <captured><co2-for-end>i
        <captured><co3>i
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured><co-impl>
        <captured-this>0
    Local Variables:

<method:SetStatus<system::Coroutine>(16)> in <lambda:(14)> in GetMultipleString (239 .. 244)
    Arguments:
        <value>
    Captured Variables:
        <captured><co0>x
        <captured><co1-for-begin>i
        <captured><co2-for-end>i
        <captured><co3>i
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured><co-impl>
        <captured-this>0
    Local Variables:

<method:GetFailure<system::Coroutine>(19)> in <lambda:(14)> in GetMultipleString (245 .. 248)
    Arguments:
    Captured Variables:
        <captured><co0>x
        <captured><co1-for-begin>i
        <captured><co2-for-end>i
        <captured><co3>i
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured><co-impl>
        <captured-this>0
    Local Variables:

<method:GetStatus<system::Coroutine>(20)> in <lambda:(14)> in GetMultipleString (249 .. 252)
    Arguments:
    Captured Variables:
        <captured><co0>x
        <captured><co1-for-begin>i
        <captured><co2-for-end>i
        <captured><co3>i
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured><co-impl>
        <captured-this>0
    Local Variables:

<method:Resume<system::Coroutine>(21)> in <lambda:(14)> in GetMultipleString (253 .. 471)
    Arguments:
        <raise-exception>
        <co-result>
    Captured Variables:
        <captured><co0>x
        <captured><co1-for-begin>i
        <captured><co2-for-end>i
        <captured><co3>i
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured><co-impl>
        <captured-this>0
    Local Variables:
        <catch><co-ex>

<lambda:(20)> in main (482 .. 492)
    Arguments:
    Captured Variables:
    Local Variables:

<lambda:(21)> in <lambda:(20)> in main (493 .. 508)
    Arguments:
        result
    Captured Variables:
    Local Variables:

========================================================
Instructions:
========================================================
//  ""
0    :     LoadValue     : value = <String, >
//  var s = "";
1    :     StoreGlobalVar: var = 0(s)
2    :     LoadValue     : value = <null>
3    :     Return        
//  value
4    :     LoadLocalVar  : var = 0(value)
//  value
5    :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  return (cast (string) value);
6    :     Return        
//  func CastResult(value : ::system::Object) : (string)
7    :     LoadValue     : value = <null>
//  func CastResult(value : ::system::Object) : (string)
8    :     Return        
//  value
9    :     LoadLocalVar  : var = 0(value)
//  return value;
10   :     Return        
//  func StoreResult(value : string) : (::system::Object)
11   :     LoadValue     : value = <null>
//  func StoreResult(value : string) : (::system::Object)
12   :     Return        
//  func (<co-impl> : ::system::AsyncCoroutine::IImpl*) : (::system::Coroutine^)
13   :     LoadLocalVar  : var = 0(x)
//  func (<co-impl> : ::system::AsyncCoroutine::IImpl*) : (::system::Coroutine^)
14   :     CreateClosureContext: stackPatternCount = 1
//  func (<co-impl> : ::system::AsyncCoroutine::IImpl*) : (::system::Coroutine^)
15   :     LoadFunction  : func = 6(<lambda:(6)> in GetStringAsync)
//  func (<co-impl> : ::system::AsyncCoroutine::IImpl*) : (::system::Coroutine^)
16   :     CreateClosure 
//  ::system::AsyncCoroutine::Create(func (<co-impl> : ::system::AsyncCoroutine::IImpl*) : (::system::Coroutine^)
17   :     LoadValue     : value = <null>
//  ::system::AsyncCoroutine::Create(func (<co-impl> : ::system::AsyncCoroutine::IImpl*) : (::system::Coroutine^)
18   :     InvokeMethod  : methodInfo = Create<system::AsyncCoroutine>, stackPatternCount = 1
//  var <co-mixin-source-variable> = ::system::AsyncCoroutine::Create(func (<co-impl> : ::system::AsyncCoroutine::IImpl*) : (::system::Coroutine^)
19   :     StoreLocalVar : var = 1(<co-mixin-source-variable>)
//  <co-mixin-source-variable>
20   :     LoadLocalVar  : var = 1(<co-mixin-source-variable>)
//  new (::CoAsync2_types::IStringAsync^)
21   :     LoadValue     : value = <null>
//  new (::CoAsync2_types::IStringAsync^)
22   :     CreateClosureContext: stackPatternCount = 2
//  new (::CoAsync2_types::IStringAsync^)
23   :     LoadMethodInfo: methodInfo = Execute<system::Async>
//  func Execute(<mixin-parameter>callback : (func (::system::CoroutineResult^) : (::system::Void)), <mixin-parameter>context : ::system::AsyncContext^) : (::system::Boolean)
24   :     LoadFunction  : func = 7(<method:Execute<CoAsync2_types::IStringAsync>(7)> in GetStringAsync)
//  new (::CoAsync2_types::IStringAsync^)
25   :     LoadMethodInfo: methodInfo = GetStatus<system::Async>
//  func GetStatus() : (::system::AsyncStatus)
26   :     LoadFunction  : func = 8(<method:GetStatus<CoAsync2_types::IStringAsync>(8)> in GetStringAsync)
//  new (::CoAsync2_types::IStringAsync^)
27   :     CreateInterface: methodInfo = <CoAsync2_types::IStringAsync>, stackPatternCount = 4
//  return new (::CoAsync2_types::IStringAsync^)
28   :     Return        
//  func GetStringAsync(x : int) : (IStringAsync^)
29   :     LoadValue     : value = <null>
//  func GetStringAsync(x : int) : (IStringAsync^)
30   :     Return        
//  0
31   :     LoadValue     : value = <I8, 0>
//  1
32   :     LoadValue     : value = <I8, 1>
//  (-1)
33   :     OpNegative    : type = I8
//  null
34   :     LoadValue     : value = <null>
//  Waiting
35   :     LoadValue     : value = <enum: 0>
//  new (::system::Coroutine^)
36   :     LoadLocalVar  : var = 0(<co-impl>)
//  new (::system::Coroutine^)
37   :     LoadCapturedVar: var = 0(<captured>x)
//  new (::system::Coroutine^)
38   :     LoadValue     : value = <null>
//  new (::system::Coroutine^)
39   :     CreateClosureContext: stackPatternCount = 7
//  new (::system::Coroutine^)
40   :     LoadMethodInfo: methodInfo = GetFailure<system::Coroutine>
//  func GetFailure() : (::system::Exception^)
41   :     LoadFunction  : func = 11(<method:GetFailure<system::Coroutine>(13)> in <lambda:(6)> in GetStringAsync)
//  new (::system::Coroutine^)
42   :     LoadMethodInfo: methodInfo = GetStatus<system::Coroutine>
//  func GetStatus() : (::system::CoroutineStatus)
43   :     LoadFunction  : func = 12(<method:GetStatus<system::Coroutine>(14)> in <lambda:(6)> in GetStringAsync)
//  new (::system::Coroutine^)
44   :     LoadMethodInfo: methodInfo = Resume<system::Coroutine>
//  func Resume(<raise-exception> : ::system::Boolean, <co-result> : ::system::CoroutineResult^) : (::system::Void)
45   :     LoadFunction  : func = 13(<method:Resume<system::Coroutine>(15)> in <lambda:(6)> in GetStringAsync)
//  new (::system::Coroutine^)
46   :     CreateInterface: methodInfo = <system::Coroutine>, stackPatternCount = 6
//  return new (::system::Coroutine^)
47   :     Return        
//  func (<co-impl> : ::system::AsyncCoroutine::IImpl*) : (::system::Coroutine^)
48   :     LoadValue     : value = <null>
//  func (<co-impl> : ::system::AsyncCoroutine::IImpl*) : (::system::Coroutine^)
49   :     Return        
//  <value>
50   :     LoadLocalVar  : var = 0(<value>)
//  (<prop>Failure = <value>)
51   :     Duplicate     : stackPatternCount = 0
//  (<prop>Failure = <value>)
52   :     StoreCapturedVar: var = 2
//  (<prop>Failure = <value>);
53   :     Pop           
//  func SetFailure(<value> : ::system::Exception^) : (void)
54   :     LoadValue     : value = <null>
//  func SetFailure(<value> : ::system::Exception^) : (void)
55   :     Return        
//  <value>
56   :     LoadLocalVar  : var = 0(<value>)
//  (<prop>Status = <value>)
57   :     Duplicate     : stackPatternCount = 0
//  (<prop>Status = <value>)
58   :     StoreCapturedVar: var = 3
//  (<prop>Status = <value>);
59   :     Pop           
//  func SetStatus(<value> : ::system::CoroutineStatus) : (void)
60   :     LoadValue     : value = <null>
//  func SetStatus(<value> : ::system::CoroutineStatus) : (void)
61   :     Return        
//  <prop>Failure
62   :     LoadCapturedVar: var = 2(<captured><prop>Failure)
//  return <prop>Failure;
63   :     Return        
//  func GetFailure() : (::system::Exception^)
64   :     LoadValue     : value = <null>
//  func GetFailure() : (::system::Exception^)
65   :     Return        
//  <prop>Status
66   :     LoadCapturedVar: var = 3(<captured><prop>Status)
//  return <prop>Status;
67   :     Return        
//  func GetStatus() : (::system::CoroutineStatus)
68   :     LoadValue     : value = <null>
//  func GetStatus() : (::system::CoroutineStatus)
69   :     Return        
//  Status
70   :     LoadCapturedVar: var = 6(<captured-this>0)
//  Status
71   :     InvokeMethod  : methodInfo = GetStatus<system::Coroutine>, stackPatternCount = 0
//  ::system::CoroutineStatus::Waiting
72   :     LoadValue     : value = <enum: 0>
//  (Status != ::system::CoroutineStatus::Waiting)
73   :     CompareValue  
//  (Status != ::system::CoroutineStatus::Waiting)
74   :     OpNot         : type = Bool
//  if ((Status != ::system::CoroutineStatus::Waiting))
75   :     OpNot         : type = Bool
//  if ((Status != ::system::CoroutineStatus::Waiting))
76   :     JumpIf        : label = 80
//  "Resume should be called only when the coroutine is in the waiting status."
77   :     LoadValue     : value = <String, Resume should be called only when the coroutine is in the waiting status.>
//  raise "Resume should be called only when the coroutine is in the waiting status.";
78   :     RaiseException
//  if ((Status != ::system::CoroutineStatus::Waiting))
79   :     Jump          : label = 80
//  Executing
80   :     LoadValue     : value = <enum: 1>
//  SetStatus(Executing)
81   :     InvokeWithContext: func = 10(<method:SetStatus<system::Coroutine>(10)> in <lambda:(6)> in GetStringAsync), stackPatternCount = 1
//  SetStatus(Executing);
82   :     Pop           
//  try
83   :     InstallTry    : label = 175
//  <co-state-before-pause>
84   :     LoadCapturedVar: var = 1(<captured><co-state-before-pause>)
//  1
85   :     LoadValue     : value = <I8, 1>
//  (-1)
86   :     OpNegative    : type = I8
//  (<co-state-before-pause> != (-1))
87   :     CompareValue  
//  (<co-state-before-pause> != (-1))
88   :     OpNot         : type = Bool
//  if ((<co-state-before-pause> != (-1)))
89   :     OpNot         : type = Bool
//  if ((<co-state-before-pause> != (-1)))
90   :     JumpIf        : label = 123
//  <co-result>
91   :     LoadLocalVar  : var = 1(<co-result>)
//  <co-result> is null
92   :     LoadValue     : value = <null>
//  <co-result> is null
93   :     CompareReference
//  if (<co-result> is null)
94   :     OpNot         : type = Bool
//  if (<co-result> is null)
95   :     JumpIf        : label = 102
//  1
96   :     LoadValue     : value = <I8, 1>
//  (-1)
97   :     OpNegative    : type = I8
//  (<co-state-before-pause> = (-1))
98   :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = (-1))
99   :     StoreCapturedVar: var = 1
//  (<co-state-before-pause> = (-1));
100  :     Pop           
//  if (<co-result> is null)
101  :     Jump          : label = 122
//  <co-result>
102  :     LoadLocalVar  : var = 1(<co-result>)
//  <co-result>.Failure
103  :     InvokeMethod  : methodInfo = GetFailure<system::CoroutineResult>, stackPatternCount = 0
//  <co-result>.Failure is null
104  :     LoadValue     : value = <null>
//  <co-result>.Failure is null
105  :     CompareReference
//  if (<co-result>.Failure is null)
106  :     OpNot         : type = Bool
//  if (<co-result>.Failure is null)
107  :     JumpIf        : label = 114
//  1
108  :     LoadValue     : value = <I8, 1>
//  (-1)
109  :     OpNegative    : type = I8
//  (<co-state-before-pause> = (-1))
110  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = (-1))
111  :     StoreCapturedVar: var = 1
//  (<co-state-before-pause> = (-1));
112  :     Pop           
//  if (<co-result>.Failure is null)
113  :     Jump          : label = 122
//  1
114  :     LoadValue     : value = <I8, 1>
//  (-1)
115  :     OpNegative    : type = I8
//  (<co-state-before-pause> = (-1))
116  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = (-1))
117  :     StoreCapturedVar: var = 1
//  (<co-state-before-pause> = (-1));
118  :     Pop           
//  <co-result>
119  :     LoadLocalVar  : var = 1(<co-result>)
//  <co-result>.Failure
120  :     InvokeMethod  : methodInfo = GetFailure<system::CoroutineResult>, stackPatternCount = 0
//  raise <co-result>.Failure;
121  :     RaiseException
//  if ((<co-state-before-pause> != (-1)))
122  :     Jump          : label = 123
//  true
123  :     LoadValue     : value = <Bool, true>
//  while (true)
124  :     OpNot         : type = Bool
//  while (true)
125  :     JumpIf        : label = 173
//  <co-state>
126  :     LoadCapturedVar: var = 0(<captured><co-state>)
//  0
127  :     LoadValue     : value = <I8, 0>
//  (<co-state> == 0)
128  :     CompareValue  
//  if ((<co-state> == 0))
129  :     OpNot         : type = Bool
//  if ((<co-state> == 0))
130  :     JumpIf        : label = 160
//  <co-impl>
131  :     LoadCapturedVar: var = 4(<captured><co-impl>)
//  ::system::AsyncCoroutine::QueryContext(<co-impl>)
132  :     LoadValue     : value = <null>
//  ::system::AsyncCoroutine::QueryContext(<co-impl>)
133  :     InvokeMethod  : methodInfo = QueryContext<system::AsyncCoroutine>, stackPatternCount = 1
//  ::system::AsyncCoroutine::QueryContext(<co-impl>).IsCancelled()
134  :     InvokeMethod  : methodInfo = IsCancelled<system::AsyncContext>, stackPatternCount = 0
//  if (::system::AsyncCoroutine::QueryContext(<co-impl>).IsCancelled())
135  :     OpNot         : type = Bool
//  if (::system::AsyncCoroutine::QueryContext(<co-impl>).IsCancelled())
136  :     JumpIf        : label = 140
//  "Cancelled"
137  :     LoadValue     : value = <String, Cancelled>
//  raise "Cancelled";
138  :     RaiseException
//  if (::system::AsyncCoroutine::QueryContext(<co-impl>).IsCancelled())
139  :     Jump          : label = 140
//  <co-impl>
140  :     LoadCapturedVar: var = 4(<captured><co-impl>)
//  x
141  :     LoadCapturedVar: var = 5(<captured>x)
//  x
142  :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  ::CoAsync2_types::IStringAsync::StoreResult((cast (string) x))
143  :     LoadValue     : value = <null>
//  ::CoAsync2_types::IStringAsync::StoreResult((cast (string) x))
144  :     InvokeMethod  : methodInfo = StoreResult<CoAsync2_types::IStringAsync>, stackPatternCount = 1
//  ::system::AsyncCoroutine::ReturnAndExit(<co-impl>, ::CoAsync2_types::IStringAsync::StoreResult((cast (string) x)))
145  :     LoadValue     : value = <null>
//  ::system::AsyncCoroutine::ReturnAndExit(<co-impl>, ::CoAsync2_types::IStringAsync::StoreResult((cast (string) x)))
146  :     InvokeMethod  : methodInfo = ReturnAndExit<system::AsyncCoroutine>, stackPatternCount = 2
//  ::system::AsyncCoroutine::ReturnAndExit(<co-impl>, ::CoAsync2_types::IStringAsync::StoreResult((cast (string) x)));
147  :     Pop           
//  Stopped
148  :     LoadValue     : value = <enum: 2>
//  SetStatus(Stopped)
149  :     InvokeWithContext: func = 10(<method:SetStatus<system::Coroutine>(10)> in <lambda:(6)> in GetStringAsync), stackPatternCount = 1
//  SetStatus(Stopped);
150  :     Pop           
//  try
151  :     UninstallTry  : stackPatternCount = 0
//  return;
152  :     LoadValue     : value = <null>
//  return;
153  :     Return        
//  1
154  :     LoadValue     : value = <I8, 1>
//  (<co-state> = 1)
155  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 1)
156  :     StoreCapturedVar: var = 0
//  (<co-state> = 1);
157  :     Pop           
//  continue;
158  :     Jump          : label = 123
//  if ((<co-state> == 0))
159  :     Jump          : label = 160
//  <co-state>
160  :     LoadCapturedVar: var = 0(<captured><co-state>)
//  1
161  :     LoadValue     : value = <I8, 1>
//  (<co-state> == 1)
162  :     CompareValue  
//  if ((<co-state> == 1))
163  :     OpNot         : type = Bool
//  if ((<co-state> == 1))
164  :     JumpIf        : label = 172
//  Stopped
165  :     LoadValue     : value = <enum: 2>
//  SetStatus(Stopped)
166  :     InvokeWithContext: func = 10(<method:SetStatus<system::Coroutine>(10)> in <lambda:(6)> in GetStringAsync), stackPatternCount = 1
//  SetStatus(Stopped);
167  :     Pop           
//  try
168  :     UninstallTry  : stackPatternCount = 0
//  return;
169  :     LoadValue     : value = <null>
//  return;
170  :     Return        
//  if ((<co-state> == 1))
171  :     Jump          : label = 172
//  while (true)
172  :     Jump          : label = 123
//  try
173  :     UninstallTry  : stackPatternCount = 0
//  try
174  :     Jump          : label = 189
//  try
175  :     LoadException 
//  try
176  :     StoreLocalVar : var = 2(<catch><co-ex>)
//  <co-ex>
177  :     LoadLocalVar  : var = 2(<catch><co-ex>)
//  SetFailure(<co-ex>)
178  :     InvokeWithContext: func = 9(<method:SetFailure<system::Coroutine>(9)> in <lambda:(6)> in GetStringAsync), stackPatternCount = 1
//  SetFailure(<co-ex>);
179  :     Pop           
//  Stopped
180  :     LoadValue     : value = <enum: 2>
//  SetStatus(Stopped)
181  :     InvokeWithContext: func = 10(<method:SetStatus<system::Coroutine>(10)> in <lambda:(6)> in GetStringAsync), stackPatternCount = 1
//  SetStatus(Stopped);
182  :     Pop           
//  <raise-exception>
183  :     LoadLocalVar  : var = 0(<raise-exception>)
//  if (<raise-exception>)
184  :     OpNot         : type = Bool
//  if (<raise-exception>)
185  :     JumpIf        : label = 189
//  raise;
186  :     LoadLocalVar  : var = 2(<catch><co-ex>)
//  raise;
187  :     RaiseException
//  if (<raise-exception>)
188  :     Jump          : label = 189
//  func Resume(<raise-exception> : ::system::Boolean, <co-result> : ::system::CoroutineResult^) : (::system::Void)
189  :     LoadValue     : value = <null>
//  func Resume(<raise-exception> : ::system::Boolean, <co-result> : ::system::CoroutineResult^) : (::system::Void)
190  :     Return        
//  <mixin-parameter>callback
191  :     LoadLocalVar  : var = 0(<mixin-parameter>callback)
//  <mixin-parameter>context
192  :     LoadLocalVar  : var = 1(<mixin-parameter>context)
//  <mixin-source>
193  :     LoadCapturedVar: var = 0(<captured><mixin-source>)
//  <mixin-source>.Execute(<mixin-parameter>callback, <mixin-parameter>context)
194  :     InvokeMethod  : methodInfo = Execute<system::Async>, stackPatternCount = 2
//  return <mixin-source>.Execute(<mixin-parameter>callback, <mixin-parameter>context);
195  :     Return        
//  func Execute(<mixin-parameter>callback : (func (::system::CoroutineResult^) : (::system::Void)), <mixin-parameter>context : ::system::AsyncContext^) : (::system::Boolean)
196  :     LoadValue     : value = <null>
//  func Execute(<mixin-parameter>callback : (func (::system::CoroutineResult^) : (::system::Void)), <mixin-parameter>context : ::system::AsyncContext^) : (::system::Boolean)
197  :     Return        
//  <mixin-source>
198  :     LoadCapturedVar: var = 0(<captured><mixin-source>)
//  <mixin-source>.GetStatus()
199  :     InvokeMethod  : methodInfo = GetStatus<system::Async>, stackPatternCount = 0
//  return <mixin-source>.GetStatus();
200  :     Return        
//  func GetStatus() : (::system::AsyncStatus)
201  :     LoadValue     : value = <null>
//  func GetStatus() : (::system::AsyncStatus)
202  :     Return        
//  func (<co-impl> : ::system::AsyncCoroutine::IImpl*) : (::system::Coroutine^)
203  :     CreateClosureContext: stackPatternCount = 0
//  func (<co-impl> : ::system::AsyncCoroutine::IImpl*) : (::system::Coroutine^)
204  :     LoadFunction  : func = 14(<lambda:(14)> in GetMultipleString)
//  func (<co-impl> : ::system::AsyncCoroutine::IImpl*) : (::system::Coroutine^)
205  :     CreateClosure 
//  ::system::AsyncCoroutine::Create(func (<co-impl> : ::system::AsyncCoroutine::IImpl*) : (::system::Coroutine^)
206  :     LoadValue     : value = <null>
//  ::system::AsyncCoroutine::Create(func (<co-impl> : ::system::AsyncCoroutine::IImpl*) : (::system::Coroutine^)
207  :     InvokeMethod  : methodInfo = Create<system::AsyncCoroutine>, stackPatternCount = 1
//  return ::system::AsyncCoroutine::Create(func (<co-impl> : ::system::AsyncCoroutine::IImpl*) : (::system::Coroutine^)
208  :     Return        
//  func GetMultipleString() : (Async^)
209  :     LoadValue     : value = <null>
//  func GetMultipleString() : (Async^)
210  :     Return        
//  ""
211  :     LoadValue     : value = <String, >
//  0
212  :     LoadValue     : value = <I8, 0>
//  0
213  :     LoadValue     : value = <I8, 0>
//  0
214  :     LoadValue     : value = <I8, 0>
//  0
215  :     LoadValue     : value = <I8, 0>
//  1
216  :     LoadValue     : value = <I8, 1>
//  (-1)
217  :     OpNegative    : type = I8
//  null
218  :     LoadValue     : value = <null>
//  Waiting
219  :     LoadValue     : value = <enum: 0>
//  new (::system::Coroutine^)
220  :     LoadLocalVar  : var = 0(<co-impl>)
//  new (::system::Coroutine^)
221  :     LoadValue     : value = <null>
//  new (::system::Coroutine^)
222  :     CreateClosureContext: stackPatternCount = 10
//  new (::system::Coroutine^)
223  :     LoadMethodInfo: methodInfo = GetFailure<system::Coroutine>
//  func GetFailure() : (::system::Exception^)
224  :     LoadFunction  : func = 17(<method:GetFailure<system::Coroutine>(19)> in <lambda:(14)> in GetMultipleString)
//  new (::system::Coroutine^)
225  :     LoadMethodInfo: methodInfo = GetStatus<system::Coroutine>
//  func GetStatus() : (::system::CoroutineStatus)
226  :     LoadFunction  : func = 18(<method:GetStatus<system::Coroutine>(20)> in <lambda:(14)> in GetMultipleString)
//  new (::system::Coroutine^)
227  :     LoadMethodInfo: methodInfo = Resume<system::Coroutine>
//  func Resume(<raise-exception> : ::system::Boolean, <co-result> : ::system::CoroutineResult^) : (::system::Void)
228  :     LoadFunction  : func = 19(<method:Resume<system::Coroutine>(21)> in <lambda:(14)> in GetMultipleString)
//  new (::system::Coroutine^)
229  :     CreateInterface: methodInfo = <system::Coroutine>, stackPatternCount = 6
//  return new (::system::Coroutine^)
230  :     Return        
//  func (<co-impl> : ::system::AsyncCoroutine::IImpl*) : (::system::Coroutine^)
231  :     LoadValue     : value = <null>
//  func (<co-impl> : ::system::AsyncCoroutine::IImpl*) : (::system::Coroutine^)
232  :     Return        
//  <value>
233  :     LoadLocalVar  : var = 0(<value>)
//  (<prop>Failure = <value>)
234  :     Duplicate     : stackPatternCount = 0
//  (<prop>Failure = <value>)
235  :     StoreCapturedVar: var = 6
//  (<prop>Failure = <value>);
236  :     Pop           
//  func SetFailure(<value> : ::system::Exception^) : (void)
237  :     LoadValue     : value = <null>
//  func SetFailure(<value> : ::system::Exception^) : (void)
238  :     Return        
//  <value>
239  :     LoadLocalVar  : var = 0(<value>)
//  (<prop>Status = <value>)
240  :     Duplicate     : stackPatternCount = 0
//  (<prop>Status = <value>)
241  :     StoreCapturedVar: var = 7
//  (<prop>Status = <value>);
242  :     Pop           
//  func SetStatus(<value> : ::system::CoroutineStatus) : (void)
243  :     LoadValue     : value = <null>
//  func SetStatus(<value> : ::system::CoroutineStatus) : (void)
244  :     Return        
//  <prop>Failure
245  :     LoadCapturedVar: var = 6(<captured><prop>Failure)
//  return <prop>Failure;
246  :     Return        
//  func GetFailure() : (::system::Exception^)
247  :     LoadValue     : value = <null>
//  func GetFailure() : (::system::Exception^)
248  :     Return        
//  <prop>Status
249  :     LoadCapturedVar: var = 7(<captured><prop>Status)
//  return <prop>Status;
250  :     Return        
//  func GetStatus() : (::system::CoroutineStatus)
251  :     LoadValue     : value = <null>
//  func GetStatus() : (::system::CoroutineStatus)
252  :     Return        
//  Status
253  :     LoadCapturedVar: var = 9(<captured-this>0)
//  Status
254  :     InvokeMethod  : methodInfo = GetStatus<system::Coroutine>, stackPatternCount = 0
//  ::system::CoroutineStatus::Waiting
255  :     LoadValue     : value = <enum: 0>
//  (Status != ::system::CoroutineStatus::Waiting)
256  :     CompareValue  
//  (Status != ::system::CoroutineStatus::Waiting)
257  :     OpNot         : type = Bool
//  if ((Status != ::system::CoroutineStatus::Waiting))
258  :     OpNot         : type = Bool
//  if ((Status != ::system::CoroutineStatus::Waiting))
259  :     JumpIf        : label = 263
//  "Resume should be called only when the coroutine is in the waiting status."
260  :     LoadValue     : value = <String, Resume should be called only when the coroutine is in the waiting status.>
//  raise "Resume should be called only when the coroutine is in the waiting status.";
261  :     RaiseException
//  if ((Status != ::system::CoroutineStatus::Waiting))
262  :     Jump          : label = 263
//  Executing
263  :     LoadValue     : value = <enum: 1>
//  SetStatus(Executing)
264  :     InvokeWithContext: func = 16(<method:SetStatus<system::Coroutine>(16)> in <lambda:(14)> in GetMultipleString), stackPatternCount = 1
//  SetStatus(Executing);
265  :     Pop           
//  try
266  :     InstallTry    : label = 456
//  <co-state-before-pause>
267  :     LoadCapturedVar: var = 5(<captured><co-state-before-pause>)
//  1
268  :     LoadValue     : value = <I8, 1>
//  (-1)
269  :     OpNegative    : type = I8
//  (<co-state-before-pause> != (-1))
270  :     CompareValue  
//  (<co-state-before-pause> != (-1))
271  :     OpNot         : type = Bool
//  if ((<co-state-before-pause> != (-1)))
272  :     OpNot         : type = Bool
//  if ((<co-state-before-pause> != (-1)))
273  :     JumpIf        : label = 306
//  <co-result>
274  :     LoadLocalVar  : var = 1(<co-result>)
//  <co-result> is null
275  :     LoadValue     : value = <null>
//  <co-result> is null
276  :     CompareReference
//  if (<co-result> is null)
277  :     OpNot         : type = Bool
//  if (<co-result> is null)
278  :     JumpIf        : label = 285
//  1
279  :     LoadValue     : value = <I8, 1>
//  (-1)
280  :     OpNegative    : type = I8
//  (<co-state-before-pause> = (-1))
281  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = (-1))
282  :     StoreCapturedVar: var = 5
//  (<co-state-before-pause> = (-1));
283  :     Pop           
//  if (<co-result> is null)
284  :     Jump          : label = 305
//  <co-result>
285  :     LoadLocalVar  : var = 1(<co-result>)
//  <co-result>.Failure
286  :     InvokeMethod  : methodInfo = GetFailure<system::CoroutineResult>, stackPatternCount = 0
//  <co-result>.Failure is null
287  :     LoadValue     : value = <null>
//  <co-result>.Failure is null
288  :     CompareReference
//  if (<co-result>.Failure is null)
289  :     OpNot         : type = Bool
//  if (<co-result>.Failure is null)
290  :     JumpIf        : label = 297
//  1
291  :     LoadValue     : value = <I8, 1>
//  (-1)
292  :     OpNegative    : type = I8
//  (<co-state-before-pause> = (-1))
293  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = (-1))
294  :     StoreCapturedVar: var = 5
//  (<co-state-before-pause> = (-1));
295  :     Pop           
//  if (<co-result>.Failure is null)
296  :     Jump          : label = 305
//  1
297  :     LoadValue     : value = <I8, 1>
//  (-1)
298  :     OpNegative    : type = I8
//  (<co-state-before-pause> = (-1))
299  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = (-1))
300  :     StoreCapturedVar: var = 5
//  (<co-state-before-pause> = (-1));
301  :     Pop           
//  <co-result>
302  :     LoadLocalVar  : var = 1(<co-result>)
//  <co-result>.Failure
303  :     InvokeMethod  : methodInfo = GetFailure<system::CoroutineResult>, stackPatternCount = 0
//  raise <co-result>.Failure;
304  :     RaiseException
//  if ((<co-state-before-pause> != (-1)))
305  :     Jump          : label = 306
//  true
306  :     LoadValue     : value = <Bool, true>
//  while (true)
307  :     OpNot         : type = Bool
//  while (true)
308  :     JumpIf        : label = 454
//  <co-state>
309  :     LoadCapturedVar: var = 4(<captured><co-state>)
//  0
310  :     LoadValue     : value = <I8, 0>
//  (<co-state> == 0)
311  :     CompareValue  
//  if ((<co-state> == 0))
312  :     OpNot         : type = Bool
//  if ((<co-state> == 0))
313  :     JumpIf        : label = 344
//  1
314  :     LoadValue     : value = <I8, 1>
//  (<co1-for-begin>i = 1)
315  :     Duplicate     : stackPatternCount = 0
//  (<co1-for-begin>i = 1)
316  :     StoreCapturedVar: var = 1
//  (<co1-for-begin>i = 1);
317  :     Pop           
//  10
318  :     LoadValue     : value = <I8, 10>
//  (<co2-for-end>i = 10)
319  :     Duplicate     : stackPatternCount = 0
//  (<co2-for-end>i = 10)
320  :     StoreCapturedVar: var = 2
//  (<co2-for-end>i = 10);
321  :     Pop           
//  <co1-for-begin>i
322  :     LoadCapturedVar: var = 1(<captured><co1-for-begin>i)
//  (<co3>i = <co1-for-begin>i)
323  :     Duplicate     : stackPatternCount = 0
//  (<co3>i = <co1-for-begin>i)
324  :     StoreCapturedVar: var = 3
//  (<co3>i = <co1-for-begin>i);
325  :     Pop           
//  <co3>i
326  :     LoadCapturedVar: var = 3(<captured><co3>i)
//  <co2-for-end>i
327  :     LoadCapturedVar: var = 2(<captured><co2-for-end>i)
//  (<co3>i <= <co2-for-end>i)
328  :     CompareLiteral: type = I8
//  (<co3>i <= <co2-for-end>i)
329  :     OpLE          
//  if ((<co3>i <= <co2-for-end>i))
330  :     OpNot         : type = Bool
//  if ((<co3>i <= <co2-for-end>i))
331  :     JumpIf        : label = 338
//  3
332  :     LoadValue     : value = <I8, 3>
//  (<co-state> = 3)
333  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 3)
334  :     StoreCapturedVar: var = 4
//  (<co-state> = 3);
335  :     Pop           
//  continue;
336  :     Jump          : label = 306
//  if ((<co3>i <= <co2-for-end>i))
337  :     Jump          : label = 338
//  1
338  :     LoadValue     : value = <I8, 1>
//  (<co-state> = 1)
339  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 1)
340  :     StoreCapturedVar: var = 4
//  (<co-state> = 1);
341  :     Pop           
//  continue;
342  :     Jump          : label = 306
//  if ((<co-state> == 0))
343  :     Jump          : label = 344
//  <co-state>
344  :     LoadCapturedVar: var = 4(<captured><co-state>)
//  1
345  :     LoadValue     : value = <I8, 1>
//  (<co-state> == 1)
346  :     CompareValue  
//  if ((<co-state> == 1))
347  :     OpNot         : type = Bool
//  if ((<co-state> == 1))
348  :     JumpIf        : label = 356
//  Stopped
349  :     LoadValue     : value = <enum: 2>
//  SetStatus(Stopped)
350  :     InvokeWithContext: func = 16(<method:SetStatus<system::Coroutine>(16)> in <lambda:(14)> in GetMultipleString), stackPatternCount = 1
//  SetStatus(Stopped);
351  :     Pop           
//  try
352  :     UninstallTry  : stackPatternCount = 0
//  return;
353  :     LoadValue     : value = <null>
//  return;
354  :     Return        
//  if ((<co-state> == 1))
355  :     Jump          : label = 356
//  <co-state>
356  :     LoadCapturedVar: var = 4(<captured><co-state>)
//  2
357  :     LoadValue     : value = <I8, 2>
//  (<co-state> == 2)
358  :     CompareValue  
//  if ((<co-state> == 2))
359  :     OpNot         : type = Bool
//  if ((<co-state> == 2))
360  :     JumpIf        : label = 426
//  <co-result>
361  :     LoadLocalVar  : var = 1(<co-result>)
//  <co-result>.Failure
362  :     InvokeMethod  : methodInfo = GetFailure<system::CoroutineResult>, stackPatternCount = 0
//  <co-result>.Failure is not null
363  :     LoadValue     : value = <null>
//  <co-result>.Failure is not null
364  :     CompareReference
//  <co-result>.Failure is not null
365  :     OpNot         : type = Bool
//  if (<co-result>.Failure is not null)
366  :     OpNot         : type = Bool
//  if (<co-result>.Failure is not null)
367  :     JumpIf        : label = 372
//  <co-result>
368  :     LoadLocalVar  : var = 1(<co-result>)
//  <co-result>.Failure
369  :     InvokeMethod  : methodInfo = GetFailure<system::CoroutineResult>, stackPatternCount = 0
//  raise <co-result>.Failure;
370  :     RaiseException
//  if (<co-result>.Failure is not null)
371  :     Jump          : label = 372
//  <co-result>
372  :     LoadLocalVar  : var = 1(<co-result>)
//  <co-result>.Result
373  :     InvokeMethod  : methodInfo = GetResult<system::CoroutineResult>, stackPatternCount = 0
//  ::CoAsync2_types::IStringAsync::CastResult(<co-result>.Result)
374  :     LoadValue     : value = <null>
//  ::CoAsync2_types::IStringAsync::CastResult(<co-result>.Result)
375  :     InvokeMethod  : methodInfo = CastResult<CoAsync2_types::IStringAsync>, stackPatternCount = 1
//  (<co0>x = ::CoAsync2_types::IStringAsync::CastResult(<co-result>.Result))
376  :     Duplicate     : stackPatternCount = 0
//  (<co0>x = ::CoAsync2_types::IStringAsync::CastResult(<co-result>.Result))
377  :     StoreCapturedVar: var = 0
//  (<co0>x = ::CoAsync2_types::IStringAsync::CastResult(<co-result>.Result));
378  :     Pop           
//  ""
379  :     LoadValue     : value = <String, >
//  s
380  :     LoadGlobalVar : var = 0(s)
//  ("" & s)
381  :     OpConcat      
//  "["
382  :     LoadValue     : value = <String, [>
//  (("" & s) & "[")
383  :     OpConcat      
//  <co0>x
384  :     LoadCapturedVar: var = 0(<captured><co0>x)
//  ((("" & s) & "[") & <co0>x)
385  :     OpConcat      
//  "]"
386  :     LoadValue     : value = <String, ]>
//  (((("" & s) & "[") & <co0>x) & "]")
387  :     OpConcat      
//  (s = (((("" & s) & "[") & <co0>x) & "]"))
388  :     Duplicate     : stackPatternCount = 0
//  (s = (((("" & s) & "[") & <co0>x) & "]"))
389  :     StoreGlobalVar: var = 0(s)
//  (s = (((("" & s) & "[") & <co0>x) & "]"));
390  :     Pop           
//  <co3>i
391  :     LoadCapturedVar: var = 3(<captured><co3>i)
//  5
392  :     LoadValue     : value = <I8, 5>
//  (<co3>i == 5)
393  :     CompareValue  
//  if ((<co3>i == 5))
394  :     OpNot         : type = Bool
//  if ((<co3>i == 5))
395  :     JumpIf        : label = 402
//  <co-impl>
396  :     LoadCapturedVar: var = 8(<captured><co-impl>)
//  ::system::AsyncCoroutine::QueryContext(<co-impl>)
397  :     LoadValue     : value = <null>
//  ::system::AsyncCoroutine::QueryContext(<co-impl>)
398  :     InvokeMethod  : methodInfo = QueryContext<system::AsyncCoroutine>, stackPatternCount = 1
//  ::system::AsyncCoroutine::QueryContext(<co-impl>).Cancel()
399  :     InvokeMethod  : methodInfo = Cancel<system::AsyncContext>, stackPatternCount = 0
//  ::system::AsyncCoroutine::QueryContext(<co-impl>).Cancel();
400  :     Pop           
//  if ((<co3>i == 5))
401  :     Jump          : label = 402
//  <co3>i
402  :     LoadCapturedVar: var = 3(<captured><co3>i)
//  1
403  :     LoadValue     : value = <I8, 1>
//  (<co3>i + 1)
404  :     OpAdd         : type = I8
//  (<co3>i = (<co3>i + 1))
405  :     Duplicate     : stackPatternCount = 0
//  (<co3>i = (<co3>i + 1))
406  :     StoreCapturedVar: var = 3
//  (<co3>i = (<co3>i + 1));
407  :     Pop           
//  <co3>i
408  :     LoadCapturedVar: var = 3(<captured><co3>i)
//  <co2-for-end>i
409  :     LoadCapturedVar: var = 2(<captured><co2-for-end>i)
//  (<co3>i <= <co2-for-end>i)
410  :     CompareLiteral: type = I8
//  (<co3>i <= <co2-for-end>i)
411  :     OpLE          
//  if ((<co3>i <= <co2-for-end>i))
412  :     OpNot         : type = Bool
//  if ((<co3>i <= <co2-for-end>i))
413  :     JumpIf        : label = 420
//  3
414  :     LoadValue     : value = <I8, 3>
//  (<co-state> = 3)
415  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 3)
416  :     StoreCapturedVar: var = 4
//  (<co-state> = 3);
417  :     Pop           
//  continue;
418  :     Jump          : label = 306
//  if ((<co3>i <= <co2-for-end>i))
419  :     Jump          : label = 420
//  1
420  :     LoadValue     : value = <I8, 1>
//  (<co-state> = 1)
421  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 1)
422  :     StoreCapturedVar: var = 4
//  (<co-state> = 1);
423  :     Pop           
//  continue;
424  :     Jump          : label = 306
//  if ((<co-state> == 2))
425  :     Jump          : label = 426
//  <co-state>
426  :     LoadCapturedVar: var = 4(<captured><co-state>)
//  3
427  :     LoadValue     : value = <I8, 3>
//  (<co-state> == 3)
428  :     CompareValue  
//  if ((<co-state> == 3))
429  :     OpNot         : type = Bool
//  if ((<co-state> == 3))
430  :     JumpIf        : label = 453
//  Waiting
431  :     LoadValue     : value = <enum: 0>
//  SetStatus(Waiting)
432  :     InvokeWithContext: func = 16(<method:SetStatus<system::Coroutine>(16)> in <lambda:(14)> in GetMultipleString), stackPatternCount = 1
//  SetStatus(Waiting);
433  :     Pop           
//  <co-state>
434  :     LoadCapturedVar: var = 4(<captured><co-state>)
//  (<co-state-before-pause> = <co-state>)
435  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = <co-state>)
436  :     StoreCapturedVar: var = 5
//  (<co-state-before-pause> = <co-state>);
437  :     Pop           
//  2
438  :     LoadValue     : value = <I8, 2>
//  (<co-state> = 2)
439  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 2)
440  :     StoreCapturedVar: var = 4
//  (<co-state> = 2);
441  :     Pop           
//  <co-impl>
442  :     LoadCapturedVar: var = 8(<captured><co-impl>)
//  <co3>i
443  :     LoadCapturedVar: var = 3(<captured><co3>i)
//  GetStringAsync(<co3>i)
444  :     Invoke        : func = 2(GetStringAsync), stackPatternCount = 1
//  GetStringAsync(<co3>i)
445  :     ConvertToType : flag = SharedPtr, typeDescriptor = system::Async
//  ::system::AsyncCoroutine::AwaitAndRead(<co-impl>, GetStringAsync(<co3>i))
446  :     LoadValue     : value = <null>
//  ::system::AsyncCoroutine::AwaitAndRead(<co-impl>, GetStringAsync(<co3>i))
447  :     InvokeMethod  : methodInfo = AwaitAndRead<system::AsyncCoroutine>, stackPatternCount = 2
//  ::system::AsyncCoroutine::AwaitAndRead(<co-impl>, GetStringAsync(<co3>i));
448  :     Pop           
//  try
449  :     UninstallTry  : stackPatternCount = 0
//  return;
450  :     LoadValue     : value = <null>
//  return;
451  :     Return        
//  if ((<co-state> == 3))
452  :     Jump          : label = 453
//  while (true)
453  :     Jump          : label = 306
//  try
454  :     UninstallTry  : stackPatternCount = 0
//  try
455  :     Jump          : label = 470
//  try
456  :     LoadException 
//  try
457  :     StoreLocalVar : var = 2(<catch><co-ex>)
//  <co-ex>
458  :     LoadLocalVar  : var = 2(<catch><co-ex>)
//  SetFailure(<co-ex>)
459  :     InvokeWithContext: func = 15(<method:SetFailure<system::Coroutine>(15)> in <lambda:(14)> in GetMultipleString), stackPatternCount = 1
//  SetFailure(<co-ex>);
460  :     Pop           
//  Stopped
461  :     LoadValue     : value = <enum: 2>
//  SetStatus(Stopped)
462  :     InvokeWithContext: func = 16(<method:SetStatus<system::Coroutine>(16)> in <lambda:(14)> in GetMultipleString), stackPatternCount = 1
//  SetStatus(Stopped);
463  :     Pop           
//  <raise-exception>
464  :     LoadLocalVar  : var = 0(<raise-exception>)
//  if (<raise-exception>)
465  :     OpNot         : type = Bool
//  if (<raise-exception>)
466  :     JumpIf        : label = 470
//  raise;
467  :     LoadLocalVar  : var = 2(<catch><co-ex>)
//  raise;
468  :     RaiseException
//  if (<raise-exception>)
469  :     Jump          : label = 470
//  func Resume(<raise-exception> : ::system::Boolean, <co-result> : ::system::CoroutineResult^) : (::system::Void)
470  :     LoadValue     : value = <null>
//  func Resume(<raise-exception> : ::system::Boolean, <co-result> : ::system::CoroutineResult^) : (::system::Void)
471  :     Return        
//  func () : (void)
472  :     CreateClosureContext: stackPatternCount = 0
//  func () : (void)
473  :     LoadFunction  : func = 20(<lambda:(20)> in main)
//  func () : (void)
474  :     CreateClosure 
//  SyncScheduler::Run(func () : (void)
475  :     LoadValue     : value = <null>
//  SyncScheduler::Run(func () : (void)
476  :     InvokeMethod  : methodInfo = Run<test::SyncScheduler>, stackPatternCount = 1
//  SyncScheduler::Run(func () : (void)
477  :     Pop           
//  s
478  :     LoadGlobalVar : var = 0(s)
//  return s;
479  :     Return        
//  func main() : (string)
480  :     LoadValue     : value = <null>
//  func main() : (string)
481  :     Return        
//  func (result : CoroutineResult^) : (void)
482  :     CreateClosureContext: stackPatternCount = 0
//  func (result : CoroutineResult^) : (void)
483  :     LoadFunction  : func = 21(<lambda:(21)> in <lambda:(20)> in main)
//  func (result : CoroutineResult^) : (void)
484  :     CreateClosure 
//  null
485  :     LoadValue     : value = <null>
//  new (AsyncContext^)(null)
486  :     LoadValue     : value = <null>
//  new (AsyncContext^)(null)
487  :     InvokeMethod  : methodInfo = <system::AsyncContext>, stackPatternCount = 1
//  GetMultipleString()
488  :     Invoke        : func = 3(GetMultipleString), stackPatternCount = 0
//  GetMultipleString().Execute(func (result : CoroutineResult^) : (void)
489  :     InvokeMethod  : methodInfo = Execute<system::Async>, stackPatternCount = 2
//  GetMultipleString().Execute(func (result : CoroutineResult^) : (void)
490  :     Pop           
//  func () : (void)
491  :     LoadValue     : value = <null>
//  func () : (void)
492  :     Return        
//  ""
493  :     LoadValue     : value = <String, >
//  s
494  :     LoadGlobalVar : var = 0(s)
//  ("" & s)
495  :     OpConcat      
//  "["
496  :     LoadValue     : value = <String, [>
//  (("" & s) & "[")
497  :     OpConcat      
//  result
498  :     LoadLocalVar  : var = 0(result)
//  result.Failure
499  :     InvokeMethod  : methodInfo = GetFailure<system::CoroutineResult>, stackPatternCount = 0
//  result.Failure.Message
500  :     InvokeMethod  : methodInfo = GetMessage<system::Exception>, stackPatternCount = 0
//  ((("" & s) & "[") & result.Failure.Message)
501  :     OpConcat      
//  "]"
502  :     LoadValue     : value = <String, ]>
//  (((("" & s) & "[") & result.Failure.Message) & "]")
503  :     OpConcat      
//  (s = (((("" & s) & "[") & result.Failure.Message) & "]"))
504  :     Duplicate     : stackPatternCount = 0
//  (s = (((("" & s) & "[") & result.Failure.Message) & "]"))
505  :     StoreGlobalVar: var = 0(s)
//  (s = (((("" & s) & "[") & result.Failure.Message) & "]"));
506  :     Pop           
//  func (result : CoroutineResult^) : (void)
507  :     LoadValue     : value = <null>
//  func (result : CoroutineResult^) : (void)
508  :     Return        
