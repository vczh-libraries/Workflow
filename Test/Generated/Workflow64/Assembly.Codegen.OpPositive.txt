========================================================
Global Variables:
========================================================

========================================================
Functions:
========================================================
main (2 .. 73)
    Arguments:
    Captured Variables:
    Local Variables:
        b
        i8
        i16
        i32
        i64
        u8
        u16
        u32
        u64
        f32
        f64
        s

<initialize> (0 .. 1)
    Arguments:
    Captured Variables:
    Local Variables:

========================================================
Instructions:
========================================================
0    :     LoadValue     : value = <null>
1    :     Return        
//  false
2    :     LoadValue     : value = <Bool, false>
//  var b = false;
3    :     StoreLocalVar : var = 0(b)
//  1
4    :     LoadValue     : value = <I1, 1>
//  var i8 = 1 of (Int8);
5    :     StoreLocalVar : var = 1(i8)
//  2
6    :     LoadValue     : value = <I2, 2>
//  var i16 = 2 of (Int16);
7    :     StoreLocalVar : var = 2(i16)
//  4
8    :     LoadValue     : value = <I4, 4>
//  var i32 = 4 of (Int32);
9    :     StoreLocalVar : var = 3(i32)
//  8
10   :     LoadValue     : value = <I8, 8>
//  var i64 = 8 of (Int64);
11   :     StoreLocalVar : var = 4(i64)
//  1
12   :     LoadValue     : value = <U1, 1>
//  var u8 = 1 of (UInt8);
13   :     StoreLocalVar : var = 5(u8)
//  2
14   :     LoadValue     : value = <U2, 2>
//  var u16 = 2 of (UInt16);
15   :     StoreLocalVar : var = 6(u16)
//  4
16   :     LoadValue     : value = <U4, 4>
//  var u32 = 4 of (UInt32);
17   :     StoreLocalVar : var = 7(u32)
//  8
18   :     LoadValue     : value = <U8, 8>
//  var u64 = 8 of (UInt64);
19   :     StoreLocalVar : var = 8(u64)
//  1.5
20   :     LoadValue     : value = <F4, 1.5>
//  var f32 = 1.5 of (float);
21   :     StoreLocalVar : var = 9(f32)
//  3
22   :     LoadValue     : value = <F8, 3>
//  var f64 = 3 of (double);
23   :     StoreLocalVar : var = 10(f64)
//  "text"
24   :     LoadValue     : value = <Bool, text>
//  var s = "text" of (string);
25   :     StoreLocalVar : var = 11(s)
//  i8
26   :     LoadLocalVar  : var = 1(i8)
//  (+i8)
27   :     OpPositive    : type = I1
//  (+i8)
28   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  ", "
29   :     LoadValue     : value = <Bool, , >
//  ((+i8) & ", ")
30   :     OpConcat      
//  i16
31   :     LoadLocalVar  : var = 2(i16)
//  (+i16)
32   :     OpPositive    : type = I2
//  (+i16)
33   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  (((+i8) & ", ") & (+i16))
34   :     OpConcat      
//  ", "
35   :     LoadValue     : value = <Bool, , >
//  ((((+i8) & ", ") & (+i16)) & ", ")
36   :     OpConcat      
//  i32
37   :     LoadLocalVar  : var = 3(i32)
//  (+i32)
38   :     OpPositive    : type = I4
//  (+i32)
39   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  (((((+i8) & ", ") & (+i16)) & ", ") & (+i32))
40   :     OpConcat      
//  ", "
41   :     LoadValue     : value = <Bool, , >
//  ((((((+i8) & ", ") & (+i16)) & ", ") & (+i32)) & ", ")
42   :     OpConcat      
//  i64
43   :     LoadLocalVar  : var = 4(i64)
//  (+i64)
44   :     OpPositive    : type = I8
//  (+i64)
45   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  (((((((+i8) & ", ") & (+i16)) & ", ") & (+i32)) & ", ") & (+i64))
46   :     OpConcat      
//  ", "
47   :     LoadValue     : value = <Bool, , >
//  ((((((((+i8) & ", ") & (+i16)) & ", ") & (+i32)) & ", ") & (+i64)) & ", ")
48   :     OpConcat      
//  u8
49   :     LoadLocalVar  : var = 5(u8)
//  (+u8)
50   :     OpPositive    : type = U1
//  (+u8)
51   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  (((((((((+i8) & ", ") & (+i16)) & ", ") & (+i32)) & ", ") & (+i64)) & ", ") & (+u8))
52   :     OpConcat      
//  ", "
53   :     LoadValue     : value = <Bool, , >
//  ((((((((((+i8) & ", ") & (+i16)) & ", ") & (+i32)) & ", ") & (+i64)) & ", ") & (+u8)) & ", ")
54   :     OpConcat      
//  u16
55   :     LoadLocalVar  : var = 6(u16)
//  (+u16)
56   :     OpPositive    : type = U2
//  (+u16)
57   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  (((((((((((+i8) & ", ") & (+i16)) & ", ") & (+i32)) & ", ") & (+i64)) & ", ") & (+u8)) & ", ") & (+u16))
58   :     OpConcat      
//  ", "
59   :     LoadValue     : value = <Bool, , >
//  ((((((((((((+i8) & ", ") & (+i16)) & ", ") & (+i32)) & ", ") & (+i64)) & ", ") & (+u8)) & ", ") & (+u16)) & ", ")
60   :     OpConcat      
//  u32
61   :     LoadLocalVar  : var = 7(u32)
//  (+u32)
62   :     OpPositive    : type = U4
//  (+u32)
63   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  (((((((((((((+i8) & ", ") & (+i16)) & ", ") & (+i32)) & ", ") & (+i64)) & ", ") & (+u8)) & ", ") & (+u16)) & ", ") & (+u32))
64   :     OpConcat      
//  ", "
65   :     LoadValue     : value = <Bool, , >
//  ((((((((((((((+i8) & ", ") & (+i16)) & ", ") & (+i32)) & ", ") & (+i64)) & ", ") & (+u8)) & ", ") & (+u16)) & ", ") & (+u32)) & ", ")
66   :     OpConcat      
//  u64
67   :     LoadLocalVar  : var = 8(u64)
//  (+u64)
68   :     OpPositive    : type = U8
//  (+u64)
69   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  (((((((((((((((+i8) & ", ") & (+i16)) & ", ") & (+i32)) & ", ") & (+i64)) & ", ") & (+u8)) & ", ") & (+u16)) & ", ") & (+u32)) & ", ") & (+u64))
70   :     OpConcat      
//  return (((((((((((((((+i8) & ", ") & (+i16)) & ", ") & (+i32)) & ", ") & (+i64)) & ", ") & (+u8)) & ", ") & (+u16)) & ", ") & (+u32)) & ", ") & (+u64));
71   :     Return        
//  func main() : (string)
72   :     LoadValue     : value = <null>
//  func main() : (string)
73   :     Return        
