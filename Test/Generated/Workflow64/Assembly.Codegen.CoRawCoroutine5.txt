========================================================
Global Variables:
========================================================
s

========================================================
Functions:
========================================================
main (4 .. 59)
    Arguments:
    Captured Variables:
    Local Variables:
        coroutine
        i

<initialize> (0 .. 3)
    Arguments:
    Captured Variables:
    Local Variables:

<method:SetFailure<system::Coroutine>(2)> in main (60 .. 65)
    Arguments:
        <value>
    Captured Variables:
        <captured><co0-for-begin>i
        <captured><co1-for-end>i
        <captured><co2>i
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured-this>0
    Local Variables:

<method:SetStatus<system::Coroutine>(3)> in main (66 .. 71)
    Arguments:
        <value>
    Captured Variables:
        <captured><co0-for-begin>i
        <captured><co1-for-end>i
        <captured><co2>i
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured-this>0
    Local Variables:

<method:GetFailure<system::Coroutine>(6)> in main (72 .. 75)
    Arguments:
    Captured Variables:
        <captured><co0-for-begin>i
        <captured><co1-for-end>i
        <captured><co2>i
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured-this>0
    Local Variables:

<method:GetStatus<system::Coroutine>(7)> in main (76 .. 79)
    Arguments:
    Captured Variables:
        <captured><co0-for-begin>i
        <captured><co1-for-end>i
        <captured><co2>i
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured-this>0
    Local Variables:

<method:Resume<system::Coroutine>(8)> in main (80 .. 311)
    Arguments:
        <raise-exception>
        <coroutine-output>
    Captured Variables:
        <captured><co0-for-begin>i
        <captured><co1-for-end>i
        <captured><co2>i
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured-this>0
    Local Variables:
        <catch><co-ex>

========================================================
Instructions:
========================================================
//  ""
0    :     LoadValue     : value = <String, >
//  var s = "";
1    :     StoreGlobalVar: var = 0(s)
2    :     LoadValue     : value = <null>
3    :     Return        
//  0
4    :     LoadValue     : value = <I8, 0>
//  0
5    :     LoadValue     : value = <I8, 0>
//  0
6    :     LoadValue     : value = <I8, 0>
//  0
7    :     LoadValue     : value = <I8, 0>
//  1
8    :     LoadValue     : value = <I8, 1>
//  (-1)
9    :     OpNegative    : type = I8
//  null
10   :     LoadValue     : value = <null>
//  Waiting
11   :     LoadValue     : value = <enum: 0>
//  new (::system::Coroutine^)
12   :     LoadValue     : value = <null>
//  new (::system::Coroutine^)
13   :     CreateClosureContext: stackPatternCount = 8
//  new (::system::Coroutine^)
14   :     LoadMethodInfo: methodInfo = GetFailure<system::Coroutine>
//  func GetFailure() : (::system::Exception^)
15   :     LoadFunction  : func = 4(<method:GetFailure<system::Coroutine>(6)> in main)
//  new (::system::Coroutine^)
16   :     LoadMethodInfo: methodInfo = GetStatus<system::Coroutine>
//  func GetStatus() : (::system::CoroutineStatus)
17   :     LoadFunction  : func = 5(<method:GetStatus<system::Coroutine>(7)> in main)
//  new (::system::Coroutine^)
18   :     LoadMethodInfo: methodInfo = Resume<system::Coroutine>
//  func Resume(<raise-exception> : ::system::Boolean, <coroutine-output> : ::system::CoroutineResult^) : (::system::Void)
19   :     LoadFunction  : func = 6(<method:Resume<system::Coroutine>(8)> in main)
//  new (::system::Coroutine^)
20   :     CreateInterface: methodInfo = <system::Coroutine>, stackPatternCount = 6
//  var coroutine = new (::system::Coroutine^)
21   :     StoreLocalVar : var = 0(coroutine)
//  0
22   :     LoadValue     : value = <I8, 0>
//  var i = 0;
23   :     StoreLocalVar : var = 1(i)
//  coroutine
24   :     LoadLocalVar  : var = 0(coroutine)
//  coroutine.Status
25   :     InvokeMethod  : methodInfo = GetStatus<system::Coroutine>, stackPatternCount = 0
//  CoroutineStatus::Stopped
26   :     LoadValue     : value = <enum: 2>
//  (coroutine.Status != CoroutineStatus::Stopped)
27   :     CompareValue  
//  (coroutine.Status != CoroutineStatus::Stopped)
28   :     OpNot         : type = Bool
//  while ((coroutine.Status != CoroutineStatus::Stopped))
29   :     OpNot         : type = Bool
//  while ((coroutine.Status != CoroutineStatus::Stopped))
30   :     JumpIf        : label = 56
//  true
31   :     LoadValue     : value = <Bool, true>
//  null
32   :     LoadValue     : value = <null>
//  coroutine
33   :     LoadLocalVar  : var = 0(coroutine)
//  coroutine.Resume(true, null)
34   :     InvokeMethod  : methodInfo = Resume<system::Coroutine>, stackPatternCount = 2
//  coroutine.Resume(true, null);
35   :     Pop           
//  ""
36   :     LoadValue     : value = <String, >
//  s
37   :     LoadGlobalVar : var = 0(s)
//  ("" & s)
38   :     OpConcat      
//  "[-"
39   :     LoadValue     : value = <String, [->
//  (("" & s) & "[-")
40   :     OpConcat      
//  i
41   :     LoadLocalVar  : var = 1(i)
//  i
42   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  ((("" & s) & "[-") & i)
43   :     OpConcat      
//  "]"
44   :     LoadValue     : value = <String, ]>
//  (((("" & s) & "[-") & i) & "]")
45   :     OpConcat      
//  (s = (((("" & s) & "[-") & i) & "]"))
46   :     Duplicate     : stackPatternCount = 0
//  (s = (((("" & s) & "[-") & i) & "]"))
47   :     StoreGlobalVar: var = 0(s)
//  (s = (((("" & s) & "[-") & i) & "]"));
48   :     Pop           
//  i
49   :     LoadLocalVar  : var = 1(i)
//  1
50   :     LoadValue     : value = <I8, 1>
//  (i + 1)
51   :     OpAdd         : type = I8
//  (i = (i + 1))
52   :     Duplicate     : stackPatternCount = 0
//  (i = (i + 1))
53   :     StoreLocalVar : var = 1(i)
//  (i = (i + 1));
54   :     Pop           
//  while ((coroutine.Status != CoroutineStatus::Stopped))
55   :     Jump          : label = 24
//  s
56   :     LoadGlobalVar : var = 0(s)
//  return s;
57   :     Return        
//  func main() : (string)
58   :     LoadValue     : value = <null>
//  func main() : (string)
59   :     Return        
//  <value>
60   :     LoadLocalVar  : var = 0(<value>)
//  (<prop>Failure = <value>)
61   :     Duplicate     : stackPatternCount = 0
//  (<prop>Failure = <value>)
62   :     StoreCapturedVar: var = 5
//  (<prop>Failure = <value>);
63   :     Pop           
//  func SetFailure(<value> : ::system::Exception^) : (void)
64   :     LoadValue     : value = <null>
//  func SetFailure(<value> : ::system::Exception^) : (void)
65   :     Return        
//  <value>
66   :     LoadLocalVar  : var = 0(<value>)
//  (<prop>Status = <value>)
67   :     Duplicate     : stackPatternCount = 0
//  (<prop>Status = <value>)
68   :     StoreCapturedVar: var = 6
//  (<prop>Status = <value>);
69   :     Pop           
//  func SetStatus(<value> : ::system::CoroutineStatus) : (void)
70   :     LoadValue     : value = <null>
//  func SetStatus(<value> : ::system::CoroutineStatus) : (void)
71   :     Return        
//  <prop>Failure
72   :     LoadCapturedVar: var = 5(<captured><prop>Failure)
//  return <prop>Failure;
73   :     Return        
//  func GetFailure() : (::system::Exception^)
74   :     LoadValue     : value = <null>
//  func GetFailure() : (::system::Exception^)
75   :     Return        
//  <prop>Status
76   :     LoadCapturedVar: var = 6(<captured><prop>Status)
//  return <prop>Status;
77   :     Return        
//  func GetStatus() : (::system::CoroutineStatus)
78   :     LoadValue     : value = <null>
//  func GetStatus() : (::system::CoroutineStatus)
79   :     Return        
//  Status
80   :     LoadCapturedVar: var = 7(<captured-this>0)
//  Status
81   :     InvokeMethod  : methodInfo = GetStatus<system::Coroutine>, stackPatternCount = 0
//  ::system::CoroutineStatus::Waiting
82   :     LoadValue     : value = <enum: 0>
//  (Status != ::system::CoroutineStatus::Waiting)
83   :     CompareValue  
//  (Status != ::system::CoroutineStatus::Waiting)
84   :     OpNot         : type = Bool
//  if ((Status != ::system::CoroutineStatus::Waiting))
85   :     OpNot         : type = Bool
//  if ((Status != ::system::CoroutineStatus::Waiting))
86   :     JumpIf        : label = 90
//  "Resume should be called only when the coroutine is in the waiting status."
87   :     LoadValue     : value = <String, Resume should be called only when the coroutine is in the waiting status.>
//  raise "Resume should be called only when the coroutine is in the waiting status.";
88   :     RaiseException
//  if ((Status != ::system::CoroutineStatus::Waiting))
89   :     Jump          : label = 90
//  Executing
90   :     LoadValue     : value = <enum: 1>
//  SetStatus(Executing)
91   :     InvokeWithContext: func = 3(<method:SetStatus<system::Coroutine>(3)> in main), stackPatternCount = 1
//  SetStatus(Executing);
92   :     Pop           
//  try
93   :     InstallTry    : label = 296
//  <co-state-before-pause>
94   :     LoadCapturedVar: var = 4(<captured><co-state-before-pause>)
//  1
95   :     LoadValue     : value = <I8, 1>
//  (-1)
96   :     OpNegative    : type = I8
//  (<co-state-before-pause> != (-1))
97   :     CompareValue  
//  (<co-state-before-pause> != (-1))
98   :     OpNot         : type = Bool
//  if ((<co-state-before-pause> != (-1)))
99   :     OpNot         : type = Bool
//  if ((<co-state-before-pause> != (-1)))
100  :     JumpIf        : label = 133
//  <coroutine-output>
101  :     LoadLocalVar  : var = 1(<coroutine-output>)
//  <coroutine-output> is null
102  :     LoadValue     : value = <null>
//  <coroutine-output> is null
103  :     CompareReference
//  if (<coroutine-output> is null)
104  :     OpNot         : type = Bool
//  if (<coroutine-output> is null)
105  :     JumpIf        : label = 112
//  1
106  :     LoadValue     : value = <I8, 1>
//  (-1)
107  :     OpNegative    : type = I8
//  (<co-state-before-pause> = (-1))
108  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = (-1))
109  :     StoreCapturedVar: var = 4
//  (<co-state-before-pause> = (-1));
110  :     Pop           
//  if (<coroutine-output> is null)
111  :     Jump          : label = 132
//  <coroutine-output>
112  :     LoadLocalVar  : var = 1(<coroutine-output>)
//  <coroutine-output>.Failure
113  :     InvokeMethod  : methodInfo = GetFailure<system::CoroutineResult>, stackPatternCount = 0
//  <coroutine-output>.Failure is null
114  :     LoadValue     : value = <null>
//  <coroutine-output>.Failure is null
115  :     CompareReference
//  if (<coroutine-output>.Failure is null)
116  :     OpNot         : type = Bool
//  if (<coroutine-output>.Failure is null)
117  :     JumpIf        : label = 124
//  1
118  :     LoadValue     : value = <I8, 1>
//  (-1)
119  :     OpNegative    : type = I8
//  (<co-state-before-pause> = (-1))
120  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = (-1))
121  :     StoreCapturedVar: var = 4
//  (<co-state-before-pause> = (-1));
122  :     Pop           
//  if (<coroutine-output>.Failure is null)
123  :     Jump          : label = 132
//  1
124  :     LoadValue     : value = <I8, 1>
//  (-1)
125  :     OpNegative    : type = I8
//  (<co-state-before-pause> = (-1))
126  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = (-1))
127  :     StoreCapturedVar: var = 4
//  (<co-state-before-pause> = (-1));
128  :     Pop           
//  <coroutine-output>
129  :     LoadLocalVar  : var = 1(<coroutine-output>)
//  <coroutine-output>.Failure
130  :     InvokeMethod  : methodInfo = GetFailure<system::CoroutineResult>, stackPatternCount = 0
//  raise <coroutine-output>.Failure;
131  :     RaiseException
//  if ((<co-state-before-pause> != (-1)))
132  :     Jump          : label = 133
//  true
133  :     LoadValue     : value = <Bool, true>
//  while (true)
134  :     OpNot         : type = Bool
//  while (true)
135  :     JumpIf        : label = 294
//  <co-state>
136  :     LoadCapturedVar: var = 3(<captured><co-state>)
//  0
137  :     LoadValue     : value = <I8, 0>
//  (<co-state> == 0)
138  :     CompareValue  
//  if ((<co-state> == 0))
139  :     OpNot         : type = Bool
//  if ((<co-state> == 0))
140  :     JumpIf        : label = 173
//  0
141  :     LoadValue     : value = <I8, 0>
//  (<co0-for-begin>i = 0)
142  :     Duplicate     : stackPatternCount = 0
//  (<co0-for-begin>i = 0)
143  :     StoreCapturedVar: var = 0
//  (<co0-for-begin>i = 0);
144  :     Pop           
//  10
145  :     LoadValue     : value = <I8, 10>
//  1
146  :     LoadValue     : value = <I8, 1>
//  (10 - 1)
147  :     OpSub         : type = I8
//  (<co1-for-end>i = (10 - 1))
148  :     Duplicate     : stackPatternCount = 0
//  (<co1-for-end>i = (10 - 1))
149  :     StoreCapturedVar: var = 1
//  (<co1-for-end>i = (10 - 1));
150  :     Pop           
//  <co0-for-begin>i
151  :     LoadCapturedVar: var = 0(<captured><co0-for-begin>i)
//  (<co2>i = <co0-for-begin>i)
152  :     Duplicate     : stackPatternCount = 0
//  (<co2>i = <co0-for-begin>i)
153  :     StoreCapturedVar: var = 2
//  (<co2>i = <co0-for-begin>i);
154  :     Pop           
//  <co2>i
155  :     LoadCapturedVar: var = 2(<captured><co2>i)
//  <co1-for-end>i
156  :     LoadCapturedVar: var = 1(<captured><co1-for-end>i)
//  (<co2>i <= <co1-for-end>i)
157  :     CompareLiteral: type = I8
//  (<co2>i <= <co1-for-end>i)
158  :     OpLE          
//  if ((<co2>i <= <co1-for-end>i))
159  :     OpNot         : type = Bool
//  if ((<co2>i <= <co1-for-end>i))
160  :     JumpIf        : label = 167
//  3
161  :     LoadValue     : value = <I8, 3>
//  (<co-state> = 3)
162  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 3)
163  :     StoreCapturedVar: var = 3
//  (<co-state> = 3);
164  :     Pop           
//  continue;
165  :     Jump          : label = 133
//  if ((<co2>i <= <co1-for-end>i))
166  :     Jump          : label = 167
//  1
167  :     LoadValue     : value = <I8, 1>
//  (<co-state> = 1)
168  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 1)
169  :     StoreCapturedVar: var = 3
//  (<co-state> = 1);
170  :     Pop           
//  continue;
171  :     Jump          : label = 133
//  if ((<co-state> == 0))
172  :     Jump          : label = 173
//  <co-state>
173  :     LoadCapturedVar: var = 3(<captured><co-state>)
//  1
174  :     LoadValue     : value = <I8, 1>
//  (<co-state> == 1)
175  :     CompareValue  
//  if ((<co-state> == 1))
176  :     OpNot         : type = Bool
//  if ((<co-state> == 1))
177  :     JumpIf        : label = 185
//  Stopped
178  :     LoadValue     : value = <enum: 2>
//  SetStatus(Stopped)
179  :     InvokeWithContext: func = 3(<method:SetStatus<system::Coroutine>(3)> in main), stackPatternCount = 1
//  SetStatus(Stopped);
180  :     Pop           
//  try
181  :     UninstallTry  : stackPatternCount = 0
//  return;
182  :     LoadValue     : value = <null>
//  return;
183  :     Return        
//  if ((<co-state> == 1))
184  :     Jump          : label = 185
//  <co-state>
185  :     LoadCapturedVar: var = 3(<captured><co-state>)
//  2
186  :     LoadValue     : value = <I8, 2>
//  (<co-state> == 2)
187  :     CompareValue  
//  if ((<co-state> == 2))
188  :     OpNot         : type = Bool
//  if ((<co-state> == 2))
189  :     JumpIf        : label = 214
//  <co2>i
190  :     LoadCapturedVar: var = 2(<captured><co2>i)
//  1
191  :     LoadValue     : value = <I8, 1>
//  (<co2>i + 1)
192  :     OpAdd         : type = I8
//  (<co2>i = (<co2>i + 1))
193  :     Duplicate     : stackPatternCount = 0
//  (<co2>i = (<co2>i + 1))
194  :     StoreCapturedVar: var = 2
//  (<co2>i = (<co2>i + 1));
195  :     Pop           
//  <co2>i
196  :     LoadCapturedVar: var = 2(<captured><co2>i)
//  <co1-for-end>i
197  :     LoadCapturedVar: var = 1(<captured><co1-for-end>i)
//  (<co2>i <= <co1-for-end>i)
198  :     CompareLiteral: type = I8
//  (<co2>i <= <co1-for-end>i)
199  :     OpLE          
//  if ((<co2>i <= <co1-for-end>i))
200  :     OpNot         : type = Bool
//  if ((<co2>i <= <co1-for-end>i))
201  :     JumpIf        : label = 208
//  3
202  :     LoadValue     : value = <I8, 3>
//  (<co-state> = 3)
203  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 3)
204  :     StoreCapturedVar: var = 3
//  (<co-state> = 3);
205  :     Pop           
//  continue;
206  :     Jump          : label = 133
//  if ((<co2>i <= <co1-for-end>i))
207  :     Jump          : label = 208
//  1
208  :     LoadValue     : value = <I8, 1>
//  (<co-state> = 1)
209  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 1)
210  :     StoreCapturedVar: var = 3
//  (<co-state> = 1);
211  :     Pop           
//  continue;
212  :     Jump          : label = 133
//  if ((<co-state> == 2))
213  :     Jump          : label = 214
//  <co-state>
214  :     LoadCapturedVar: var = 3(<captured><co-state>)
//  3
215  :     LoadValue     : value = <I8, 3>
//  (<co-state> == 3)
216  :     CompareValue  
//  if ((<co-state> == 3))
217  :     OpNot         : type = Bool
//  if ((<co-state> == 3))
218  :     JumpIf        : label = 238
//  ""
219  :     LoadValue     : value = <String, >
//  s
220  :     LoadGlobalVar : var = 0(s)
//  ("" & s)
221  :     OpConcat      
//  "[+"
222  :     LoadValue     : value = <String, [+>
//  (("" & s) & "[+")
223  :     OpConcat      
//  <co2>i
224  :     LoadCapturedVar: var = 2(<captured><co2>i)
//  <co2>i
225  :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  ((("" & s) & "[+") & <co2>i)
226  :     OpConcat      
//  "]"
227  :     LoadValue     : value = <String, ]>
//  (((("" & s) & "[+") & <co2>i) & "]")
228  :     OpConcat      
//  (s = (((("" & s) & "[+") & <co2>i) & "]"))
229  :     Duplicate     : stackPatternCount = 0
//  (s = (((("" & s) & "[+") & <co2>i) & "]"))
230  :     StoreGlobalVar: var = 0(s)
//  (s = (((("" & s) & "[+") & <co2>i) & "]"));
231  :     Pop           
//  4
232  :     LoadValue     : value = <I8, 4>
//  (<co-state> = 4)
233  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 4)
234  :     StoreCapturedVar: var = 3
//  (<co-state> = 4);
235  :     Pop           
//  continue;
236  :     Jump          : label = 133
//  if ((<co-state> == 3))
237  :     Jump          : label = 238
//  <co-state>
238  :     LoadCapturedVar: var = 3(<captured><co-state>)
//  4
239  :     LoadValue     : value = <I8, 4>
//  (<co-state> == 4)
240  :     CompareValue  
//  if ((<co-state> == 4))
241  :     OpNot         : type = Bool
//  if ((<co-state> == 4))
242  :     JumpIf        : label = 258
//  Waiting
243  :     LoadValue     : value = <enum: 0>
//  SetStatus(Waiting)
244  :     InvokeWithContext: func = 3(<method:SetStatus<system::Coroutine>(3)> in main), stackPatternCount = 1
//  SetStatus(Waiting);
245  :     Pop           
//  <co-state>
246  :     LoadCapturedVar: var = 3(<captured><co-state>)
//  (<co-state-before-pause> = <co-state>)
247  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = <co-state>)
248  :     StoreCapturedVar: var = 4
//  (<co-state-before-pause> = <co-state>);
249  :     Pop           
//  5
250  :     LoadValue     : value = <I8, 5>
//  (<co-state> = 5)
251  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 5)
252  :     StoreCapturedVar: var = 3
//  (<co-state> = 5);
253  :     Pop           
//  try
254  :     UninstallTry  : stackPatternCount = 0
//  return;
255  :     LoadValue     : value = <null>
//  return;
256  :     Return        
//  if ((<co-state> == 4))
257  :     Jump          : label = 258
//  <co-state>
258  :     LoadCapturedVar: var = 3(<captured><co-state>)
//  5
259  :     LoadValue     : value = <I8, 5>
//  (<co-state> == 5)
260  :     CompareValue  
//  if ((<co-state> == 5))
261  :     OpNot         : type = Bool
//  if ((<co-state> == 5))
262  :     JumpIf        : label = 293
//  <co2>i
263  :     LoadCapturedVar: var = 2(<captured><co2>i)
//  4
264  :     LoadValue     : value = <I8, 4>
//  (<co2>i == 4)
265  :     CompareValue  
//  if ((<co2>i == 4))
266  :     OpNot         : type = Bool
//  if ((<co2>i == 4))
267  :     JumpIf        : label = 287
//  ""
268  :     LoadValue     : value = <String, >
//  s
269  :     LoadGlobalVar : var = 0(s)
//  ("" & s)
270  :     OpConcat      
//  "[+Enough!]"
271  :     LoadValue     : value = <String, [+Enough!]>
//  (("" & s) & "[+Enough!]")
272  :     OpConcat      
//  (s = (("" & s) & "[+Enough!]"))
273  :     Duplicate     : stackPatternCount = 0
//  (s = (("" & s) & "[+Enough!]"))
274  :     StoreGlobalVar: var = 0(s)
//  (s = (("" & s) & "[+Enough!]"));
275  :     Pop           
//  1
276  :     LoadValue     : value = <I8, 1>
//  (<co-state> = 1)
277  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 1)
278  :     StoreCapturedVar: var = 3
//  (<co-state> = 1);
279  :     Pop           
//  continue;
280  :     Jump          : label = 133
//  2
281  :     LoadValue     : value = <I8, 2>
//  (<co-state> = 2)
282  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 2)
283  :     StoreCapturedVar: var = 3
//  (<co-state> = 2);
284  :     Pop           
//  continue;
285  :     Jump          : label = 133
//  if ((<co2>i == 4))
286  :     Jump          : label = 287
//  2
287  :     LoadValue     : value = <I8, 2>
//  (<co-state> = 2)
288  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 2)
289  :     StoreCapturedVar: var = 3
//  (<co-state> = 2);
290  :     Pop           
//  continue;
291  :     Jump          : label = 133
//  if ((<co-state> == 5))
292  :     Jump          : label = 293
//  while (true)
293  :     Jump          : label = 133
//  try
294  :     UninstallTry  : stackPatternCount = 0
//  try
295  :     Jump          : label = 310
//  try
296  :     LoadException 
//  try
297  :     StoreLocalVar : var = 2(<catch><co-ex>)
//  <co-ex>
298  :     LoadLocalVar  : var = 2(<catch><co-ex>)
//  SetFailure(<co-ex>)
299  :     InvokeWithContext: func = 2(<method:SetFailure<system::Coroutine>(2)> in main), stackPatternCount = 1
//  SetFailure(<co-ex>);
300  :     Pop           
//  Stopped
301  :     LoadValue     : value = <enum: 2>
//  SetStatus(Stopped)
302  :     InvokeWithContext: func = 3(<method:SetStatus<system::Coroutine>(3)> in main), stackPatternCount = 1
//  SetStatus(Stopped);
303  :     Pop           
//  <raise-exception>
304  :     LoadLocalVar  : var = 0(<raise-exception>)
//  if (<raise-exception>)
305  :     OpNot         : type = Bool
//  if (<raise-exception>)
306  :     JumpIf        : label = 310
//  raise;
307  :     LoadLocalVar  : var = 2(<catch><co-ex>)
//  raise;
308  :     RaiseException
//  if (<raise-exception>)
309  :     Jump          : label = 310
//  func Resume(<raise-exception> : ::system::Boolean, <coroutine-output> : ::system::CoroutineResult^) : (::system::Void)
310  :     LoadValue     : value = <null>
//  func Resume(<raise-exception> : ::system::Boolean, <coroutine-output> : ::system::CoroutineResult^) : (::system::Void)
311  :     Return        
