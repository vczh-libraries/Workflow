========================================================
Global Variables:
========================================================
s

========================================================
Functions:
========================================================
Bar::Getvalue (4 .. 8)
    Arguments:
    Captured Variables:
        <captured-this>0
    Local Variables:

Bar::Setvalue (9 .. 26)
    Arguments:
        <value>
    Captured Variables:
        <captured-this>0
    Local Variables:

Bar::#ctor (27 .. 31)
    Arguments:
    Captured Variables:
        <captured-this>0
    Local Variables:

Bar::#ctor (32 .. 42)
    Arguments:
        _value
    Captured Variables:
        <captured-this>0
    Local Variables:

Foo::Getbar (43 .. 47)
    Arguments:
    Captured Variables:
        <captured-this>0
    Local Variables:

Foo::Setbar (48 .. 65)
    Arguments:
        <value>
    Captured Variables:
        <captured-this>0
    Local Variables:

Foo::#ctor (66 .. 71)
    Arguments:
    Captured Variables:
        <captured-this>0
    Local Variables:

Callback (72 .. 87)
    Arguments:
        value
    Captured Variables:
    Local Variables:

main (88 .. 185)
    Arguments:
    Captured Variables:
    Local Variables:
        x
        y
        z
        subscription

<initialize> (0 .. 3)
    Arguments:
    Captured Variables:
    Local Variables:

<method:<bind-activator><system::Subscription>(10)> in main (186 .. 211)
    Arguments:
    Captured Variables:
        <captured><bind-cache>0
        <captured><bind-cache>1
        <captured><bind-cache>2
        <captured><bind-cache>3
        <captured><bind-cache>4
        <captured><bind-cache>5
        <captured><bind-handler>0_0
        <captured><bind-handler>1_0
        <captured><bind-handler>2_0
        <captured><bind-handler>3_0
        <captured><bind-handler>4_0
        <captured><bind-handler>5_0
        <captured><bind-handler>6_0
        <captured><bind-opened>
        <captured><bind-closed>
        <captured>y
        <captured>z
        <captured>x
        <captured-this>0
    Local Variables:
        <bind-activator-result>
        <let>_z

<method:<bind-callback>0_0<system::Subscription>(11)> in main (212 .. 278)
    Arguments:
    Captured Variables:
        <captured><bind-cache>0
        <captured><bind-cache>1
        <captured><bind-cache>2
        <captured><bind-cache>3
        <captured><bind-cache>4
        <captured><bind-cache>5
        <captured><bind-handler>0_0
        <captured><bind-handler>1_0
        <captured><bind-handler>2_0
        <captured><bind-handler>3_0
        <captured><bind-handler>4_0
        <captured><bind-handler>5_0
        <captured><bind-handler>6_0
        <captured><bind-opened>
        <captured><bind-closed>
        <captured>y
        <captured>z
        <captured>x
        <captured-this>0
    Local Variables:

<method:<bind-callback>1_0<system::Subscription>(12)> in main (279 .. 318)
    Arguments:
    Captured Variables:
        <captured><bind-cache>0
        <captured><bind-cache>1
        <captured><bind-cache>2
        <captured><bind-cache>3
        <captured><bind-cache>4
        <captured><bind-cache>5
        <captured><bind-handler>0_0
        <captured><bind-handler>1_0
        <captured><bind-handler>2_0
        <captured><bind-handler>3_0
        <captured><bind-handler>4_0
        <captured><bind-handler>5_0
        <captured><bind-handler>6_0
        <captured><bind-opened>
        <captured><bind-closed>
        <captured>y
        <captured>z
        <captured>x
        <captured-this>0
    Local Variables:

<method:<bind-callback>2_0<system::Subscription>(13)> in main (319 .. 322)
    Arguments:
    Captured Variables:
        <captured><bind-cache>0
        <captured><bind-cache>1
        <captured><bind-cache>2
        <captured><bind-cache>3
        <captured><bind-cache>4
        <captured><bind-cache>5
        <captured><bind-handler>0_0
        <captured><bind-handler>1_0
        <captured><bind-handler>2_0
        <captured><bind-handler>3_0
        <captured><bind-handler>4_0
        <captured><bind-handler>5_0
        <captured><bind-handler>6_0
        <captured><bind-opened>
        <captured><bind-closed>
        <captured>y
        <captured>z
        <captured>x
        <captured-this>0
    Local Variables:

<method:<bind-callback>3_0<system::Subscription>(14)> in main (323 .. 362)
    Arguments:
    Captured Variables:
        <captured><bind-cache>0
        <captured><bind-cache>1
        <captured><bind-cache>2
        <captured><bind-cache>3
        <captured><bind-cache>4
        <captured><bind-cache>5
        <captured><bind-handler>0_0
        <captured><bind-handler>1_0
        <captured><bind-handler>2_0
        <captured><bind-handler>3_0
        <captured><bind-handler>4_0
        <captured><bind-handler>5_0
        <captured><bind-handler>6_0
        <captured><bind-opened>
        <captured><bind-closed>
        <captured>y
        <captured>z
        <captured>x
        <captured-this>0
    Local Variables:

<method:<bind-callback>4_0<system::Subscription>(15)> in main (363 .. 366)
    Arguments:
    Captured Variables:
        <captured><bind-cache>0
        <captured><bind-cache>1
        <captured><bind-cache>2
        <captured><bind-cache>3
        <captured><bind-cache>4
        <captured><bind-cache>5
        <captured><bind-handler>0_0
        <captured><bind-handler>1_0
        <captured><bind-handler>2_0
        <captured><bind-handler>3_0
        <captured><bind-handler>4_0
        <captured><bind-handler>5_0
        <captured><bind-handler>6_0
        <captured><bind-opened>
        <captured><bind-closed>
        <captured>y
        <captured>z
        <captured>x
        <captured-this>0
    Local Variables:

<method:<bind-callback>5_0<system::Subscription>(16)> in main (367 .. 370)
    Arguments:
    Captured Variables:
        <captured><bind-cache>0
        <captured><bind-cache>1
        <captured><bind-cache>2
        <captured><bind-cache>3
        <captured><bind-cache>4
        <captured><bind-cache>5
        <captured><bind-handler>0_0
        <captured><bind-handler>1_0
        <captured><bind-handler>2_0
        <captured><bind-handler>3_0
        <captured><bind-handler>4_0
        <captured><bind-handler>5_0
        <captured><bind-handler>6_0
        <captured><bind-opened>
        <captured><bind-closed>
        <captured>y
        <captured>z
        <captured>x
        <captured-this>0
    Local Variables:

<method:<bind-callback>6_0<system::Subscription>(17)> in main (371 .. 374)
    Arguments:
    Captured Variables:
        <captured><bind-cache>0
        <captured><bind-cache>1
        <captured><bind-cache>2
        <captured><bind-cache>3
        <captured><bind-cache>4
        <captured><bind-cache>5
        <captured><bind-handler>0_0
        <captured><bind-handler>1_0
        <captured><bind-handler>2_0
        <captured><bind-handler>3_0
        <captured><bind-handler>4_0
        <captured><bind-handler>5_0
        <captured><bind-handler>6_0
        <captured><bind-opened>
        <captured><bind-closed>
        <captured>y
        <captured>z
        <captured>x
        <captured-this>0
    Local Variables:

<method:Open<system::Subscription>(26)> in main (375 .. 524)
    Arguments:
    Captured Variables:
        <captured><bind-cache>0
        <captured><bind-cache>1
        <captured><bind-cache>2
        <captured><bind-cache>3
        <captured><bind-cache>4
        <captured><bind-cache>5
        <captured><bind-handler>0_0
        <captured><bind-handler>1_0
        <captured><bind-handler>2_0
        <captured><bind-handler>3_0
        <captured><bind-handler>4_0
        <captured><bind-handler>5_0
        <captured><bind-handler>6_0
        <captured><bind-opened>
        <captured><bind-closed>
        <captured>y
        <captured>z
        <captured>x
        <captured-this>0
    Local Variables:

<method:Update<system::Subscription>(27)> in main (525 .. 539)
    Arguments:
    Captured Variables:
        <captured><bind-cache>0
        <captured><bind-cache>1
        <captured><bind-cache>2
        <captured><bind-cache>3
        <captured><bind-cache>4
        <captured><bind-cache>5
        <captured><bind-handler>0_0
        <captured><bind-handler>1_0
        <captured><bind-handler>2_0
        <captured><bind-handler>3_0
        <captured><bind-handler>4_0
        <captured><bind-handler>5_0
        <captured><bind-handler>6_0
        <captured><bind-opened>
        <captured><bind-closed>
        <captured>y
        <captured>z
        <captured>x
        <captured-this>0
    Local Variables:

<method:Close<system::Subscription>(28)> in main (540 .. 711)
    Arguments:
    Captured Variables:
        <captured><bind-cache>0
        <captured><bind-cache>1
        <captured><bind-cache>2
        <captured><bind-cache>3
        <captured><bind-cache>4
        <captured><bind-cache>5
        <captured><bind-handler>0_0
        <captured><bind-handler>1_0
        <captured><bind-handler>2_0
        <captured><bind-handler>3_0
        <captured><bind-handler>4_0
        <captured><bind-handler>5_0
        <captured><bind-handler>6_0
        <captured><bind-opened>
        <captured><bind-closed>
        <captured>y
        <captured>z
        <captured>x
        <captured-this>0
    Local Variables:

========================================================
Instructions:
========================================================
//  ""
0    :     LoadValue     : value = <String, >
//  var s = "";
1    :     StoreGlobalVar: var = 0(s)
2    :     LoadValue     : value = <null>
3    :     Return        
//  <prop>value
4    :     LoadCapturedVar: var = 0(<captured-this>0)
//  <prop>value
5    :     GetProperty   : propertyInfo = <prop>value<Bar>
//  return <prop>value;
6    :     Return        
//  func Getvalue() : (int)
7    :     LoadValue     : value = <null>
//  func Getvalue() : (int)
8    :     Return        
//  <prop>value
9    :     LoadCapturedVar: var = 0(<captured-this>0)
//  <prop>value
10   :     GetProperty   : propertyInfo = <prop>value<Bar>
//  <value>
11   :     LoadLocalVar  : var = 0(<value>)
//  (<prop>value != <value>)
12   :     CompareValue  
//  (<prop>value != <value>)
13   :     OpNot         : type = Bool
//  if ((<prop>value != <value>))
14   :     OpNot         : type = Bool
//  if ((<prop>value != <value>))
15   :     JumpIf        : label = 25
//  <value>
16   :     LoadLocalVar  : var = 0(<value>)
//  (<prop>value = <value>)
17   :     Duplicate     : stackPatternCount = 0
//  (<prop>value = <value>)
18   :     LoadCapturedVar: var = 0(<captured-this>0)
//  (<prop>value = <value>)
19   :     SetProperty   : propertyInfo = <prop>value<Bar>
//  (<prop>value = <value>);
20   :     Pop           
//  valueChanged()
21   :     LoadCapturedVar: var = 0(<captured-this>0)
//  valueChanged()
22   :     InvokeEvent   : eventInfo = valueChanged<Bar>, stackPatternCount = 0
//  valueChanged();
23   :     Pop           
//  if ((<prop>value != <value>))
24   :     Jump          : label = 25
//  func Setvalue(<value> : int) : (void)
25   :     LoadValue     : value = <null>
//  func Setvalue(<value> : int) : (void)
26   :     Return        
//  0
27   :     LoadValue     : value = <I8, 0>
//  var <prop>value : int = 0;
28   :     LoadCapturedVar: var = 0(<captured-this>0)
//  var <prop>value : int = 0;
29   :     SetProperty   : propertyInfo = <prop>value<Bar>
//  new ()
30   :     LoadValue     : value = <null>
//  new ()
31   :     Return        
//  0
32   :     LoadValue     : value = <I8, 0>
//  var <prop>value : int = 0;
33   :     LoadCapturedVar: var = 0(<captured-this>0)
//  var <prop>value : int = 0;
34   :     SetProperty   : propertyInfo = <prop>value<Bar>
//  _value
35   :     LoadLocalVar  : var = 0(_value)
//  (this.value = _value)
36   :     Duplicate     : stackPatternCount = 0
//  this
37   :     LoadCapturedVar: var = 0(<captured-this>0)
//  (this.value = _value)
38   :     InvokeMethod  : methodInfo = Setvalue<Bar>, stackPatternCount = 1
//  (this.value = _value)
39   :     Pop           
//  (this.value = _value);
40   :     Pop           
//  new (_value : int)
41   :     LoadValue     : value = <null>
//  new (_value : int)
42   :     Return        
//  <prop>bar
43   :     LoadCapturedVar: var = 0(<captured-this>0)
//  <prop>bar
44   :     GetProperty   : propertyInfo = <prop>bar<Foo>
//  return <prop>bar;
45   :     Return        
//  func Getbar() : (Bar^)
46   :     LoadValue     : value = <null>
//  func Getbar() : (Bar^)
47   :     Return        
//  <prop>bar
48   :     LoadCapturedVar: var = 0(<captured-this>0)
//  <prop>bar
49   :     GetProperty   : propertyInfo = <prop>bar<Foo>
//  <value>
50   :     LoadLocalVar  : var = 0(<value>)
//  (<prop>bar != <value>)
51   :     CompareReference
//  (<prop>bar != <value>)
52   :     OpNot         : type = Bool
//  if ((<prop>bar != <value>))
53   :     OpNot         : type = Bool
//  if ((<prop>bar != <value>))
54   :     JumpIf        : label = 64
//  <value>
55   :     LoadLocalVar  : var = 0(<value>)
//  (<prop>bar = <value>)
56   :     Duplicate     : stackPatternCount = 0
//  (<prop>bar = <value>)
57   :     LoadCapturedVar: var = 0(<captured-this>0)
//  (<prop>bar = <value>)
58   :     SetProperty   : propertyInfo = <prop>bar<Foo>
//  (<prop>bar = <value>);
59   :     Pop           
//  barChanged()
60   :     LoadCapturedVar: var = 0(<captured-this>0)
//  barChanged()
61   :     InvokeEvent   : eventInfo = barChanged<Foo>, stackPatternCount = 0
//  barChanged();
62   :     Pop           
//  if ((<prop>bar != <value>))
63   :     Jump          : label = 64
//  func Setbar(<value> : Bar^) : (void)
64   :     LoadValue     : value = <null>
//  func Setbar(<value> : Bar^) : (void)
65   :     Return        
//  new (Bar^)()
66   :     LoadValue     : value = <null>
//  new (Bar^)()
67   :     InvokeMethod  : methodInfo = <Bar>, stackPatternCount = 0
//  var <prop>bar : Bar^ = new (Bar^)();
68   :     LoadCapturedVar: var = 0(<captured-this>0)
//  var <prop>bar : Bar^ = new (Bar^)();
69   :     SetProperty   : propertyInfo = <prop>bar<Foo>
//  new ()
70   :     LoadValue     : value = <null>
//  new ()
71   :     Return        
//  ""
72   :     LoadValue     : value = <String, >
//  s
73   :     LoadGlobalVar : var = 0(s)
//  ("" & s)
74   :     OpConcat      
//  "["
75   :     LoadValue     : value = <String, [>
//  (("" & s) & "[")
76   :     OpConcat      
//  value
77   :     LoadLocalVar  : var = 0(value)
//  value
78   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::Int64
//  (cast (int) value)
79   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  ((("" & s) & "[") & (cast (int) value))
80   :     OpConcat      
//  "]"
81   :     LoadValue     : value = <String, ]>
//  (((("" & s) & "[") & (cast (int) value)) & "]")
82   :     OpConcat      
//  (s = (((("" & s) & "[") & (cast (int) value)) & "]"))
83   :     Duplicate     : stackPatternCount = 0
//  (s = (((("" & s) & "[") & (cast (int) value)) & "]"))
84   :     StoreGlobalVar: var = 0(s)
//  (s = (((("" & s) & "[") & (cast (int) value)) & "]"));
85   :     Pop           
//  func Callback(value : object) : (void)
86   :     LoadValue     : value = <null>
//  func Callback(value : object) : (void)
87   :     Return        
//  new (Foo^)()
88   :     LoadValue     : value = <null>
//  new (Foo^)()
89   :     InvokeMethod  : methodInfo = <Foo>, stackPatternCount = 0
//  var x = new (Foo^)();
90   :     StoreLocalVar : var = 0(x)
//  new (Foo^)()
91   :     LoadValue     : value = <null>
//  new (Foo^)()
92   :     InvokeMethod  : methodInfo = <Foo>, stackPatternCount = 0
//  var y = new (Foo^)();
93   :     StoreLocalVar : var = 1(y)
//  new (Foo^)()
94   :     LoadValue     : value = <null>
//  new (Foo^)()
95   :     InvokeMethod  : methodInfo = <Foo>, stackPatternCount = 0
//  var z = new (Foo^)();
96   :     StoreLocalVar : var = 2(z)
//  null
97   :     LoadValue     : value = <null>
//  null
98   :     LoadValue     : value = <null>
//  null
99   :     LoadValue     : value = <null>
//  null
100  :     LoadValue     : value = <null>
//  null
101  :     LoadValue     : value = <null>
//  null
102  :     LoadValue     : value = <null>
//  null
103  :     LoadValue     : value = <null>
//  null
104  :     LoadValue     : value = <null>
//  null
105  :     LoadValue     : value = <null>
//  null
106  :     LoadValue     : value = <null>
//  null
107  :     LoadValue     : value = <null>
//  null
108  :     LoadValue     : value = <null>
//  null
109  :     LoadValue     : value = <null>
//  false
110  :     LoadValue     : value = <Bool, false>
//  false
111  :     LoadValue     : value = <Bool, false>
//  new (::system::Subscription^)
112  :     LoadLocalVar  : var = 1(y)
//  new (::system::Subscription^)
113  :     LoadLocalVar  : var = 2(z)
//  new (::system::Subscription^)
114  :     LoadLocalVar  : var = 0(x)
//  new (::system::Subscription^)
115  :     LoadValue     : value = <null>
//  new (::system::Subscription^)
116  :     CreateClosureContext: stackPatternCount = 19
//  new (::system::Subscription^)
117  :     LoadMethodInfo: methodInfo = Open<system::Subscription>
//  func Open() : (::system::Boolean)
118  :     LoadFunction  : func = 18(<method:Open<system::Subscription>(26)> in main)
//  new (::system::Subscription^)
119  :     LoadMethodInfo: methodInfo = Update<system::Subscription>
//  func Update() : (::system::Boolean)
120  :     LoadFunction  : func = 19(<method:Update<system::Subscription>(27)> in main)
//  new (::system::Subscription^)
121  :     LoadMethodInfo: methodInfo = Close<system::Subscription>
//  func Close() : (::system::Boolean)
122  :     LoadFunction  : func = 20(<method:Close<system::Subscription>(28)> in main)
//  new (::system::Subscription^)
123  :     CreateInterface: methodInfo = <system::Subscription>, stackPatternCount = 6
//  var subscription = new (::system::Subscription^)
124  :     StoreLocalVar : var = 3(subscription)
//  subscription
125  :     LoadLocalVar  : var = 3(subscription)
//  subscription.Open()
126  :     InvokeMethod  : methodInfo = Open<system::Subscription>, stackPatternCount = 0
//  subscription.Open();
127  :     Pop           
//  subscription
128  :     LoadLocalVar  : var = 3(subscription)
//  Callback
129  :     CreateClosureContext: stackPatternCount = 0
//  Callback
130  :     LoadFunction  : func = 7(Callback)
//  Callback
131  :     CreateClosure 
//  attach(subscription.ValueChanged, Callback)
132  :     AttachEvent   : eventInfo = ValueChanged<system::Subscription>
//  attach(subscription.ValueChanged, Callback);
133  :     Pop           
//  1
134  :     LoadValue     : value = <I8, 1>
//  new (Bar^)(1)
135  :     LoadValue     : value = <null>
//  new (Bar^)(1)
136  :     InvokeMethod  : methodInfo = <Bar>, stackPatternCount = 1
//  (x.bar = new (Bar^)(1))
137  :     Duplicate     : stackPatternCount = 0
//  x
138  :     LoadLocalVar  : var = 0(x)
//  (x.bar = new (Bar^)(1))
139  :     InvokeMethod  : methodInfo = Setbar<Foo>, stackPatternCount = 1
//  (x.bar = new (Bar^)(1))
140  :     Pop           
//  (x.bar = new (Bar^)(1));
141  :     Pop           
//  2
142  :     LoadValue     : value = <I8, 2>
//  (x.bar.value = 2)
143  :     Duplicate     : stackPatternCount = 0
//  x
144  :     LoadLocalVar  : var = 0(x)
//  x.bar
145  :     InvokeMethod  : methodInfo = Getbar<Foo>, stackPatternCount = 0
//  (x.bar.value = 2)
146  :     InvokeMethod  : methodInfo = Setvalue<Bar>, stackPatternCount = 1
//  (x.bar.value = 2)
147  :     Pop           
//  (x.bar.value = 2);
148  :     Pop           
//  10
149  :     LoadValue     : value = <I8, 10>
//  new (Bar^)(10)
150  :     LoadValue     : value = <null>
//  new (Bar^)(10)
151  :     InvokeMethod  : methodInfo = <Bar>, stackPatternCount = 1
//  (y.bar = new (Bar^)(10))
152  :     Duplicate     : stackPatternCount = 0
//  y
153  :     LoadLocalVar  : var = 1(y)
//  (y.bar = new (Bar^)(10))
154  :     InvokeMethod  : methodInfo = Setbar<Foo>, stackPatternCount = 1
//  (y.bar = new (Bar^)(10))
155  :     Pop           
//  (y.bar = new (Bar^)(10));
156  :     Pop           
//  20
157  :     LoadValue     : value = <I8, 20>
//  (y.bar.value = 20)
158  :     Duplicate     : stackPatternCount = 0
//  y
159  :     LoadLocalVar  : var = 1(y)
//  y.bar
160  :     InvokeMethod  : methodInfo = Getbar<Foo>, stackPatternCount = 0
//  (y.bar.value = 20)
161  :     InvokeMethod  : methodInfo = Setvalue<Bar>, stackPatternCount = 1
//  (y.bar.value = 20)
162  :     Pop           
//  (y.bar.value = 20);
163  :     Pop           
//  100
164  :     LoadValue     : value = <I8, 100>
//  new (Bar^)(100)
165  :     LoadValue     : value = <null>
//  new (Bar^)(100)
166  :     InvokeMethod  : methodInfo = <Bar>, stackPatternCount = 1
//  (z.bar = new (Bar^)(100))
167  :     Duplicate     : stackPatternCount = 0
//  z
168  :     LoadLocalVar  : var = 2(z)
//  (z.bar = new (Bar^)(100))
169  :     InvokeMethod  : methodInfo = Setbar<Foo>, stackPatternCount = 1
//  (z.bar = new (Bar^)(100))
170  :     Pop           
//  (z.bar = new (Bar^)(100));
171  :     Pop           
//  200
172  :     LoadValue     : value = <I8, 200>
//  (z.bar.value = 200)
173  :     Duplicate     : stackPatternCount = 0
//  z
174  :     LoadLocalVar  : var = 2(z)
//  z.bar
175  :     InvokeMethod  : methodInfo = Getbar<Foo>, stackPatternCount = 0
//  (z.bar.value = 200)
176  :     InvokeMethod  : methodInfo = Setvalue<Bar>, stackPatternCount = 1
//  (z.bar.value = 200)
177  :     Pop           
//  (z.bar.value = 200);
178  :     Pop           
//  subscription
179  :     LoadLocalVar  : var = 3(subscription)
//  subscription.Close()
180  :     InvokeMethod  : methodInfo = Close<system::Subscription>, stackPatternCount = 0
//  subscription.Close();
181  :     Pop           
//  s
182  :     LoadGlobalVar : var = 0(s)
//  return s;
183  :     Return        
//  func main() : (string)
184  :     LoadValue     : value = <null>
//  func main() : (string)
185  :     Return        
//  <bind-cache>2
186  :     LoadCapturedVar: var = 2(<captured><bind-cache>2)
//  <bind-cache>2.value
187  :     InvokeMethod  : methodInfo = Getvalue<Bar>, stackPatternCount = 0
//  let _z = <bind-cache>2.value in (((<bind-cache>4.value + (<bind-cache>5.value + <bind-cache>5.value)) + ((_z + _z) + _z)))
188  :     StoreLocalVar : var = 1(<let>_z)
//  <bind-cache>4
189  :     LoadCapturedVar: var = 4(<captured><bind-cache>4)
//  <bind-cache>4.value
190  :     InvokeMethod  : methodInfo = Getvalue<Bar>, stackPatternCount = 0
//  <bind-cache>5
191  :     LoadCapturedVar: var = 5(<captured><bind-cache>5)
//  <bind-cache>5.value
192  :     InvokeMethod  : methodInfo = Getvalue<Bar>, stackPatternCount = 0
//  <bind-cache>5
193  :     LoadCapturedVar: var = 5(<captured><bind-cache>5)
//  <bind-cache>5.value
194  :     InvokeMethod  : methodInfo = Getvalue<Bar>, stackPatternCount = 0
//  (<bind-cache>5.value + <bind-cache>5.value)
195  :     OpAdd         : type = I8
//  (<bind-cache>4.value + (<bind-cache>5.value + <bind-cache>5.value))
196  :     OpAdd         : type = I8
//  _z
197  :     LoadLocalVar  : var = 1(<let>_z)
//  _z
198  :     LoadLocalVar  : var = 1(<let>_z)
//  (_z + _z)
199  :     OpAdd         : type = I8
//  _z
200  :     LoadLocalVar  : var = 1(<let>_z)
//  ((_z + _z) + _z)
201  :     OpAdd         : type = I8
//  ((<bind-cache>4.value + (<bind-cache>5.value + <bind-cache>5.value)) + ((_z + _z) + _z))
202  :     OpAdd         : type = I8
//  let _z = <bind-cache>2.value in (((<bind-cache>4.value + (<bind-cache>5.value + <bind-cache>5.value)) + ((_z + _z) + _z)))
203  :     LoadValue     : value = <null>
//  let _z = <bind-cache>2.value in (((<bind-cache>4.value + (<bind-cache>5.value + <bind-cache>5.value)) + ((_z + _z) + _z)))
204  :     StoreLocalVar : var = 1(<let>_z)
//  var <bind-activator-result> = let _z = <bind-cache>2.value in (((<bind-cache>4.value + (<bind-cache>5.value + <bind-cache>5.value)) + ((_z + _z) + _z)));
205  :     StoreLocalVar : var = 0(<bind-activator-result>)
//  <bind-activator-result>
206  :     LoadLocalVar  : var = 0(<bind-activator-result>)
//  ValueChanged(<bind-activator-result>)
207  :     LoadCapturedVar: var = 18(<captured-this>0)
//  ValueChanged(<bind-activator-result>)
208  :     InvokeEvent   : eventInfo = ValueChanged<system::Subscription>, stackPatternCount = 1
//  ValueChanged(<bind-activator-result>);
209  :     Pop           
//  func <bind-activator>() : (::system::Void)
210  :     LoadValue     : value = <null>
//  func <bind-activator>() : (::system::Void)
211  :     Return        
//  <bind-handler>6_0
212  :     LoadCapturedVar: var = 12(<captured><bind-handler>6_0)
//  <bind-handler>6_0 is not null
213  :     LoadValue     : value = <null>
//  <bind-handler>6_0 is not null
214  :     CompareReference
//  <bind-handler>6_0 is not null
215  :     OpNot         : type = Bool
//  if (<bind-handler>6_0 is not null)
216  :     OpNot         : type = Bool
//  if (<bind-handler>6_0 is not null)
217  :     JumpIf        : label = 227
//  <bind-cache>5
218  :     LoadCapturedVar: var = 5(<captured><bind-cache>5)
//  <bind-handler>6_0
219  :     LoadCapturedVar: var = 12(<captured><bind-handler>6_0)
//  detach(<bind-cache>5.valueChanged, <bind-handler>6_0)
220  :     DetachEvent   : eventInfo = valueChanged<Bar>
//  detach(<bind-cache>5.valueChanged, <bind-handler>6_0);
221  :     Pop           
//  null
222  :     LoadValue     : value = <null>
//  (<bind-handler>6_0 = null)
223  :     Duplicate     : stackPatternCount = 0
//  (<bind-handler>6_0 = null)
224  :     StoreCapturedVar: var = 12
//  (<bind-handler>6_0 = null);
225  :     Pop           
//  if (<bind-handler>6_0 is not null)
226  :     Jump          : label = 227
//  <bind-handler>5_0
227  :     LoadCapturedVar: var = 11(<captured><bind-handler>5_0)
//  <bind-handler>5_0 is not null
228  :     LoadValue     : value = <null>
//  <bind-handler>5_0 is not null
229  :     CompareReference
//  <bind-handler>5_0 is not null
230  :     OpNot         : type = Bool
//  if (<bind-handler>5_0 is not null)
231  :     OpNot         : type = Bool
//  if (<bind-handler>5_0 is not null)
232  :     JumpIf        : label = 242
//  <bind-cache>5
233  :     LoadCapturedVar: var = 5(<captured><bind-cache>5)
//  <bind-handler>5_0
234  :     LoadCapturedVar: var = 11(<captured><bind-handler>5_0)
//  detach(<bind-cache>5.valueChanged, <bind-handler>5_0)
235  :     DetachEvent   : eventInfo = valueChanged<Bar>
//  detach(<bind-cache>5.valueChanged, <bind-handler>5_0);
236  :     Pop           
//  null
237  :     LoadValue     : value = <null>
//  (<bind-handler>5_0 = null)
238  :     Duplicate     : stackPatternCount = 0
//  (<bind-handler>5_0 = null)
239  :     StoreCapturedVar: var = 11
//  (<bind-handler>5_0 = null);
240  :     Pop           
//  if (<bind-handler>5_0 is not null)
241  :     Jump          : label = 242
//  (<bind-cache>0.bar ?? null of (::Bar^))
242  :     InstallTry    : label = 247
//  <bind-cache>0
243  :     LoadCapturedVar: var = 0(<captured><bind-cache>0)
//  <bind-cache>0.bar
244  :     InvokeMethod  : methodInfo = Getbar<Foo>, stackPatternCount = 0
//  (<bind-cache>0.bar ?? null of (::Bar^))
245  :     UninstallTry  : stackPatternCount = 1
//  (<bind-cache>0.bar ?? null of (::Bar^))
246  :     Jump          : label = 248
//  null
247  :     LoadValue     : value = <null>
//  (<bind-cache>5 = (<bind-cache>0.bar ?? null of (::Bar^)))
248  :     Duplicate     : stackPatternCount = 0
//  (<bind-cache>5 = (<bind-cache>0.bar ?? null of (::Bar^)))
249  :     StoreCapturedVar: var = 5
//  (<bind-cache>5 = (<bind-cache>0.bar ?? null of (::Bar^)));
250  :     Pop           
//  (attach(<bind-cache>5.valueChanged, <bind-callback>5_0) ?? null)
251  :     InstallTry    : label = 259
//  <bind-cache>5
252  :     LoadCapturedVar: var = 5(<captured><bind-cache>5)
//  <bind-callback>5_0
253  :     LoadClosureContext
//  <bind-callback>5_0
254  :     LoadFunction  : func = 16(<method:<bind-callback>5_0<system::Subscription>(16)> in main)
//  <bind-callback>5_0
255  :     CreateClosure 
//  attach(<bind-cache>5.valueChanged, <bind-callback>5_0)
256  :     AttachEvent   : eventInfo = valueChanged<Bar>
//  (attach(<bind-cache>5.valueChanged, <bind-callback>5_0) ?? null)
257  :     UninstallTry  : stackPatternCount = 1
//  (attach(<bind-cache>5.valueChanged, <bind-callback>5_0) ?? null)
258  :     Jump          : label = 260
//  null
259  :     LoadValue     : value = <null>
//  (<bind-handler>5_0 = (attach(<bind-cache>5.valueChanged, <bind-callback>5_0) ?? null))
260  :     Duplicate     : stackPatternCount = 0
//  (<bind-handler>5_0 = (attach(<bind-cache>5.valueChanged, <bind-callback>5_0) ?? null))
261  :     StoreCapturedVar: var = 11
//  (<bind-handler>5_0 = (attach(<bind-cache>5.valueChanged, <bind-callback>5_0) ?? null));
262  :     Pop           
//  (attach(<bind-cache>5.valueChanged, <bind-callback>6_0) ?? null)
263  :     InstallTry    : label = 271
//  <bind-cache>5
264  :     LoadCapturedVar: var = 5(<captured><bind-cache>5)
//  <bind-callback>6_0
265  :     LoadClosureContext
//  <bind-callback>6_0
266  :     LoadFunction  : func = 17(<method:<bind-callback>6_0<system::Subscription>(17)> in main)
//  <bind-callback>6_0
267  :     CreateClosure 
//  attach(<bind-cache>5.valueChanged, <bind-callback>6_0)
268  :     AttachEvent   : eventInfo = valueChanged<Bar>
//  (attach(<bind-cache>5.valueChanged, <bind-callback>6_0) ?? null)
269  :     UninstallTry  : stackPatternCount = 1
//  (attach(<bind-cache>5.valueChanged, <bind-callback>6_0) ?? null)
270  :     Jump          : label = 272
//  null
271  :     LoadValue     : value = <null>
//  (<bind-handler>6_0 = (attach(<bind-cache>5.valueChanged, <bind-callback>6_0) ?? null))
272  :     Duplicate     : stackPatternCount = 0
//  (<bind-handler>6_0 = (attach(<bind-cache>5.valueChanged, <bind-callback>6_0) ?? null))
273  :     StoreCapturedVar: var = 12
//  (<bind-handler>6_0 = (attach(<bind-cache>5.valueChanged, <bind-callback>6_0) ?? null));
274  :     Pop           
//  <bind-activator>()
275  :     InvokeWithContext: func = 10(<method:<bind-activator><system::Subscription>(10)> in main), stackPatternCount = 0
//  <bind-activator>();
276  :     Pop           
//  func <bind-callback>0_0() : (::system::Void)
277  :     LoadValue     : value = <null>
//  func <bind-callback>0_0() : (::system::Void)
278  :     Return        
//  <bind-handler>2_0
279  :     LoadCapturedVar: var = 8(<captured><bind-handler>2_0)
//  <bind-handler>2_0 is not null
280  :     LoadValue     : value = <null>
//  <bind-handler>2_0 is not null
281  :     CompareReference
//  <bind-handler>2_0 is not null
282  :     OpNot         : type = Bool
//  if (<bind-handler>2_0 is not null)
283  :     OpNot         : type = Bool
//  if (<bind-handler>2_0 is not null)
284  :     JumpIf        : label = 294
//  <bind-cache>2
285  :     LoadCapturedVar: var = 2(<captured><bind-cache>2)
//  <bind-handler>2_0
286  :     LoadCapturedVar: var = 8(<captured><bind-handler>2_0)
//  detach(<bind-cache>2.valueChanged, <bind-handler>2_0)
287  :     DetachEvent   : eventInfo = valueChanged<Bar>
//  detach(<bind-cache>2.valueChanged, <bind-handler>2_0);
288  :     Pop           
//  null
289  :     LoadValue     : value = <null>
//  (<bind-handler>2_0 = null)
290  :     Duplicate     : stackPatternCount = 0
//  (<bind-handler>2_0 = null)
291  :     StoreCapturedVar: var = 8
//  (<bind-handler>2_0 = null);
292  :     Pop           
//  if (<bind-handler>2_0 is not null)
293  :     Jump          : label = 294
//  (<bind-cache>1.bar ?? null of (::Bar^))
294  :     InstallTry    : label = 299
//  <bind-cache>1
295  :     LoadCapturedVar: var = 1(<captured><bind-cache>1)
//  <bind-cache>1.bar
296  :     InvokeMethod  : methodInfo = Getbar<Foo>, stackPatternCount = 0
//  (<bind-cache>1.bar ?? null of (::Bar^))
297  :     UninstallTry  : stackPatternCount = 1
//  (<bind-cache>1.bar ?? null of (::Bar^))
298  :     Jump          : label = 300
//  null
299  :     LoadValue     : value = <null>
//  (<bind-cache>2 = (<bind-cache>1.bar ?? null of (::Bar^)))
300  :     Duplicate     : stackPatternCount = 0
//  (<bind-cache>2 = (<bind-cache>1.bar ?? null of (::Bar^)))
301  :     StoreCapturedVar: var = 2
//  (<bind-cache>2 = (<bind-cache>1.bar ?? null of (::Bar^)));
302  :     Pop           
//  (attach(<bind-cache>2.valueChanged, <bind-callback>2_0) ?? null)
303  :     InstallTry    : label = 311
//  <bind-cache>2
304  :     LoadCapturedVar: var = 2(<captured><bind-cache>2)
//  <bind-callback>2_0
305  :     LoadClosureContext
//  <bind-callback>2_0
306  :     LoadFunction  : func = 13(<method:<bind-callback>2_0<system::Subscription>(13)> in main)
//  <bind-callback>2_0
307  :     CreateClosure 
//  attach(<bind-cache>2.valueChanged, <bind-callback>2_0)
308  :     AttachEvent   : eventInfo = valueChanged<Bar>
//  (attach(<bind-cache>2.valueChanged, <bind-callback>2_0) ?? null)
309  :     UninstallTry  : stackPatternCount = 1
//  (attach(<bind-cache>2.valueChanged, <bind-callback>2_0) ?? null)
310  :     Jump          : label = 312
//  null
311  :     LoadValue     : value = <null>
//  (<bind-handler>2_0 = (attach(<bind-cache>2.valueChanged, <bind-callback>2_0) ?? null))
312  :     Duplicate     : stackPatternCount = 0
//  (<bind-handler>2_0 = (attach(<bind-cache>2.valueChanged, <bind-callback>2_0) ?? null))
313  :     StoreCapturedVar: var = 8
//  (<bind-handler>2_0 = (attach(<bind-cache>2.valueChanged, <bind-callback>2_0) ?? null));
314  :     Pop           
//  <bind-activator>()
315  :     InvokeWithContext: func = 10(<method:<bind-activator><system::Subscription>(10)> in main), stackPatternCount = 0
//  <bind-activator>();
316  :     Pop           
//  func <bind-callback>1_0() : (::system::Void)
317  :     LoadValue     : value = <null>
//  func <bind-callback>1_0() : (::system::Void)
318  :     Return        
//  <bind-activator>()
319  :     InvokeWithContext: func = 10(<method:<bind-activator><system::Subscription>(10)> in main), stackPatternCount = 0
//  <bind-activator>();
320  :     Pop           
//  func <bind-callback>2_0() : (::system::Void)
321  :     LoadValue     : value = <null>
//  func <bind-callback>2_0() : (::system::Void)
322  :     Return        
//  <bind-handler>4_0
323  :     LoadCapturedVar: var = 10(<captured><bind-handler>4_0)
//  <bind-handler>4_0 is not null
324  :     LoadValue     : value = <null>
//  <bind-handler>4_0 is not null
325  :     CompareReference
//  <bind-handler>4_0 is not null
326  :     OpNot         : type = Bool
//  if (<bind-handler>4_0 is not null)
327  :     OpNot         : type = Bool
//  if (<bind-handler>4_0 is not null)
328  :     JumpIf        : label = 338
//  <bind-cache>4
329  :     LoadCapturedVar: var = 4(<captured><bind-cache>4)
//  <bind-handler>4_0
330  :     LoadCapturedVar: var = 10(<captured><bind-handler>4_0)
//  detach(<bind-cache>4.valueChanged, <bind-handler>4_0)
331  :     DetachEvent   : eventInfo = valueChanged<Bar>
//  detach(<bind-cache>4.valueChanged, <bind-handler>4_0);
332  :     Pop           
//  null
333  :     LoadValue     : value = <null>
//  (<bind-handler>4_0 = null)
334  :     Duplicate     : stackPatternCount = 0
//  (<bind-handler>4_0 = null)
335  :     StoreCapturedVar: var = 10
//  (<bind-handler>4_0 = null);
336  :     Pop           
//  if (<bind-handler>4_0 is not null)
337  :     Jump          : label = 338
//  (<bind-cache>3.bar ?? null of (::Bar^))
338  :     InstallTry    : label = 343
//  <bind-cache>3
339  :     LoadCapturedVar: var = 3(<captured><bind-cache>3)
//  <bind-cache>3.bar
340  :     InvokeMethod  : methodInfo = Getbar<Foo>, stackPatternCount = 0
//  (<bind-cache>3.bar ?? null of (::Bar^))
341  :     UninstallTry  : stackPatternCount = 1
//  (<bind-cache>3.bar ?? null of (::Bar^))
342  :     Jump          : label = 344
//  null
343  :     LoadValue     : value = <null>
//  (<bind-cache>4 = (<bind-cache>3.bar ?? null of (::Bar^)))
344  :     Duplicate     : stackPatternCount = 0
//  (<bind-cache>4 = (<bind-cache>3.bar ?? null of (::Bar^)))
345  :     StoreCapturedVar: var = 4
//  (<bind-cache>4 = (<bind-cache>3.bar ?? null of (::Bar^)));
346  :     Pop           
//  (attach(<bind-cache>4.valueChanged, <bind-callback>4_0) ?? null)
347  :     InstallTry    : label = 355
//  <bind-cache>4
348  :     LoadCapturedVar: var = 4(<captured><bind-cache>4)
//  <bind-callback>4_0
349  :     LoadClosureContext
//  <bind-callback>4_0
350  :     LoadFunction  : func = 15(<method:<bind-callback>4_0<system::Subscription>(15)> in main)
//  <bind-callback>4_0
351  :     CreateClosure 
//  attach(<bind-cache>4.valueChanged, <bind-callback>4_0)
352  :     AttachEvent   : eventInfo = valueChanged<Bar>
//  (attach(<bind-cache>4.valueChanged, <bind-callback>4_0) ?? null)
353  :     UninstallTry  : stackPatternCount = 1
//  (attach(<bind-cache>4.valueChanged, <bind-callback>4_0) ?? null)
354  :     Jump          : label = 356
//  null
355  :     LoadValue     : value = <null>
//  (<bind-handler>4_0 = (attach(<bind-cache>4.valueChanged, <bind-callback>4_0) ?? null))
356  :     Duplicate     : stackPatternCount = 0
//  (<bind-handler>4_0 = (attach(<bind-cache>4.valueChanged, <bind-callback>4_0) ?? null))
357  :     StoreCapturedVar: var = 10
//  (<bind-handler>4_0 = (attach(<bind-cache>4.valueChanged, <bind-callback>4_0) ?? null));
358  :     Pop           
//  <bind-activator>()
359  :     InvokeWithContext: func = 10(<method:<bind-activator><system::Subscription>(10)> in main), stackPatternCount = 0
//  <bind-activator>();
360  :     Pop           
//  func <bind-callback>3_0() : (::system::Void)
361  :     LoadValue     : value = <null>
//  func <bind-callback>3_0() : (::system::Void)
362  :     Return        
//  <bind-activator>()
363  :     InvokeWithContext: func = 10(<method:<bind-activator><system::Subscription>(10)> in main), stackPatternCount = 0
//  <bind-activator>();
364  :     Pop           
//  func <bind-callback>4_0() : (::system::Void)
365  :     LoadValue     : value = <null>
//  func <bind-callback>4_0() : (::system::Void)
366  :     Return        
//  <bind-activator>()
367  :     InvokeWithContext: func = 10(<method:<bind-activator><system::Subscription>(10)> in main), stackPatternCount = 0
//  <bind-activator>();
368  :     Pop           
//  func <bind-callback>5_0() : (::system::Void)
369  :     LoadValue     : value = <null>
//  func <bind-callback>5_0() : (::system::Void)
370  :     Return        
//  <bind-activator>()
371  :     InvokeWithContext: func = 10(<method:<bind-activator><system::Subscription>(10)> in main), stackPatternCount = 0
//  <bind-activator>();
372  :     Pop           
//  func <bind-callback>6_0() : (::system::Void)
373  :     LoadValue     : value = <null>
//  func <bind-callback>6_0() : (::system::Void)
374  :     Return        
//  <bind-opened>
375  :     LoadCapturedVar: var = 13(<captured><bind-opened>)
//  (!<bind-opened>)
376  :     OpNot         : type = Bool
//  if ((!<bind-opened>))
377  :     OpNot         : type = Bool
//  if ((!<bind-opened>))
378  :     JumpIf        : label = 521
//  true
379  :     LoadValue     : value = <Bool, true>
//  (<bind-opened> = true)
380  :     Duplicate     : stackPatternCount = 0
//  (<bind-opened> = true)
381  :     StoreCapturedVar: var = 13
//  (<bind-opened> = true);
382  :     Pop           
//  (y ?? null of (::Foo^))
383  :     InstallTry    : label = 387
//  y
384  :     LoadCapturedVar: var = 15(<captured>y)
//  (y ?? null of (::Foo^))
385  :     UninstallTry  : stackPatternCount = 1
//  (y ?? null of (::Foo^))
386  :     Jump          : label = 388
//  null
387  :     LoadValue     : value = <null>
//  (<bind-cache>0 = (y ?? null of (::Foo^)))
388  :     Duplicate     : stackPatternCount = 0
//  (<bind-cache>0 = (y ?? null of (::Foo^)))
389  :     StoreCapturedVar: var = 0
//  (<bind-cache>0 = (y ?? null of (::Foo^)));
390  :     Pop           
//  (z ?? null of (::Foo^))
391  :     InstallTry    : label = 395
//  z
392  :     LoadCapturedVar: var = 16(<captured>z)
//  (z ?? null of (::Foo^))
393  :     UninstallTry  : stackPatternCount = 1
//  (z ?? null of (::Foo^))
394  :     Jump          : label = 396
//  null
395  :     LoadValue     : value = <null>
//  (<bind-cache>1 = (z ?? null of (::Foo^)))
396  :     Duplicate     : stackPatternCount = 0
//  (<bind-cache>1 = (z ?? null of (::Foo^)))
397  :     StoreCapturedVar: var = 1
//  (<bind-cache>1 = (z ?? null of (::Foo^)));
398  :     Pop           
//  (x ?? null of (::Foo^))
399  :     InstallTry    : label = 403
//  x
400  :     LoadCapturedVar: var = 17(<captured>x)
//  (x ?? null of (::Foo^))
401  :     UninstallTry  : stackPatternCount = 1
//  (x ?? null of (::Foo^))
402  :     Jump          : label = 404
//  null
403  :     LoadValue     : value = <null>
//  (<bind-cache>3 = (x ?? null of (::Foo^)))
404  :     Duplicate     : stackPatternCount = 0
//  (<bind-cache>3 = (x ?? null of (::Foo^)))
405  :     StoreCapturedVar: var = 3
//  (<bind-cache>3 = (x ?? null of (::Foo^)));
406  :     Pop           
//  (<bind-cache>1.bar ?? null of (::Bar^))
407  :     InstallTry    : label = 412
//  <bind-cache>1
408  :     LoadCapturedVar: var = 1(<captured><bind-cache>1)
//  <bind-cache>1.bar
409  :     InvokeMethod  : methodInfo = Getbar<Foo>, stackPatternCount = 0
//  (<bind-cache>1.bar ?? null of (::Bar^))
410  :     UninstallTry  : stackPatternCount = 1
//  (<bind-cache>1.bar ?? null of (::Bar^))
411  :     Jump          : label = 413
//  null
412  :     LoadValue     : value = <null>
//  (<bind-cache>2 = (<bind-cache>1.bar ?? null of (::Bar^)))
413  :     Duplicate     : stackPatternCount = 0
//  (<bind-cache>2 = (<bind-cache>1.bar ?? null of (::Bar^)))
414  :     StoreCapturedVar: var = 2
//  (<bind-cache>2 = (<bind-cache>1.bar ?? null of (::Bar^)));
415  :     Pop           
//  (<bind-cache>3.bar ?? null of (::Bar^))
416  :     InstallTry    : label = 421
//  <bind-cache>3
417  :     LoadCapturedVar: var = 3(<captured><bind-cache>3)
//  <bind-cache>3.bar
418  :     InvokeMethod  : methodInfo = Getbar<Foo>, stackPatternCount = 0
//  (<bind-cache>3.bar ?? null of (::Bar^))
419  :     UninstallTry  : stackPatternCount = 1
//  (<bind-cache>3.bar ?? null of (::Bar^))
420  :     Jump          : label = 422
//  null
421  :     LoadValue     : value = <null>
//  (<bind-cache>4 = (<bind-cache>3.bar ?? null of (::Bar^)))
422  :     Duplicate     : stackPatternCount = 0
//  (<bind-cache>4 = (<bind-cache>3.bar ?? null of (::Bar^)))
423  :     StoreCapturedVar: var = 4
//  (<bind-cache>4 = (<bind-cache>3.bar ?? null of (::Bar^)));
424  :     Pop           
//  (<bind-cache>0.bar ?? null of (::Bar^))
425  :     InstallTry    : label = 430
//  <bind-cache>0
426  :     LoadCapturedVar: var = 0(<captured><bind-cache>0)
//  <bind-cache>0.bar
427  :     InvokeMethod  : methodInfo = Getbar<Foo>, stackPatternCount = 0
//  (<bind-cache>0.bar ?? null of (::Bar^))
428  :     UninstallTry  : stackPatternCount = 1
//  (<bind-cache>0.bar ?? null of (::Bar^))
429  :     Jump          : label = 431
//  null
430  :     LoadValue     : value = <null>
//  (<bind-cache>5 = (<bind-cache>0.bar ?? null of (::Bar^)))
431  :     Duplicate     : stackPatternCount = 0
//  (<bind-cache>5 = (<bind-cache>0.bar ?? null of (::Bar^)))
432  :     StoreCapturedVar: var = 5
//  (<bind-cache>5 = (<bind-cache>0.bar ?? null of (::Bar^)));
433  :     Pop           
//  (attach(<bind-cache>0.barChanged, <bind-callback>0_0) ?? null)
434  :     InstallTry    : label = 442
//  <bind-cache>0
435  :     LoadCapturedVar: var = 0(<captured><bind-cache>0)
//  <bind-callback>0_0
436  :     LoadClosureContext
//  <bind-callback>0_0
437  :     LoadFunction  : func = 11(<method:<bind-callback>0_0<system::Subscription>(11)> in main)
//  <bind-callback>0_0
438  :     CreateClosure 
//  attach(<bind-cache>0.barChanged, <bind-callback>0_0)
439  :     AttachEvent   : eventInfo = barChanged<Foo>
//  (attach(<bind-cache>0.barChanged, <bind-callback>0_0) ?? null)
440  :     UninstallTry  : stackPatternCount = 1
//  (attach(<bind-cache>0.barChanged, <bind-callback>0_0) ?? null)
441  :     Jump          : label = 443
//  null
442  :     LoadValue     : value = <null>
//  (<bind-handler>0_0 = (attach(<bind-cache>0.barChanged, <bind-callback>0_0) ?? null))
443  :     Duplicate     : stackPatternCount = 0
//  (<bind-handler>0_0 = (attach(<bind-cache>0.barChanged, <bind-callback>0_0) ?? null))
444  :     StoreCapturedVar: var = 6
//  (<bind-handler>0_0 = (attach(<bind-cache>0.barChanged, <bind-callback>0_0) ?? null));
445  :     Pop           
//  (attach(<bind-cache>1.barChanged, <bind-callback>1_0) ?? null)
446  :     InstallTry    : label = 454
//  <bind-cache>1
447  :     LoadCapturedVar: var = 1(<captured><bind-cache>1)
//  <bind-callback>1_0
448  :     LoadClosureContext
//  <bind-callback>1_0
449  :     LoadFunction  : func = 12(<method:<bind-callback>1_0<system::Subscription>(12)> in main)
//  <bind-callback>1_0
450  :     CreateClosure 
//  attach(<bind-cache>1.barChanged, <bind-callback>1_0)
451  :     AttachEvent   : eventInfo = barChanged<Foo>
//  (attach(<bind-cache>1.barChanged, <bind-callback>1_0) ?? null)
452  :     UninstallTry  : stackPatternCount = 1
//  (attach(<bind-cache>1.barChanged, <bind-callback>1_0) ?? null)
453  :     Jump          : label = 455
//  null
454  :     LoadValue     : value = <null>
//  (<bind-handler>1_0 = (attach(<bind-cache>1.barChanged, <bind-callback>1_0) ?? null))
455  :     Duplicate     : stackPatternCount = 0
//  (<bind-handler>1_0 = (attach(<bind-cache>1.barChanged, <bind-callback>1_0) ?? null))
456  :     StoreCapturedVar: var = 7
//  (<bind-handler>1_0 = (attach(<bind-cache>1.barChanged, <bind-callback>1_0) ?? null));
457  :     Pop           
//  (attach(<bind-cache>2.valueChanged, <bind-callback>2_0) ?? null)
458  :     InstallTry    : label = 466
//  <bind-cache>2
459  :     LoadCapturedVar: var = 2(<captured><bind-cache>2)
//  <bind-callback>2_0
460  :     LoadClosureContext
//  <bind-callback>2_0
461  :     LoadFunction  : func = 13(<method:<bind-callback>2_0<system::Subscription>(13)> in main)
//  <bind-callback>2_0
462  :     CreateClosure 
//  attach(<bind-cache>2.valueChanged, <bind-callback>2_0)
463  :     AttachEvent   : eventInfo = valueChanged<Bar>
//  (attach(<bind-cache>2.valueChanged, <bind-callback>2_0) ?? null)
464  :     UninstallTry  : stackPatternCount = 1
//  (attach(<bind-cache>2.valueChanged, <bind-callback>2_0) ?? null)
465  :     Jump          : label = 467
//  null
466  :     LoadValue     : value = <null>
//  (<bind-handler>2_0 = (attach(<bind-cache>2.valueChanged, <bind-callback>2_0) ?? null))
467  :     Duplicate     : stackPatternCount = 0
//  (<bind-handler>2_0 = (attach(<bind-cache>2.valueChanged, <bind-callback>2_0) ?? null))
468  :     StoreCapturedVar: var = 8
//  (<bind-handler>2_0 = (attach(<bind-cache>2.valueChanged, <bind-callback>2_0) ?? null));
469  :     Pop           
//  (attach(<bind-cache>3.barChanged, <bind-callback>3_0) ?? null)
470  :     InstallTry    : label = 478
//  <bind-cache>3
471  :     LoadCapturedVar: var = 3(<captured><bind-cache>3)
//  <bind-callback>3_0
472  :     LoadClosureContext
//  <bind-callback>3_0
473  :     LoadFunction  : func = 14(<method:<bind-callback>3_0<system::Subscription>(14)> in main)
//  <bind-callback>3_0
474  :     CreateClosure 
//  attach(<bind-cache>3.barChanged, <bind-callback>3_0)
475  :     AttachEvent   : eventInfo = barChanged<Foo>
//  (attach(<bind-cache>3.barChanged, <bind-callback>3_0) ?? null)
476  :     UninstallTry  : stackPatternCount = 1
//  (attach(<bind-cache>3.barChanged, <bind-callback>3_0) ?? null)
477  :     Jump          : label = 479
//  null
478  :     LoadValue     : value = <null>
//  (<bind-handler>3_0 = (attach(<bind-cache>3.barChanged, <bind-callback>3_0) ?? null))
479  :     Duplicate     : stackPatternCount = 0
//  (<bind-handler>3_0 = (attach(<bind-cache>3.barChanged, <bind-callback>3_0) ?? null))
480  :     StoreCapturedVar: var = 9
//  (<bind-handler>3_0 = (attach(<bind-cache>3.barChanged, <bind-callback>3_0) ?? null));
481  :     Pop           
//  (attach(<bind-cache>4.valueChanged, <bind-callback>4_0) ?? null)
482  :     InstallTry    : label = 490
//  <bind-cache>4
483  :     LoadCapturedVar: var = 4(<captured><bind-cache>4)
//  <bind-callback>4_0
484  :     LoadClosureContext
//  <bind-callback>4_0
485  :     LoadFunction  : func = 15(<method:<bind-callback>4_0<system::Subscription>(15)> in main)
//  <bind-callback>4_0
486  :     CreateClosure 
//  attach(<bind-cache>4.valueChanged, <bind-callback>4_0)
487  :     AttachEvent   : eventInfo = valueChanged<Bar>
//  (attach(<bind-cache>4.valueChanged, <bind-callback>4_0) ?? null)
488  :     UninstallTry  : stackPatternCount = 1
//  (attach(<bind-cache>4.valueChanged, <bind-callback>4_0) ?? null)
489  :     Jump          : label = 491
//  null
490  :     LoadValue     : value = <null>
//  (<bind-handler>4_0 = (attach(<bind-cache>4.valueChanged, <bind-callback>4_0) ?? null))
491  :     Duplicate     : stackPatternCount = 0
//  (<bind-handler>4_0 = (attach(<bind-cache>4.valueChanged, <bind-callback>4_0) ?? null))
492  :     StoreCapturedVar: var = 10
//  (<bind-handler>4_0 = (attach(<bind-cache>4.valueChanged, <bind-callback>4_0) ?? null));
493  :     Pop           
//  (attach(<bind-cache>5.valueChanged, <bind-callback>5_0) ?? null)
494  :     InstallTry    : label = 502
//  <bind-cache>5
495  :     LoadCapturedVar: var = 5(<captured><bind-cache>5)
//  <bind-callback>5_0
496  :     LoadClosureContext
//  <bind-callback>5_0
497  :     LoadFunction  : func = 16(<method:<bind-callback>5_0<system::Subscription>(16)> in main)
//  <bind-callback>5_0
498  :     CreateClosure 
//  attach(<bind-cache>5.valueChanged, <bind-callback>5_0)
499  :     AttachEvent   : eventInfo = valueChanged<Bar>
//  (attach(<bind-cache>5.valueChanged, <bind-callback>5_0) ?? null)
500  :     UninstallTry  : stackPatternCount = 1
//  (attach(<bind-cache>5.valueChanged, <bind-callback>5_0) ?? null)
501  :     Jump          : label = 503
//  null
502  :     LoadValue     : value = <null>
//  (<bind-handler>5_0 = (attach(<bind-cache>5.valueChanged, <bind-callback>5_0) ?? null))
503  :     Duplicate     : stackPatternCount = 0
//  (<bind-handler>5_0 = (attach(<bind-cache>5.valueChanged, <bind-callback>5_0) ?? null))
504  :     StoreCapturedVar: var = 11
//  (<bind-handler>5_0 = (attach(<bind-cache>5.valueChanged, <bind-callback>5_0) ?? null));
505  :     Pop           
//  (attach(<bind-cache>5.valueChanged, <bind-callback>6_0) ?? null)
506  :     InstallTry    : label = 514
//  <bind-cache>5
507  :     LoadCapturedVar: var = 5(<captured><bind-cache>5)
//  <bind-callback>6_0
508  :     LoadClosureContext
//  <bind-callback>6_0
509  :     LoadFunction  : func = 17(<method:<bind-callback>6_0<system::Subscription>(17)> in main)
//  <bind-callback>6_0
510  :     CreateClosure 
//  attach(<bind-cache>5.valueChanged, <bind-callback>6_0)
511  :     AttachEvent   : eventInfo = valueChanged<Bar>
//  (attach(<bind-cache>5.valueChanged, <bind-callback>6_0) ?? null)
512  :     UninstallTry  : stackPatternCount = 1
//  (attach(<bind-cache>5.valueChanged, <bind-callback>6_0) ?? null)
513  :     Jump          : label = 515
//  null
514  :     LoadValue     : value = <null>
//  (<bind-handler>6_0 = (attach(<bind-cache>5.valueChanged, <bind-callback>6_0) ?? null))
515  :     Duplicate     : stackPatternCount = 0
//  (<bind-handler>6_0 = (attach(<bind-cache>5.valueChanged, <bind-callback>6_0) ?? null))
516  :     StoreCapturedVar: var = 12
//  (<bind-handler>6_0 = (attach(<bind-cache>5.valueChanged, <bind-callback>6_0) ?? null));
517  :     Pop           
//  true
518  :     LoadValue     : value = <Bool, true>
//  return true;
519  :     Return        
//  if ((!<bind-opened>))
520  :     Jump          : label = 521
//  false
521  :     LoadValue     : value = <Bool, false>
//  return false;
522  :     Return        
//  func Open() : (::system::Boolean)
523  :     LoadValue     : value = <null>
//  func Open() : (::system::Boolean)
524  :     Return        
//  <bind-opened>
525  :     LoadCapturedVar: var = 13(<captured><bind-opened>)
//  <bind-closed>
526  :     LoadCapturedVar: var = 14(<captured><bind-closed>)
//  (!<bind-closed>)
527  :     OpNot         : type = Bool
//  (<bind-opened> and (!<bind-closed>))
528  :     OpAnd         : type = Bool
//  if ((<bind-opened> and (!<bind-closed>)))
529  :     OpNot         : type = Bool
//  if ((<bind-opened> and (!<bind-closed>)))
530  :     JumpIf        : label = 536
//  <bind-activator>()
531  :     InvokeWithContext: func = 10(<method:<bind-activator><system::Subscription>(10)> in main), stackPatternCount = 0
//  <bind-activator>();
532  :     Pop           
//  true
533  :     LoadValue     : value = <Bool, true>
//  return true;
534  :     Return        
//  if ((<bind-opened> and (!<bind-closed>)))
535  :     Jump          : label = 536
//  false
536  :     LoadValue     : value = <Bool, false>
//  return false;
537  :     Return        
//  func Update() : (::system::Boolean)
538  :     LoadValue     : value = <null>
//  func Update() : (::system::Boolean)
539  :     Return        
//  <bind-closed>
540  :     LoadCapturedVar: var = 14(<captured><bind-closed>)
//  (!<bind-closed>)
541  :     OpNot         : type = Bool
//  if ((!<bind-closed>))
542  :     OpNot         : type = Bool
//  if ((!<bind-closed>))
543  :     JumpIf        : label = 708
//  true
544  :     LoadValue     : value = <Bool, true>
//  (<bind-closed> = true)
545  :     Duplicate     : stackPatternCount = 0
//  (<bind-closed> = true)
546  :     StoreCapturedVar: var = 14
//  (<bind-closed> = true);
547  :     Pop           
//  <bind-handler>0_0
548  :     LoadCapturedVar: var = 6(<captured><bind-handler>0_0)
//  <bind-handler>0_0 is not null
549  :     LoadValue     : value = <null>
//  <bind-handler>0_0 is not null
550  :     CompareReference
//  <bind-handler>0_0 is not null
551  :     OpNot         : type = Bool
//  if (<bind-handler>0_0 is not null)
552  :     OpNot         : type = Bool
//  if (<bind-handler>0_0 is not null)
553  :     JumpIf        : label = 563
//  <bind-cache>0
554  :     LoadCapturedVar: var = 0(<captured><bind-cache>0)
//  <bind-handler>0_0
555  :     LoadCapturedVar: var = 6(<captured><bind-handler>0_0)
//  detach(<bind-cache>0.barChanged, <bind-handler>0_0)
556  :     DetachEvent   : eventInfo = barChanged<Foo>
//  detach(<bind-cache>0.barChanged, <bind-handler>0_0);
557  :     Pop           
//  null
558  :     LoadValue     : value = <null>
//  (<bind-handler>0_0 = null)
559  :     Duplicate     : stackPatternCount = 0
//  (<bind-handler>0_0 = null)
560  :     StoreCapturedVar: var = 6
//  (<bind-handler>0_0 = null);
561  :     Pop           
//  if (<bind-handler>0_0 is not null)
562  :     Jump          : label = 563
//  <bind-handler>1_0
563  :     LoadCapturedVar: var = 7(<captured><bind-handler>1_0)
//  <bind-handler>1_0 is not null
564  :     LoadValue     : value = <null>
//  <bind-handler>1_0 is not null
565  :     CompareReference
//  <bind-handler>1_0 is not null
566  :     OpNot         : type = Bool
//  if (<bind-handler>1_0 is not null)
567  :     OpNot         : type = Bool
//  if (<bind-handler>1_0 is not null)
568  :     JumpIf        : label = 578
//  <bind-cache>1
569  :     LoadCapturedVar: var = 1(<captured><bind-cache>1)
//  <bind-handler>1_0
570  :     LoadCapturedVar: var = 7(<captured><bind-handler>1_0)
//  detach(<bind-cache>1.barChanged, <bind-handler>1_0)
571  :     DetachEvent   : eventInfo = barChanged<Foo>
//  detach(<bind-cache>1.barChanged, <bind-handler>1_0);
572  :     Pop           
//  null
573  :     LoadValue     : value = <null>
//  (<bind-handler>1_0 = null)
574  :     Duplicate     : stackPatternCount = 0
//  (<bind-handler>1_0 = null)
575  :     StoreCapturedVar: var = 7
//  (<bind-handler>1_0 = null);
576  :     Pop           
//  if (<bind-handler>1_0 is not null)
577  :     Jump          : label = 578
//  <bind-handler>2_0
578  :     LoadCapturedVar: var = 8(<captured><bind-handler>2_0)
//  <bind-handler>2_0 is not null
579  :     LoadValue     : value = <null>
//  <bind-handler>2_0 is not null
580  :     CompareReference
//  <bind-handler>2_0 is not null
581  :     OpNot         : type = Bool
//  if (<bind-handler>2_0 is not null)
582  :     OpNot         : type = Bool
//  if (<bind-handler>2_0 is not null)
583  :     JumpIf        : label = 593
//  <bind-cache>2
584  :     LoadCapturedVar: var = 2(<captured><bind-cache>2)
//  <bind-handler>2_0
585  :     LoadCapturedVar: var = 8(<captured><bind-handler>2_0)
//  detach(<bind-cache>2.valueChanged, <bind-handler>2_0)
586  :     DetachEvent   : eventInfo = valueChanged<Bar>
//  detach(<bind-cache>2.valueChanged, <bind-handler>2_0);
587  :     Pop           
//  null
588  :     LoadValue     : value = <null>
//  (<bind-handler>2_0 = null)
589  :     Duplicate     : stackPatternCount = 0
//  (<bind-handler>2_0 = null)
590  :     StoreCapturedVar: var = 8
//  (<bind-handler>2_0 = null);
591  :     Pop           
//  if (<bind-handler>2_0 is not null)
592  :     Jump          : label = 593
//  <bind-handler>3_0
593  :     LoadCapturedVar: var = 9(<captured><bind-handler>3_0)
//  <bind-handler>3_0 is not null
594  :     LoadValue     : value = <null>
//  <bind-handler>3_0 is not null
595  :     CompareReference
//  <bind-handler>3_0 is not null
596  :     OpNot         : type = Bool
//  if (<bind-handler>3_0 is not null)
597  :     OpNot         : type = Bool
//  if (<bind-handler>3_0 is not null)
598  :     JumpIf        : label = 608
//  <bind-cache>3
599  :     LoadCapturedVar: var = 3(<captured><bind-cache>3)
//  <bind-handler>3_0
600  :     LoadCapturedVar: var = 9(<captured><bind-handler>3_0)
//  detach(<bind-cache>3.barChanged, <bind-handler>3_0)
601  :     DetachEvent   : eventInfo = barChanged<Foo>
//  detach(<bind-cache>3.barChanged, <bind-handler>3_0);
602  :     Pop           
//  null
603  :     LoadValue     : value = <null>
//  (<bind-handler>3_0 = null)
604  :     Duplicate     : stackPatternCount = 0
//  (<bind-handler>3_0 = null)
605  :     StoreCapturedVar: var = 9
//  (<bind-handler>3_0 = null);
606  :     Pop           
//  if (<bind-handler>3_0 is not null)
607  :     Jump          : label = 608
//  <bind-handler>4_0
608  :     LoadCapturedVar: var = 10(<captured><bind-handler>4_0)
//  <bind-handler>4_0 is not null
609  :     LoadValue     : value = <null>
//  <bind-handler>4_0 is not null
610  :     CompareReference
//  <bind-handler>4_0 is not null
611  :     OpNot         : type = Bool
//  if (<bind-handler>4_0 is not null)
612  :     OpNot         : type = Bool
//  if (<bind-handler>4_0 is not null)
613  :     JumpIf        : label = 623
//  <bind-cache>4
614  :     LoadCapturedVar: var = 4(<captured><bind-cache>4)
//  <bind-handler>4_0
615  :     LoadCapturedVar: var = 10(<captured><bind-handler>4_0)
//  detach(<bind-cache>4.valueChanged, <bind-handler>4_0)
616  :     DetachEvent   : eventInfo = valueChanged<Bar>
//  detach(<bind-cache>4.valueChanged, <bind-handler>4_0);
617  :     Pop           
//  null
618  :     LoadValue     : value = <null>
//  (<bind-handler>4_0 = null)
619  :     Duplicate     : stackPatternCount = 0
//  (<bind-handler>4_0 = null)
620  :     StoreCapturedVar: var = 10
//  (<bind-handler>4_0 = null);
621  :     Pop           
//  if (<bind-handler>4_0 is not null)
622  :     Jump          : label = 623
//  <bind-handler>5_0
623  :     LoadCapturedVar: var = 11(<captured><bind-handler>5_0)
//  <bind-handler>5_0 is not null
624  :     LoadValue     : value = <null>
//  <bind-handler>5_0 is not null
625  :     CompareReference
//  <bind-handler>5_0 is not null
626  :     OpNot         : type = Bool
//  if (<bind-handler>5_0 is not null)
627  :     OpNot         : type = Bool
//  if (<bind-handler>5_0 is not null)
628  :     JumpIf        : label = 638
//  <bind-cache>5
629  :     LoadCapturedVar: var = 5(<captured><bind-cache>5)
//  <bind-handler>5_0
630  :     LoadCapturedVar: var = 11(<captured><bind-handler>5_0)
//  detach(<bind-cache>5.valueChanged, <bind-handler>5_0)
631  :     DetachEvent   : eventInfo = valueChanged<Bar>
//  detach(<bind-cache>5.valueChanged, <bind-handler>5_0);
632  :     Pop           
//  null
633  :     LoadValue     : value = <null>
//  (<bind-handler>5_0 = null)
634  :     Duplicate     : stackPatternCount = 0
//  (<bind-handler>5_0 = null)
635  :     StoreCapturedVar: var = 11
//  (<bind-handler>5_0 = null);
636  :     Pop           
//  if (<bind-handler>5_0 is not null)
637  :     Jump          : label = 638
//  <bind-handler>6_0
638  :     LoadCapturedVar: var = 12(<captured><bind-handler>6_0)
//  <bind-handler>6_0 is not null
639  :     LoadValue     : value = <null>
//  <bind-handler>6_0 is not null
640  :     CompareReference
//  <bind-handler>6_0 is not null
641  :     OpNot         : type = Bool
//  if (<bind-handler>6_0 is not null)
642  :     OpNot         : type = Bool
//  if (<bind-handler>6_0 is not null)
643  :     JumpIf        : label = 653
//  <bind-cache>5
644  :     LoadCapturedVar: var = 5(<captured><bind-cache>5)
//  <bind-handler>6_0
645  :     LoadCapturedVar: var = 12(<captured><bind-handler>6_0)
//  detach(<bind-cache>5.valueChanged, <bind-handler>6_0)
646  :     DetachEvent   : eventInfo = valueChanged<Bar>
//  detach(<bind-cache>5.valueChanged, <bind-handler>6_0);
647  :     Pop           
//  null
648  :     LoadValue     : value = <null>
//  (<bind-handler>6_0 = null)
649  :     Duplicate     : stackPatternCount = 0
//  (<bind-handler>6_0 = null)
650  :     StoreCapturedVar: var = 12
//  (<bind-handler>6_0 = null);
651  :     Pop           
//  if (<bind-handler>6_0 is not null)
652  :     Jump          : label = 653
//  null
653  :     LoadValue     : value = <null>
//  (<bind-cache>0 = null of (::Foo^))
654  :     Duplicate     : stackPatternCount = 0
//  (<bind-cache>0 = null of (::Foo^))
655  :     StoreCapturedVar: var = 0
//  (<bind-cache>0 = null of (::Foo^));
656  :     Pop           
//  null
657  :     LoadValue     : value = <null>
//  (<bind-cache>1 = null of (::Foo^))
658  :     Duplicate     : stackPatternCount = 0
//  (<bind-cache>1 = null of (::Foo^))
659  :     StoreCapturedVar: var = 1
//  (<bind-cache>1 = null of (::Foo^));
660  :     Pop           
//  null
661  :     LoadValue     : value = <null>
//  (<bind-cache>2 = null of (::Bar^))
662  :     Duplicate     : stackPatternCount = 0
//  (<bind-cache>2 = null of (::Bar^))
663  :     StoreCapturedVar: var = 2
//  (<bind-cache>2 = null of (::Bar^));
664  :     Pop           
//  null
665  :     LoadValue     : value = <null>
//  (<bind-cache>3 = null of (::Foo^))
666  :     Duplicate     : stackPatternCount = 0
//  (<bind-cache>3 = null of (::Foo^))
667  :     StoreCapturedVar: var = 3
//  (<bind-cache>3 = null of (::Foo^));
668  :     Pop           
//  null
669  :     LoadValue     : value = <null>
//  (<bind-cache>4 = null of (::Bar^))
670  :     Duplicate     : stackPatternCount = 0
//  (<bind-cache>4 = null of (::Bar^))
671  :     StoreCapturedVar: var = 4
//  (<bind-cache>4 = null of (::Bar^));
672  :     Pop           
//  null
673  :     LoadValue     : value = <null>
//  (<bind-cache>5 = null of (::Bar^))
674  :     Duplicate     : stackPatternCount = 0
//  (<bind-cache>5 = null of (::Bar^))
675  :     StoreCapturedVar: var = 5
//  (<bind-cache>5 = null of (::Bar^));
676  :     Pop           
//  null
677  :     LoadValue     : value = <null>
//  (<bind-handler>0_0 = null of (::system::reflection::EventHandler^))
678  :     Duplicate     : stackPatternCount = 0
//  (<bind-handler>0_0 = null of (::system::reflection::EventHandler^))
679  :     StoreCapturedVar: var = 6
//  (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
680  :     Pop           
//  null
681  :     LoadValue     : value = <null>
//  (<bind-handler>1_0 = null of (::system::reflection::EventHandler^))
682  :     Duplicate     : stackPatternCount = 0
//  (<bind-handler>1_0 = null of (::system::reflection::EventHandler^))
683  :     StoreCapturedVar: var = 7
//  (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
684  :     Pop           
//  null
685  :     LoadValue     : value = <null>
//  (<bind-handler>2_0 = null of (::system::reflection::EventHandler^))
686  :     Duplicate     : stackPatternCount = 0
//  (<bind-handler>2_0 = null of (::system::reflection::EventHandler^))
687  :     StoreCapturedVar: var = 8
//  (<bind-handler>2_0 = null of (::system::reflection::EventHandler^));
688  :     Pop           
//  null
689  :     LoadValue     : value = <null>
//  (<bind-handler>3_0 = null of (::system::reflection::EventHandler^))
690  :     Duplicate     : stackPatternCount = 0
//  (<bind-handler>3_0 = null of (::system::reflection::EventHandler^))
691  :     StoreCapturedVar: var = 9
//  (<bind-handler>3_0 = null of (::system::reflection::EventHandler^));
692  :     Pop           
//  null
693  :     LoadValue     : value = <null>
//  (<bind-handler>4_0 = null of (::system::reflection::EventHandler^))
694  :     Duplicate     : stackPatternCount = 0
//  (<bind-handler>4_0 = null of (::system::reflection::EventHandler^))
695  :     StoreCapturedVar: var = 10
//  (<bind-handler>4_0 = null of (::system::reflection::EventHandler^));
696  :     Pop           
//  null
697  :     LoadValue     : value = <null>
//  (<bind-handler>5_0 = null of (::system::reflection::EventHandler^))
698  :     Duplicate     : stackPatternCount = 0
//  (<bind-handler>5_0 = null of (::system::reflection::EventHandler^))
699  :     StoreCapturedVar: var = 11
//  (<bind-handler>5_0 = null of (::system::reflection::EventHandler^));
700  :     Pop           
//  null
701  :     LoadValue     : value = <null>
//  (<bind-handler>6_0 = null of (::system::reflection::EventHandler^))
702  :     Duplicate     : stackPatternCount = 0
//  (<bind-handler>6_0 = null of (::system::reflection::EventHandler^))
703  :     StoreCapturedVar: var = 12
//  (<bind-handler>6_0 = null of (::system::reflection::EventHandler^));
704  :     Pop           
//  true
705  :     LoadValue     : value = <Bool, true>
//  return true;
706  :     Return        
//  if ((!<bind-closed>))
707  :     Jump          : label = 708
//  false
708  :     LoadValue     : value = <Bool, false>
//  return false;
709  :     Return        
//  func Close() : (::system::Boolean)
710  :     LoadValue     : value = <null>
//  func Close() : (::system::Boolean)
711  :     Return        
