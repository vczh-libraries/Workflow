========================================================
Global Variables:
========================================================
sum

========================================================
Functions:
========================================================
test1 (4 .. 57)
    Arguments:
    Captured Variables:
    Local Variables:
        <for-begin>x
        <for-end>x
        x
        <catch>

test2 (58 .. 105)
    Arguments:
    Captured Variables:
    Local Variables:
        <for-begin>x
        <for-end>x
        x
        <catch>

test3 (106 .. 135)
    Arguments:
    Captured Variables:
    Local Variables:
        <catch>

test4 (136 .. 217)
    Arguments:
    Captured Variables:
    Local Variables:
        <catch>
        <catch>
        <catch>

main (218 .. 230)
    Arguments:
    Captured Variables:
    Local Variables:

<initialize> (0 .. 3)
    Arguments:
    Captured Variables:
    Local Variables:

========================================================
Instructions:
========================================================
//  0
0    :     LoadValue     : value = <I8, 0>
//  var sum = 0;
1    :     StoreGlobalVar: var = 0(sum)
2    :     LoadValue     : value = <null>
3    :     Return        
//  1
4    :     LoadValue     : value = <I8, 1>
//  var <for-begin>x : ::system::Int64 = 1;
5    :     StoreLocalVar : var = 0(<for-begin>x)
//  5
6    :     LoadValue     : value = <I8, 5>
//  var <for-end>x : ::system::Int64 = 5;
7    :     StoreLocalVar : var = 1(<for-end>x)
//  <for-begin>x
8    :     LoadLocalVar  : var = 0(<for-begin>x)
//  var x = <for-begin>x;
9    :     StoreLocalVar : var = 2(x)
//  x
10   :     LoadLocalVar  : var = 2(x)
//  <for-end>x
11   :     LoadLocalVar  : var = 1(<for-end>x)
//  (x <= <for-end>x)
12   :     CompareLiteral: type = I8
//  (x <= <for-end>x)
13   :     OpLE          
//  while ((x <= <for-end>x))
14   :     OpNot         : type = Bool
//  while ((x <= <for-end>x))
15   :     JumpIf        : label = 56
//  try
16   :     InstallTry    : label = 33
//  x
17   :     LoadLocalVar  : var = 2(x)
//  1
18   :     LoadValue     : value = <I8, 1>
//  (x + 1)
19   :     OpAdd         : type = I8
//  (x = (x + 1))
20   :     Duplicate     : stackPatternCount = 0
//  (x = (x + 1))
21   :     StoreLocalVar : var = 2(x)
//  (x = (x + 1));
22   :     Pop           
//  try
23   :     UninstallTry  : stackPatternCount = 0
//  sum
24   :     LoadGlobalVar : var = 0(sum)
//  1
25   :     LoadValue     : value = <I8, 1>
//  (sum + 1)
26   :     OpAdd         : type = I8
//  (sum = (sum + 1))
27   :     Duplicate     : stackPatternCount = 0
//  (sum = (sum + 1))
28   :     StoreGlobalVar: var = 0(sum)
//  (sum = (sum + 1));
29   :     Pop           
//  continue;
30   :     Jump          : label = 10
//  try
31   :     UninstallTry  : stackPatternCount = 0
//  try
32   :     Jump          : label = 43
//  try
33   :     LoadException 
//  try
34   :     StoreLocalVar : var = 3(<catch>)
//  sum
35   :     LoadGlobalVar : var = 0(sum)
//  1
36   :     LoadValue     : value = <I8, 1>
//  (sum + 1)
37   :     OpAdd         : type = I8
//  (sum = (sum + 1))
38   :     Duplicate     : stackPatternCount = 0
//  (sum = (sum + 1))
39   :     StoreGlobalVar: var = 0(sum)
//  (sum = (sum + 1));
40   :     Pop           
//  try
41   :     LoadLocalVar  : var = 3(<catch>)
//  try
42   :     RaiseException
//  sum
43   :     LoadGlobalVar : var = 0(sum)
//  1
44   :     LoadValue     : value = <I8, 1>
//  (sum + 1)
45   :     OpAdd         : type = I8
//  (sum = (sum + 1))
46   :     Duplicate     : stackPatternCount = 0
//  (sum = (sum + 1))
47   :     StoreGlobalVar: var = 0(sum)
//  (sum = (sum + 1));
48   :     Pop           
//  x
49   :     LoadLocalVar  : var = 2(x)
//  1
50   :     LoadValue     : value = <I8, 1>
//  (x + 1)
51   :     OpAdd         : type = I8
//  (x = (x + 1))
52   :     Duplicate     : stackPatternCount = 0
//  (x = (x + 1))
53   :     StoreLocalVar : var = 2(x)
//  (x = (x + 1));
54   :     Pop           
//  while ((x <= <for-end>x))
55   :     Jump          : label = 10
//  func test1() : (void)
56   :     LoadValue     : value = <null>
//  func test1() : (void)
57   :     Return        
//  1
58   :     LoadValue     : value = <I8, 1>
//  var <for-begin>x : ::system::Int64 = 1;
59   :     StoreLocalVar : var = 0(<for-begin>x)
//  5
60   :     LoadValue     : value = <I8, 5>
//  var <for-end>x : ::system::Int64 = 5;
61   :     StoreLocalVar : var = 1(<for-end>x)
//  <for-begin>x
62   :     LoadLocalVar  : var = 0(<for-begin>x)
//  var x = <for-begin>x;
63   :     StoreLocalVar : var = 2(x)
//  x
64   :     LoadLocalVar  : var = 2(x)
//  <for-end>x
65   :     LoadLocalVar  : var = 1(<for-end>x)
//  (x <= <for-end>x)
66   :     CompareLiteral: type = I8
//  (x <= <for-end>x)
67   :     OpLE          
//  while ((x <= <for-end>x))
68   :     OpNot         : type = Bool
//  while ((x <= <for-end>x))
69   :     JumpIf        : label = 104
//  try
70   :     InstallTry    : label = 81
//  try
71   :     UninstallTry  : stackPatternCount = 0
//  sum
72   :     LoadGlobalVar : var = 0(sum)
//  10
73   :     LoadValue     : value = <I8, 10>
//  (sum + 10)
74   :     OpAdd         : type = I8
//  (sum = (sum + 10))
75   :     Duplicate     : stackPatternCount = 0
//  (sum = (sum + 10))
76   :     StoreGlobalVar: var = 0(sum)
//  (sum = (sum + 10));
77   :     Pop           
//  break;
78   :     Jump          : label = 104
//  try
79   :     UninstallTry  : stackPatternCount = 0
//  try
80   :     Jump          : label = 91
//  try
81   :     LoadException 
//  try
82   :     StoreLocalVar : var = 3(<catch>)
//  sum
83   :     LoadGlobalVar : var = 0(sum)
//  10
84   :     LoadValue     : value = <I8, 10>
//  (sum + 10)
85   :     OpAdd         : type = I8
//  (sum = (sum + 10))
86   :     Duplicate     : stackPatternCount = 0
//  (sum = (sum + 10))
87   :     StoreGlobalVar: var = 0(sum)
//  (sum = (sum + 10));
88   :     Pop           
//  try
89   :     LoadLocalVar  : var = 3(<catch>)
//  try
90   :     RaiseException
//  sum
91   :     LoadGlobalVar : var = 0(sum)
//  10
92   :     LoadValue     : value = <I8, 10>
//  (sum + 10)
93   :     OpAdd         : type = I8
//  (sum = (sum + 10))
94   :     Duplicate     : stackPatternCount = 0
//  (sum = (sum + 10))
95   :     StoreGlobalVar: var = 0(sum)
//  (sum = (sum + 10));
96   :     Pop           
//  x
97   :     LoadLocalVar  : var = 2(x)
//  1
98   :     LoadValue     : value = <I8, 1>
//  (x + 1)
99   :     OpAdd         : type = I8
//  (x = (x + 1))
100  :     Duplicate     : stackPatternCount = 0
//  (x = (x + 1))
101  :     StoreLocalVar : var = 2(x)
//  (x = (x + 1));
102  :     Pop           
//  while ((x <= <for-end>x))
103  :     Jump          : label = 64
//  func test2() : (void)
104  :     LoadValue     : value = <null>
//  func test2() : (void)
105  :     Return        
//  try
106  :     InstallTry    : label = 118
//  try
107  :     UninstallTry  : stackPatternCount = 0
//  sum
108  :     LoadGlobalVar : var = 0(sum)
//  100
109  :     LoadValue     : value = <I8, 100>
//  (sum + 100)
110  :     OpAdd         : type = I8
//  (sum = (sum + 100))
111  :     Duplicate     : stackPatternCount = 0
//  (sum = (sum + 100))
112  :     StoreGlobalVar: var = 0(sum)
//  (sum = (sum + 100));
113  :     Pop           
//  return;
114  :     LoadValue     : value = <null>
//  return;
115  :     Return        
//  try
116  :     UninstallTry  : stackPatternCount = 0
//  try
117  :     Jump          : label = 128
//  try
118  :     LoadException 
//  try
119  :     StoreLocalVar : var = 0(<catch>)
//  sum
120  :     LoadGlobalVar : var = 0(sum)
//  100
121  :     LoadValue     : value = <I8, 100>
//  (sum + 100)
122  :     OpAdd         : type = I8
//  (sum = (sum + 100))
123  :     Duplicate     : stackPatternCount = 0
//  (sum = (sum + 100))
124  :     StoreGlobalVar: var = 0(sum)
//  (sum = (sum + 100));
125  :     Pop           
//  try
126  :     LoadLocalVar  : var = 0(<catch>)
//  try
127  :     RaiseException
//  sum
128  :     LoadGlobalVar : var = 0(sum)
//  100
129  :     LoadValue     : value = <I8, 100>
//  (sum + 100)
130  :     OpAdd         : type = I8
//  (sum = (sum + 100))
131  :     Duplicate     : stackPatternCount = 0
//  (sum = (sum + 100))
132  :     StoreGlobalVar: var = 0(sum)
//  (sum = (sum + 100));
133  :     Pop           
//  func test3() : (void)
134  :     LoadValue     : value = <null>
//  func test3() : (void)
135  :     Return        
//  try
136  :     InstallTry    : label = 200
//  try
137  :     InstallTry    : label = 182
//  try
138  :     InstallTry    : label = 164
//  try
139  :     UninstallTry  : stackPatternCount = 0
//  sum
140  :     LoadGlobalVar : var = 0(sum)
//  1000
141  :     LoadValue     : value = <I8, 1000>
//  (sum + 1000)
142  :     OpAdd         : type = I8
//  (sum = (sum + 1000))
143  :     Duplicate     : stackPatternCount = 0
//  (sum = (sum + 1000))
144  :     StoreGlobalVar: var = 0(sum)
//  (sum = (sum + 1000));
145  :     Pop           
//  try
146  :     UninstallTry  : stackPatternCount = 0
//  sum
147  :     LoadGlobalVar : var = 0(sum)
//  1000
148  :     LoadValue     : value = <I8, 1000>
//  (sum + 1000)
149  :     OpAdd         : type = I8
//  (sum = (sum + 1000))
150  :     Duplicate     : stackPatternCount = 0
//  (sum = (sum + 1000))
151  :     StoreGlobalVar: var = 0(sum)
//  (sum = (sum + 1000));
152  :     Pop           
//  try
153  :     UninstallTry  : stackPatternCount = 0
//  sum
154  :     LoadGlobalVar : var = 0(sum)
//  1000
155  :     LoadValue     : value = <I8, 1000>
//  (sum + 1000)
156  :     OpAdd         : type = I8
//  (sum = (sum + 1000))
157  :     Duplicate     : stackPatternCount = 0
//  (sum = (sum + 1000))
158  :     StoreGlobalVar: var = 0(sum)
//  (sum = (sum + 1000));
159  :     Pop           
//  return;
160  :     LoadValue     : value = <null>
//  return;
161  :     Return        
//  try
162  :     UninstallTry  : stackPatternCount = 0
//  try
163  :     Jump          : label = 174
//  try
164  :     LoadException 
//  try
165  :     StoreLocalVar : var = 0(<catch>)
//  sum
166  :     LoadGlobalVar : var = 0(sum)
//  1000
167  :     LoadValue     : value = <I8, 1000>
//  (sum + 1000)
168  :     OpAdd         : type = I8
//  (sum = (sum + 1000))
169  :     Duplicate     : stackPatternCount = 0
//  (sum = (sum + 1000))
170  :     StoreGlobalVar: var = 0(sum)
//  (sum = (sum + 1000));
171  :     Pop           
//  try
172  :     LoadLocalVar  : var = 0(<catch>)
//  try
173  :     RaiseException
//  sum
174  :     LoadGlobalVar : var = 0(sum)
//  1000
175  :     LoadValue     : value = <I8, 1000>
//  (sum + 1000)
176  :     OpAdd         : type = I8
//  (sum = (sum + 1000))
177  :     Duplicate     : stackPatternCount = 0
//  (sum = (sum + 1000))
178  :     StoreGlobalVar: var = 0(sum)
//  (sum = (sum + 1000));
179  :     Pop           
//  try
180  :     UninstallTry  : stackPatternCount = 0
//  try
181  :     Jump          : label = 192
//  try
182  :     LoadException 
//  try
183  :     StoreLocalVar : var = 1(<catch>)
//  sum
184  :     LoadGlobalVar : var = 0(sum)
//  1000
185  :     LoadValue     : value = <I8, 1000>
//  (sum + 1000)
186  :     OpAdd         : type = I8
//  (sum = (sum + 1000))
187  :     Duplicate     : stackPatternCount = 0
//  (sum = (sum + 1000))
188  :     StoreGlobalVar: var = 0(sum)
//  (sum = (sum + 1000));
189  :     Pop           
//  try
190  :     LoadLocalVar  : var = 1(<catch>)
//  try
191  :     RaiseException
//  sum
192  :     LoadGlobalVar : var = 0(sum)
//  1000
193  :     LoadValue     : value = <I8, 1000>
//  (sum + 1000)
194  :     OpAdd         : type = I8
//  (sum = (sum + 1000))
195  :     Duplicate     : stackPatternCount = 0
//  (sum = (sum + 1000))
196  :     StoreGlobalVar: var = 0(sum)
//  (sum = (sum + 1000));
197  :     Pop           
//  try
198  :     UninstallTry  : stackPatternCount = 0
//  try
199  :     Jump          : label = 210
//  try
200  :     LoadException 
//  try
201  :     StoreLocalVar : var = 2(<catch>)
//  sum
202  :     LoadGlobalVar : var = 0(sum)
//  1000
203  :     LoadValue     : value = <I8, 1000>
//  (sum + 1000)
204  :     OpAdd         : type = I8
//  (sum = (sum + 1000))
205  :     Duplicate     : stackPatternCount = 0
//  (sum = (sum + 1000))
206  :     StoreGlobalVar: var = 0(sum)
//  (sum = (sum + 1000));
207  :     Pop           
//  try
208  :     LoadLocalVar  : var = 2(<catch>)
//  try
209  :     RaiseException
//  sum
210  :     LoadGlobalVar : var = 0(sum)
//  1000
211  :     LoadValue     : value = <I8, 1000>
//  (sum + 1000)
212  :     OpAdd         : type = I8
//  (sum = (sum + 1000))
213  :     Duplicate     : stackPatternCount = 0
//  (sum = (sum + 1000))
214  :     StoreGlobalVar: var = 0(sum)
//  (sum = (sum + 1000));
215  :     Pop           
//  func test4() : (void)
216  :     LoadValue     : value = <null>
//  func test4() : (void)
217  :     Return        
//  test1()
218  :     Invoke        : func = 0(test1), stackPatternCount = 0
//  test1();
219  :     Pop           
//  test2()
220  :     Invoke        : func = 1(test2), stackPatternCount = 0
//  test2();
221  :     Pop           
//  test3()
222  :     Invoke        : func = 2(test3), stackPatternCount = 0
//  test3();
223  :     Pop           
//  test4()
224  :     Invoke        : func = 3(test4), stackPatternCount = 0
//  test4();
225  :     Pop           
//  sum
226  :     LoadGlobalVar : var = 0(sum)
//  sum
227  :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  return sum;
228  :     Return        
//  func main() : (string)
229  :     LoadValue     : value = <null>
//  func main() : (string)
230  :     Return        
