========================================================
Global Variables:
========================================================

========================================================
Functions:
========================================================
main (2 .. 15)
    Arguments:
    Captured Variables:
    Local Variables:

<initialize> (0 .. 1)
    Arguments:
    Captured Variables:
    Local Variables:

<method:H<IA>(2)> in main (16 .. 23)
    Arguments:
    Captured Variables:
        <captured>a
        <captured-this>0
    Local Variables:

<method:GetA<IA>(4)> in main (178 .. 181)
    Arguments:
    Captured Variables:
        <captured>a
        <captured-this>0
    Local Variables:

<method:SetA<IA>(5)> in main (182 .. 190)
    Arguments:
        value
    Captured Variables:
        <captured>a
        <captured-this>0
    Local Variables:

<method:Calculate<IA>(6)> in main (191 .. 264)
    Arguments:
    Captured Variables:
        <captured>a
        <captured-this>0
    Local Variables:
        f
        g
        h
        s

<lambda:(6)> in <method:H<IA>(2)> in main (24 .. 38)
    Arguments:
    Captured Variables:
        <captured-this>0
    Local Variables:

<method:H<IB>(7)> in <lambda:(6)> in <method:H<IA>(2)> in main (39 .. 54)
    Arguments:
    Captured Variables:
        <captured>b
        <captured-this>0
        <captured-this>1
    Local Variables:

<method:GetB<IB>(9)> in <lambda:(6)> in <method:H<IA>(2)> in main (55 .. 58)
    Arguments:
    Captured Variables:
        <captured>b
        <captured-this>0
        <captured-this>1
    Local Variables:

<method:SetB<IB>(10)> in <lambda:(6)> in <method:H<IA>(2)> in main (59 .. 67)
    Arguments:
        value
    Captured Variables:
        <captured>b
        <captured-this>0
        <captured-this>1
    Local Variables:

<method:Calculate<IB>(11)> in <lambda:(6)> in <method:H<IA>(2)> in main (68 .. 143)
    Arguments:
    Captured Variables:
        <captured>b
        <captured-this>0
        <captured-this>1
    Local Variables:
        f
        g
        h
        s

<lambda:(11)> in <method:Calculate<IB>(11)> in <lambda:(6)> in <method:H<IA>(2)> in main (144 .. 155)
    Arguments:
    Captured Variables:
        <captured-this>0
        <captured-this>1
    Local Variables:

<lambda:(12)> in <method:Calculate<IB>(11)> in <lambda:(6)> in <method:H<IA>(2)> in main (161 .. 172)
    Arguments:
    Captured Variables:
        <captured-this>0
        <captured-this>1
    Local Variables:

<lambda:(13)> in <lambda:(11)> in <method:Calculate<IB>(11)> in <lambda:(6)> in <method:H<IA>(2)> in main (156 .. 160)
    Arguments:
    Captured Variables:
        <captured-this>0
        <captured-this>1
    Local Variables:

<lambda:(14)> in <lambda:(12)> in <method:Calculate<IB>(11)> in <lambda:(6)> in <method:H<IA>(2)> in main (173 .. 177)
    Arguments:
    Captured Variables:
        <captured-this>0
        <captured-this>1
    Local Variables:

<lambda:(15)> in <method:Calculate<IA>(6)> in main (265 .. 272)
    Arguments:
    Captured Variables:
        <captured-this>0
    Local Variables:

<lambda:(16)> in <method:Calculate<IA>(6)> in main (278 .. 285)
    Arguments:
    Captured Variables:
        <captured-this>0
    Local Variables:

<lambda:(17)> in <lambda:(15)> in <method:Calculate<IA>(6)> in main (273 .. 277)
    Arguments:
    Captured Variables:
        <captured-this>0
    Local Variables:

<lambda:(18)> in <lambda:(16)> in <method:Calculate<IA>(6)> in main (286 .. 290)
    Arguments:
    Captured Variables:
        <captured-this>0
    Local Variables:

========================================================
Instructions:
========================================================
0    :     LoadValue     : value = <null>
1    :     Return        
//  0
2    :     LoadValue     : value = <I8, 0>
//  new (IA^)
3    :     LoadValue     : value = <null>
//  new (IA^)
4    :     CreateClosureContext: stackPatternCount = 2
//  new (IA^)
5    :     LoadMethodInfo: methodInfo = GetA<IA>
//  func GetA() : (int)
6    :     LoadFunction  : func = 3(<method:GetA<IA>(4)> in main)
//  new (IA^)
7    :     LoadMethodInfo: methodInfo = SetA<IA>
//  func SetA(value : int) : (void)
8    :     LoadFunction  : func = 4(<method:SetA<IA>(5)> in main)
//  new (IA^)
9    :     LoadMethodInfo: methodInfo = Calculate<IA>
//  func Calculate() : (string)
10   :     LoadFunction  : func = 5(<method:Calculate<IA>(6)> in main)
//  new (IA^)
11   :     CreateInterface: methodInfo = <IA>, stackPatternCount = 6
//  new (IA^)
12   :     InvokeMethod  : methodInfo = Calculate<IA>, stackPatternCount = 0
//  return new (IA^)
13   :     Return        
//  func main() : (string)
14   :     LoadValue     : value = <null>
//  func main() : (string)
15   :     Return        
//  [new (IB^)
16   :     LoadCapturedVar: var = 1(<captured-this>0)
//  [new (IB^)
17   :     CreateClosureContext: stackPatternCount = 1
//  [new (IB^)
18   :     LoadFunction  : func = 6(<lambda:(6)> in <method:H<IA>(2)> in main)
//  [new (IB^)
19   :     CreateClosure 
//  [new (IB^)
20   :     InvokeProxy   : stackPatternCount = 0
//  return [new (IB^)
21   :     Return        
//  func H() : (string)
22   :     LoadValue     : value = <null>
//  func H() : (string)
23   :     Return        
//  0
24   :     LoadValue     : value = <I8, 0>
//  new (IB^)
25   :     LoadCapturedVar: var = 0(<captured-this>0)
//  new (IB^)
26   :     LoadValue     : value = <null>
//  new (IB^)
27   :     CreateClosureContext: stackPatternCount = 3
//  new (IB^)
28   :     LoadMethodInfo: methodInfo = GetB<IB>
//  func GetB() : (int)
29   :     LoadFunction  : func = 8(<method:GetB<IB>(9)> in <lambda:(6)> in <method:H<IA>(2)> in main)
//  new (IB^)
30   :     LoadMethodInfo: methodInfo = SetB<IB>
//  func SetB(value : int) : (void)
31   :     LoadFunction  : func = 9(<method:SetB<IB>(10)> in <lambda:(6)> in <method:H<IA>(2)> in main)
//  new (IB^)
32   :     LoadMethodInfo: methodInfo = Calculate<IB>
//  func Calculate() : (string)
33   :     LoadFunction  : func = 10(<method:Calculate<IB>(11)> in <lambda:(6)> in <method:H<IA>(2)> in main)
//  new (IB^)
34   :     CreateInterface: methodInfo = <IB>, stackPatternCount = 6
//  new (IB^)
35   :     InvokeMethod  : methodInfo = Calculate<IB>, stackPatternCount = 0
//  [new (IB^)
36   :     Return        
//  [new (IB^)
37   :     LoadValue     : value = <null>
//  [new (IB^)
38   :     Return        
//  "["
39   :     LoadValue     : value = <Bool, [>
//  A
40   :     LoadCapturedVar: var = 1(<captured-this>0)
//  A
41   :     InvokeMethod  : methodInfo = GetA<IA>, stackPatternCount = 0
//  A
42   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  ("[" & A)
43   :     OpConcat      
//  ", "
44   :     LoadValue     : value = <Bool, , >
//  (("[" & A) & ", ")
45   :     OpConcat      
//  B
46   :     LoadCapturedVar: var = 2(<captured-this>1)
//  B
47   :     InvokeMethod  : methodInfo = GetB<IB>, stackPatternCount = 0
//  B
48   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  ((("[" & A) & ", ") & B)
49   :     OpConcat      
//  "]"
50   :     LoadValue     : value = <Bool, ]>
//  (((("[" & A) & ", ") & B) & "]")
51   :     OpConcat      
//  return (((("[" & A) & ", ") & B) & "]");
52   :     Return        
//  func H() : (string)
53   :     LoadValue     : value = <null>
//  func H() : (string)
54   :     Return        
//  b
55   :     LoadCapturedVar: var = 0(<captured>b)
//  return b;
56   :     Return        
//  func GetB() : (int)
57   :     LoadValue     : value = <null>
//  func GetB() : (int)
58   :     Return        
//  value
59   :     LoadLocalVar  : var = 0(value)
//  (b = value)
60   :     Duplicate     : stackPatternCount = 0
//  (b = value)
61   :     StoreCapturedVar: var = 0
//  (b = value);
62   :     Pop           
//  BChanged()
63   :     LoadCapturedVar: var = 2(<captured-this>1)
//  BChanged()
64   :     InvokeEvent   : eventInfo = BChanged<IB>, stackPatternCount = 0
//  BChanged();
65   :     Pop           
//  func SetB(value : int) : (void)
66   :     LoadValue     : value = <null>
//  func SetB(value : int) : (void)
67   :     Return        
//  [(func () : (int)
68   :     LoadCapturedVar: var = 1(<captured-this>0)
//  [(func () : (int)
69   :     LoadCapturedVar: var = 2(<captured-this>1)
//  [(func () : (int)
70   :     CreateClosureContext: stackPatternCount = 2
//  [(func () : (int)
71   :     LoadFunction  : func = 11(<lambda:(11)> in <method:Calculate<IB>(11)> in <lambda:(6)> in <method:H<IA>(2)> in main)
//  [(func () : (int)
72   :     CreateClosure 
//  var f = [(func () : (int)
73   :     StoreLocalVar : var = 0(f)
//  func () : (int)
74   :     LoadCapturedVar: var = 1(<captured-this>0)
//  func () : (int)
75   :     LoadCapturedVar: var = 2(<captured-this>1)
//  func () : (int)
76   :     CreateClosureContext: stackPatternCount = 2
//  func () : (int)
77   :     LoadFunction  : func = 12(<lambda:(12)> in <method:Calculate<IB>(11)> in <lambda:(6)> in <method:H<IA>(2)> in main)
//  func () : (int)
78   :     CreateClosure 
//  var g = func () : (int)
79   :     StoreLocalVar : var = 1(g)
//  H
80   :     LoadClosureContext
//  H
81   :     LoadFunction  : func = 7(<method:H<IB>(7)> in <lambda:(6)> in <method:H<IA>(2)> in main)
//  H
82   :     CreateClosure 
//  var h = H;
83   :     StoreLocalVar : var = 2(h)
//  ""
84   :     LoadValue     : value = <Bool, >
//  var s = "";
85   :     StoreLocalVar : var = 3(s)
//  1
86   :     LoadValue     : value = <I8, 1>
//  (b = 1)
87   :     Duplicate     : stackPatternCount = 0
//  (b = 1)
88   :     StoreCapturedVar: var = 0
//  (b = 1);
89   :     Pop           
//  s
90   :     LoadLocalVar  : var = 3(s)
//  "["
91   :     LoadValue     : value = <Bool, [>
//  f
92   :     LoadLocalVar  : var = 0(f)
//  f()
93   :     InvokeProxy   : stackPatternCount = 0
//  f()
94   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  ("[" & f())
95   :     OpConcat      
//  "]"
96   :     LoadValue     : value = <Bool, ]>
//  (("[" & f()) & "]")
97   :     OpConcat      
//  (s & (("[" & f()) & "]"))
98   :     OpConcat      
//  (s = (s & (("[" & f()) & "]")))
99   :     Duplicate     : stackPatternCount = 0
//  (s = (s & (("[" & f()) & "]")))
100  :     StoreLocalVar : var = 3(s)
//  (s = (s & (("[" & f()) & "]")));
101  :     Pop           
//  2
102  :     LoadValue     : value = <I8, 2>
//  (B = 2)
103  :     Duplicate     : stackPatternCount = 0
//  (B = 2)
104  :     LoadCapturedVar: var = 2(<captured-this>1)
//  (B = 2)
105  :     InvokeMethod  : methodInfo = SetB<IB>, stackPatternCount = 1
//  (B = 2)
106  :     Pop           
//  (B = 2);
107  :     Pop           
//  s
108  :     LoadLocalVar  : var = 3(s)
//  "["
109  :     LoadValue     : value = <Bool, [>
//  g
110  :     LoadLocalVar  : var = 1(g)
//  g()
111  :     InvokeProxy   : stackPatternCount = 0
//  g()
112  :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  ("[" & g())
113  :     OpConcat      
//  "]"
114  :     LoadValue     : value = <Bool, ]>
//  (("[" & g()) & "]")
115  :     OpConcat      
//  (s & (("[" & g()) & "]"))
116  :     OpConcat      
//  (s = (s & (("[" & g()) & "]")))
117  :     Duplicate     : stackPatternCount = 0
//  (s = (s & (("[" & g()) & "]")))
118  :     StoreLocalVar : var = 3(s)
//  (s = (s & (("[" & g()) & "]")));
119  :     Pop           
//  B
120  :     LoadCapturedVar: var = 2(<captured-this>1)
//  B
121  :     InvokeMethod  : methodInfo = GetB<IB>, stackPatternCount = 0
//  10
122  :     LoadValue     : value = <I8, 10>
//  (B + 10)
123  :     OpAdd         : type = I8
//  (B = (B + 10))
124  :     Duplicate     : stackPatternCount = 0
//  (B = (B + 10))
125  :     LoadCapturedVar: var = 2(<captured-this>1)
//  (B = (B + 10))
126  :     InvokeMethod  : methodInfo = SetB<IB>, stackPatternCount = 1
//  (B = (B + 10))
127  :     Pop           
//  (B = (B + 10));
128  :     Pop           
//  s
129  :     LoadLocalVar  : var = 3(s)
//  "["
130  :     LoadValue     : value = <Bool, [>
//  h
131  :     LoadLocalVar  : var = 2(h)
//  h()
132  :     InvokeProxy   : stackPatternCount = 0
//  ("[" & h())
133  :     OpConcat      
//  "]"
134  :     LoadValue     : value = <Bool, ]>
//  (("[" & h()) & "]")
135  :     OpConcat      
//  (s & (("[" & h()) & "]"))
136  :     OpConcat      
//  (s = (s & (("[" & h()) & "]")))
137  :     Duplicate     : stackPatternCount = 0
//  (s = (s & (("[" & h()) & "]")))
138  :     StoreLocalVar : var = 3(s)
//  (s = (s & (("[" & h()) & "]")));
139  :     Pop           
//  s
140  :     LoadLocalVar  : var = 3(s)
//  return s;
141  :     Return        
//  func Calculate() : (string)
142  :     LoadValue     : value = <null>
//  func Calculate() : (string)
143  :     Return        
//  func () : (int)
144  :     LoadCapturedVar: var = 0(<captured-this>0)
//  func () : (int)
145  :     LoadCapturedVar: var = 1(<captured-this>1)
//  func () : (int)
146  :     CreateClosureContext: stackPatternCount = 2
//  func () : (int)
147  :     LoadFunction  : func = 13(<lambda:(13)> in <lambda:(11)> in <method:Calculate<IB>(11)> in <lambda:(6)> in <method:H<IA>(2)> in main)
//  func () : (int)
148  :     CreateClosure 
//  func () : (int)
149  :     InvokeProxy   : stackPatternCount = 0
//  B
150  :     LoadCapturedVar: var = 1(<captured-this>1)
//  B
151  :     InvokeMethod  : methodInfo = GetB<IB>, stackPatternCount = 0
//  (func () : (int)
152  :     OpAdd         : type = I8
//  [(func () : (int)
153  :     Return        
//  [(func () : (int)
154  :     LoadValue     : value = <null>
//  [(func () : (int)
155  :     Return        
//  A
156  :     LoadCapturedVar: var = 0(<captured-this>0)
//  A
157  :     InvokeMethod  : methodInfo = GetA<IA>, stackPatternCount = 0
//  return A;
158  :     Return        
//  func () : (int)
159  :     LoadValue     : value = <null>
//  func () : (int)
160  :     Return        
//  [A]
161  :     LoadCapturedVar: var = 0(<captured-this>0)
//  [A]
162  :     LoadCapturedVar: var = 1(<captured-this>1)
//  [A]
163  :     CreateClosureContext: stackPatternCount = 2
//  [A]
164  :     LoadFunction  : func = 14(<lambda:(14)> in <lambda:(12)> in <method:Calculate<IB>(11)> in <lambda:(6)> in <method:H<IA>(2)> in main)
//  [A]
165  :     CreateClosure 
//  [A]()
166  :     InvokeProxy   : stackPatternCount = 0
//  B
167  :     LoadCapturedVar: var = 1(<captured-this>1)
//  B
168  :     InvokeMethod  : methodInfo = GetB<IB>, stackPatternCount = 0
//  ([A]() + B)
169  :     OpAdd         : type = I8
//  return ([A]() + B);
170  :     Return        
//  func () : (int)
171  :     LoadValue     : value = <null>
//  func () : (int)
172  :     Return        
//  A
173  :     LoadCapturedVar: var = 0(<captured-this>0)
//  A
174  :     InvokeMethod  : methodInfo = GetA<IA>, stackPatternCount = 0
//  [A]
175  :     Return        
//  [A]
176  :     LoadValue     : value = <null>
//  [A]
177  :     Return        
//  a
178  :     LoadCapturedVar: var = 0(<captured>a)
//  return a;
179  :     Return        
//  func GetA() : (int)
180  :     LoadValue     : value = <null>
//  func GetA() : (int)
181  :     Return        
//  value
182  :     LoadLocalVar  : var = 0(value)
//  (a = value)
183  :     Duplicate     : stackPatternCount = 0
//  (a = value)
184  :     StoreCapturedVar: var = 0
//  (a = value);
185  :     Pop           
//  AChanged()
186  :     LoadCapturedVar: var = 1(<captured-this>0)
//  AChanged()
187  :     InvokeEvent   : eventInfo = AChanged<IA>, stackPatternCount = 0
//  AChanged();
188  :     Pop           
//  func SetA(value : int) : (void)
189  :     LoadValue     : value = <null>
//  func SetA(value : int) : (void)
190  :     Return        
//  [func () : (int)
191  :     LoadCapturedVar: var = 1(<captured-this>0)
//  [func () : (int)
192  :     CreateClosureContext: stackPatternCount = 1
//  [func () : (int)
193  :     LoadFunction  : func = 15(<lambda:(15)> in <method:Calculate<IA>(6)> in main)
//  [func () : (int)
194  :     CreateClosure 
//  var f = [func () : (int)
195  :     StoreLocalVar : var = 0(f)
//  func () : (int)
196  :     LoadCapturedVar: var = 1(<captured-this>0)
//  func () : (int)
197  :     CreateClosureContext: stackPatternCount = 1
//  func () : (int)
198  :     LoadFunction  : func = 16(<lambda:(16)> in <method:Calculate<IA>(6)> in main)
//  func () : (int)
199  :     CreateClosure 
//  var g = func () : (int)
200  :     StoreLocalVar : var = 1(g)
//  H
201  :     LoadClosureContext
//  H
202  :     LoadFunction  : func = 2(<method:H<IA>(2)> in main)
//  H
203  :     CreateClosure 
//  var h = H;
204  :     StoreLocalVar : var = 2(h)
//  ""
205  :     LoadValue     : value = <Bool, >
//  var s = "";
206  :     StoreLocalVar : var = 3(s)
//  1
207  :     LoadValue     : value = <I8, 1>
//  (a = 1)
208  :     Duplicate     : stackPatternCount = 0
//  (a = 1)
209  :     StoreCapturedVar: var = 0
//  (a = 1);
210  :     Pop           
//  s
211  :     LoadLocalVar  : var = 3(s)
//  "["
212  :     LoadValue     : value = <Bool, [>
//  f
213  :     LoadLocalVar  : var = 0(f)
//  f()
214  :     InvokeProxy   : stackPatternCount = 0
//  f()
215  :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  ("[" & f())
216  :     OpConcat      
//  "]"
217  :     LoadValue     : value = <Bool, ]>
//  (("[" & f()) & "]")
218  :     OpConcat      
//  (s & (("[" & f()) & "]"))
219  :     OpConcat      
//  (s = (s & (("[" & f()) & "]")))
220  :     Duplicate     : stackPatternCount = 0
//  (s = (s & (("[" & f()) & "]")))
221  :     StoreLocalVar : var = 3(s)
//  (s = (s & (("[" & f()) & "]")));
222  :     Pop           
//  2
223  :     LoadValue     : value = <I8, 2>
//  (A = 2)
224  :     Duplicate     : stackPatternCount = 0
//  (A = 2)
225  :     LoadCapturedVar: var = 1(<captured-this>0)
//  (A = 2)
226  :     InvokeMethod  : methodInfo = SetA<IA>, stackPatternCount = 1
//  (A = 2)
227  :     Pop           
//  (A = 2);
228  :     Pop           
//  s
229  :     LoadLocalVar  : var = 3(s)
//  "["
230  :     LoadValue     : value = <Bool, [>
//  g
231  :     LoadLocalVar  : var = 1(g)
//  g()
232  :     InvokeProxy   : stackPatternCount = 0
//  g()
233  :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  ("[" & g())
234  :     OpConcat      
//  "]"
235  :     LoadValue     : value = <Bool, ]>
//  (("[" & g()) & "]")
236  :     OpConcat      
//  (s & (("[" & g()) & "]"))
237  :     OpConcat      
//  (s = (s & (("[" & g()) & "]")))
238  :     Duplicate     : stackPatternCount = 0
//  (s = (s & (("[" & g()) & "]")))
239  :     StoreLocalVar : var = 3(s)
//  (s = (s & (("[" & g()) & "]")));
240  :     Pop           
//  A
241  :     LoadCapturedVar: var = 1(<captured-this>0)
//  A
242  :     InvokeMethod  : methodInfo = GetA<IA>, stackPatternCount = 0
//  1
243  :     LoadValue     : value = <I8, 1>
//  (A + 1)
244  :     OpAdd         : type = I8
//  (A = (A + 1))
245  :     Duplicate     : stackPatternCount = 0
//  (A = (A + 1))
246  :     LoadCapturedVar: var = 1(<captured-this>0)
//  (A = (A + 1))
247  :     InvokeMethod  : methodInfo = SetA<IA>, stackPatternCount = 1
//  (A = (A + 1))
248  :     Pop           
//  (A = (A + 1));
249  :     Pop           
//  s
250  :     LoadLocalVar  : var = 3(s)
//  "["
251  :     LoadValue     : value = <Bool, [>
//  h
252  :     LoadLocalVar  : var = 2(h)
//  h()
253  :     InvokeProxy   : stackPatternCount = 0
//  ("[" & h())
254  :     OpConcat      
//  "]"
255  :     LoadValue     : value = <Bool, ]>
//  (("[" & h()) & "]")
256  :     OpConcat      
//  (s & (("[" & h()) & "]"))
257  :     OpConcat      
//  (s = (s & (("[" & h()) & "]")))
258  :     Duplicate     : stackPatternCount = 0
//  (s = (s & (("[" & h()) & "]")))
259  :     StoreLocalVar : var = 3(s)
//  (s = (s & (("[" & h()) & "]")));
260  :     Pop           
//  s
261  :     LoadLocalVar  : var = 3(s)
//  return s;
262  :     Return        
//  func Calculate() : (string)
263  :     LoadValue     : value = <null>
//  func Calculate() : (string)
264  :     Return        
//  func () : (int)
265  :     LoadCapturedVar: var = 0(<captured-this>0)
//  func () : (int)
266  :     CreateClosureContext: stackPatternCount = 1
//  func () : (int)
267  :     LoadFunction  : func = 17(<lambda:(17)> in <lambda:(15)> in <method:Calculate<IA>(6)> in main)
//  func () : (int)
268  :     CreateClosure 
//  func () : (int)
269  :     InvokeProxy   : stackPatternCount = 0
//  [func () : (int)
270  :     Return        
//  [func () : (int)
271  :     LoadValue     : value = <null>
//  [func () : (int)
272  :     Return        
//  A
273  :     LoadCapturedVar: var = 0(<captured-this>0)
//  A
274  :     InvokeMethod  : methodInfo = GetA<IA>, stackPatternCount = 0
//  return A;
275  :     Return        
//  func () : (int)
276  :     LoadValue     : value = <null>
//  func () : (int)
277  :     Return        
//  [A]
278  :     LoadCapturedVar: var = 0(<captured-this>0)
//  [A]
279  :     CreateClosureContext: stackPatternCount = 1
//  [A]
280  :     LoadFunction  : func = 18(<lambda:(18)> in <lambda:(16)> in <method:Calculate<IA>(6)> in main)
//  [A]
281  :     CreateClosure 
//  [A]()
282  :     InvokeProxy   : stackPatternCount = 0
//  return [A]();
283  :     Return        
//  func () : (int)
284  :     LoadValue     : value = <null>
//  func () : (int)
285  :     Return        
//  A
286  :     LoadCapturedVar: var = 0(<captured-this>0)
//  A
287  :     InvokeMethod  : methodInfo = GetA<IA>, stackPatternCount = 0
//  [A]
288  :     Return        
//  [A]
289  :     LoadValue     : value = <null>
//  [A]
290  :     Return        
