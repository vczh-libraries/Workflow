========================================================
Global Variables:
========================================================
s

========================================================
Functions:
========================================================
GetNumbers (4 .. 12)
    Arguments:
    Captured Variables:
    Local Variables:

main (248 .. 279)
    Arguments:
    Captured Variables:
    Local Variables:
        <for-enumerable>i
        <for-enumerator>i
        i

<initialize> (0 .. 3)
    Arguments:
    Captured Variables:
    Local Variables:

<lambda:(3)> in GetNumbers (13 .. 33)
    Arguments:
        <co-impl>
    Captured Variables:
    Local Variables:

<method:SetFailure<system::Coroutine>(4)> in <lambda:(3)> in GetNumbers (34 .. 39)
    Arguments:
        <value>
    Captured Variables:
        <captured><co0-for-begin>i
        <captured><co1-for-end>i
        <captured><co2>i
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured><co-impl>
        <captured-this>0
    Local Variables:

<method:SetStatus<system::Coroutine>(5)> in <lambda:(3)> in GetNumbers (40 .. 45)
    Arguments:
        <value>
    Captured Variables:
        <captured><co0-for-begin>i
        <captured><co1-for-end>i
        <captured><co2>i
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured><co-impl>
        <captured-this>0
    Local Variables:

<method:GetFailure<system::Coroutine>(8)> in <lambda:(3)> in GetNumbers (46 .. 49)
    Arguments:
    Captured Variables:
        <captured><co0-for-begin>i
        <captured><co1-for-end>i
        <captured><co2>i
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured><co-impl>
        <captured-this>0
    Local Variables:

<method:GetStatus<system::Coroutine>(9)> in <lambda:(3)> in GetNumbers (50 .. 53)
    Arguments:
    Captured Variables:
        <captured><co0-for-begin>i
        <captured><co1-for-end>i
        <captured><co2>i
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured><co-impl>
        <captured-this>0
    Local Variables:

<method:Resume<system::Coroutine>(10)> in <lambda:(3)> in GetNumbers (54 .. 247)
    Arguments:
        <raise-exception>
        <co-result>
    Captured Variables:
        <captured><co0-for-begin>i
        <captured><co1-for-end>i
        <captured><co2>i
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured><co-impl>
        <captured-this>0
    Local Variables:
        <catch><co-ex>

========================================================
Instructions:
========================================================
//  ""
0    :     LoadValue     : value = <Bool, >
//  var s = "";
1    :     StoreGlobalVar: var = 0(s)
2    :     LoadValue     : value = <null>
3    :     Return        
//  func (<co-impl> : ::system::EnumerableCoroutine::IImpl*) : (::system::Coroutine^)
4    :     CreateClosureContext: stackPatternCount = 0
//  func (<co-impl> : ::system::EnumerableCoroutine::IImpl*) : (::system::Coroutine^)
5    :     LoadFunction  : func = 3(<lambda:(3)> in GetNumbers)
//  func (<co-impl> : ::system::EnumerableCoroutine::IImpl*) : (::system::Coroutine^)
6    :     CreateClosure 
//  ::system::EnumerableCoroutine::Create(func (<co-impl> : ::system::EnumerableCoroutine::IImpl*) : (::system::Coroutine^)
7    :     LoadValue     : value = <null>
//  ::system::EnumerableCoroutine::Create(func (<co-impl> : ::system::EnumerableCoroutine::IImpl*) : (::system::Coroutine^)
8    :     InvokeMethod  : methodInfo = Create<system::EnumerableCoroutine>, stackPatternCount = 1
//  ::system::EnumerableCoroutine::Create(func (<co-impl> : ::system::EnumerableCoroutine::IImpl*) : (::system::Coroutine^)
9    :     ConvertToType : flag = SharedPtr, typeDescriptor = system::Enumerable
//  return (cast (::system::Int64{}) ::system::EnumerableCoroutine::Create(func (<co-impl> : ::system::EnumerableCoroutine::IImpl*) : (::system::Coroutine^)
10   :     Return        
//  func GetNumbers() : (int{})
11   :     LoadValue     : value = <null>
//  func GetNumbers() : (int{})
12   :     Return        
//  0
13   :     LoadValue     : value = <I8, 0>
//  0
14   :     LoadValue     : value = <I8, 0>
//  0
15   :     LoadValue     : value = <I8, 0>
//  0
16   :     LoadValue     : value = <I8, 0>
//  1
17   :     LoadValue     : value = <I8, 1>
//  (-1)
18   :     OpNegative    : type = I8
//  null
19   :     LoadValue     : value = <null>
//  Waiting
20   :     LoadValue     : value = <enum: 0>
//  new (::system::Coroutine^)
21   :     LoadLocalVar  : var = 0(<co-impl>)
//  new (::system::Coroutine^)
22   :     LoadValue     : value = <null>
//  new (::system::Coroutine^)
23   :     CreateClosureContext: stackPatternCount = 9
//  new (::system::Coroutine^)
24   :     LoadMethodInfo: methodInfo = GetFailure<system::Coroutine>
//  func GetFailure() : (::system::Exception^)
25   :     LoadFunction  : func = 6(<method:GetFailure<system::Coroutine>(8)> in <lambda:(3)> in GetNumbers)
//  new (::system::Coroutine^)
26   :     LoadMethodInfo: methodInfo = GetStatus<system::Coroutine>
//  func GetStatus() : (::system::CoroutineStatus)
27   :     LoadFunction  : func = 7(<method:GetStatus<system::Coroutine>(9)> in <lambda:(3)> in GetNumbers)
//  new (::system::Coroutine^)
28   :     LoadMethodInfo: methodInfo = Resume<system::Coroutine>
//  func Resume(<raise-exception> : ::system::Boolean, <co-result> : ::system::CoroutineResult^) : (::system::Void)
29   :     LoadFunction  : func = 8(<method:Resume<system::Coroutine>(10)> in <lambda:(3)> in GetNumbers)
//  new (::system::Coroutine^)
30   :     CreateInterface: methodInfo = <system::Coroutine>, stackPatternCount = 6
//  return new (::system::Coroutine^)
31   :     Return        
//  func (<co-impl> : ::system::EnumerableCoroutine::IImpl*) : (::system::Coroutine^)
32   :     LoadValue     : value = <null>
//  func (<co-impl> : ::system::EnumerableCoroutine::IImpl*) : (::system::Coroutine^)
33   :     Return        
//  <value>
34   :     LoadLocalVar  : var = 0(<value>)
//  (<prop>Failure = <value>)
35   :     Duplicate     : stackPatternCount = 0
//  (<prop>Failure = <value>)
36   :     StoreCapturedVar: var = 5
//  (<prop>Failure = <value>);
37   :     Pop           
//  func SetFailure(<value> : ::system::Exception^) : (void)
38   :     LoadValue     : value = <null>
//  func SetFailure(<value> : ::system::Exception^) : (void)
39   :     Return        
//  <value>
40   :     LoadLocalVar  : var = 0(<value>)
//  (<prop>Status = <value>)
41   :     Duplicate     : stackPatternCount = 0
//  (<prop>Status = <value>)
42   :     StoreCapturedVar: var = 6
//  (<prop>Status = <value>);
43   :     Pop           
//  func SetStatus(<value> : ::system::CoroutineStatus) : (void)
44   :     LoadValue     : value = <null>
//  func SetStatus(<value> : ::system::CoroutineStatus) : (void)
45   :     Return        
//  <prop>Failure
46   :     LoadCapturedVar: var = 5(<captured><prop>Failure)
//  return <prop>Failure;
47   :     Return        
//  func GetFailure() : (::system::Exception^)
48   :     LoadValue     : value = <null>
//  func GetFailure() : (::system::Exception^)
49   :     Return        
//  <prop>Status
50   :     LoadCapturedVar: var = 6(<captured><prop>Status)
//  return <prop>Status;
51   :     Return        
//  func GetStatus() : (::system::CoroutineStatus)
52   :     LoadValue     : value = <null>
//  func GetStatus() : (::system::CoroutineStatus)
53   :     Return        
//  Status
54   :     LoadCapturedVar: var = 8(<captured-this>0)
//  Status
55   :     InvokeMethod  : methodInfo = GetStatus<system::Coroutine>, stackPatternCount = 0
//  ::system::CoroutineStatus::Waiting
56   :     LoadValue     : value = <enum: 0>
//  (Status != ::system::CoroutineStatus::Waiting)
57   :     CompareValue  
//  (Status != ::system::CoroutineStatus::Waiting)
58   :     OpNot         : type = Bool
//  if ((Status != ::system::CoroutineStatus::Waiting))
59   :     OpNot         : type = Bool
//  if ((Status != ::system::CoroutineStatus::Waiting))
60   :     JumpIf        : label = 64
//  "Resume should be called only when the coroutine is in the waiting status."
61   :     LoadValue     : value = <Bool, Resume should be called only when the coroutine is in the waiting status.>
//  raise "Resume should be called only when the coroutine is in the waiting status.";
62   :     RaiseException
//  if ((Status != ::system::CoroutineStatus::Waiting))
63   :     Jump          : label = 64
//  Executing
64   :     LoadValue     : value = <enum: 1>
//  SetStatus(Executing)
65   :     InvokeWithContext: func = 5(<method:SetStatus<system::Coroutine>(5)> in <lambda:(3)> in GetNumbers), stackPatternCount = 1
//  SetStatus(Executing);
66   :     Pop           
//  try
67   :     InstallTry    : label = 232
//  <co-state-before-pause>
68   :     LoadCapturedVar: var = 4(<captured><co-state-before-pause>)
//  1
69   :     LoadValue     : value = <I8, 1>
//  (-1)
70   :     OpNegative    : type = I8
//  (<co-state-before-pause> != (-1))
71   :     CompareValue  
//  (<co-state-before-pause> != (-1))
72   :     OpNot         : type = Bool
//  if ((<co-state-before-pause> != (-1)))
73   :     OpNot         : type = Bool
//  if ((<co-state-before-pause> != (-1)))
74   :     JumpIf        : label = 107
//  <co-result>
75   :     LoadLocalVar  : var = 1(<co-result>)
//  <co-result> is null
76   :     LoadValue     : value = <null>
//  <co-result> is null
77   :     CompareReference
//  if (<co-result> is null)
78   :     OpNot         : type = Bool
//  if (<co-result> is null)
79   :     JumpIf        : label = 86
//  1
80   :     LoadValue     : value = <I8, 1>
//  (-1)
81   :     OpNegative    : type = I8
//  (<co-state-before-pause> = (-1))
82   :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = (-1))
83   :     StoreCapturedVar: var = 4
//  (<co-state-before-pause> = (-1));
84   :     Pop           
//  if (<co-result> is null)
85   :     Jump          : label = 106
//  <co-result>
86   :     LoadLocalVar  : var = 1(<co-result>)
//  <co-result>.Failure
87   :     InvokeMethod  : methodInfo = GetFailure<system::CoroutineResult>, stackPatternCount = 0
//  <co-result>.Failure is null
88   :     LoadValue     : value = <null>
//  <co-result>.Failure is null
89   :     CompareReference
//  if (<co-result>.Failure is null)
90   :     OpNot         : type = Bool
//  if (<co-result>.Failure is null)
91   :     JumpIf        : label = 98
//  1
92   :     LoadValue     : value = <I8, 1>
//  (-1)
93   :     OpNegative    : type = I8
//  (<co-state-before-pause> = (-1))
94   :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = (-1))
95   :     StoreCapturedVar: var = 4
//  (<co-state-before-pause> = (-1));
96   :     Pop           
//  if (<co-result>.Failure is null)
97   :     Jump          : label = 106
//  1
98   :     LoadValue     : value = <I8, 1>
//  (-1)
99   :     OpNegative    : type = I8
//  (<co-state-before-pause> = (-1))
100  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = (-1))
101  :     StoreCapturedVar: var = 4
//  (<co-state-before-pause> = (-1));
102  :     Pop           
//  <co-result>
103  :     LoadLocalVar  : var = 1(<co-result>)
//  <co-result>.Failure
104  :     InvokeMethod  : methodInfo = GetFailure<system::CoroutineResult>, stackPatternCount = 0
//  raise <co-result>.Failure;
105  :     RaiseException
//  if ((<co-state-before-pause> != (-1)))
106  :     Jump          : label = 107
//  true
107  :     LoadValue     : value = <Bool, true>
//  while (true)
108  :     OpNot         : type = Bool
//  while (true)
109  :     JumpIf        : label = 230
//  <co-state>
110  :     LoadCapturedVar: var = 3(<captured><co-state>)
//  0
111  :     LoadValue     : value = <I8, 0>
//  (<co-state> == 0)
112  :     CompareValue  
//  if ((<co-state> == 0))
113  :     OpNot         : type = Bool
//  if ((<co-state> == 0))
114  :     JumpIf        : label = 145
//  0
115  :     LoadValue     : value = <I8, 0>
//  (<co0-for-begin>i = 0)
116  :     Duplicate     : stackPatternCount = 0
//  (<co0-for-begin>i = 0)
117  :     StoreCapturedVar: var = 0
//  (<co0-for-begin>i = 0);
118  :     Pop           
//  4
119  :     LoadValue     : value = <I8, 4>
//  (<co1-for-end>i = 4)
120  :     Duplicate     : stackPatternCount = 0
//  (<co1-for-end>i = 4)
121  :     StoreCapturedVar: var = 1
//  (<co1-for-end>i = 4);
122  :     Pop           
//  <co0-for-begin>i
123  :     LoadCapturedVar: var = 0(<captured><co0-for-begin>i)
//  (<co2>i = <co0-for-begin>i)
124  :     Duplicate     : stackPatternCount = 0
//  (<co2>i = <co0-for-begin>i)
125  :     StoreCapturedVar: var = 2
//  (<co2>i = <co0-for-begin>i);
126  :     Pop           
//  <co2>i
127  :     LoadCapturedVar: var = 2(<captured><co2>i)
//  <co1-for-end>i
128  :     LoadCapturedVar: var = 1(<captured><co1-for-end>i)
//  (<co2>i <= <co1-for-end>i)
129  :     CompareLiteral: type = I8
//  (<co2>i <= <co1-for-end>i)
130  :     OpLE          
//  if ((<co2>i <= <co1-for-end>i))
131  :     OpNot         : type = Bool
//  if ((<co2>i <= <co1-for-end>i))
132  :     JumpIf        : label = 139
//  3
133  :     LoadValue     : value = <I8, 3>
//  (<co-state> = 3)
134  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 3)
135  :     StoreCapturedVar: var = 3
//  (<co-state> = 3);
136  :     Pop           
//  continue;
137  :     Jump          : label = 107
//  if ((<co2>i <= <co1-for-end>i))
138  :     Jump          : label = 139
//  1
139  :     LoadValue     : value = <I8, 1>
//  (<co-state> = 1)
140  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 1)
141  :     StoreCapturedVar: var = 3
//  (<co-state> = 1);
142  :     Pop           
//  continue;
143  :     Jump          : label = 107
//  if ((<co-state> == 0))
144  :     Jump          : label = 145
//  <co-state>
145  :     LoadCapturedVar: var = 3(<captured><co-state>)
//  1
146  :     LoadValue     : value = <I8, 1>
//  (<co-state> == 1)
147  :     CompareValue  
//  if ((<co-state> == 1))
148  :     OpNot         : type = Bool
//  if ((<co-state> == 1))
149  :     JumpIf        : label = 157
//  Stopped
150  :     LoadValue     : value = <enum: 2>
//  SetStatus(Stopped)
151  :     InvokeWithContext: func = 5(<method:SetStatus<system::Coroutine>(5)> in <lambda:(3)> in GetNumbers), stackPatternCount = 1
//  SetStatus(Stopped);
152  :     Pop           
//  try
153  :     UninstallTry  : stackPatternCount = 0
//  return;
154  :     LoadValue     : value = <null>
//  return;
155  :     Return        
//  if ((<co-state> == 1))
156  :     Jump          : label = 157
//  <co-state>
157  :     LoadCapturedVar: var = 3(<captured><co-state>)
//  2
158  :     LoadValue     : value = <I8, 2>
//  (<co-state> == 2)
159  :     CompareValue  
//  if ((<co-state> == 2))
160  :     OpNot         : type = Bool
//  if ((<co-state> == 2))
161  :     JumpIf        : label = 204
//  <co-result>
162  :     LoadLocalVar  : var = 1(<co-result>)
//  <co-result> is not null
163  :     LoadValue     : value = <null>
//  <co-result> is not null
164  :     CompareReference
//  <co-result> is not null
165  :     OpNot         : type = Bool
//  if (<co-result> is not null)
166  :     OpNot         : type = Bool
//  if (<co-result> is not null)
167  :     JumpIf        : label = 180
//  <co-result>
168  :     LoadLocalVar  : var = 1(<co-result>)
//  <co-result>.Failure
169  :     InvokeMethod  : methodInfo = GetFailure<system::CoroutineResult>, stackPatternCount = 0
//  <co-result>.Failure is not null
170  :     LoadValue     : value = <null>
//  <co-result>.Failure is not null
171  :     CompareReference
//  <co-result>.Failure is not null
172  :     OpNot         : type = Bool
//  if (<co-result>.Failure is not null)
173  :     OpNot         : type = Bool
//  if (<co-result>.Failure is not null)
174  :     JumpIf        : label = 179
//  <co-result>
175  :     LoadLocalVar  : var = 1(<co-result>)
//  <co-result>.Failure
176  :     InvokeMethod  : methodInfo = GetFailure<system::CoroutineResult>, stackPatternCount = 0
//  raise <co-result>.Failure;
177  :     RaiseException
//  if (<co-result>.Failure is not null)
178  :     Jump          : label = 179
//  if (<co-result> is not null)
179  :     Jump          : label = 180
//  <co2>i
180  :     LoadCapturedVar: var = 2(<captured><co2>i)
//  1
181  :     LoadValue     : value = <I8, 1>
//  (<co2>i + 1)
182  :     OpAdd         : type = I8
//  (<co2>i = (<co2>i + 1))
183  :     Duplicate     : stackPatternCount = 0
//  (<co2>i = (<co2>i + 1))
184  :     StoreCapturedVar: var = 2
//  (<co2>i = (<co2>i + 1));
185  :     Pop           
//  <co2>i
186  :     LoadCapturedVar: var = 2(<captured><co2>i)
//  <co1-for-end>i
187  :     LoadCapturedVar: var = 1(<captured><co1-for-end>i)
//  (<co2>i <= <co1-for-end>i)
188  :     CompareLiteral: type = I8
//  (<co2>i <= <co1-for-end>i)
189  :     OpLE          
//  if ((<co2>i <= <co1-for-end>i))
190  :     OpNot         : type = Bool
//  if ((<co2>i <= <co1-for-end>i))
191  :     JumpIf        : label = 198
//  3
192  :     LoadValue     : value = <I8, 3>
//  (<co-state> = 3)
193  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 3)
194  :     StoreCapturedVar: var = 3
//  (<co-state> = 3);
195  :     Pop           
//  continue;
196  :     Jump          : label = 107
//  if ((<co2>i <= <co1-for-end>i))
197  :     Jump          : label = 198
//  1
198  :     LoadValue     : value = <I8, 1>
//  (<co-state> = 1)
199  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 1)
200  :     StoreCapturedVar: var = 3
//  (<co-state> = 1);
201  :     Pop           
//  continue;
202  :     Jump          : label = 107
//  if ((<co-state> == 2))
203  :     Jump          : label = 204
//  <co-state>
204  :     LoadCapturedVar: var = 3(<captured><co-state>)
//  3
205  :     LoadValue     : value = <I8, 3>
//  (<co-state> == 3)
206  :     CompareValue  
//  if ((<co-state> == 3))
207  :     OpNot         : type = Bool
//  if ((<co-state> == 3))
208  :     JumpIf        : label = 229
//  Waiting
209  :     LoadValue     : value = <enum: 0>
//  SetStatus(Waiting)
210  :     InvokeWithContext: func = 5(<method:SetStatus<system::Coroutine>(5)> in <lambda:(3)> in GetNumbers), stackPatternCount = 1
//  SetStatus(Waiting);
211  :     Pop           
//  <co-state>
212  :     LoadCapturedVar: var = 3(<captured><co-state>)
//  (<co-state-before-pause> = <co-state>)
213  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = <co-state>)
214  :     StoreCapturedVar: var = 4
//  (<co-state-before-pause> = <co-state>);
215  :     Pop           
//  2
216  :     LoadValue     : value = <I8, 2>
//  (<co-state> = 2)
217  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 2)
218  :     StoreCapturedVar: var = 3
//  (<co-state> = 2);
219  :     Pop           
//  <co-impl>
220  :     LoadCapturedVar: var = 7(<captured><co-impl>)
//  <co2>i
221  :     LoadCapturedVar: var = 2(<captured><co2>i)
//  ::system::EnumerableCoroutine::YieldAndPause(<co-impl>, <co2>i)
222  :     LoadValue     : value = <null>
//  ::system::EnumerableCoroutine::YieldAndPause(<co-impl>, <co2>i)
223  :     InvokeMethod  : methodInfo = YieldAndPause<system::EnumerableCoroutine>, stackPatternCount = 2
//  ::system::EnumerableCoroutine::YieldAndPause(<co-impl>, <co2>i);
224  :     Pop           
//  try
225  :     UninstallTry  : stackPatternCount = 0
//  return;
226  :     LoadValue     : value = <null>
//  return;
227  :     Return        
//  if ((<co-state> == 3))
228  :     Jump          : label = 229
//  while (true)
229  :     Jump          : label = 107
//  try
230  :     UninstallTry  : stackPatternCount = 0
//  try
231  :     Jump          : label = 246
//  try
232  :     LoadException 
//  try
233  :     StoreLocalVar : var = 2(<catch><co-ex>)
//  <co-ex>
234  :     LoadLocalVar  : var = 2(<catch><co-ex>)
//  SetFailure(<co-ex>)
235  :     InvokeWithContext: func = 4(<method:SetFailure<system::Coroutine>(4)> in <lambda:(3)> in GetNumbers), stackPatternCount = 1
//  SetFailure(<co-ex>);
236  :     Pop           
//  Stopped
237  :     LoadValue     : value = <enum: 2>
//  SetStatus(Stopped)
238  :     InvokeWithContext: func = 5(<method:SetStatus<system::Coroutine>(5)> in <lambda:(3)> in GetNumbers), stackPatternCount = 1
//  SetStatus(Stopped);
239  :     Pop           
//  <raise-exception>
240  :     LoadLocalVar  : var = 0(<raise-exception>)
//  if (<raise-exception>)
241  :     OpNot         : type = Bool
//  if (<raise-exception>)
242  :     JumpIf        : label = 246
//  raise;
243  :     LoadLocalVar  : var = 2(<catch><co-ex>)
//  raise;
244  :     RaiseException
//  if (<raise-exception>)
245  :     Jump          : label = 246
//  func Resume(<raise-exception> : ::system::Boolean, <co-result> : ::system::CoroutineResult^) : (::system::Void)
246  :     LoadValue     : value = <null>
//  func Resume(<raise-exception> : ::system::Boolean, <co-result> : ::system::CoroutineResult^) : (::system::Void)
247  :     Return        
//  GetNumbers()
248  :     Invoke        : func = 0(GetNumbers), stackPatternCount = 0
//  GetNumbers()
249  :     ConvertToType : flag = SharedPtr, typeDescriptor = system::Enumerable
//  var <for-enumerable>i = GetNumbers() of (::system::Enumerable^);
250  :     StoreLocalVar : var = 0(<for-enumerable>i)
//  <for-enumerable>i
251  :     LoadLocalVar  : var = 0(<for-enumerable>i)
//  <for-enumerable>i.CreateEnumerator()
252  :     InvokeMethod  : methodInfo = CreateEnumerator<system::Enumerable>, stackPatternCount = 0
//  var <for-enumerator>i = <for-enumerable>i.CreateEnumerator();
253  :     StoreLocalVar : var = 1(<for-enumerator>i)
//  <for-enumerator>i
254  :     LoadLocalVar  : var = 1(<for-enumerator>i)
//  <for-enumerator>i.Next()
255  :     InvokeMethod  : methodInfo = Next<system::Enumerator>, stackPatternCount = 0
//  while (<for-enumerator>i.Next())
256  :     OpNot         : type = Bool
//  while (<for-enumerator>i.Next())
257  :     JumpIf        : label = 276
//  <for-enumerator>i
258  :     LoadLocalVar  : var = 1(<for-enumerator>i)
//  <for-enumerator>i.GetCurrent()
259  :     InvokeMethod  : methodInfo = GetCurrent<system::Enumerator>, stackPatternCount = 0
//  <for-enumerator>i.GetCurrent()
260  :     ConvertToType : flag = BoxedValue, typeDescriptor = system::Int64
//  var i = (cast (::system::Int64) <for-enumerator>i.GetCurrent());
261  :     StoreLocalVar : var = 2(i)
//  ""
262  :     LoadValue     : value = <Bool, >
//  s
263  :     LoadGlobalVar : var = 0(s)
//  ("" & s)
264  :     OpConcat      
//  "["
265  :     LoadValue     : value = <Bool, [>
//  (("" & s) & "[")
266  :     OpConcat      
//  i
267  :     LoadLocalVar  : var = 2(i)
//  i
268  :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  ((("" & s) & "[") & i)
269  :     OpConcat      
//  "]"
270  :     LoadValue     : value = <Bool, ]>
//  (((("" & s) & "[") & i) & "]")
271  :     OpConcat      
//  (s = (((("" & s) & "[") & i) & "]"))
272  :     Duplicate     : stackPatternCount = 0
//  (s = (((("" & s) & "[") & i) & "]"))
273  :     StoreGlobalVar: var = 0(s)
//  (s = (((("" & s) & "[") & i) & "]"));
274  :     Pop           
//  while (<for-enumerator>i.Next())
275  :     Jump          : label = 254
//  s
276  :     LoadGlobalVar : var = 0(s)
//  return s;
277  :     Return        
//  func main() : (string)
278  :     LoadValue     : value = <null>
//  func main() : (string)
279  :     Return        
