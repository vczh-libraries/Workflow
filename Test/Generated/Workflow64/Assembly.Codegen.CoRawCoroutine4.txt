========================================================
Global Variables:
========================================================
s

========================================================
Functions:
========================================================
main (4 .. 74)
    Arguments:
    Captured Variables:
    Local Variables:
        coroutine
        i

<initialize> (0 .. 3)
    Arguments:
    Captured Variables:
    Local Variables:

<method:SetFailure<system::Coroutine>(2)> in main (75 .. 80)
    Arguments:
        <value>
    Captured Variables:
        <captured><co0-for-begin>i
        <captured><co1-for-end>i
        <captured><co2>i
        <captured><co3>o
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured-this>0
    Local Variables:

<method:SetStatus<system::Coroutine>(3)> in main (81 .. 86)
    Arguments:
        <value>
    Captured Variables:
        <captured><co0-for-begin>i
        <captured><co1-for-end>i
        <captured><co2>i
        <captured><co3>o
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured-this>0
    Local Variables:

<method:GetFailure<system::Coroutine>(6)> in main (87 .. 90)
    Arguments:
    Captured Variables:
        <captured><co0-for-begin>i
        <captured><co1-for-end>i
        <captured><co2>i
        <captured><co3>o
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured-this>0
    Local Variables:

<method:GetStatus<system::Coroutine>(7)> in main (91 .. 94)
    Arguments:
    Captured Variables:
        <captured><co0-for-begin>i
        <captured><co1-for-end>i
        <captured><co2>i
        <captured><co3>o
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured-this>0
    Local Variables:

<method:Resume<system::Coroutine>(8)> in main (95 .. 327)
    Arguments:
        <raise-exception>
        <coroutine-output>
    Captured Variables:
        <captured><co0-for-begin>i
        <captured><co1-for-end>i
        <captured><co2>i
        <captured><co3>o
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured-this>0
    Local Variables:
        <catch><co-ex>

========================================================
Instructions:
========================================================
//  ""
0    :     LoadValue     : value = <Bool, >
//  var s = "";
1    :     StoreGlobalVar: var = 0(s)
2    :     LoadValue     : value = <null>
3    :     Return        
//  0
4    :     LoadValue     : value = <I8, 0>
//  0
5    :     LoadValue     : value = <I8, 0>
//  0
6    :     LoadValue     : value = <I8, 0>
//  null
7    :     LoadValue     : value = <null>
//  0
8    :     LoadValue     : value = <I8, 0>
//  1
9    :     LoadValue     : value = <I8, 1>
//  (-1)
10   :     OpNegative    : type = I8
//  null
11   :     LoadValue     : value = <null>
//  Waiting
12   :     LoadValue     : value = <enum: 0>
//  new (::system::Coroutine^)
13   :     LoadValue     : value = <null>
//  new (::system::Coroutine^)
14   :     CreateClosureContext: stackPatternCount = 9
//  new (::system::Coroutine^)
15   :     LoadMethodInfo: methodInfo = GetFailure<system::Coroutine>
//  func GetFailure() : (::system::Exception^)
16   :     LoadFunction  : func = 4(<method:GetFailure<system::Coroutine>(6)> in main)
//  new (::system::Coroutine^)
17   :     LoadMethodInfo: methodInfo = GetStatus<system::Coroutine>
//  func GetStatus() : (::system::CoroutineStatus)
18   :     LoadFunction  : func = 5(<method:GetStatus<system::Coroutine>(7)> in main)
//  new (::system::Coroutine^)
19   :     LoadMethodInfo: methodInfo = Resume<system::Coroutine>
//  func Resume(<raise-exception> : ::system::Boolean, <coroutine-output> : ::system::CoroutineResult^) : (::system::Void)
20   :     LoadFunction  : func = 6(<method:Resume<system::Coroutine>(8)> in main)
//  new (::system::Coroutine^)
21   :     CreateInterface: methodInfo = <system::Coroutine>, stackPatternCount = 6
//  var coroutine = new (::system::Coroutine^)
22   :     StoreLocalVar : var = 0(coroutine)
//  0
23   :     LoadValue     : value = <I8, 0>
//  var i = 0;
24   :     StoreLocalVar : var = 1(i)
//  coroutine
25   :     LoadLocalVar  : var = 0(coroutine)
//  coroutine.Status
26   :     InvokeMethod  : methodInfo = GetStatus<system::Coroutine>, stackPatternCount = 0
//  CoroutineStatus::Stopped
27   :     LoadValue     : value = <enum: 2>
//  (coroutine.Status != CoroutineStatus::Stopped)
28   :     CompareValue  
//  (coroutine.Status != CoroutineStatus::Stopped)
29   :     OpNot         : type = Bool
//  while ((coroutine.Status != CoroutineStatus::Stopped))
30   :     OpNot         : type = Bool
//  while ((coroutine.Status != CoroutineStatus::Stopped))
31   :     JumpIf        : label = 57
//  false
32   :     LoadValue     : value = <Bool, false>
//  null
33   :     LoadValue     : value = <null>
//  coroutine
34   :     LoadLocalVar  : var = 0(coroutine)
//  coroutine.Resume(false, null)
35   :     InvokeMethod  : methodInfo = Resume<system::Coroutine>, stackPatternCount = 2
//  coroutine.Resume(false, null);
36   :     Pop           
//  ""
37   :     LoadValue     : value = <Bool, >
//  s
38   :     LoadGlobalVar : var = 0(s)
//  ("" & s)
39   :     OpConcat      
//  "[-"
40   :     LoadValue     : value = <Bool, [->
//  (("" & s) & "[-")
41   :     OpConcat      
//  i
42   :     LoadLocalVar  : var = 1(i)
//  i
43   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  ((("" & s) & "[-") & i)
44   :     OpConcat      
//  "]"
45   :     LoadValue     : value = <Bool, ]>
//  (((("" & s) & "[-") & i) & "]")
46   :     OpConcat      
//  (s = (((("" & s) & "[-") & i) & "]"))
47   :     Duplicate     : stackPatternCount = 0
//  (s = (((("" & s) & "[-") & i) & "]"))
48   :     StoreGlobalVar: var = 0(s)
//  (s = (((("" & s) & "[-") & i) & "]"));
49   :     Pop           
//  i
50   :     LoadLocalVar  : var = 1(i)
//  1
51   :     LoadValue     : value = <I8, 1>
//  (i + 1)
52   :     OpAdd         : type = I8
//  (i = (i + 1))
53   :     Duplicate     : stackPatternCount = 0
//  (i = (i + 1))
54   :     StoreLocalVar : var = 1(i)
//  (i = (i + 1));
55   :     Pop           
//  while ((coroutine.Status != CoroutineStatus::Stopped))
56   :     Jump          : label = 25
//  ""
57   :     LoadValue     : value = <Bool, >
//  s
58   :     LoadGlobalVar : var = 0(s)
//  ("" & s)
59   :     OpConcat      
//  "["
60   :     LoadValue     : value = <Bool, [>
//  (("" & s) & "[")
61   :     OpConcat      
//  coroutine
62   :     LoadLocalVar  : var = 0(coroutine)
//  coroutine.Failure
63   :     InvokeMethod  : methodInfo = GetFailure<system::Coroutine>, stackPatternCount = 0
//  coroutine.Failure.Message
64   :     InvokeMethod  : methodInfo = GetMessage<system::Exception>, stackPatternCount = 0
//  ((("" & s) & "[") & coroutine.Failure.Message)
65   :     OpConcat      
//  "]"
66   :     LoadValue     : value = <Bool, ]>
//  (((("" & s) & "[") & coroutine.Failure.Message) & "]")
67   :     OpConcat      
//  (s = (((("" & s) & "[") & coroutine.Failure.Message) & "]"))
68   :     Duplicate     : stackPatternCount = 0
//  (s = (((("" & s) & "[") & coroutine.Failure.Message) & "]"))
69   :     StoreGlobalVar: var = 0(s)
//  (s = (((("" & s) & "[") & coroutine.Failure.Message) & "]"));
70   :     Pop           
//  s
71   :     LoadGlobalVar : var = 0(s)
//  return s;
72   :     Return        
//  func main() : (string)
73   :     LoadValue     : value = <null>
//  func main() : (string)
74   :     Return        
//  <value>
75   :     LoadLocalVar  : var = 0(<value>)
//  (<prop>Failure = <value>)
76   :     Duplicate     : stackPatternCount = 0
//  (<prop>Failure = <value>)
77   :     StoreCapturedVar: var = 6
//  (<prop>Failure = <value>);
78   :     Pop           
//  func SetFailure(<value> : ::system::Exception^) : (void)
79   :     LoadValue     : value = <null>
//  func SetFailure(<value> : ::system::Exception^) : (void)
80   :     Return        
//  <value>
81   :     LoadLocalVar  : var = 0(<value>)
//  (<prop>Status = <value>)
82   :     Duplicate     : stackPatternCount = 0
//  (<prop>Status = <value>)
83   :     StoreCapturedVar: var = 7
//  (<prop>Status = <value>);
84   :     Pop           
//  func SetStatus(<value> : ::system::CoroutineStatus) : (void)
85   :     LoadValue     : value = <null>
//  func SetStatus(<value> : ::system::CoroutineStatus) : (void)
86   :     Return        
//  <prop>Failure
87   :     LoadCapturedVar: var = 6(<captured><prop>Failure)
//  return <prop>Failure;
88   :     Return        
//  func GetFailure() : (::system::Exception^)
89   :     LoadValue     : value = <null>
//  func GetFailure() : (::system::Exception^)
90   :     Return        
//  <prop>Status
91   :     LoadCapturedVar: var = 7(<captured><prop>Status)
//  return <prop>Status;
92   :     Return        
//  func GetStatus() : (::system::CoroutineStatus)
93   :     LoadValue     : value = <null>
//  func GetStatus() : (::system::CoroutineStatus)
94   :     Return        
//  Status
95   :     LoadCapturedVar: var = 8(<captured-this>0)
//  Status
96   :     InvokeMethod  : methodInfo = GetStatus<system::Coroutine>, stackPatternCount = 0
//  ::system::CoroutineStatus::Waiting
97   :     LoadValue     : value = <enum: 0>
//  (Status != ::system::CoroutineStatus::Waiting)
98   :     CompareValue  
//  (Status != ::system::CoroutineStatus::Waiting)
99   :     OpNot         : type = Bool
//  if ((Status != ::system::CoroutineStatus::Waiting))
100  :     OpNot         : type = Bool
//  if ((Status != ::system::CoroutineStatus::Waiting))
101  :     JumpIf        : label = 105
//  "Resume should be called only when the coroutine is in the waiting status."
102  :     LoadValue     : value = <Bool, Resume should be called only when the coroutine is in the waiting status.>
//  raise "Resume should be called only when the coroutine is in the waiting status.";
103  :     RaiseException
//  if ((Status != ::system::CoroutineStatus::Waiting))
104  :     Jump          : label = 105
//  Executing
105  :     LoadValue     : value = <enum: 1>
//  SetStatus(Executing)
106  :     InvokeWithContext: func = 3(<method:SetStatus<system::Coroutine>(3)> in main), stackPatternCount = 1
//  SetStatus(Executing);
107  :     Pop           
//  try
108  :     InstallTry    : label = 312
//  <co-state-before-pause>
109  :     LoadCapturedVar: var = 5(<captured><co-state-before-pause>)
//  1
110  :     LoadValue     : value = <I8, 1>
//  (-1)
111  :     OpNegative    : type = I8
//  (<co-state-before-pause> != (-1))
112  :     CompareValue  
//  (<co-state-before-pause> != (-1))
113  :     OpNot         : type = Bool
//  if ((<co-state-before-pause> != (-1)))
114  :     OpNot         : type = Bool
//  if ((<co-state-before-pause> != (-1)))
115  :     JumpIf        : label = 148
//  <coroutine-output>
116  :     LoadLocalVar  : var = 1(<coroutine-output>)
//  <coroutine-output> is null
117  :     LoadValue     : value = <null>
//  <coroutine-output> is null
118  :     CompareReference
//  if (<coroutine-output> is null)
119  :     OpNot         : type = Bool
//  if (<coroutine-output> is null)
120  :     JumpIf        : label = 127
//  1
121  :     LoadValue     : value = <I8, 1>
//  (-1)
122  :     OpNegative    : type = I8
//  (<co-state-before-pause> = (-1))
123  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = (-1))
124  :     StoreCapturedVar: var = 5
//  (<co-state-before-pause> = (-1));
125  :     Pop           
//  if (<coroutine-output> is null)
126  :     Jump          : label = 147
//  <coroutine-output>
127  :     LoadLocalVar  : var = 1(<coroutine-output>)
//  <coroutine-output>.Failure
128  :     InvokeMethod  : methodInfo = GetFailure<system::CoroutineResult>, stackPatternCount = 0
//  <coroutine-output>.Failure is null
129  :     LoadValue     : value = <null>
//  <coroutine-output>.Failure is null
130  :     CompareReference
//  if (<coroutine-output>.Failure is null)
131  :     OpNot         : type = Bool
//  if (<coroutine-output>.Failure is null)
132  :     JumpIf        : label = 139
//  1
133  :     LoadValue     : value = <I8, 1>
//  (-1)
134  :     OpNegative    : type = I8
//  (<co-state-before-pause> = (-1))
135  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = (-1))
136  :     StoreCapturedVar: var = 5
//  (<co-state-before-pause> = (-1));
137  :     Pop           
//  if (<coroutine-output>.Failure is null)
138  :     Jump          : label = 147
//  1
139  :     LoadValue     : value = <I8, 1>
//  (-1)
140  :     OpNegative    : type = I8
//  (<co-state-before-pause> = (-1))
141  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = (-1))
142  :     StoreCapturedVar: var = 5
//  (<co-state-before-pause> = (-1));
143  :     Pop           
//  <coroutine-output>
144  :     LoadLocalVar  : var = 1(<coroutine-output>)
//  <coroutine-output>.Failure
145  :     InvokeMethod  : methodInfo = GetFailure<system::CoroutineResult>, stackPatternCount = 0
//  raise <coroutine-output>.Failure;
146  :     RaiseException
//  if ((<co-state-before-pause> != (-1)))
147  :     Jump          : label = 148
//  true
148  :     LoadValue     : value = <Bool, true>
//  while (true)
149  :     OpNot         : type = Bool
//  while (true)
150  :     JumpIf        : label = 310
//  <co-state>
151  :     LoadCapturedVar: var = 4(<captured><co-state>)
//  0
152  :     LoadValue     : value = <I8, 0>
//  (<co-state> == 0)
153  :     CompareValue  
//  if ((<co-state> == 0))
154  :     OpNot         : type = Bool
//  if ((<co-state> == 0))
155  :     JumpIf        : label = 188
//  0
156  :     LoadValue     : value = <I8, 0>
//  (<co0-for-begin>i = 0)
157  :     Duplicate     : stackPatternCount = 0
//  (<co0-for-begin>i = 0)
158  :     StoreCapturedVar: var = 0
//  (<co0-for-begin>i = 0);
159  :     Pop           
//  4
160  :     LoadValue     : value = <I8, 4>
//  1
161  :     LoadValue     : value = <I8, 1>
//  (4 - 1)
162  :     OpSub         : type = I8
//  (<co1-for-end>i = (4 - 1))
163  :     Duplicate     : stackPatternCount = 0
//  (<co1-for-end>i = (4 - 1))
164  :     StoreCapturedVar: var = 1
//  (<co1-for-end>i = (4 - 1));
165  :     Pop           
//  <co0-for-begin>i
166  :     LoadCapturedVar: var = 0(<captured><co0-for-begin>i)
//  (<co2>i = <co0-for-begin>i)
167  :     Duplicate     : stackPatternCount = 0
//  (<co2>i = <co0-for-begin>i)
168  :     StoreCapturedVar: var = 2
//  (<co2>i = <co0-for-begin>i);
169  :     Pop           
//  <co2>i
170  :     LoadCapturedVar: var = 2(<captured><co2>i)
//  <co1-for-end>i
171  :     LoadCapturedVar: var = 1(<captured><co1-for-end>i)
//  (<co2>i <= <co1-for-end>i)
172  :     CompareLiteral: type = I8
//  (<co2>i <= <co1-for-end>i)
173  :     OpLE          
//  if ((<co2>i <= <co1-for-end>i))
174  :     OpNot         : type = Bool
//  if ((<co2>i <= <co1-for-end>i))
175  :     JumpIf        : label = 182
//  3
176  :     LoadValue     : value = <I8, 3>
//  (<co-state> = 3)
177  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 3)
178  :     StoreCapturedVar: var = 4
//  (<co-state> = 3);
179  :     Pop           
//  continue;
180  :     Jump          : label = 148
//  if ((<co2>i <= <co1-for-end>i))
181  :     Jump          : label = 182
//  1
182  :     LoadValue     : value = <I8, 1>
//  (<co-state> = 1)
183  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 1)
184  :     StoreCapturedVar: var = 4
//  (<co-state> = 1);
185  :     Pop           
//  continue;
186  :     Jump          : label = 148
//  if ((<co-state> == 0))
187  :     Jump          : label = 188
//  <co-state>
188  :     LoadCapturedVar: var = 4(<captured><co-state>)
//  1
189  :     LoadValue     : value = <I8, 1>
//  (<co-state> == 1)
190  :     CompareValue  
//  if ((<co-state> == 1))
191  :     OpNot         : type = Bool
//  if ((<co-state> == 1))
192  :     JumpIf        : label = 200
//  Stopped
193  :     LoadValue     : value = <enum: 2>
//  SetStatus(Stopped)
194  :     InvokeWithContext: func = 3(<method:SetStatus<system::Coroutine>(3)> in main), stackPatternCount = 1
//  SetStatus(Stopped);
195  :     Pop           
//  try
196  :     UninstallTry  : stackPatternCount = 0
//  return;
197  :     LoadValue     : value = <null>
//  return;
198  :     Return        
//  if ((<co-state> == 1))
199  :     Jump          : label = 200
//  <co-state>
200  :     LoadCapturedVar: var = 4(<captured><co-state>)
//  2
201  :     LoadValue     : value = <I8, 2>
//  (<co-state> == 2)
202  :     CompareValue  
//  if ((<co-state> == 2))
203  :     OpNot         : type = Bool
//  if ((<co-state> == 2))
204  :     JumpIf        : label = 229
//  <co2>i
205  :     LoadCapturedVar: var = 2(<captured><co2>i)
//  1
206  :     LoadValue     : value = <I8, 1>
//  (<co2>i + 1)
207  :     OpAdd         : type = I8
//  (<co2>i = (<co2>i + 1))
208  :     Duplicate     : stackPatternCount = 0
//  (<co2>i = (<co2>i + 1))
209  :     StoreCapturedVar: var = 2
//  (<co2>i = (<co2>i + 1));
210  :     Pop           
//  <co2>i
211  :     LoadCapturedVar: var = 2(<captured><co2>i)
//  <co1-for-end>i
212  :     LoadCapturedVar: var = 1(<captured><co1-for-end>i)
//  (<co2>i <= <co1-for-end>i)
213  :     CompareLiteral: type = I8
//  (<co2>i <= <co1-for-end>i)
214  :     OpLE          
//  if ((<co2>i <= <co1-for-end>i))
215  :     OpNot         : type = Bool
//  if ((<co2>i <= <co1-for-end>i))
216  :     JumpIf        : label = 223
//  3
217  :     LoadValue     : value = <I8, 3>
//  (<co-state> = 3)
218  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 3)
219  :     StoreCapturedVar: var = 4
//  (<co-state> = 3);
220  :     Pop           
//  continue;
221  :     Jump          : label = 148
//  if ((<co2>i <= <co1-for-end>i))
222  :     Jump          : label = 223
//  1
223  :     LoadValue     : value = <I8, 1>
//  (<co-state> = 1)
224  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 1)
225  :     StoreCapturedVar: var = 4
//  (<co-state> = 1);
226  :     Pop           
//  continue;
227  :     Jump          : label = 148
//  if ((<co-state> == 2))
228  :     Jump          : label = 229
//  <co-state>
229  :     LoadCapturedVar: var = 4(<captured><co-state>)
//  3
230  :     LoadValue     : value = <I8, 3>
//  (<co-state> == 3)
231  :     CompareValue  
//  if ((<co-state> == 3))
232  :     OpNot         : type = Bool
//  if ((<co-state> == 3))
233  :     JumpIf        : label = 276
//  <co2>i
234  :     LoadCapturedVar: var = 2(<captured><co2>i)
//  2
235  :     LoadValue     : value = <I8, 2>
//  (<co2>i == 2)
236  :     CompareValue  
//  (<co2>i == 2) ? null : {0;}
237  :     JumpIf        : label = 241
//  0
238  :     LoadValue     : value = <I8, 0>
//  {0;}
239  :     NewList       : stackPatternCount = 1
//  (<co2>i == 2) ? null : {0;}
240  :     Jump          : label = 242
//  null
241  :     LoadValue     : value = <null>
//  (<co3>o = (<co2>i == 2) ? null : {0;})
242  :     Duplicate     : stackPatternCount = 0
//  (<co3>o = (<co2>i == 2) ? null : {0;})
243  :     StoreCapturedVar: var = 3
//  (<co3>o = (<co2>i == 2) ? null : {0;});
244  :     Pop           
//  <co3>o
245  :     LoadCapturedVar: var = 3(<captured><co3>o)
//  <co3>o is not null
246  :     LoadValue     : value = <null>
//  <co3>o is not null
247  :     CompareReference
//  <co3>o is not null
248  :     OpNot         : type = Bool
//  if (<co3>o is not null)
249  :     OpNot         : type = Bool
//  if (<co3>o is not null)
250  :     JumpIf        : label = 270
//  ""
251  :     LoadValue     : value = <Bool, >
//  s
252  :     LoadGlobalVar : var = 0(s)
//  ("" & s)
253  :     OpConcat      
//  "[+"
254  :     LoadValue     : value = <Bool, [+>
//  (("" & s) & "[+")
255  :     OpConcat      
//  <co2>i
256  :     LoadCapturedVar: var = 2(<captured><co2>i)
//  <co2>i
257  :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  ((("" & s) & "[+") & <co2>i)
258  :     OpConcat      
//  "]"
259  :     LoadValue     : value = <Bool, ]>
//  (((("" & s) & "[+") & <co2>i) & "]")
260  :     OpConcat      
//  (s = (((("" & s) & "[+") & <co2>i) & "]"))
261  :     Duplicate     : stackPatternCount = 0
//  (s = (((("" & s) & "[+") & <co2>i) & "]"))
262  :     StoreGlobalVar: var = 0(s)
//  (s = (((("" & s) & "[+") & <co2>i) & "]"));
263  :     Pop           
//  4
264  :     LoadValue     : value = <I8, 4>
//  (<co-state> = 4)
265  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 4)
266  :     StoreCapturedVar: var = 4
//  (<co-state> = 4);
267  :     Pop           
//  continue;
268  :     Jump          : label = 148
//  if (<co3>o is not null)
269  :     Jump          : label = 270
//  5
270  :     LoadValue     : value = <I8, 5>
//  (<co-state> = 5)
271  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 5)
272  :     StoreCapturedVar: var = 4
//  (<co-state> = 5);
273  :     Pop           
//  continue;
274  :     Jump          : label = 148
//  if ((<co-state> == 3))
275  :     Jump          : label = 276
//  <co-state>
276  :     LoadCapturedVar: var = 4(<captured><co-state>)
//  4
277  :     LoadValue     : value = <I8, 4>
//  (<co-state> == 4)
278  :     CompareValue  
//  if ((<co-state> == 4))
279  :     OpNot         : type = Bool
//  if ((<co-state> == 4))
280  :     JumpIf        : label = 296
//  Waiting
281  :     LoadValue     : value = <enum: 0>
//  SetStatus(Waiting)
282  :     InvokeWithContext: func = 3(<method:SetStatus<system::Coroutine>(3)> in main), stackPatternCount = 1
//  SetStatus(Waiting);
283  :     Pop           
//  <co-state>
284  :     LoadCapturedVar: var = 4(<captured><co-state>)
//  (<co-state-before-pause> = <co-state>)
285  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = <co-state>)
286  :     StoreCapturedVar: var = 5
//  (<co-state-before-pause> = <co-state>);
287  :     Pop           
//  2
288  :     LoadValue     : value = <I8, 2>
//  (<co-state> = 2)
289  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 2)
290  :     StoreCapturedVar: var = 4
//  (<co-state> = 2);
291  :     Pop           
//  try
292  :     UninstallTry  : stackPatternCount = 0
//  return;
293  :     LoadValue     : value = <null>
//  return;
294  :     Return        
//  if ((<co-state> == 4))
295  :     Jump          : label = 296
//  <co-state>
296  :     LoadCapturedVar: var = 4(<captured><co-state>)
//  5
297  :     LoadValue     : value = <I8, 5>
//  (<co-state> == 5)
298  :     CompareValue  
//  if ((<co-state> == 5))
299  :     OpNot         : type = Bool
//  if ((<co-state> == 5))
300  :     JumpIf        : label = 309
//  "*"
301  :     LoadValue     : value = <Bool, *>
//  raise "*";
302  :     RaiseException
//  2
303  :     LoadValue     : value = <I8, 2>
//  (<co-state> = 2)
304  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 2)
305  :     StoreCapturedVar: var = 4
//  (<co-state> = 2);
306  :     Pop           
//  continue;
307  :     Jump          : label = 148
//  if ((<co-state> == 5))
308  :     Jump          : label = 309
//  while (true)
309  :     Jump          : label = 148
//  try
310  :     UninstallTry  : stackPatternCount = 0
//  try
311  :     Jump          : label = 326
//  try
312  :     LoadException 
//  try
313  :     StoreLocalVar : var = 2(<catch><co-ex>)
//  <co-ex>
314  :     LoadLocalVar  : var = 2(<catch><co-ex>)
//  SetFailure(<co-ex>)
315  :     InvokeWithContext: func = 2(<method:SetFailure<system::Coroutine>(2)> in main), stackPatternCount = 1
//  SetFailure(<co-ex>);
316  :     Pop           
//  Stopped
317  :     LoadValue     : value = <enum: 2>
//  SetStatus(Stopped)
318  :     InvokeWithContext: func = 3(<method:SetStatus<system::Coroutine>(3)> in main), stackPatternCount = 1
//  SetStatus(Stopped);
319  :     Pop           
//  <raise-exception>
320  :     LoadLocalVar  : var = 0(<raise-exception>)
//  if (<raise-exception>)
321  :     OpNot         : type = Bool
//  if (<raise-exception>)
322  :     JumpIf        : label = 326
//  raise;
323  :     LoadLocalVar  : var = 2(<catch><co-ex>)
//  raise;
324  :     RaiseException
//  if (<raise-exception>)
325  :     Jump          : label = 326
//  func Resume(<raise-exception> : ::system::Boolean, <coroutine-output> : ::system::CoroutineResult^) : (::system::Void)
326  :     LoadValue     : value = <null>
//  func Resume(<raise-exception> : ::system::Boolean, <coroutine-output> : ::system::CoroutineResult^) : (::system::Void)
327  :     Return        
