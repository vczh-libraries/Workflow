========================================================
Global Variables:
========================================================

========================================================
Functions:
========================================================
main (2 .. 87)
    Arguments:
    Captured Variables:
    Local Variables:
        b
        i8
        i16
        i32
        i64
        u8
        u16
        u32
        u64
        f32
        f64
        s

<initialize> (0 .. 1)
    Arguments:
    Captured Variables:
    Local Variables:

========================================================
Instructions:
========================================================
0    :     LoadValue     : value = <null>
1    :     Return        
//  false
2    :     LoadValue     : value = <Bool, false>
//  var b = false;
3    :     StoreLocalVar : var = 0(b)
//  1
4    :     LoadValue     : value = <I1, 1>
//  var i8 = 1 of (Int8);
5    :     StoreLocalVar : var = 1(i8)
//  2
6    :     LoadValue     : value = <I2, 2>
//  var i16 = 2 of (Int16);
7    :     StoreLocalVar : var = 2(i16)
//  4
8    :     LoadValue     : value = <I4, 4>
//  var i32 = 4 of (Int32);
9    :     StoreLocalVar : var = 3(i32)
//  8
10   :     LoadValue     : value = <I8, 8>
//  var i64 = 8 of (Int64);
11   :     StoreLocalVar : var = 4(i64)
//  1
12   :     LoadValue     : value = <U1, 1>
//  var u8 = 1 of (UInt8);
13   :     StoreLocalVar : var = 5(u8)
//  2
14   :     LoadValue     : value = <U2, 2>
//  var u16 = 2 of (UInt16);
15   :     StoreLocalVar : var = 6(u16)
//  4
16   :     LoadValue     : value = <U4, 4>
//  var u32 = 4 of (UInt32);
17   :     StoreLocalVar : var = 7(u32)
//  8
18   :     LoadValue     : value = <U8, 8>
//  var u64 = 8 of (UInt64);
19   :     StoreLocalVar : var = 8(u64)
//  1.5
20   :     LoadValue     : value = <F4, 1.5>
//  var f32 = 1.5 of (float);
21   :     StoreLocalVar : var = 9(f32)
//  3
22   :     LoadValue     : value = <F8, 3>
//  var f64 = 3 of (double);
23   :     StoreLocalVar : var = 10(f64)
//  "text"
24   :     LoadValue     : value = <Bool, text>
//  var s = "text" of (string);
25   :     StoreLocalVar : var = 11(s)
//  b
26   :     LoadLocalVar  : var = 0(b)
//  true
27   :     LoadValue     : value = <Bool, true>
//  (b or true)
28   :     OpOr          : type = Bool
//  (b or true)
29   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  ", "
30   :     LoadValue     : value = <Bool, , >
//  ((b or true) & ", ")
31   :     OpConcat      
//  b
32   :     LoadLocalVar  : var = 0(b)
//  false
33   :     LoadValue     : value = <Bool, false>
//  (b or false)
34   :     OpOr          : type = Bool
//  (b or false)
35   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  (((b or true) & ", ") & (b or false))
36   :     OpConcat      
//  ", "
37   :     LoadValue     : value = <Bool, , >
//  ((((b or true) & ", ") & (b or false)) & ", ")
38   :     OpConcat      
//  i8
39   :     LoadLocalVar  : var = 1(i8)
//  i8
40   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::Int16
//  i16
41   :     LoadLocalVar  : var = 2(i16)
//  (i8 or i16)
42   :     OpOr          : type = I2
//  (i8 or i16)
43   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  (((((b or true) & ", ") & (b or false)) & ", ") & (i8 or i16))
44   :     OpConcat      
//  ", "
45   :     LoadValue     : value = <Bool, , >
//  ((((((b or true) & ", ") & (b or false)) & ", ") & (i8 or i16)) & ", ")
46   :     OpConcat      
//  i16
47   :     LoadLocalVar  : var = 2(i16)
//  i16
48   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::Int32
//  i32
49   :     LoadLocalVar  : var = 3(i32)
//  (i16 or i32)
50   :     OpOr          : type = I4
//  (i16 or i32)
51   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  (((((((b or true) & ", ") & (b or false)) & ", ") & (i8 or i16)) & ", ") & (i16 or i32))
52   :     OpConcat      
//  ", "
53   :     LoadValue     : value = <Bool, , >
//  ((((((((b or true) & ", ") & (b or false)) & ", ") & (i8 or i16)) & ", ") & (i16 or i32)) & ", ")
54   :     OpConcat      
//  i32
55   :     LoadLocalVar  : var = 3(i32)
//  i32
56   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::Int64
//  i64
57   :     LoadLocalVar  : var = 4(i64)
//  (i32 or i64)
58   :     OpOr          : type = I8
//  (i32 or i64)
59   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  (((((((((b or true) & ", ") & (b or false)) & ", ") & (i8 or i16)) & ", ") & (i16 or i32)) & ", ") & (i32 or i64))
60   :     OpConcat      
//  ", "
61   :     LoadValue     : value = <Bool, , >
//  ((((((((((b or true) & ", ") & (b or false)) & ", ") & (i8 or i16)) & ", ") & (i16 or i32)) & ", ") & (i32 or i64)) & ", ")
62   :     OpConcat      
//  u8
63   :     LoadLocalVar  : var = 5(u8)
//  u8
64   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::UInt16
//  u16
65   :     LoadLocalVar  : var = 6(u16)
//  (u8 or u16)
66   :     OpOr          : type = U2
//  (u8 or u16)
67   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  (((((((((((b or true) & ", ") & (b or false)) & ", ") & (i8 or i16)) & ", ") & (i16 or i32)) & ", ") & (i32 or i64)) & ", ") & (u8 or u16))
68   :     OpConcat      
//  ", "
69   :     LoadValue     : value = <Bool, , >
//  ((((((((((((b or true) & ", ") & (b or false)) & ", ") & (i8 or i16)) & ", ") & (i16 or i32)) & ", ") & (i32 or i64)) & ", ") & (u8 or u16)) & ", ")
70   :     OpConcat      
//  u16
71   :     LoadLocalVar  : var = 6(u16)
//  u16
72   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::UInt32
//  u32
73   :     LoadLocalVar  : var = 7(u32)
//  (u16 or u32)
74   :     OpOr          : type = U4
//  (u16 or u32)
75   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  (((((((((((((b or true) & ", ") & (b or false)) & ", ") & (i8 or i16)) & ", ") & (i16 or i32)) & ", ") & (i32 or i64)) & ", ") & (u8 or u16)) & ", ") & (u16 or u32))
76   :     OpConcat      
//  ", "
77   :     LoadValue     : value = <Bool, , >
//  ((((((((((((((b or true) & ", ") & (b or false)) & ", ") & (i8 or i16)) & ", ") & (i16 or i32)) & ", ") & (i32 or i64)) & ", ") & (u8 or u16)) & ", ") & (u16 or u32)) & ", ")
78   :     OpConcat      
//  u32
79   :     LoadLocalVar  : var = 7(u32)
//  u32
80   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::UInt64
//  u64
81   :     LoadLocalVar  : var = 8(u64)
//  (u32 or u64)
82   :     OpOr          : type = U8
//  (u32 or u64)
83   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  (((((((((((((((b or true) & ", ") & (b or false)) & ", ") & (i8 or i16)) & ", ") & (i16 or i32)) & ", ") & (i32 or i64)) & ", ") & (u8 or u16)) & ", ") & (u16 or u32)) & ", ") & (u32 or u64))
84   :     OpConcat      
//  return (((((((((((((((b or true) & ", ") & (b or false)) & ", ") & (i8 or i16)) & ", ") & (i16 or i32)) & ", ") & (i32 or i64)) & ", ") & (u8 or u16)) & ", ") & (u16 or u32)) & ", ") & (u32 or u64));
85   :     Return        
//  func main() : (string)
86   :     LoadValue     : value = <null>
//  func main() : (string)
87   :     Return        
