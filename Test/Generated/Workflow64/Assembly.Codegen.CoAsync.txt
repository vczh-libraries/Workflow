========================================================
Global Variables:
========================================================
s

========================================================
Functions:
========================================================
CoAsync_types::IStringAsync::CastResult (4 .. 8)
    Arguments:
        value
    Captured Variables:
    Local Variables:

CoAsync_types::IStringAsync::StoreResult (9 .. 12)
    Arguments:
        value
    Captured Variables:
    Local Variables:

GetStringAsync (13 .. 30)
    Arguments:
        x
    Captured Variables:
    Local Variables:
        <co-mixin-source-variable>

GetStringAsync2 (207 .. 230)
    Arguments:
        x
    Captured Variables:
    Local Variables:
        future

GetMultipleString (264 .. 271)
    Arguments:
    Captured Variables:
    Local Variables:

main (655 .. 664)
    Arguments:
    Captured Variables:
    Local Variables:

<initialize> (0 .. 3)
    Arguments:
    Captured Variables:
    Local Variables:

<lambda:(7)> in GetStringAsync (31 .. 49)
    Arguments:
        <co-impl>
    Captured Variables:
        <captured>x
    Local Variables:

<method:Execute<CoAsync_types::IStringAsync>(8)> in GetStringAsync (195 .. 201)
    Arguments:
        <mixin-parameter>callback
        <mixin-parameter>context
    Captured Variables:
        <captured><mixin-source>
        <captured-this>0
    Local Variables:

<method:GetStatus<CoAsync_types::IStringAsync>(9)> in GetStringAsync (202 .. 206)
    Arguments:
    Captured Variables:
        <captured><mixin-source>
        <captured-this>0
    Local Variables:

<method:SetFailure<system::Coroutine>(10)> in <lambda:(7)> in GetStringAsync (50 .. 55)
    Arguments:
        <value>
    Captured Variables:
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured>x
        <captured><co-impl>
        <captured-this>0
    Local Variables:

<method:SetStatus<system::Coroutine>(11)> in <lambda:(7)> in GetStringAsync (56 .. 61)
    Arguments:
        <value>
    Captured Variables:
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured>x
        <captured><co-impl>
        <captured-this>0
    Local Variables:

<method:GetFailure<system::Coroutine>(14)> in <lambda:(7)> in GetStringAsync (62 .. 65)
    Arguments:
    Captured Variables:
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured>x
        <captured><co-impl>
        <captured-this>0
    Local Variables:

<method:GetStatus<system::Coroutine>(15)> in <lambda:(7)> in GetStringAsync (66 .. 69)
    Arguments:
    Captured Variables:
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured>x
        <captured><co-impl>
        <captured-this>0
    Local Variables:

<method:Resume<system::Coroutine>(16)> in <lambda:(7)> in GetStringAsync (70 .. 194)
    Arguments:
        <raise-exception>
        <co-result>
    Captured Variables:
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured>x
        <captured><co-impl>
        <captured-this>0
    Local Variables:
        <catch><co-ex>

<lambda:(15)> in GetStringAsync2 (231 .. 251)
    Arguments:
    Captured Variables:
        <captured>x
        <captured>future
    Local Variables:

<method:Execute<CoAsync_types::IStringAsync>(16)> in GetStringAsync2 (252 .. 258)
    Arguments:
        <mixin-parameter>callback
        <mixin-parameter>context
    Captured Variables:
        <captured><mixin-source>
        <captured-this>0
    Local Variables:

<method:GetStatus<CoAsync_types::IStringAsync>(17)> in GetStringAsync2 (259 .. 263)
    Arguments:
    Captured Variables:
        <captured><mixin-source>
        <captured-this>0
    Local Variables:

<lambda:(18)> in GetMultipleString (272 .. 294)
    Arguments:
        <co-impl>
    Captured Variables:
    Local Variables:

<method:SetFailure<system::Coroutine>(19)> in <lambda:(18)> in GetMultipleString (295 .. 300)
    Arguments:
        <value>
    Captured Variables:
        <captured><co0>x
        <captured><co1>y
        <captured><co2-for-begin>i
        <captured><co3-for-end>i
        <captured><co4>i
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured><co-impl>
        <captured-this>0
    Local Variables:

<method:SetStatus<system::Coroutine>(20)> in <lambda:(18)> in GetMultipleString (301 .. 306)
    Arguments:
        <value>
    Captured Variables:
        <captured><co0>x
        <captured><co1>y
        <captured><co2-for-begin>i
        <captured><co3-for-end>i
        <captured><co4>i
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured><co-impl>
        <captured-this>0
    Local Variables:

<method:GetFailure<system::Coroutine>(23)> in <lambda:(18)> in GetMultipleString (307 .. 310)
    Arguments:
    Captured Variables:
        <captured><co0>x
        <captured><co1>y
        <captured><co2-for-begin>i
        <captured><co3-for-end>i
        <captured><co4>i
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured><co-impl>
        <captured-this>0
    Local Variables:

<method:GetStatus<system::Coroutine>(24)> in <lambda:(18)> in GetMultipleString (311 .. 314)
    Arguments:
    Captured Variables:
        <captured><co0>x
        <captured><co1>y
        <captured><co2-for-begin>i
        <captured><co3-for-end>i
        <captured><co4>i
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured><co-impl>
        <captured-this>0
    Local Variables:

<method:Resume<system::Coroutine>(25)> in <lambda:(18)> in GetMultipleString (315 .. 654)
    Arguments:
        <raise-exception>
        <co-result>
    Captured Variables:
        <captured><co0>x
        <captured><co1>y
        <captured><co2-for-begin>i
        <captured><co3-for-end>i
        <captured><co4>i
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured><co-impl>
        <captured-this>0
    Local Variables:
        <catch><co-ex>

<lambda:(24)> in main (665 .. 668)
    Arguments:
    Captured Variables:
    Local Variables:

========================================================
Instructions:
========================================================
//  ""
0    :     LoadValue     : value = <Bool, >
//  var s = "";
1    :     StoreGlobalVar: var = 0(s)
2    :     LoadValue     : value = <null>
3    :     Return        
//  value
4    :     LoadLocalVar  : var = 0(value)
//  value
5    :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  return (cast (string) value);
6    :     Return        
//  func CastResult(value : ::system::Object) : (string)
7    :     LoadValue     : value = <null>
//  func CastResult(value : ::system::Object) : (string)
8    :     Return        
//  value
9    :     LoadLocalVar  : var = 0(value)
//  return value;
10   :     Return        
//  func StoreResult(value : string) : (::system::Object)
11   :     LoadValue     : value = <null>
//  func StoreResult(value : string) : (::system::Object)
12   :     Return        
//  func (<co-impl> : ::system::AsyncCoroutine::IImpl*) : (::system::Coroutine^)
13   :     LoadLocalVar  : var = 0(x)
//  func (<co-impl> : ::system::AsyncCoroutine::IImpl*) : (::system::Coroutine^)
14   :     CreateClosureContext: stackPatternCount = 1
//  func (<co-impl> : ::system::AsyncCoroutine::IImpl*) : (::system::Coroutine^)
15   :     LoadFunction  : func = 7(<lambda:(7)> in GetStringAsync)
//  func (<co-impl> : ::system::AsyncCoroutine::IImpl*) : (::system::Coroutine^)
16   :     CreateClosure 
//  ::system::AsyncCoroutine::Create(func (<co-impl> : ::system::AsyncCoroutine::IImpl*) : (::system::Coroutine^)
17   :     LoadValue     : value = <null>
//  ::system::AsyncCoroutine::Create(func (<co-impl> : ::system::AsyncCoroutine::IImpl*) : (::system::Coroutine^)
18   :     InvokeMethod  : methodInfo = Create<system::AsyncCoroutine>, stackPatternCount = 1
//  var <co-mixin-source-variable> = ::system::AsyncCoroutine::Create(func (<co-impl> : ::system::AsyncCoroutine::IImpl*) : (::system::Coroutine^)
19   :     StoreLocalVar : var = 1(<co-mixin-source-variable>)
//  <co-mixin-source-variable>
20   :     LoadLocalVar  : var = 1(<co-mixin-source-variable>)
//  new (::CoAsync_types::IStringAsync^)
21   :     LoadValue     : value = <null>
//  new (::CoAsync_types::IStringAsync^)
22   :     CreateClosureContext: stackPatternCount = 2
//  new (::CoAsync_types::IStringAsync^)
23   :     LoadMethodInfo: methodInfo = Execute<system::Async>
//  func Execute(<mixin-parameter>callback : (func (::system::CoroutineResult^) : (::system::Void)), <mixin-parameter>context : ::system::AsyncContext^) : (::system::Boolean)
24   :     LoadFunction  : func = 8(<method:Execute<CoAsync_types::IStringAsync>(8)> in GetStringAsync)
//  new (::CoAsync_types::IStringAsync^)
25   :     LoadMethodInfo: methodInfo = GetStatus<system::Async>
//  func GetStatus() : (::system::AsyncStatus)
26   :     LoadFunction  : func = 9(<method:GetStatus<CoAsync_types::IStringAsync>(9)> in GetStringAsync)
//  new (::CoAsync_types::IStringAsync^)
27   :     CreateInterface: methodInfo = <CoAsync_types::IStringAsync>, stackPatternCount = 4
//  return new (::CoAsync_types::IStringAsync^)
28   :     Return        
//  func GetStringAsync(x : int) : (IStringAsync^)
29   :     LoadValue     : value = <null>
//  func GetStringAsync(x : int) : (IStringAsync^)
30   :     Return        
//  0
31   :     LoadValue     : value = <I8, 0>
//  1
32   :     LoadValue     : value = <I8, 1>
//  (-1)
33   :     OpNegative    : type = I8
//  null
34   :     LoadValue     : value = <null>
//  Waiting
35   :     LoadValue     : value = <enum: 0>
//  new (::system::Coroutine^)
36   :     LoadCapturedVar: var = 0(<captured>x)
//  new (::system::Coroutine^)
37   :     LoadLocalVar  : var = 0(<co-impl>)
//  new (::system::Coroutine^)
38   :     LoadValue     : value = <null>
//  new (::system::Coroutine^)
39   :     CreateClosureContext: stackPatternCount = 7
//  new (::system::Coroutine^)
40   :     LoadMethodInfo: methodInfo = GetFailure<system::Coroutine>
//  func GetFailure() : (::system::Exception^)
41   :     LoadFunction  : func = 12(<method:GetFailure<system::Coroutine>(14)> in <lambda:(7)> in GetStringAsync)
//  new (::system::Coroutine^)
42   :     LoadMethodInfo: methodInfo = GetStatus<system::Coroutine>
//  func GetStatus() : (::system::CoroutineStatus)
43   :     LoadFunction  : func = 13(<method:GetStatus<system::Coroutine>(15)> in <lambda:(7)> in GetStringAsync)
//  new (::system::Coroutine^)
44   :     LoadMethodInfo: methodInfo = Resume<system::Coroutine>
//  func Resume(<raise-exception> : ::system::Boolean, <co-result> : ::system::CoroutineResult^) : (::system::Void)
45   :     LoadFunction  : func = 14(<method:Resume<system::Coroutine>(16)> in <lambda:(7)> in GetStringAsync)
//  new (::system::Coroutine^)
46   :     CreateInterface: methodInfo = <system::Coroutine>, stackPatternCount = 6
//  return new (::system::Coroutine^)
47   :     Return        
//  func (<co-impl> : ::system::AsyncCoroutine::IImpl*) : (::system::Coroutine^)
48   :     LoadValue     : value = <null>
//  func (<co-impl> : ::system::AsyncCoroutine::IImpl*) : (::system::Coroutine^)
49   :     Return        
//  <value>
50   :     LoadLocalVar  : var = 0(<value>)
//  (<prop>Failure = <value>)
51   :     Duplicate     : stackPatternCount = 0
//  (<prop>Failure = <value>)
52   :     StoreCapturedVar: var = 2
//  (<prop>Failure = <value>);
53   :     Pop           
//  func SetFailure(<value> : ::system::Exception^) : (void)
54   :     LoadValue     : value = <null>
//  func SetFailure(<value> : ::system::Exception^) : (void)
55   :     Return        
//  <value>
56   :     LoadLocalVar  : var = 0(<value>)
//  (<prop>Status = <value>)
57   :     Duplicate     : stackPatternCount = 0
//  (<prop>Status = <value>)
58   :     StoreCapturedVar: var = 3
//  (<prop>Status = <value>);
59   :     Pop           
//  func SetStatus(<value> : ::system::CoroutineStatus) : (void)
60   :     LoadValue     : value = <null>
//  func SetStatus(<value> : ::system::CoroutineStatus) : (void)
61   :     Return        
//  <prop>Failure
62   :     LoadCapturedVar: var = 2(<captured><prop>Failure)
//  return <prop>Failure;
63   :     Return        
//  func GetFailure() : (::system::Exception^)
64   :     LoadValue     : value = <null>
//  func GetFailure() : (::system::Exception^)
65   :     Return        
//  <prop>Status
66   :     LoadCapturedVar: var = 3(<captured><prop>Status)
//  return <prop>Status;
67   :     Return        
//  func GetStatus() : (::system::CoroutineStatus)
68   :     LoadValue     : value = <null>
//  func GetStatus() : (::system::CoroutineStatus)
69   :     Return        
//  Status
70   :     LoadCapturedVar: var = 6(<captured-this>0)
//  Status
71   :     InvokeMethod  : methodInfo = GetStatus<system::Coroutine>, stackPatternCount = 0
//  ::system::CoroutineStatus::Waiting
72   :     LoadValue     : value = <enum: 0>
//  (Status != ::system::CoroutineStatus::Waiting)
73   :     CompareValue  
//  (Status != ::system::CoroutineStatus::Waiting)
74   :     OpNot         : type = Bool
//  if ((Status != ::system::CoroutineStatus::Waiting))
75   :     OpNot         : type = Bool
//  if ((Status != ::system::CoroutineStatus::Waiting))
76   :     JumpIf        : label = 80
//  "Resume should be called only when the coroutine is in the waiting status."
77   :     LoadValue     : value = <Bool, Resume should be called only when the coroutine is in the waiting status.>
//  raise "Resume should be called only when the coroutine is in the waiting status.";
78   :     RaiseException
//  if ((Status != ::system::CoroutineStatus::Waiting))
79   :     Jump          : label = 80
//  Executing
80   :     LoadValue     : value = <enum: 1>
//  SetStatus(Executing)
81   :     InvokeWithContext: func = 11(<method:SetStatus<system::Coroutine>(11)> in <lambda:(7)> in GetStringAsync), stackPatternCount = 1
//  SetStatus(Executing);
82   :     Pop           
//  try
83   :     InstallTry    : label = 179
//  <co-state-before-pause>
84   :     LoadCapturedVar: var = 1(<captured><co-state-before-pause>)
//  1
85   :     LoadValue     : value = <I8, 1>
//  (-1)
86   :     OpNegative    : type = I8
//  (<co-state-before-pause> != (-1))
87   :     CompareValue  
//  (<co-state-before-pause> != (-1))
88   :     OpNot         : type = Bool
//  if ((<co-state-before-pause> != (-1)))
89   :     OpNot         : type = Bool
//  if ((<co-state-before-pause> != (-1)))
90   :     JumpIf        : label = 123
//  <co-result>
91   :     LoadLocalVar  : var = 1(<co-result>)
//  <co-result> is null
92   :     LoadValue     : value = <null>
//  <co-result> is null
93   :     CompareReference
//  if (<co-result> is null)
94   :     OpNot         : type = Bool
//  if (<co-result> is null)
95   :     JumpIf        : label = 102
//  1
96   :     LoadValue     : value = <I8, 1>
//  (-1)
97   :     OpNegative    : type = I8
//  (<co-state-before-pause> = (-1))
98   :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = (-1))
99   :     StoreCapturedVar: var = 1
//  (<co-state-before-pause> = (-1));
100  :     Pop           
//  if (<co-result> is null)
101  :     Jump          : label = 122
//  <co-result>
102  :     LoadLocalVar  : var = 1(<co-result>)
//  <co-result>.Failure
103  :     InvokeMethod  : methodInfo = GetFailure<system::CoroutineResult>, stackPatternCount = 0
//  <co-result>.Failure is null
104  :     LoadValue     : value = <null>
//  <co-result>.Failure is null
105  :     CompareReference
//  if (<co-result>.Failure is null)
106  :     OpNot         : type = Bool
//  if (<co-result>.Failure is null)
107  :     JumpIf        : label = 114
//  1
108  :     LoadValue     : value = <I8, 1>
//  (-1)
109  :     OpNegative    : type = I8
//  (<co-state-before-pause> = (-1))
110  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = (-1))
111  :     StoreCapturedVar: var = 1
//  (<co-state-before-pause> = (-1));
112  :     Pop           
//  if (<co-result>.Failure is null)
113  :     Jump          : label = 122
//  1
114  :     LoadValue     : value = <I8, 1>
//  (-1)
115  :     OpNegative    : type = I8
//  (<co-state-before-pause> = (-1))
116  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = (-1))
117  :     StoreCapturedVar: var = 1
//  (<co-state-before-pause> = (-1));
118  :     Pop           
//  <co-result>
119  :     LoadLocalVar  : var = 1(<co-result>)
//  <co-result>.Failure
120  :     InvokeMethod  : methodInfo = GetFailure<system::CoroutineResult>, stackPatternCount = 0
//  raise <co-result>.Failure;
121  :     RaiseException
//  if ((<co-state-before-pause> != (-1)))
122  :     Jump          : label = 123
//  true
123  :     LoadValue     : value = <Bool, true>
//  while (true)
124  :     OpNot         : type = Bool
//  while (true)
125  :     JumpIf        : label = 177
//  <co-state>
126  :     LoadCapturedVar: var = 0(<captured><co-state>)
//  0
127  :     LoadValue     : value = <I8, 0>
//  (<co-state> == 0)
128  :     CompareValue  
//  if ((<co-state> == 0))
129  :     OpNot         : type = Bool
//  if ((<co-state> == 0))
130  :     JumpIf        : label = 164
//  ""
131  :     LoadValue     : value = <Bool, >
//  s
132  :     LoadGlobalVar : var = 0(s)
//  ("" & s)
133  :     OpConcat      
//  "["
134  :     LoadValue     : value = <Bool, [>
//  (("" & s) & "[")
135  :     OpConcat      
//  x
136  :     LoadCapturedVar: var = 4(<captured>x)
//  x
137  :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  ((("" & s) & "[") & x)
138  :     OpConcat      
//  "]"
139  :     LoadValue     : value = <Bool, ]>
//  (((("" & s) & "[") & x) & "]")
140  :     OpConcat      
//  (s = (((("" & s) & "[") & x) & "]"))
141  :     Duplicate     : stackPatternCount = 0
//  (s = (((("" & s) & "[") & x) & "]"))
142  :     StoreGlobalVar: var = 0(s)
//  (s = (((("" & s) & "[") & x) & "]"));
143  :     Pop           
//  <co-impl>
144  :     LoadCapturedVar: var = 5(<captured><co-impl>)
//  x
145  :     LoadCapturedVar: var = 4(<captured>x)
//  x
146  :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  ::CoAsync_types::IStringAsync::StoreResult((cast (string) x))
147  :     LoadValue     : value = <null>
//  ::CoAsync_types::IStringAsync::StoreResult((cast (string) x))
148  :     InvokeMethod  : methodInfo = StoreResult<CoAsync_types::IStringAsync>, stackPatternCount = 1
//  ::system::AsyncCoroutine::ReturnAndExit(<co-impl>, ::CoAsync_types::IStringAsync::StoreResult((cast (string) x)))
149  :     LoadValue     : value = <null>
//  ::system::AsyncCoroutine::ReturnAndExit(<co-impl>, ::CoAsync_types::IStringAsync::StoreResult((cast (string) x)))
150  :     InvokeMethod  : methodInfo = ReturnAndExit<system::AsyncCoroutine>, stackPatternCount = 2
//  ::system::AsyncCoroutine::ReturnAndExit(<co-impl>, ::CoAsync_types::IStringAsync::StoreResult((cast (string) x)));
151  :     Pop           
//  Stopped
152  :     LoadValue     : value = <enum: 2>
//  SetStatus(Stopped)
153  :     InvokeWithContext: func = 11(<method:SetStatus<system::Coroutine>(11)> in <lambda:(7)> in GetStringAsync), stackPatternCount = 1
//  SetStatus(Stopped);
154  :     Pop           
//  try
155  :     UninstallTry  : stackPatternCount = 0
//  return;
156  :     LoadValue     : value = <null>
//  return;
157  :     Return        
//  1
158  :     LoadValue     : value = <I8, 1>
//  (<co-state> = 1)
159  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 1)
160  :     StoreCapturedVar: var = 0
//  (<co-state> = 1);
161  :     Pop           
//  continue;
162  :     Jump          : label = 123
//  if ((<co-state> == 0))
163  :     Jump          : label = 164
//  <co-state>
164  :     LoadCapturedVar: var = 0(<captured><co-state>)
//  1
165  :     LoadValue     : value = <I8, 1>
//  (<co-state> == 1)
166  :     CompareValue  
//  if ((<co-state> == 1))
167  :     OpNot         : type = Bool
//  if ((<co-state> == 1))
168  :     JumpIf        : label = 176
//  Stopped
169  :     LoadValue     : value = <enum: 2>
//  SetStatus(Stopped)
170  :     InvokeWithContext: func = 11(<method:SetStatus<system::Coroutine>(11)> in <lambda:(7)> in GetStringAsync), stackPatternCount = 1
//  SetStatus(Stopped);
171  :     Pop           
//  try
172  :     UninstallTry  : stackPatternCount = 0
//  return;
173  :     LoadValue     : value = <null>
//  return;
174  :     Return        
//  if ((<co-state> == 1))
175  :     Jump          : label = 176
//  while (true)
176  :     Jump          : label = 123
//  try
177  :     UninstallTry  : stackPatternCount = 0
//  try
178  :     Jump          : label = 193
//  try
179  :     LoadException 
//  try
180  :     StoreLocalVar : var = 2(<catch><co-ex>)
//  <co-ex>
181  :     LoadLocalVar  : var = 2(<catch><co-ex>)
//  SetFailure(<co-ex>)
182  :     InvokeWithContext: func = 10(<method:SetFailure<system::Coroutine>(10)> in <lambda:(7)> in GetStringAsync), stackPatternCount = 1
//  SetFailure(<co-ex>);
183  :     Pop           
//  Stopped
184  :     LoadValue     : value = <enum: 2>
//  SetStatus(Stopped)
185  :     InvokeWithContext: func = 11(<method:SetStatus<system::Coroutine>(11)> in <lambda:(7)> in GetStringAsync), stackPatternCount = 1
//  SetStatus(Stopped);
186  :     Pop           
//  <raise-exception>
187  :     LoadLocalVar  : var = 0(<raise-exception>)
//  if (<raise-exception>)
188  :     OpNot         : type = Bool
//  if (<raise-exception>)
189  :     JumpIf        : label = 193
//  raise;
190  :     LoadLocalVar  : var = 2(<catch><co-ex>)
//  raise;
191  :     RaiseException
//  if (<raise-exception>)
192  :     Jump          : label = 193
//  func Resume(<raise-exception> : ::system::Boolean, <co-result> : ::system::CoroutineResult^) : (::system::Void)
193  :     LoadValue     : value = <null>
//  func Resume(<raise-exception> : ::system::Boolean, <co-result> : ::system::CoroutineResult^) : (::system::Void)
194  :     Return        
//  <mixin-parameter>callback
195  :     LoadLocalVar  : var = 0(<mixin-parameter>callback)
//  <mixin-parameter>context
196  :     LoadLocalVar  : var = 1(<mixin-parameter>context)
//  <mixin-source>
197  :     LoadCapturedVar: var = 0(<captured><mixin-source>)
//  <mixin-source>.Execute(<mixin-parameter>callback, <mixin-parameter>context)
198  :     InvokeMethod  : methodInfo = Execute<system::Async>, stackPatternCount = 2
//  return <mixin-source>.Execute(<mixin-parameter>callback, <mixin-parameter>context);
199  :     Return        
//  func Execute(<mixin-parameter>callback : (func (::system::CoroutineResult^) : (::system::Void)), <mixin-parameter>context : ::system::AsyncContext^) : (::system::Boolean)
200  :     LoadValue     : value = <null>
//  func Execute(<mixin-parameter>callback : (func (::system::CoroutineResult^) : (::system::Void)), <mixin-parameter>context : ::system::AsyncContext^) : (::system::Boolean)
201  :     Return        
//  <mixin-source>
202  :     LoadCapturedVar: var = 0(<captured><mixin-source>)
//  <mixin-source>.GetStatus()
203  :     InvokeMethod  : methodInfo = GetStatus<system::Async>, stackPatternCount = 0
//  return <mixin-source>.GetStatus();
204  :     Return        
//  func GetStatus() : (::system::AsyncStatus)
205  :     LoadValue     : value = <null>
//  func GetStatus() : (::system::AsyncStatus)
206  :     Return        
//  Future::Create()
207  :     LoadValue     : value = <null>
//  Future::Create()
208  :     InvokeMethod  : methodInfo = Create<system::Future>, stackPatternCount = 0
//  var future = Future::Create();
209  :     StoreLocalVar : var = 1(future)
//  func () : (void)
210  :     LoadLocalVar  : var = 0(x)
//  func () : (void)
211  :     LoadLocalVar  : var = 1(future)
//  func () : (void)
212  :     CreateClosureContext: stackPatternCount = 2
//  func () : (void)
213  :     LoadFunction  : func = 15(<lambda:(15)> in GetStringAsync2)
//  func () : (void)
214  :     CreateClosure 
//  AsyncScheduler::GetSchedulerForCurrentThread()
215  :     LoadValue     : value = <null>
//  AsyncScheduler::GetSchedulerForCurrentThread()
216  :     InvokeMethod  : methodInfo = GetSchedulerForCurrentThread<system::AsyncScheduler>, stackPatternCount = 0
//  AsyncScheduler::GetSchedulerForCurrentThread().ExecuteInBackground(func () : (void)
217  :     InvokeMethod  : methodInfo = ExecuteInBackground<system::AsyncScheduler>, stackPatternCount = 1
//  AsyncScheduler::GetSchedulerForCurrentThread().ExecuteInBackground(func () : (void)
218  :     Pop           
//  future
219  :     LoadLocalVar  : var = 1(future)
//  future
220  :     ConvertToType : flag = SharedPtr, typeDescriptor = system::Async
//  new (IStringAsync^)
221  :     LoadValue     : value = <null>
//  new (IStringAsync^)
222  :     CreateClosureContext: stackPatternCount = 2
//  new (IStringAsync^)
223  :     LoadMethodInfo: methodInfo = Execute<system::Async>
//  func Execute(<mixin-parameter>callback : (func (::system::CoroutineResult^) : (::system::Void)), <mixin-parameter>context : ::system::AsyncContext^) : (::system::Boolean)
224  :     LoadFunction  : func = 16(<method:Execute<CoAsync_types::IStringAsync>(16)> in GetStringAsync2)
//  new (IStringAsync^)
225  :     LoadMethodInfo: methodInfo = GetStatus<system::Async>
//  func GetStatus() : (::system::AsyncStatus)
226  :     LoadFunction  : func = 17(<method:GetStatus<CoAsync_types::IStringAsync>(17)> in GetStringAsync2)
//  new (IStringAsync^)
227  :     CreateInterface: methodInfo = <CoAsync_types::IStringAsync>, stackPatternCount = 4
//  return new (IStringAsync^)
228  :     Return        
//  func GetStringAsync2(x : int) : (IStringAsync^)
229  :     LoadValue     : value = <null>
//  func GetStringAsync2(x : int) : (IStringAsync^)
230  :     Return        
//  ""
231  :     LoadValue     : value = <Bool, >
//  s
232  :     LoadGlobalVar : var = 0(s)
//  ("" & s)
233  :     OpConcat      
//  "["
234  :     LoadValue     : value = <Bool, [>
//  (("" & s) & "[")
235  :     OpConcat      
//  x
236  :     LoadCapturedVar: var = 0(<captured>x)
//  x
237  :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  ((("" & s) & "[") & x)
238  :     OpConcat      
//  "]"
239  :     LoadValue     : value = <Bool, ]>
//  (((("" & s) & "[") & x) & "]")
240  :     OpConcat      
//  (s = (((("" & s) & "[") & x) & "]"))
241  :     Duplicate     : stackPatternCount = 0
//  (s = (((("" & s) & "[") & x) & "]"))
242  :     StoreGlobalVar: var = 0(s)
//  (s = (((("" & s) & "[") & x) & "]"));
243  :     Pop           
//  x
244  :     LoadCapturedVar: var = 0(<captured>x)
//  x
245  :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  future
246  :     LoadCapturedVar: var = 1(<captured>future)
//  future.Promise
247  :     InvokeMethod  : methodInfo = GetPromise<system::Future>, stackPatternCount = 0
//  future.Promise.SendResult((cast (string) x))
248  :     InvokeMethod  : methodInfo = SendResult<system::Promise>, stackPatternCount = 1
//  future.Promise.SendResult((cast (string) x));
249  :     Pop           
//  func () : (void)
250  :     LoadValue     : value = <null>
//  func () : (void)
251  :     Return        
//  <mixin-parameter>callback
252  :     LoadLocalVar  : var = 0(<mixin-parameter>callback)
//  <mixin-parameter>context
253  :     LoadLocalVar  : var = 1(<mixin-parameter>context)
//  <mixin-source>
254  :     LoadCapturedVar: var = 0(<captured><mixin-source>)
//  <mixin-source>.Execute(<mixin-parameter>callback, <mixin-parameter>context)
255  :     InvokeMethod  : methodInfo = Execute<system::Async>, stackPatternCount = 2
//  return <mixin-source>.Execute(<mixin-parameter>callback, <mixin-parameter>context);
256  :     Return        
//  func Execute(<mixin-parameter>callback : (func (::system::CoroutineResult^) : (::system::Void)), <mixin-parameter>context : ::system::AsyncContext^) : (::system::Boolean)
257  :     LoadValue     : value = <null>
//  func Execute(<mixin-parameter>callback : (func (::system::CoroutineResult^) : (::system::Void)), <mixin-parameter>context : ::system::AsyncContext^) : (::system::Boolean)
258  :     Return        
//  <mixin-source>
259  :     LoadCapturedVar: var = 0(<captured><mixin-source>)
//  <mixin-source>.GetStatus()
260  :     InvokeMethod  : methodInfo = GetStatus<system::Async>, stackPatternCount = 0
//  return <mixin-source>.GetStatus();
261  :     Return        
//  func GetStatus() : (::system::AsyncStatus)
262  :     LoadValue     : value = <null>
//  func GetStatus() : (::system::AsyncStatus)
263  :     Return        
//  func (<co-impl> : ::system::AsyncCoroutine::IImpl*) : (::system::Coroutine^)
264  :     CreateClosureContext: stackPatternCount = 0
//  func (<co-impl> : ::system::AsyncCoroutine::IImpl*) : (::system::Coroutine^)
265  :     LoadFunction  : func = 18(<lambda:(18)> in GetMultipleString)
//  func (<co-impl> : ::system::AsyncCoroutine::IImpl*) : (::system::Coroutine^)
266  :     CreateClosure 
//  ::system::AsyncCoroutine::CreateAndRun(func (<co-impl> : ::system::AsyncCoroutine::IImpl*) : (::system::Coroutine^)
267  :     LoadValue     : value = <null>
//  ::system::AsyncCoroutine::CreateAndRun(func (<co-impl> : ::system::AsyncCoroutine::IImpl*) : (::system::Coroutine^)
268  :     InvokeMethod  : methodInfo = CreateAndRun<system::AsyncCoroutine>, stackPatternCount = 1
//  ::system::AsyncCoroutine::CreateAndRun(func (<co-impl> : ::system::AsyncCoroutine::IImpl*) : (::system::Coroutine^)
269  :     Pop           
//  func GetMultipleString() : (void)
270  :     LoadValue     : value = <null>
//  func GetMultipleString() : (void)
271  :     Return        
//  ""
272  :     LoadValue     : value = <Bool, >
//  ""
273  :     LoadValue     : value = <Bool, >
//  0
274  :     LoadValue     : value = <I8, 0>
//  0
275  :     LoadValue     : value = <I8, 0>
//  0
276  :     LoadValue     : value = <I8, 0>
//  0
277  :     LoadValue     : value = <I8, 0>
//  1
278  :     LoadValue     : value = <I8, 1>
//  (-1)
279  :     OpNegative    : type = I8
//  null
280  :     LoadValue     : value = <null>
//  Waiting
281  :     LoadValue     : value = <enum: 0>
//  new (::system::Coroutine^)
282  :     LoadLocalVar  : var = 0(<co-impl>)
//  new (::system::Coroutine^)
283  :     LoadValue     : value = <null>
//  new (::system::Coroutine^)
284  :     CreateClosureContext: stackPatternCount = 11
//  new (::system::Coroutine^)
285  :     LoadMethodInfo: methodInfo = GetFailure<system::Coroutine>
//  func GetFailure() : (::system::Exception^)
286  :     LoadFunction  : func = 21(<method:GetFailure<system::Coroutine>(23)> in <lambda:(18)> in GetMultipleString)
//  new (::system::Coroutine^)
287  :     LoadMethodInfo: methodInfo = GetStatus<system::Coroutine>
//  func GetStatus() : (::system::CoroutineStatus)
288  :     LoadFunction  : func = 22(<method:GetStatus<system::Coroutine>(24)> in <lambda:(18)> in GetMultipleString)
//  new (::system::Coroutine^)
289  :     LoadMethodInfo: methodInfo = Resume<system::Coroutine>
//  func Resume(<raise-exception> : ::system::Boolean, <co-result> : ::system::CoroutineResult^) : (::system::Void)
290  :     LoadFunction  : func = 23(<method:Resume<system::Coroutine>(25)> in <lambda:(18)> in GetMultipleString)
//  new (::system::Coroutine^)
291  :     CreateInterface: methodInfo = <system::Coroutine>, stackPatternCount = 6
//  return new (::system::Coroutine^)
292  :     Return        
//  func (<co-impl> : ::system::AsyncCoroutine::IImpl*) : (::system::Coroutine^)
293  :     LoadValue     : value = <null>
//  func (<co-impl> : ::system::AsyncCoroutine::IImpl*) : (::system::Coroutine^)
294  :     Return        
//  <value>
295  :     LoadLocalVar  : var = 0(<value>)
//  (<prop>Failure = <value>)
296  :     Duplicate     : stackPatternCount = 0
//  (<prop>Failure = <value>)
297  :     StoreCapturedVar: var = 7
//  (<prop>Failure = <value>);
298  :     Pop           
//  func SetFailure(<value> : ::system::Exception^) : (void)
299  :     LoadValue     : value = <null>
//  func SetFailure(<value> : ::system::Exception^) : (void)
300  :     Return        
//  <value>
301  :     LoadLocalVar  : var = 0(<value>)
//  (<prop>Status = <value>)
302  :     Duplicate     : stackPatternCount = 0
//  (<prop>Status = <value>)
303  :     StoreCapturedVar: var = 8
//  (<prop>Status = <value>);
304  :     Pop           
//  func SetStatus(<value> : ::system::CoroutineStatus) : (void)
305  :     LoadValue     : value = <null>
//  func SetStatus(<value> : ::system::CoroutineStatus) : (void)
306  :     Return        
//  <prop>Failure
307  :     LoadCapturedVar: var = 7(<captured><prop>Failure)
//  return <prop>Failure;
308  :     Return        
//  func GetFailure() : (::system::Exception^)
309  :     LoadValue     : value = <null>
//  func GetFailure() : (::system::Exception^)
310  :     Return        
//  <prop>Status
311  :     LoadCapturedVar: var = 8(<captured><prop>Status)
//  return <prop>Status;
312  :     Return        
//  func GetStatus() : (::system::CoroutineStatus)
313  :     LoadValue     : value = <null>
//  func GetStatus() : (::system::CoroutineStatus)
314  :     Return        
//  Status
315  :     LoadCapturedVar: var = 10(<captured-this>0)
//  Status
316  :     InvokeMethod  : methodInfo = GetStatus<system::Coroutine>, stackPatternCount = 0
//  ::system::CoroutineStatus::Waiting
317  :     LoadValue     : value = <enum: 0>
//  (Status != ::system::CoroutineStatus::Waiting)
318  :     CompareValue  
//  (Status != ::system::CoroutineStatus::Waiting)
319  :     OpNot         : type = Bool
//  if ((Status != ::system::CoroutineStatus::Waiting))
320  :     OpNot         : type = Bool
//  if ((Status != ::system::CoroutineStatus::Waiting))
321  :     JumpIf        : label = 325
//  "Resume should be called only when the coroutine is in the waiting status."
322  :     LoadValue     : value = <Bool, Resume should be called only when the coroutine is in the waiting status.>
//  raise "Resume should be called only when the coroutine is in the waiting status.";
323  :     RaiseException
//  if ((Status != ::system::CoroutineStatus::Waiting))
324  :     Jump          : label = 325
//  Executing
325  :     LoadValue     : value = <enum: 1>
//  SetStatus(Executing)
326  :     InvokeWithContext: func = 20(<method:SetStatus<system::Coroutine>(20)> in <lambda:(18)> in GetMultipleString), stackPatternCount = 1
//  SetStatus(Executing);
327  :     Pop           
//  try
328  :     InstallTry    : label = 639
//  <co-state-before-pause>
329  :     LoadCapturedVar: var = 6(<captured><co-state-before-pause>)
//  1
330  :     LoadValue     : value = <I8, 1>
//  (-1)
331  :     OpNegative    : type = I8
//  (<co-state-before-pause> != (-1))
332  :     CompareValue  
//  (<co-state-before-pause> != (-1))
333  :     OpNot         : type = Bool
//  if ((<co-state-before-pause> != (-1)))
334  :     OpNot         : type = Bool
//  if ((<co-state-before-pause> != (-1)))
335  :     JumpIf        : label = 368
//  <co-result>
336  :     LoadLocalVar  : var = 1(<co-result>)
//  <co-result> is null
337  :     LoadValue     : value = <null>
//  <co-result> is null
338  :     CompareReference
//  if (<co-result> is null)
339  :     OpNot         : type = Bool
//  if (<co-result> is null)
340  :     JumpIf        : label = 347
//  1
341  :     LoadValue     : value = <I8, 1>
//  (-1)
342  :     OpNegative    : type = I8
//  (<co-state-before-pause> = (-1))
343  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = (-1))
344  :     StoreCapturedVar: var = 6
//  (<co-state-before-pause> = (-1));
345  :     Pop           
//  if (<co-result> is null)
346  :     Jump          : label = 367
//  <co-result>
347  :     LoadLocalVar  : var = 1(<co-result>)
//  <co-result>.Failure
348  :     InvokeMethod  : methodInfo = GetFailure<system::CoroutineResult>, stackPatternCount = 0
//  <co-result>.Failure is null
349  :     LoadValue     : value = <null>
//  <co-result>.Failure is null
350  :     CompareReference
//  if (<co-result>.Failure is null)
351  :     OpNot         : type = Bool
//  if (<co-result>.Failure is null)
352  :     JumpIf        : label = 359
//  1
353  :     LoadValue     : value = <I8, 1>
//  (-1)
354  :     OpNegative    : type = I8
//  (<co-state-before-pause> = (-1))
355  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = (-1))
356  :     StoreCapturedVar: var = 6
//  (<co-state-before-pause> = (-1));
357  :     Pop           
//  if (<co-result>.Failure is null)
358  :     Jump          : label = 367
//  1
359  :     LoadValue     : value = <I8, 1>
//  (-1)
360  :     OpNegative    : type = I8
//  (<co-state-before-pause> = (-1))
361  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = (-1))
362  :     StoreCapturedVar: var = 6
//  (<co-state-before-pause> = (-1));
363  :     Pop           
//  <co-result>
364  :     LoadLocalVar  : var = 1(<co-result>)
//  <co-result>.Failure
365  :     InvokeMethod  : methodInfo = GetFailure<system::CoroutineResult>, stackPatternCount = 0
//  raise <co-result>.Failure;
366  :     RaiseException
//  if ((<co-state-before-pause> != (-1)))
367  :     Jump          : label = 368
//  true
368  :     LoadValue     : value = <Bool, true>
//  while (true)
369  :     OpNot         : type = Bool
//  while (true)
370  :     JumpIf        : label = 637
//  <co-state>
371  :     LoadCapturedVar: var = 5(<captured><co-state>)
//  0
372  :     LoadValue     : value = <I8, 0>
//  (<co-state> == 0)
373  :     CompareValue  
//  if ((<co-state> == 0))
374  :     OpNot         : type = Bool
//  if ((<co-state> == 0))
375  :     JumpIf        : label = 406
//  0
376  :     LoadValue     : value = <I8, 0>
//  (<co2-for-begin>i = 0)
377  :     Duplicate     : stackPatternCount = 0
//  (<co2-for-begin>i = 0)
378  :     StoreCapturedVar: var = 2
//  (<co2-for-begin>i = 0);
379  :     Pop           
//  1
380  :     LoadValue     : value = <I8, 1>
//  (<co3-for-end>i = 1)
381  :     Duplicate     : stackPatternCount = 0
//  (<co3-for-end>i = 1)
382  :     StoreCapturedVar: var = 3
//  (<co3-for-end>i = 1);
383  :     Pop           
//  <co2-for-begin>i
384  :     LoadCapturedVar: var = 2(<captured><co2-for-begin>i)
//  (<co4>i = <co2-for-begin>i)
385  :     Duplicate     : stackPatternCount = 0
//  (<co4>i = <co2-for-begin>i)
386  :     StoreCapturedVar: var = 4
//  (<co4>i = <co2-for-begin>i);
387  :     Pop           
//  <co4>i
388  :     LoadCapturedVar: var = 4(<captured><co4>i)
//  <co3-for-end>i
389  :     LoadCapturedVar: var = 3(<captured><co3-for-end>i)
//  (<co4>i <= <co3-for-end>i)
390  :     CompareLiteral: type = I8
//  (<co4>i <= <co3-for-end>i)
391  :     OpLE          
//  if ((<co4>i <= <co3-for-end>i))
392  :     OpNot         : type = Bool
//  if ((<co4>i <= <co3-for-end>i))
393  :     JumpIf        : label = 400
//  3
394  :     LoadValue     : value = <I8, 3>
//  (<co-state> = 3)
395  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 3)
396  :     StoreCapturedVar: var = 5
//  (<co-state> = 3);
397  :     Pop           
//  continue;
398  :     Jump          : label = 368
//  if ((<co4>i <= <co3-for-end>i))
399  :     Jump          : label = 400
//  1
400  :     LoadValue     : value = <I8, 1>
//  (<co-state> = 1)
401  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 1)
402  :     StoreCapturedVar: var = 5
//  (<co-state> = 1);
403  :     Pop           
//  continue;
404  :     Jump          : label = 368
//  if ((<co-state> == 0))
405  :     Jump          : label = 406
//  <co-state>
406  :     LoadCapturedVar: var = 5(<captured><co-state>)
//  1
407  :     LoadValue     : value = <I8, 1>
//  (<co-state> == 1)
408  :     CompareValue  
//  if ((<co-state> == 1))
409  :     OpNot         : type = Bool
//  if ((<co-state> == 1))
410  :     JumpIf        : label = 418
//  Stopped
411  :     LoadValue     : value = <enum: 2>
//  SetStatus(Stopped)
412  :     InvokeWithContext: func = 20(<method:SetStatus<system::Coroutine>(20)> in <lambda:(18)> in GetMultipleString), stackPatternCount = 1
//  SetStatus(Stopped);
413  :     Pop           
//  try
414  :     UninstallTry  : stackPatternCount = 0
//  return;
415  :     LoadValue     : value = <null>
//  return;
416  :     Return        
//  if ((<co-state> == 1))
417  :     Jump          : label = 418
//  <co-state>
418  :     LoadCapturedVar: var = 5(<captured><co-state>)
//  2
419  :     LoadValue     : value = <I8, 2>
//  (<co-state> == 2)
420  :     CompareValue  
//  if ((<co-state> == 2))
421  :     OpNot         : type = Bool
//  if ((<co-state> == 2))
422  :     JumpIf        : label = 473
//  <co-result>
423  :     LoadLocalVar  : var = 1(<co-result>)
//  <co-result> is not null
424  :     LoadValue     : value = <null>
//  <co-result> is not null
425  :     CompareReference
//  <co-result> is not null
426  :     OpNot         : type = Bool
//  if (<co-result> is not null)
427  :     OpNot         : type = Bool
//  if (<co-result> is not null)
428  :     JumpIf        : label = 441
//  <co-result>
429  :     LoadLocalVar  : var = 1(<co-result>)
//  <co-result>.Failure
430  :     InvokeMethod  : methodInfo = GetFailure<system::CoroutineResult>, stackPatternCount = 0
//  <co-result>.Failure is not null
431  :     LoadValue     : value = <null>
//  <co-result>.Failure is not null
432  :     CompareReference
//  <co-result>.Failure is not null
433  :     OpNot         : type = Bool
//  if (<co-result>.Failure is not null)
434  :     OpNot         : type = Bool
//  if (<co-result>.Failure is not null)
435  :     JumpIf        : label = 440
//  <co-result>
436  :     LoadLocalVar  : var = 1(<co-result>)
//  <co-result>.Failure
437  :     InvokeMethod  : methodInfo = GetFailure<system::CoroutineResult>, stackPatternCount = 0
//  raise <co-result>.Failure;
438  :     RaiseException
//  if (<co-result>.Failure is not null)
439  :     Jump          : label = 440
//  if (<co-result> is not null)
440  :     Jump          : label = 441
//  ""
441  :     LoadValue     : value = <Bool, >
//  s
442  :     LoadGlobalVar : var = 0(s)
//  ("" & s)
443  :     OpConcat      
//  "!"
444  :     LoadValue     : value = <Bool, !>
//  (("" & s) & "!")
445  :     OpConcat      
//  (s = (("" & s) & "!"))
446  :     Duplicate     : stackPatternCount = 0
//  (s = (("" & s) & "!"))
447  :     StoreGlobalVar: var = 0(s)
//  (s = (("" & s) & "!"));
448  :     Pop           
//  <co4>i
449  :     LoadCapturedVar: var = 4(<captured><co4>i)
//  1
450  :     LoadValue     : value = <I8, 1>
//  (<co4>i + 1)
451  :     OpAdd         : type = I8
//  (<co4>i = (<co4>i + 1))
452  :     Duplicate     : stackPatternCount = 0
//  (<co4>i = (<co4>i + 1))
453  :     StoreCapturedVar: var = 4
//  (<co4>i = (<co4>i + 1));
454  :     Pop           
//  <co4>i
455  :     LoadCapturedVar: var = 4(<captured><co4>i)
//  <co3-for-end>i
456  :     LoadCapturedVar: var = 3(<captured><co3-for-end>i)
//  (<co4>i <= <co3-for-end>i)
457  :     CompareLiteral: type = I8
//  (<co4>i <= <co3-for-end>i)
458  :     OpLE          
//  if ((<co4>i <= <co3-for-end>i))
459  :     OpNot         : type = Bool
//  if ((<co4>i <= <co3-for-end>i))
460  :     JumpIf        : label = 467
//  3
461  :     LoadValue     : value = <I8, 3>
//  (<co-state> = 3)
462  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 3)
463  :     StoreCapturedVar: var = 5
//  (<co-state> = 3);
464  :     Pop           
//  continue;
465  :     Jump          : label = 368
//  if ((<co4>i <= <co3-for-end>i))
466  :     Jump          : label = 467
//  1
467  :     LoadValue     : value = <I8, 1>
//  (<co-state> = 1)
468  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 1)
469  :     StoreCapturedVar: var = 5
//  (<co-state> = 1);
470  :     Pop           
//  continue;
471  :     Jump          : label = 368
//  if ((<co-state> == 2))
472  :     Jump          : label = 473
//  <co-state>
473  :     LoadCapturedVar: var = 5(<captured><co-state>)
//  3
474  :     LoadValue     : value = <I8, 3>
//  (<co-state> == 3)
475  :     CompareValue  
//  if ((<co-state> == 3))
476  :     OpNot         : type = Bool
//  if ((<co-state> == 3))
477  :     JumpIf        : label = 500
//  Waiting
478  :     LoadValue     : value = <enum: 0>
//  SetStatus(Waiting)
479  :     InvokeWithContext: func = 20(<method:SetStatus<system::Coroutine>(20)> in <lambda:(18)> in GetMultipleString), stackPatternCount = 1
//  SetStatus(Waiting);
480  :     Pop           
//  <co-state>
481  :     LoadCapturedVar: var = 5(<captured><co-state>)
//  (<co-state-before-pause> = <co-state>)
482  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = <co-state>)
483  :     StoreCapturedVar: var = 6
//  (<co-state-before-pause> = <co-state>);
484  :     Pop           
//  4
485  :     LoadValue     : value = <I8, 4>
//  (<co-state> = 4)
486  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 4)
487  :     StoreCapturedVar: var = 5
//  (<co-state> = 4);
488  :     Pop           
//  <co-impl>
489  :     LoadCapturedVar: var = 9(<captured><co-impl>)
//  <co4>i
490  :     LoadCapturedVar: var = 4(<captured><co4>i)
//  GetStringAsync(<co4>i)
491  :     Invoke        : func = 2(GetStringAsync), stackPatternCount = 1
//  GetStringAsync(<co4>i)
492  :     ConvertToType : flag = SharedPtr, typeDescriptor = system::Async
//  ::system::AsyncCoroutine::AwaitAndRead(<co-impl>, GetStringAsync(<co4>i))
493  :     LoadValue     : value = <null>
//  ::system::AsyncCoroutine::AwaitAndRead(<co-impl>, GetStringAsync(<co4>i))
494  :     InvokeMethod  : methodInfo = AwaitAndRead<system::AsyncCoroutine>, stackPatternCount = 2
//  ::system::AsyncCoroutine::AwaitAndRead(<co-impl>, GetStringAsync(<co4>i));
495  :     Pop           
//  try
496  :     UninstallTry  : stackPatternCount = 0
//  return;
497  :     LoadValue     : value = <null>
//  return;
498  :     Return        
//  if ((<co-state> == 3))
499  :     Jump          : label = 500
//  <co-state>
500  :     LoadCapturedVar: var = 5(<captured><co-state>)
//  4
501  :     LoadValue     : value = <I8, 4>
//  (<co-state> == 4)
502  :     CompareValue  
//  if ((<co-state> == 4))
503  :     OpNot         : type = Bool
//  if ((<co-state> == 4))
504  :     JumpIf        : label = 541
//  <co-result>
505  :     LoadLocalVar  : var = 1(<co-result>)
//  <co-result>.Failure
506  :     InvokeMethod  : methodInfo = GetFailure<system::CoroutineResult>, stackPatternCount = 0
//  <co-result>.Failure is not null
507  :     LoadValue     : value = <null>
//  <co-result>.Failure is not null
508  :     CompareReference
//  <co-result>.Failure is not null
509  :     OpNot         : type = Bool
//  if (<co-result>.Failure is not null)
510  :     OpNot         : type = Bool
//  if (<co-result>.Failure is not null)
511  :     JumpIf        : label = 516
//  <co-result>
512  :     LoadLocalVar  : var = 1(<co-result>)
//  <co-result>.Failure
513  :     InvokeMethod  : methodInfo = GetFailure<system::CoroutineResult>, stackPatternCount = 0
//  raise <co-result>.Failure;
514  :     RaiseException
//  if (<co-result>.Failure is not null)
515  :     Jump          : label = 516
//  <co-result>
516  :     LoadLocalVar  : var = 1(<co-result>)
//  <co-result>.Result
517  :     InvokeMethod  : methodInfo = GetResult<system::CoroutineResult>, stackPatternCount = 0
//  ::CoAsync_types::IStringAsync::CastResult(<co-result>.Result)
518  :     LoadValue     : value = <null>
//  ::CoAsync_types::IStringAsync::CastResult(<co-result>.Result)
519  :     InvokeMethod  : methodInfo = CastResult<CoAsync_types::IStringAsync>, stackPatternCount = 1
//  (<co0>x = ::CoAsync_types::IStringAsync::CastResult(<co-result>.Result))
520  :     Duplicate     : stackPatternCount = 0
//  (<co0>x = ::CoAsync_types::IStringAsync::CastResult(<co-result>.Result))
521  :     StoreCapturedVar: var = 0
//  (<co0>x = ::CoAsync_types::IStringAsync::CastResult(<co-result>.Result));
522  :     Pop           
//  ""
523  :     LoadValue     : value = <Bool, >
//  s
524  :     LoadGlobalVar : var = 0(s)
//  ("" & s)
525  :     OpConcat      
//  "[+"
526  :     LoadValue     : value = <Bool, [+>
//  (("" & s) & "[+")
527  :     OpConcat      
//  <co0>x
528  :     LoadCapturedVar: var = 0(<captured><co0>x)
//  ((("" & s) & "[+") & <co0>x)
529  :     OpConcat      
//  "]"
530  :     LoadValue     : value = <Bool, ]>
//  (((("" & s) & "[+") & <co0>x) & "]")
531  :     OpConcat      
//  (s = (((("" & s) & "[+") & <co0>x) & "]"))
532  :     Duplicate     : stackPatternCount = 0
//  (s = (((("" & s) & "[+") & <co0>x) & "]"))
533  :     StoreGlobalVar: var = 0(s)
//  (s = (((("" & s) & "[+") & <co0>x) & "]"));
534  :     Pop           
//  5
535  :     LoadValue     : value = <I8, 5>
//  (<co-state> = 5)
536  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 5)
537  :     StoreCapturedVar: var = 5
//  (<co-state> = 5);
538  :     Pop           
//  continue;
539  :     Jump          : label = 368
//  if ((<co-state> == 4))
540  :     Jump          : label = 541
//  <co-state>
541  :     LoadCapturedVar: var = 5(<captured><co-state>)
//  5
542  :     LoadValue     : value = <I8, 5>
//  (<co-state> == 5)
543  :     CompareValue  
//  if ((<co-state> == 5))
544  :     OpNot         : type = Bool
//  if ((<co-state> == 5))
545  :     JumpIf        : label = 568
//  Waiting
546  :     LoadValue     : value = <enum: 0>
//  SetStatus(Waiting)
547  :     InvokeWithContext: func = 20(<method:SetStatus<system::Coroutine>(20)> in <lambda:(18)> in GetMultipleString), stackPatternCount = 1
//  SetStatus(Waiting);
548  :     Pop           
//  <co-state>
549  :     LoadCapturedVar: var = 5(<captured><co-state>)
//  (<co-state-before-pause> = <co-state>)
550  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = <co-state>)
551  :     StoreCapturedVar: var = 6
//  (<co-state-before-pause> = <co-state>);
552  :     Pop           
//  6
553  :     LoadValue     : value = <I8, 6>
//  (<co-state> = 6)
554  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 6)
555  :     StoreCapturedVar: var = 5
//  (<co-state> = 6);
556  :     Pop           
//  <co-impl>
557  :     LoadCapturedVar: var = 9(<captured><co-impl>)
//  <co4>i
558  :     LoadCapturedVar: var = 4(<captured><co4>i)
//  GetStringAsync2(<co4>i)
559  :     Invoke        : func = 3(GetStringAsync2), stackPatternCount = 1
//  GetStringAsync2(<co4>i)
560  :     ConvertToType : flag = SharedPtr, typeDescriptor = system::Async
//  ::system::AsyncCoroutine::AwaitAndRead(<co-impl>, GetStringAsync2(<co4>i))
561  :     LoadValue     : value = <null>
//  ::system::AsyncCoroutine::AwaitAndRead(<co-impl>, GetStringAsync2(<co4>i))
562  :     InvokeMethod  : methodInfo = AwaitAndRead<system::AsyncCoroutine>, stackPatternCount = 2
//  ::system::AsyncCoroutine::AwaitAndRead(<co-impl>, GetStringAsync2(<co4>i));
563  :     Pop           
//  try
564  :     UninstallTry  : stackPatternCount = 0
//  return;
565  :     LoadValue     : value = <null>
//  return;
566  :     Return        
//  if ((<co-state> == 5))
567  :     Jump          : label = 568
//  <co-state>
568  :     LoadCapturedVar: var = 5(<captured><co-state>)
//  6
569  :     LoadValue     : value = <I8, 6>
//  (<co-state> == 6)
570  :     CompareValue  
//  if ((<co-state> == 6))
571  :     OpNot         : type = Bool
//  if ((<co-state> == 6))
572  :     JumpIf        : label = 609
//  <co-result>
573  :     LoadLocalVar  : var = 1(<co-result>)
//  <co-result>.Failure
574  :     InvokeMethod  : methodInfo = GetFailure<system::CoroutineResult>, stackPatternCount = 0
//  <co-result>.Failure is not null
575  :     LoadValue     : value = <null>
//  <co-result>.Failure is not null
576  :     CompareReference
//  <co-result>.Failure is not null
577  :     OpNot         : type = Bool
//  if (<co-result>.Failure is not null)
578  :     OpNot         : type = Bool
//  if (<co-result>.Failure is not null)
579  :     JumpIf        : label = 584
//  <co-result>
580  :     LoadLocalVar  : var = 1(<co-result>)
//  <co-result>.Failure
581  :     InvokeMethod  : methodInfo = GetFailure<system::CoroutineResult>, stackPatternCount = 0
//  raise <co-result>.Failure;
582  :     RaiseException
//  if (<co-result>.Failure is not null)
583  :     Jump          : label = 584
//  <co-result>
584  :     LoadLocalVar  : var = 1(<co-result>)
//  <co-result>.Result
585  :     InvokeMethod  : methodInfo = GetResult<system::CoroutineResult>, stackPatternCount = 0
//  ::CoAsync_types::IStringAsync::CastResult(<co-result>.Result)
586  :     LoadValue     : value = <null>
//  ::CoAsync_types::IStringAsync::CastResult(<co-result>.Result)
587  :     InvokeMethod  : methodInfo = CastResult<CoAsync_types::IStringAsync>, stackPatternCount = 1
//  (<co1>y = ::CoAsync_types::IStringAsync::CastResult(<co-result>.Result))
588  :     Duplicate     : stackPatternCount = 0
//  (<co1>y = ::CoAsync_types::IStringAsync::CastResult(<co-result>.Result))
589  :     StoreCapturedVar: var = 1
//  (<co1>y = ::CoAsync_types::IStringAsync::CastResult(<co-result>.Result));
590  :     Pop           
//  ""
591  :     LoadValue     : value = <Bool, >
//  s
592  :     LoadGlobalVar : var = 0(s)
//  ("" & s)
593  :     OpConcat      
//  "[-"
594  :     LoadValue     : value = <Bool, [->
//  (("" & s) & "[-")
595  :     OpConcat      
//  <co1>y
596  :     LoadCapturedVar: var = 1(<captured><co1>y)
//  ((("" & s) & "[-") & <co1>y)
597  :     OpConcat      
//  "]"
598  :     LoadValue     : value = <Bool, ]>
//  (((("" & s) & "[-") & <co1>y) & "]")
599  :     OpConcat      
//  (s = (((("" & s) & "[-") & <co1>y) & "]"))
600  :     Duplicate     : stackPatternCount = 0
//  (s = (((("" & s) & "[-") & <co1>y) & "]"))
601  :     StoreGlobalVar: var = 0(s)
//  (s = (((("" & s) & "[-") & <co1>y) & "]"));
602  :     Pop           
//  7
603  :     LoadValue     : value = <I8, 7>
//  (<co-state> = 7)
604  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 7)
605  :     StoreCapturedVar: var = 5
//  (<co-state> = 7);
606  :     Pop           
//  continue;
607  :     Jump          : label = 368
//  if ((<co-state> == 6))
608  :     Jump          : label = 609
//  <co-state>
609  :     LoadCapturedVar: var = 5(<captured><co-state>)
//  7
610  :     LoadValue     : value = <I8, 7>
//  (<co-state> == 7)
611  :     CompareValue  
//  if ((<co-state> == 7))
612  :     OpNot         : type = Bool
//  if ((<co-state> == 7))
613  :     JumpIf        : label = 636
//  Waiting
614  :     LoadValue     : value = <enum: 0>
//  SetStatus(Waiting)
615  :     InvokeWithContext: func = 20(<method:SetStatus<system::Coroutine>(20)> in <lambda:(18)> in GetMultipleString), stackPatternCount = 1
//  SetStatus(Waiting);
616  :     Pop           
//  <co-state>
617  :     LoadCapturedVar: var = 5(<captured><co-state>)
//  (<co-state-before-pause> = <co-state>)
618  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = <co-state>)
619  :     StoreCapturedVar: var = 6
//  (<co-state-before-pause> = <co-state>);
620  :     Pop           
//  2
621  :     LoadValue     : value = <I8, 2>
//  (<co-state> = 2)
622  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 2)
623  :     StoreCapturedVar: var = 5
//  (<co-state> = 2);
624  :     Pop           
//  <co-impl>
625  :     LoadCapturedVar: var = 9(<captured><co-impl>)
//  0
626  :     LoadValue     : value = <I8, 0>
//  Async::Delay(0)
627  :     LoadValue     : value = <null>
//  Async::Delay(0)
628  :     InvokeMethod  : methodInfo = Delay<system::Async>, stackPatternCount = 1
//  ::system::AsyncCoroutine::AwaitAndRead(<co-impl>, Async::Delay(0))
629  :     LoadValue     : value = <null>
//  ::system::AsyncCoroutine::AwaitAndRead(<co-impl>, Async::Delay(0))
630  :     InvokeMethod  : methodInfo = AwaitAndRead<system::AsyncCoroutine>, stackPatternCount = 2
//  ::system::AsyncCoroutine::AwaitAndRead(<co-impl>, Async::Delay(0));
631  :     Pop           
//  try
632  :     UninstallTry  : stackPatternCount = 0
//  return;
633  :     LoadValue     : value = <null>
//  return;
634  :     Return        
//  if ((<co-state> == 7))
635  :     Jump          : label = 636
//  while (true)
636  :     Jump          : label = 368
//  try
637  :     UninstallTry  : stackPatternCount = 0
//  try
638  :     Jump          : label = 653
//  try
639  :     LoadException 
//  try
640  :     StoreLocalVar : var = 2(<catch><co-ex>)
//  <co-ex>
641  :     LoadLocalVar  : var = 2(<catch><co-ex>)
//  SetFailure(<co-ex>)
642  :     InvokeWithContext: func = 19(<method:SetFailure<system::Coroutine>(19)> in <lambda:(18)> in GetMultipleString), stackPatternCount = 1
//  SetFailure(<co-ex>);
643  :     Pop           
//  Stopped
644  :     LoadValue     : value = <enum: 2>
//  SetStatus(Stopped)
645  :     InvokeWithContext: func = 20(<method:SetStatus<system::Coroutine>(20)> in <lambda:(18)> in GetMultipleString), stackPatternCount = 1
//  SetStatus(Stopped);
646  :     Pop           
//  <raise-exception>
647  :     LoadLocalVar  : var = 0(<raise-exception>)
//  if (<raise-exception>)
648  :     OpNot         : type = Bool
//  if (<raise-exception>)
649  :     JumpIf        : label = 653
//  raise;
650  :     LoadLocalVar  : var = 2(<catch><co-ex>)
//  raise;
651  :     RaiseException
//  if (<raise-exception>)
652  :     Jump          : label = 653
//  func Resume(<raise-exception> : ::system::Boolean, <co-result> : ::system::CoroutineResult^) : (::system::Void)
653  :     LoadValue     : value = <null>
//  func Resume(<raise-exception> : ::system::Boolean, <co-result> : ::system::CoroutineResult^) : (::system::Void)
654  :     Return        
//  [GetMultipleString()]
655  :     CreateClosureContext: stackPatternCount = 0
//  [GetMultipleString()]
656  :     LoadFunction  : func = 24(<lambda:(24)> in main)
//  [GetMultipleString()]
657  :     CreateClosure 
//  SyncScheduler::Run([GetMultipleString()])
658  :     LoadValue     : value = <null>
//  SyncScheduler::Run([GetMultipleString()])
659  :     InvokeMethod  : methodInfo = Run<test::SyncScheduler>, stackPatternCount = 1
//  SyncScheduler::Run([GetMultipleString()]);
660  :     Pop           
//  s
661  :     LoadGlobalVar : var = 0(s)
//  return s;
662  :     Return        
//  func main() : (string)
663  :     LoadValue     : value = <null>
//  func main() : (string)
664  :     Return        
//  GetMultipleString()
665  :     Invoke        : func = 4(GetMultipleString), stackPatternCount = 0
//  [GetMultipleString()]
666  :     Return        
//  [GetMultipleString()]
667  :     LoadValue     : value = <null>
//  [GetMultipleString()]
668  :     Return        
