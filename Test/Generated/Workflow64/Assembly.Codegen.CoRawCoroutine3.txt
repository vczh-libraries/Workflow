========================================================
Global Variables:
========================================================
s

========================================================
Functions:
========================================================
main (4 .. 75)
    Arguments:
    Captured Variables:
    Local Variables:
        coroutine
        i

<initialize> (0 .. 3)
    Arguments:
    Captured Variables:
    Local Variables:

<method:SetFailure<system::Coroutine>(2)> in main (76 .. 81)
    Arguments:
        <value>
    Captured Variables:
        <captured><co-tempexvar0>ex
        <captured><co0-switch>0
        <captured><co1-for-begin>i
        <captured><co2-for-end>i
        <captured><co3>i
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured-this>0
    Local Variables:

<method:SetStatus<system::Coroutine>(3)> in main (82 .. 87)
    Arguments:
        <value>
    Captured Variables:
        <captured><co-tempexvar0>ex
        <captured><co0-switch>0
        <captured><co1-for-begin>i
        <captured><co2-for-end>i
        <captured><co3>i
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured-this>0
    Local Variables:

<method:GetFailure<system::Coroutine>(6)> in main (88 .. 91)
    Arguments:
    Captured Variables:
        <captured><co-tempexvar0>ex
        <captured><co0-switch>0
        <captured><co1-for-begin>i
        <captured><co2-for-end>i
        <captured><co3>i
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured-this>0
    Local Variables:

<method:GetStatus<system::Coroutine>(7)> in main (92 .. 95)
    Arguments:
    Captured Variables:
        <captured><co-tempexvar0>ex
        <captured><co0-switch>0
        <captured><co1-for-begin>i
        <captured><co2-for-end>i
        <captured><co3>i
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured-this>0
    Local Variables:

<method:Resume<system::Coroutine>(8)> in main (96 .. 406)
    Arguments:
        <raise-exception>
        <coroutine-output>
    Captured Variables:
        <captured><co-tempexvar0>ex
        <captured><co0-switch>0
        <captured><co1-for-begin>i
        <captured><co2-for-end>i
        <captured><co3>i
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured-this>0
    Local Variables:
        <anonymous-range-test>
        <catch><co-ex>
        <catch><co-ex>

========================================================
Instructions:
========================================================
//  ""
0    :     LoadValue     : value = <String, >
//  var s = "";
1    :     StoreGlobalVar: var = 0(s)
2    :     LoadValue     : value = <null>
3    :     Return        
//  null
4    :     LoadValue     : value = <null>
//  0
5    :     LoadValue     : value = <I8, 0>
//  0
6    :     LoadValue     : value = <I8, 0>
//  0
7    :     LoadValue     : value = <I8, 0>
//  0
8    :     LoadValue     : value = <I8, 0>
//  0
9    :     LoadValue     : value = <I8, 0>
//  1
10   :     LoadValue     : value = <I8, 1>
//  (-1)
11   :     OpNegative    : type = I8
//  null
12   :     LoadValue     : value = <null>
//  Waiting
13   :     LoadValue     : value = <enum: 0>
//  new (::system::Coroutine^)
14   :     LoadValue     : value = <null>
//  new (::system::Coroutine^)
15   :     CreateClosureContext: stackPatternCount = 10
//  new (::system::Coroutine^)
16   :     LoadMethodInfo: methodInfo = GetFailure<system::Coroutine>
//  func GetFailure() : (::system::Exception^)
17   :     LoadFunction  : func = 4(<method:GetFailure<system::Coroutine>(6)> in main)
//  new (::system::Coroutine^)
18   :     LoadMethodInfo: methodInfo = GetStatus<system::Coroutine>
//  func GetStatus() : (::system::CoroutineStatus)
19   :     LoadFunction  : func = 5(<method:GetStatus<system::Coroutine>(7)> in main)
//  new (::system::Coroutine^)
20   :     LoadMethodInfo: methodInfo = Resume<system::Coroutine>
//  func Resume(<raise-exception> : ::system::Boolean, <coroutine-output> : ::system::CoroutineResult^) : (::system::Void)
21   :     LoadFunction  : func = 6(<method:Resume<system::Coroutine>(8)> in main)
//  new (::system::Coroutine^)
22   :     CreateInterface: methodInfo = <system::Coroutine>, stackPatternCount = 6
//  var coroutine = new (::system::Coroutine^)
23   :     StoreLocalVar : var = 0(coroutine)
//  0
24   :     LoadValue     : value = <I8, 0>
//  var i = 0;
25   :     StoreLocalVar : var = 1(i)
//  coroutine
26   :     LoadLocalVar  : var = 0(coroutine)
//  coroutine.Status
27   :     InvokeMethod  : methodInfo = GetStatus<system::Coroutine>, stackPatternCount = 0
//  CoroutineStatus::Stopped
28   :     LoadValue     : value = <enum: 2>
//  (coroutine.Status != CoroutineStatus::Stopped)
29   :     CompareValue  
//  (coroutine.Status != CoroutineStatus::Stopped)
30   :     OpNot         : type = Bool
//  while ((coroutine.Status != CoroutineStatus::Stopped))
31   :     OpNot         : type = Bool
//  while ((coroutine.Status != CoroutineStatus::Stopped))
32   :     JumpIf        : label = 58
//  false
33   :     LoadValue     : value = <Bool, false>
//  null
34   :     LoadValue     : value = <null>
//  coroutine
35   :     LoadLocalVar  : var = 0(coroutine)
//  coroutine.Resume(false, null)
36   :     InvokeMethod  : methodInfo = Resume<system::Coroutine>, stackPatternCount = 2
//  coroutine.Resume(false, null);
37   :     Pop           
//  ""
38   :     LoadValue     : value = <String, >
//  s
39   :     LoadGlobalVar : var = 0(s)
//  ("" & s)
40   :     OpConcat      
//  "[-"
41   :     LoadValue     : value = <String, [->
//  (("" & s) & "[-")
42   :     OpConcat      
//  i
43   :     LoadLocalVar  : var = 1(i)
//  i
44   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  ((("" & s) & "[-") & i)
45   :     OpConcat      
//  "]"
46   :     LoadValue     : value = <String, ]>
//  (((("" & s) & "[-") & i) & "]")
47   :     OpConcat      
//  (s = (((("" & s) & "[-") & i) & "]"))
48   :     Duplicate     : stackPatternCount = 0
//  (s = (((("" & s) & "[-") & i) & "]"))
49   :     StoreGlobalVar: var = 0(s)
//  (s = (((("" & s) & "[-") & i) & "]"));
50   :     Pop           
//  i
51   :     LoadLocalVar  : var = 1(i)
//  1
52   :     LoadValue     : value = <I8, 1>
//  (i + 1)
53   :     OpAdd         : type = I8
//  (i = (i + 1))
54   :     Duplicate     : stackPatternCount = 0
//  (i = (i + 1))
55   :     StoreLocalVar : var = 1(i)
//  (i = (i + 1));
56   :     Pop           
//  while ((coroutine.Status != CoroutineStatus::Stopped))
57   :     Jump          : label = 26
//  ""
58   :     LoadValue     : value = <String, >
//  s
59   :     LoadGlobalVar : var = 0(s)
//  ("" & s)
60   :     OpConcat      
//  "["
61   :     LoadValue     : value = <String, [>
//  (("" & s) & "[")
62   :     OpConcat      
//  coroutine
63   :     LoadLocalVar  : var = 0(coroutine)
//  coroutine.Failure
64   :     InvokeMethod  : methodInfo = GetFailure<system::Coroutine>, stackPatternCount = 0
//  coroutine.Failure.Message
65   :     InvokeMethod  : methodInfo = GetMessage<system::Exception>, stackPatternCount = 0
//  ((("" & s) & "[") & coroutine.Failure.Message)
66   :     OpConcat      
//  "]"
67   :     LoadValue     : value = <String, ]>
//  (((("" & s) & "[") & coroutine.Failure.Message) & "]")
68   :     OpConcat      
//  (s = (((("" & s) & "[") & coroutine.Failure.Message) & "]"))
69   :     Duplicate     : stackPatternCount = 0
//  (s = (((("" & s) & "[") & coroutine.Failure.Message) & "]"))
70   :     StoreGlobalVar: var = 0(s)
//  (s = (((("" & s) & "[") & coroutine.Failure.Message) & "]"));
71   :     Pop           
//  s
72   :     LoadGlobalVar : var = 0(s)
//  return s;
73   :     Return        
//  func main() : (string)
74   :     LoadValue     : value = <null>
//  func main() : (string)
75   :     Return        
//  <value>
76   :     LoadLocalVar  : var = 0(<value>)
//  (<prop>Failure = <value>)
77   :     Duplicate     : stackPatternCount = 0
//  (<prop>Failure = <value>)
78   :     StoreCapturedVar: var = 7
//  (<prop>Failure = <value>);
79   :     Pop           
//  func SetFailure(<value> : ::system::Exception^) : (void)
80   :     LoadValue     : value = <null>
//  func SetFailure(<value> : ::system::Exception^) : (void)
81   :     Return        
//  <value>
82   :     LoadLocalVar  : var = 0(<value>)
//  (<prop>Status = <value>)
83   :     Duplicate     : stackPatternCount = 0
//  (<prop>Status = <value>)
84   :     StoreCapturedVar: var = 8
//  (<prop>Status = <value>);
85   :     Pop           
//  func SetStatus(<value> : ::system::CoroutineStatus) : (void)
86   :     LoadValue     : value = <null>
//  func SetStatus(<value> : ::system::CoroutineStatus) : (void)
87   :     Return        
//  <prop>Failure
88   :     LoadCapturedVar: var = 7(<captured><prop>Failure)
//  return <prop>Failure;
89   :     Return        
//  func GetFailure() : (::system::Exception^)
90   :     LoadValue     : value = <null>
//  func GetFailure() : (::system::Exception^)
91   :     Return        
//  <prop>Status
92   :     LoadCapturedVar: var = 8(<captured><prop>Status)
//  return <prop>Status;
93   :     Return        
//  func GetStatus() : (::system::CoroutineStatus)
94   :     LoadValue     : value = <null>
//  func GetStatus() : (::system::CoroutineStatus)
95   :     Return        
//  Status
96   :     LoadCapturedVar: var = 9(<captured-this>0)
//  Status
97   :     InvokeMethod  : methodInfo = GetStatus<system::Coroutine>, stackPatternCount = 0
//  ::system::CoroutineStatus::Waiting
98   :     LoadValue     : value = <enum: 0>
//  (Status != ::system::CoroutineStatus::Waiting)
99   :     CompareValue  
//  (Status != ::system::CoroutineStatus::Waiting)
100  :     OpNot         : type = Bool
//  if ((Status != ::system::CoroutineStatus::Waiting))
101  :     OpNot         : type = Bool
//  if ((Status != ::system::CoroutineStatus::Waiting))
102  :     JumpIf        : label = 106
//  "Resume should be called only when the coroutine is in the waiting status."
103  :     LoadValue     : value = <String, Resume should be called only when the coroutine is in the waiting status.>
//  raise "Resume should be called only when the coroutine is in the waiting status.";
104  :     RaiseException
//  if ((Status != ::system::CoroutineStatus::Waiting))
105  :     Jump          : label = 106
//  Executing
106  :     LoadValue     : value = <enum: 1>
//  SetStatus(Executing)
107  :     InvokeWithContext: func = 3(<method:SetStatus<system::Coroutine>(3)> in main), stackPatternCount = 1
//  SetStatus(Executing);
108  :     Pop           
//  try
109  :     InstallTry    : label = 391
//  <co-state-before-pause>
110  :     LoadCapturedVar: var = 6(<captured><co-state-before-pause>)
//  1
111  :     LoadValue     : value = <I8, 1>
//  (-1)
112  :     OpNegative    : type = I8
//  (<co-state-before-pause> != (-1))
113  :     CompareValue  
//  (<co-state-before-pause> != (-1))
114  :     OpNot         : type = Bool
//  if ((<co-state-before-pause> != (-1)))
115  :     OpNot         : type = Bool
//  if ((<co-state-before-pause> != (-1)))
116  :     JumpIf        : label = 179
//  <coroutine-output>
117  :     LoadLocalVar  : var = 1(<coroutine-output>)
//  <coroutine-output> is null
118  :     LoadValue     : value = <null>
//  <coroutine-output> is null
119  :     CompareReference
//  if (<coroutine-output> is null)
120  :     OpNot         : type = Bool
//  if (<coroutine-output> is null)
121  :     JumpIf        : label = 128
//  1
122  :     LoadValue     : value = <I8, 1>
//  (-1)
123  :     OpNegative    : type = I8
//  (<co-state-before-pause> = (-1))
124  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = (-1))
125  :     StoreCapturedVar: var = 6
//  (<co-state-before-pause> = (-1));
126  :     Pop           
//  if (<coroutine-output> is null)
127  :     Jump          : label = 178
//  <coroutine-output>
128  :     LoadLocalVar  : var = 1(<coroutine-output>)
//  <coroutine-output>.Failure
129  :     InvokeMethod  : methodInfo = GetFailure<system::CoroutineResult>, stackPatternCount = 0
//  <coroutine-output>.Failure is null
130  :     LoadValue     : value = <null>
//  <coroutine-output>.Failure is null
131  :     CompareReference
//  if (<coroutine-output>.Failure is null)
132  :     OpNot         : type = Bool
//  if (<coroutine-output>.Failure is null)
133  :     JumpIf        : label = 140
//  1
134  :     LoadValue     : value = <I8, 1>
//  (-1)
135  :     OpNegative    : type = I8
//  (<co-state-before-pause> = (-1))
136  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = (-1))
137  :     StoreCapturedVar: var = 6
//  (<co-state-before-pause> = (-1));
138  :     Pop           
//  if (<coroutine-output>.Failure is null)
139  :     Jump          : label = 178
//  <co-state-before-pause>
140  :     LoadCapturedVar: var = 6(<captured><co-state-before-pause>)
//  <co-state-before-pause> in range [4, 5]
141  :     StoreLocalVar : var = 2(<anonymous-range-test>)
//  <co-state-before-pause> in range [4, 5]
142  :     LoadLocalVar  : var = 2(<anonymous-range-test>)
//  4
143  :     LoadValue     : value = <I8, 4>
//  <co-state-before-pause> in range [4, 5]
144  :     CompareLiteral: type = I8
//  <co-state-before-pause> in range [4, 5]
145  :     OpGE          
//  <co-state-before-pause> in range [4, 5]
146  :     LoadLocalVar  : var = 2(<anonymous-range-test>)
//  5
147  :     LoadValue     : value = <I8, 5>
//  <co-state-before-pause> in range [4, 5]
148  :     CompareLiteral: type = I8
//  <co-state-before-pause> in range [4, 5]
149  :     OpLE          
//  <co-state-before-pause> in range [4, 5]
150  :     OpAnd         : type = Bool
//  <co-state-before-pause> in range [4, 5]
151  :     LoadValue     : value = <null>
//  <co-state-before-pause> in range [4, 5]
152  :     StoreLocalVar : var = 2(<anonymous-range-test>)
//  if (<co-state-before-pause> in range [4, 5])
153  :     OpNot         : type = Bool
//  if (<co-state-before-pause> in range [4, 5])
154  :     JumpIf        : label = 170
//  1
155  :     LoadValue     : value = <I8, 1>
//  (-1)
156  :     OpNegative    : type = I8
//  (<co-state-before-pause> = (-1))
157  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = (-1))
158  :     StoreCapturedVar: var = 6
//  (<co-state-before-pause> = (-1));
159  :     Pop           
//  <coroutine-output>
160  :     LoadLocalVar  : var = 1(<coroutine-output>)
//  <coroutine-output>.Failure
161  :     InvokeMethod  : methodInfo = GetFailure<system::CoroutineResult>, stackPatternCount = 0
//  (<co-tempexvar0>ex = <coroutine-output>.Failure)
162  :     Duplicate     : stackPatternCount = 0
//  (<co-tempexvar0>ex = <coroutine-output>.Failure)
163  :     StoreCapturedVar: var = 0
//  (<co-tempexvar0>ex = <coroutine-output>.Failure);
164  :     Pop           
//  3
165  :     LoadValue     : value = <I8, 3>
//  (<co-state> = 3)
166  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 3)
167  :     StoreCapturedVar: var = 5
//  (<co-state> = 3);
168  :     Pop           
//  if (<co-state-before-pause> in range [4, 5])
169  :     Jump          : label = 178
//  1
170  :     LoadValue     : value = <I8, 1>
//  (-1)
171  :     OpNegative    : type = I8
//  (<co-state-before-pause> = (-1))
172  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = (-1))
173  :     StoreCapturedVar: var = 6
//  (<co-state-before-pause> = (-1));
174  :     Pop           
//  <coroutine-output>
175  :     LoadLocalVar  : var = 1(<coroutine-output>)
//  <coroutine-output>.Failure
176  :     InvokeMethod  : methodInfo = GetFailure<system::CoroutineResult>, stackPatternCount = 0
//  raise <coroutine-output>.Failure;
177  :     RaiseException
//  if ((<co-state-before-pause> != (-1)))
178  :     Jump          : label = 179
//  true
179  :     LoadValue     : value = <Bool, true>
//  while (true)
180  :     OpNot         : type = Bool
//  while (true)
181  :     JumpIf        : label = 389
//  <co-state>
182  :     LoadCapturedVar: var = 5(<captured><co-state>)
//  0
183  :     LoadValue     : value = <I8, 0>
//  (<co-state> == 0)
184  :     CompareValue  
//  if ((<co-state> == 0))
185  :     OpNot         : type = Bool
//  if ((<co-state> == 0))
186  :     JumpIf        : label = 219
//  0
187  :     LoadValue     : value = <I8, 0>
//  (<co1-for-begin>i = 0)
188  :     Duplicate     : stackPatternCount = 0
//  (<co1-for-begin>i = 0)
189  :     StoreCapturedVar: var = 2
//  (<co1-for-begin>i = 0);
190  :     Pop           
//  4
191  :     LoadValue     : value = <I8, 4>
//  1
192  :     LoadValue     : value = <I8, 1>
//  (4 - 1)
193  :     OpSub         : type = I8
//  (<co2-for-end>i = (4 - 1))
194  :     Duplicate     : stackPatternCount = 0
//  (<co2-for-end>i = (4 - 1))
195  :     StoreCapturedVar: var = 3
//  (<co2-for-end>i = (4 - 1));
196  :     Pop           
//  <co1-for-begin>i
197  :     LoadCapturedVar: var = 2(<captured><co1-for-begin>i)
//  (<co3>i = <co1-for-begin>i)
198  :     Duplicate     : stackPatternCount = 0
//  (<co3>i = <co1-for-begin>i)
199  :     StoreCapturedVar: var = 4
//  (<co3>i = <co1-for-begin>i);
200  :     Pop           
//  <co3>i
201  :     LoadCapturedVar: var = 4(<captured><co3>i)
//  <co2-for-end>i
202  :     LoadCapturedVar: var = 3(<captured><co2-for-end>i)
//  (<co3>i <= <co2-for-end>i)
203  :     CompareLiteral: type = I8
//  (<co3>i <= <co2-for-end>i)
204  :     OpLE          
//  if ((<co3>i <= <co2-for-end>i))
205  :     OpNot         : type = Bool
//  if ((<co3>i <= <co2-for-end>i))
206  :     JumpIf        : label = 213
//  4
207  :     LoadValue     : value = <I8, 4>
//  (<co-state> = 4)
208  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 4)
209  :     StoreCapturedVar: var = 5
//  (<co-state> = 4);
210  :     Pop           
//  continue;
211  :     Jump          : label = 179
//  if ((<co3>i <= <co2-for-end>i))
212  :     Jump          : label = 213
//  1
213  :     LoadValue     : value = <I8, 1>
//  (<co-state> = 1)
214  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 1)
215  :     StoreCapturedVar: var = 5
//  (<co-state> = 1);
216  :     Pop           
//  continue;
217  :     Jump          : label = 179
//  if ((<co-state> == 0))
218  :     Jump          : label = 219
//  <co-state>
219  :     LoadCapturedVar: var = 5(<captured><co-state>)
//  1
220  :     LoadValue     : value = <I8, 1>
//  (<co-state> == 1)
221  :     CompareValue  
//  if ((<co-state> == 1))
222  :     OpNot         : type = Bool
//  if ((<co-state> == 1))
223  :     JumpIf        : label = 231
//  Stopped
224  :     LoadValue     : value = <enum: 2>
//  SetStatus(Stopped)
225  :     InvokeWithContext: func = 3(<method:SetStatus<system::Coroutine>(3)> in main), stackPatternCount = 1
//  SetStatus(Stopped);
226  :     Pop           
//  try
227  :     UninstallTry  : stackPatternCount = 0
//  return;
228  :     LoadValue     : value = <null>
//  return;
229  :     Return        
//  if ((<co-state> == 1))
230  :     Jump          : label = 231
//  <co-state>
231  :     LoadCapturedVar: var = 5(<captured><co-state>)
//  2
232  :     LoadValue     : value = <I8, 2>
//  (<co-state> == 2)
233  :     CompareValue  
//  if ((<co-state> == 2))
234  :     OpNot         : type = Bool
//  if ((<co-state> == 2))
235  :     JumpIf        : label = 260
//  <co3>i
236  :     LoadCapturedVar: var = 4(<captured><co3>i)
//  1
237  :     LoadValue     : value = <I8, 1>
//  (<co3>i + 1)
238  :     OpAdd         : type = I8
//  (<co3>i = (<co3>i + 1))
239  :     Duplicate     : stackPatternCount = 0
//  (<co3>i = (<co3>i + 1))
240  :     StoreCapturedVar: var = 4
//  (<co3>i = (<co3>i + 1));
241  :     Pop           
//  <co3>i
242  :     LoadCapturedVar: var = 4(<captured><co3>i)
//  <co2-for-end>i
243  :     LoadCapturedVar: var = 3(<captured><co2-for-end>i)
//  (<co3>i <= <co2-for-end>i)
244  :     CompareLiteral: type = I8
//  (<co3>i <= <co2-for-end>i)
245  :     OpLE          
//  if ((<co3>i <= <co2-for-end>i))
246  :     OpNot         : type = Bool
//  if ((<co3>i <= <co2-for-end>i))
247  :     JumpIf        : label = 254
//  4
248  :     LoadValue     : value = <I8, 4>
//  (<co-state> = 4)
249  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 4)
250  :     StoreCapturedVar: var = 5
//  (<co-state> = 4);
251  :     Pop           
//  continue;
252  :     Jump          : label = 179
//  if ((<co3>i <= <co2-for-end>i))
253  :     Jump          : label = 254
//  1
254  :     LoadValue     : value = <I8, 1>
//  (<co-state> = 1)
255  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 1)
256  :     StoreCapturedVar: var = 5
//  (<co-state> = 1);
257  :     Pop           
//  continue;
258  :     Jump          : label = 179
//  if ((<co-state> == 2))
259  :     Jump          : label = 260
//  <co-state>
260  :     LoadCapturedVar: var = 5(<captured><co-state>)
//  3
261  :     LoadValue     : value = <I8, 3>
//  (<co-state> == 3)
262  :     CompareValue  
//  if ((<co-state> == 3))
263  :     OpNot         : type = Bool
//  if ((<co-state> == 3))
264  :     JumpIf        : label = 277
//  ""
265  :     LoadValue     : value = <String, >
//  s
266  :     LoadGlobalVar : var = 0(s)
//  ("" & s)
267  :     OpConcat      
//  "!"
268  :     LoadValue     : value = <String, !>
//  (("" & s) & "!")
269  :     OpConcat      
//  (s = (("" & s) & "!"))
270  :     Duplicate     : stackPatternCount = 0
//  (s = (("" & s) & "!"))
271  :     StoreGlobalVar: var = 0(s)
//  (s = (("" & s) & "!"));
272  :     Pop           
//  <co-tempexvar0>ex
273  :     LoadCapturedVar: var = 0(<captured><co-tempexvar0>ex)
//  <co-tempexvar0>ex.Message
274  :     InvokeMethod  : methodInfo = GetMessage<system::Exception>, stackPatternCount = 0
//  raise <co-tempexvar0>ex.Message;
275  :     RaiseException
//  if ((<co-state> == 3))
276  :     Jump          : label = 277
//  <co-state>
277  :     LoadCapturedVar: var = 5(<captured><co-state>)
//  6
278  :     LoadValue     : value = <I8, 6>
//  (<co-state> == 6)
279  :     CompareValue  
//  if ((<co-state> == 6))
280  :     OpNot         : type = Bool
//  if ((<co-state> == 6))
281  :     JumpIf        : label = 296
//  ""
282  :     LoadValue     : value = <String, >
//  s
283  :     LoadGlobalVar : var = 0(s)
//  ("" & s)
284  :     OpConcat      
//  "!"
285  :     LoadValue     : value = <String, !>
//  (("" & s) & "!")
286  :     OpConcat      
//  (s = (("" & s) & "!"))
287  :     Duplicate     : stackPatternCount = 0
//  (s = (("" & s) & "!"))
288  :     StoreGlobalVar: var = 0(s)
//  (s = (("" & s) & "!"));
289  :     Pop           
//  2
290  :     LoadValue     : value = <I8, 2>
//  (<co-state> = 2)
291  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 2)
292  :     StoreCapturedVar: var = 5
//  (<co-state> = 2);
293  :     Pop           
//  continue;
294  :     Jump          : label = 179
//  if ((<co-state> == 6))
295  :     Jump          : label = 296
//  try
296  :     InstallTry    : label = 377
//  <co-state>
297  :     LoadCapturedVar: var = 5(<captured><co-state>)
//  4
298  :     LoadValue     : value = <I8, 4>
//  (<co-state> == 4)
299  :     CompareValue  
//  if ((<co-state> == 4))
300  :     OpNot         : type = Bool
//  if ((<co-state> == 4))
301  :     JumpIf        : label = 354
//  <co3>i
302  :     LoadCapturedVar: var = 4(<captured><co3>i)
//  2
303  :     LoadValue     : value = <I8, 2>
//  (<co3>i % 2)
304  :     OpMod         : type = I8
//  (<co0-switch>0 = (<co3>i % 2))
305  :     Duplicate     : stackPatternCount = 0
//  (<co0-switch>0 = (<co3>i % 2))
306  :     StoreCapturedVar: var = 1
//  (<co0-switch>0 = (<co3>i % 2));
307  :     Pop           
//  <co0-switch>0
308  :     LoadCapturedVar: var = 1(<captured><co0-switch>0)
//  0
309  :     LoadValue     : value = <I8, 0>
//  (<co0-switch>0 == 0 of (::system::Int64))
310  :     CompareValue  
//  if ((<co0-switch>0 == 0 of (::system::Int64)))
311  :     OpNot         : type = Bool
//  if ((<co0-switch>0 == 0 of (::system::Int64)))
312  :     JumpIf        : label = 333
//  ""
313  :     LoadValue     : value = <String, >
//  s
314  :     LoadGlobalVar : var = 0(s)
//  ("" & s)
315  :     OpConcat      
//  "[+"
316  :     LoadValue     : value = <String, [+>
//  (("" & s) & "[+")
317  :     OpConcat      
//  <co3>i
318  :     LoadCapturedVar: var = 4(<captured><co3>i)
//  <co3>i
319  :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  ((("" & s) & "[+") & <co3>i)
320  :     OpConcat      
//  "]"
321  :     LoadValue     : value = <String, ]>
//  (((("" & s) & "[+") & <co3>i) & "]")
322  :     OpConcat      
//  (s = (((("" & s) & "[+") & <co3>i) & "]"))
323  :     Duplicate     : stackPatternCount = 0
//  (s = (((("" & s) & "[+") & <co3>i) & "]"))
324  :     StoreGlobalVar: var = 0(s)
//  (s = (((("" & s) & "[+") & <co3>i) & "]"));
325  :     Pop           
//  5
326  :     LoadValue     : value = <I8, 5>
//  (<co-state> = 5)
327  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 5)
328  :     StoreCapturedVar: var = 5
//  (<co-state> = 5);
329  :     Pop           
//  try
330  :     UninstallTry  : stackPatternCount = 0
//  continue;
331  :     Jump          : label = 179
//  if ((<co0-switch>0 == 0 of (::system::Int64)))
332  :     Jump          : label = 333
//  <co0-switch>0
333  :     LoadCapturedVar: var = 1(<captured><co0-switch>0)
//  1
334  :     LoadValue     : value = <I8, 1>
//  (<co0-switch>0 == 1 of (::system::Int64))
335  :     CompareValue  
//  if ((<co0-switch>0 == 1 of (::system::Int64)))
336  :     OpNot         : type = Bool
//  if ((<co0-switch>0 == 1 of (::system::Int64)))
337  :     JumpIf        : label = 347
//  "*"
338  :     LoadValue     : value = <String, *>
//  raise "*";
339  :     RaiseException
//  6
340  :     LoadValue     : value = <I8, 6>
//  (<co-state> = 6)
341  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 6)
342  :     StoreCapturedVar: var = 5
//  (<co-state> = 6);
343  :     Pop           
//  try
344  :     UninstallTry  : stackPatternCount = 0
//  continue;
345  :     Jump          : label = 179
//  if ((<co0-switch>0 == 1 of (::system::Int64)))
346  :     Jump          : label = 347
//  6
347  :     LoadValue     : value = <I8, 6>
//  (<co-state> = 6)
348  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 6)
349  :     StoreCapturedVar: var = 5
//  (<co-state> = 6);
350  :     Pop           
//  try
351  :     UninstallTry  : stackPatternCount = 0
//  continue;
352  :     Jump          : label = 179
//  if ((<co-state> == 4))
353  :     Jump          : label = 354
//  <co-state>
354  :     LoadCapturedVar: var = 5(<captured><co-state>)
//  5
355  :     LoadValue     : value = <I8, 5>
//  (<co-state> == 5)
356  :     CompareValue  
//  if ((<co-state> == 5))
357  :     OpNot         : type = Bool
//  if ((<co-state> == 5))
358  :     JumpIf        : label = 375
//  Waiting
359  :     LoadValue     : value = <enum: 0>
//  SetStatus(Waiting)
360  :     InvokeWithContext: func = 3(<method:SetStatus<system::Coroutine>(3)> in main), stackPatternCount = 1
//  SetStatus(Waiting);
361  :     Pop           
//  <co-state>
362  :     LoadCapturedVar: var = 5(<captured><co-state>)
//  (<co-state-before-pause> = <co-state>)
363  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = <co-state>)
364  :     StoreCapturedVar: var = 6
//  (<co-state-before-pause> = <co-state>);
365  :     Pop           
//  6
366  :     LoadValue     : value = <I8, 6>
//  (<co-state> = 6)
367  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 6)
368  :     StoreCapturedVar: var = 5
//  (<co-state> = 6);
369  :     Pop           
//  try
370  :     UninstallTry  : stackPatternCount = 0
//  try
371  :     UninstallTry  : stackPatternCount = 0
//  return;
372  :     LoadValue     : value = <null>
//  return;
373  :     Return        
//  if ((<co-state> == 5))
374  :     Jump          : label = 375
//  try
375  :     UninstallTry  : stackPatternCount = 0
//  try
376  :     Jump          : label = 388
//  try
377  :     LoadException 
//  try
378  :     StoreLocalVar : var = 3(<catch><co-ex>)
//  <co-ex>
379  :     LoadLocalVar  : var = 3(<catch><co-ex>)
//  (<co-tempexvar0>ex = <co-ex>)
380  :     Duplicate     : stackPatternCount = 0
//  (<co-tempexvar0>ex = <co-ex>)
381  :     StoreCapturedVar: var = 0
//  (<co-tempexvar0>ex = <co-ex>);
382  :     Pop           
//  3
383  :     LoadValue     : value = <I8, 3>
//  (<co-state> = 3)
384  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 3)
385  :     StoreCapturedVar: var = 5
//  (<co-state> = 3);
386  :     Pop           
//  continue;
387  :     Jump          : label = 179
//  while (true)
388  :     Jump          : label = 179
//  try
389  :     UninstallTry  : stackPatternCount = 0
//  try
390  :     Jump          : label = 405
//  try
391  :     LoadException 
//  try
392  :     StoreLocalVar : var = 4(<catch><co-ex>)
//  <co-ex>
393  :     LoadLocalVar  : var = 4(<catch><co-ex>)
//  SetFailure(<co-ex>)
394  :     InvokeWithContext: func = 2(<method:SetFailure<system::Coroutine>(2)> in main), stackPatternCount = 1
//  SetFailure(<co-ex>);
395  :     Pop           
//  Stopped
396  :     LoadValue     : value = <enum: 2>
//  SetStatus(Stopped)
397  :     InvokeWithContext: func = 3(<method:SetStatus<system::Coroutine>(3)> in main), stackPatternCount = 1
//  SetStatus(Stopped);
398  :     Pop           
//  <raise-exception>
399  :     LoadLocalVar  : var = 0(<raise-exception>)
//  if (<raise-exception>)
400  :     OpNot         : type = Bool
//  if (<raise-exception>)
401  :     JumpIf        : label = 405
//  raise;
402  :     LoadLocalVar  : var = 4(<catch><co-ex>)
//  raise;
403  :     RaiseException
//  if (<raise-exception>)
404  :     Jump          : label = 405
//  func Resume(<raise-exception> : ::system::Boolean, <coroutine-output> : ::system::CoroutineResult^) : (::system::Void)
405  :     LoadValue     : value = <null>
//  func Resume(<raise-exception> : ::system::Boolean, <coroutine-output> : ::system::CoroutineResult^) : (::system::Void)
406  :     Return        
