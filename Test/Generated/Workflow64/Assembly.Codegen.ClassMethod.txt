========================================================
Global Variables:
========================================================
s

========================================================
Functions:
========================================================
Methods::#ctor (4 .. 8)
    Arguments:
    Captured Variables:
        <captured-this>0
    Local Variables:

Methods::#ctor (9 .. 29)
    Arguments:
        _x
    Captured Variables:
        <captured-this>0
    Local Variables:

Methods::GetX (30 .. 45)
    Arguments:
    Captured Variables:
        <captured-this>0
    Local Variables:

Methods::SetX (46 .. 63)
    Arguments:
        _x
    Captured Variables:
        <captured-this>0
    Local Variables:

main (64 .. 156)
    Arguments:
    Captured Variables:
    Local Variables:
        a
        a
        a
        handler

<initialize> (0 .. 3)
    Arguments:
    Captured Variables:
    Local Variables:

<lambda:(6)> in main (157 .. 170)
    Arguments:
    Captured Variables:
        <captured>a
    Local Variables:

========================================================
Instructions:
========================================================
//  ""
0    :     LoadValue     : value = <Bool, >
//  var s = "";
1    :     StoreGlobalVar: var = 0(s)
2    :     LoadValue     : value = <null>
3    :     Return        
//  0
4    :     LoadValue     : value = <I8, 0>
//  var x : int = 0;
5    :     LoadCapturedVar: var = 0(<captured-this>0)
//  var x : int = 0;
6    :     SetProperty   : propertyInfo = x<Methods>
//  new ()
7    :     LoadValue     : value = <null>
//  new ()
8    :     Return        
//  0
9    :     LoadValue     : value = <I8, 0>
//  var x : int = 0;
10   :     LoadCapturedVar: var = 0(<captured-this>0)
//  var x : int = 0;
11   :     SetProperty   : propertyInfo = x<Methods>
//  _x
12   :     LoadLocalVar  : var = 0(_x)
//  (x = _x)
13   :     Duplicate     : stackPatternCount = 0
//  (x = _x)
14   :     LoadCapturedVar: var = 0(<captured-this>0)
//  (x = _x)
15   :     SetProperty   : propertyInfo = x<Methods>
//  (x = _x);
16   :     Pop           
//  this
17   :     LoadCapturedVar: var = 0(<captured-this>0)
//  this.x
18   :     GetProperty   : propertyInfo = x<Methods>
//  x
19   :     LoadCapturedVar: var = 0(<captured-this>0)
//  x
20   :     GetProperty   : propertyInfo = x<Methods>
//  (this.x != x)
21   :     CompareValue  
//  (this.x != x)
22   :     OpNot         : type = Bool
//  if ((this.x != x))
23   :     OpNot         : type = Bool
//  if ((this.x != x))
24   :     JumpIf        : label = 28
//  "The \"this\" expression is not correctly implemented."
25   :     LoadValue     : value = <Bool, The "this" expression is not correctly implemented.>
//  raise "The \"this\" expression is not correctly implemented.";
26   :     RaiseException
//  if ((this.x != x))
27   :     Jump          : label = 28
//  new (_x : int)
28   :     LoadValue     : value = <null>
//  new (_x : int)
29   :     Return        
//  this
30   :     LoadCapturedVar: var = 0(<captured-this>0)
//  this.x
31   :     GetProperty   : propertyInfo = x<Methods>
//  x
32   :     LoadCapturedVar: var = 0(<captured-this>0)
//  x
33   :     GetProperty   : propertyInfo = x<Methods>
//  (this.x != x)
34   :     CompareValue  
//  (this.x != x)
35   :     OpNot         : type = Bool
//  if ((this.x != x))
36   :     OpNot         : type = Bool
//  if ((this.x != x))
37   :     JumpIf        : label = 41
//  "The \"this\" expression is not correctly implemented."
38   :     LoadValue     : value = <Bool, The "this" expression is not correctly implemented.>
//  raise "The \"this\" expression is not correctly implemented.";
39   :     RaiseException
//  if ((this.x != x))
40   :     Jump          : label = 41
//  x
41   :     LoadCapturedVar: var = 0(<captured-this>0)
//  x
42   :     GetProperty   : propertyInfo = x<Methods>
//  return x;
43   :     Return        
//  func GetX() : (int)
44   :     LoadValue     : value = <null>
//  func GetX() : (int)
45   :     Return        
//  x
46   :     LoadCapturedVar: var = 0(<captured-this>0)
//  x
47   :     GetProperty   : propertyInfo = x<Methods>
//  _x
48   :     LoadLocalVar  : var = 0(_x)
//  (x != _x)
49   :     CompareValue  
//  (x != _x)
50   :     OpNot         : type = Bool
//  if ((x != _x))
51   :     OpNot         : type = Bool
//  if ((x != _x))
52   :     JumpIf        : label = 62
//  _x
53   :     LoadLocalVar  : var = 0(_x)
//  (x = _x)
54   :     Duplicate     : stackPatternCount = 0
//  (x = _x)
55   :     LoadCapturedVar: var = 0(<captured-this>0)
//  (x = _x)
56   :     SetProperty   : propertyInfo = x<Methods>
//  (x = _x);
57   :     Pop           
//  XChanged()
58   :     LoadCapturedVar: var = 0(<captured-this>0)
//  XChanged()
59   :     InvokeEvent   : eventInfo = XChanged<Methods>, stackPatternCount = 0
//  XChanged();
60   :     Pop           
//  if ((x != _x))
61   :     Jump          : label = 62
//  func SetX(_x : int) : (void)
62   :     LoadValue     : value = <null>
//  func SetX(_x : int) : (void)
63   :     Return        
//  new (Methods^)()
64   :     LoadValue     : value = <null>
//  new (Methods^)()
65   :     InvokeMethod  : methodInfo = <Methods>, stackPatternCount = 0
//  var a = new (Methods^)();
66   :     StoreLocalVar : var = 0(a)
//  s
67   :     LoadGlobalVar : var = 0(s)
//  "["
68   :     LoadValue     : value = <Bool, [>
//  a
69   :     LoadLocalVar  : var = 0(a)
//  a.x
70   :     GetProperty   : propertyInfo = x<Methods>
//  a.x
71   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  ("[" & a.x)
72   :     OpConcat      
//  "]"
73   :     LoadValue     : value = <Bool, ]>
//  (("[" & a.x) & "]")
74   :     OpConcat      
//  (s & (("[" & a.x) & "]"))
75   :     OpConcat      
//  (s = (s & (("[" & a.x) & "]")))
76   :     Duplicate     : stackPatternCount = 0
//  (s = (s & (("[" & a.x) & "]")))
77   :     StoreGlobalVar: var = 0(s)
//  (s = (s & (("[" & a.x) & "]")));
78   :     Pop           
//  100
79   :     LoadValue     : value = <I8, 100>
//  new (Methods^)(100)
80   :     LoadValue     : value = <null>
//  new (Methods^)(100)
81   :     InvokeMethod  : methodInfo = <Methods>, stackPatternCount = 1
//  var a = new (Methods^)(100);
82   :     StoreLocalVar : var = 1(a)
//  s
83   :     LoadGlobalVar : var = 0(s)
//  "["
84   :     LoadValue     : value = <Bool, [>
//  a
85   :     LoadLocalVar  : var = 1(a)
//  a.x
86   :     GetProperty   : propertyInfo = x<Methods>
//  a.x
87   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  ("[" & a.x)
88   :     OpConcat      
//  "]"
89   :     LoadValue     : value = <Bool, ]>
//  (("[" & a.x) & "]")
90   :     OpConcat      
//  (s & (("[" & a.x) & "]"))
91   :     OpConcat      
//  (s = (s & (("[" & a.x) & "]")))
92   :     Duplicate     : stackPatternCount = 0
//  (s = (s & (("[" & a.x) & "]")))
93   :     StoreGlobalVar: var = 0(s)
//  (s = (s & (("[" & a.x) & "]")));
94   :     Pop           
//  1
95   :     LoadValue     : value = <I8, 1>
//  new (Methods^)(1)
96   :     LoadValue     : value = <null>
//  new (Methods^)(1)
97   :     InvokeMethod  : methodInfo = <Methods>, stackPatternCount = 1
//  var a = new (Methods^)(1);
98   :     StoreLocalVar : var = 2(a)
//  a
99   :     LoadLocalVar  : var = 2(a)
//  func () : (void)
100  :     LoadLocalVar  : var = 2(a)
//  func () : (void)
101  :     CreateClosureContext: stackPatternCount = 1
//  func () : (void)
102  :     LoadFunction  : func = 6(<lambda:(6)> in main)
//  func () : (void)
103  :     CreateClosure 
//  attach(a.XChanged, func () : (void)
104  :     AttachEvent   : eventInfo = XChanged<Methods>
//  var handler = attach(a.XChanged, func () : (void)
105  :     StoreLocalVar : var = 3(handler)
//  a
106  :     LoadLocalVar  : var = 2(a)
//  a.X
107  :     InvokeMethod  : methodInfo = GetX<Methods>, stackPatternCount = 0
//  1
108  :     LoadValue     : value = <I8, 1>
//  (a.X + 1)
109  :     OpAdd         : type = I8
//  (a.X = (a.X + 1))
110  :     Duplicate     : stackPatternCount = 0
//  a
111  :     LoadLocalVar  : var = 2(a)
//  (a.X = (a.X + 1))
112  :     InvokeMethod  : methodInfo = SetX<Methods>, stackPatternCount = 1
//  (a.X = (a.X + 1))
113  :     Pop           
//  (a.X = (a.X + 1));
114  :     Pop           
//  a
115  :     LoadLocalVar  : var = 2(a)
//  a.X
116  :     InvokeMethod  : methodInfo = GetX<Methods>, stackPatternCount = 0
//  1
117  :     LoadValue     : value = <I8, 1>
//  (a.X - 1)
118  :     OpSub         : type = I8
//  (a.X = (a.X - 1))
119  :     Duplicate     : stackPatternCount = 0
//  a
120  :     LoadLocalVar  : var = 2(a)
//  (a.X = (a.X - 1))
121  :     InvokeMethod  : methodInfo = SetX<Methods>, stackPatternCount = 1
//  (a.X = (a.X - 1))
122  :     Pop           
//  (a.X = (a.X - 1));
123  :     Pop           
//  a
124  :     LoadLocalVar  : var = 2(a)
//  a.X
125  :     InvokeMethod  : methodInfo = GetX<Methods>, stackPatternCount = 0
//  (a.X = a.X)
126  :     Duplicate     : stackPatternCount = 0
//  a
127  :     LoadLocalVar  : var = 2(a)
//  (a.X = a.X)
128  :     InvokeMethod  : methodInfo = SetX<Methods>, stackPatternCount = 1
//  (a.X = a.X)
129  :     Pop           
//  (a.X = a.X);
130  :     Pop           
//  a
131  :     LoadLocalVar  : var = 2(a)
//  handler
132  :     LoadLocalVar  : var = 3(handler)
//  detach(a.XChanged, handler)
133  :     DetachEvent   : eventInfo = XChanged<Methods>
//  detach(a.XChanged, handler);
134  :     Pop           
//  100
135  :     LoadValue     : value = <I8, 100>
//  (a.X = 100)
136  :     Duplicate     : stackPatternCount = 0
//  a
137  :     LoadLocalVar  : var = 2(a)
//  (a.X = 100)
138  :     InvokeMethod  : methodInfo = SetX<Methods>, stackPatternCount = 1
//  (a.X = 100)
139  :     Pop           
//  (a.X = 100);
140  :     Pop           
//  s
141  :     LoadGlobalVar : var = 0(s)
//  "["
142  :     LoadValue     : value = <Bool, [>
//  a
143  :     LoadLocalVar  : var = 2(a)
//  a.X
144  :     InvokeMethod  : methodInfo = GetX<Methods>, stackPatternCount = 0
//  a.X
145  :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  ("[" & a.X)
146  :     OpConcat      
//  "]"
147  :     LoadValue     : value = <Bool, ]>
//  (("[" & a.X) & "]")
148  :     OpConcat      
//  (s & (("[" & a.X) & "]"))
149  :     OpConcat      
//  (s = (s & (("[" & a.X) & "]")))
150  :     Duplicate     : stackPatternCount = 0
//  (s = (s & (("[" & a.X) & "]")))
151  :     StoreGlobalVar: var = 0(s)
//  (s = (s & (("[" & a.X) & "]")));
152  :     Pop           
//  s
153  :     LoadGlobalVar : var = 0(s)
//  return s;
154  :     Return        
//  func main() : (string)
155  :     LoadValue     : value = <null>
//  func main() : (string)
156  :     Return        
//  s
157  :     LoadGlobalVar : var = 0(s)
//  "["
158  :     LoadValue     : value = <Bool, [>
//  a
159  :     LoadCapturedVar: var = 0(<captured>a)
//  a.X
160  :     InvokeMethod  : methodInfo = GetX<Methods>, stackPatternCount = 0
//  a.X
161  :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  ("[" & a.X)
162  :     OpConcat      
//  "]"
163  :     LoadValue     : value = <Bool, ]>
//  (("[" & a.X) & "]")
164  :     OpConcat      
//  (s & (("[" & a.X) & "]"))
165  :     OpConcat      
//  (s = (s & (("[" & a.X) & "]")))
166  :     Duplicate     : stackPatternCount = 0
//  (s = (s & (("[" & a.X) & "]")))
167  :     StoreGlobalVar: var = 0(s)
//  (s = (s & (("[" & a.X) & "]")));
168  :     Pop           
//  func () : (void)
169  :     LoadValue     : value = <null>
//  func () : (void)
170  :     Return        
