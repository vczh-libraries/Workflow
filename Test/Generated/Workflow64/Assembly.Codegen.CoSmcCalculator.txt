========================================================
Global Variables:
========================================================
s

========================================================
Functions:
========================================================
SMCalculator::GetValue (4 .. 8)
    Arguments:
    Captured Variables:
        <captured-this>0
    Local Variables:

SMCalculator::SetValue (9 .. 26)
    Arguments:
        <value>
    Captured Variables:
        <captured-this>0
    Local Variables:

SMCalculator::Update (27 .. 37)
    Arguments:
        value
    Captured Variables:
        <captured-this>0
    Local Variables:

SMCalculator::Calculate (38 .. 93)
    Arguments:
    Captured Variables:
        <captured-this>0
    Local Variables:

SMCalculator::Digit (94 .. 126)
    Arguments:
        i
    Captured Variables:
        <captured-this>0
    Local Variables:

SMCalculator::Dot (127 .. 154)
    Arguments:
    Captured Variables:
        <captured-this>0
    Local Variables:

SMCalculator::Add (155 .. 182)
    Arguments:
    Captured Variables:
        <captured-this>0
    Local Variables:

SMCalculator::Mul (183 .. 210)
    Arguments:
    Captured Variables:
        <captured-this>0
    Local Variables:

SMCalculator::Equal (211 .. 238)
    Arguments:
    Captured Variables:
        <captured-this>0
    Local Variables:

SMCalculator::Clear (239 .. 266)
    Arguments:
    Captured Variables:
        <captured-this>0
    Local Variables:

SMCalculator::<state>CreateCoroutine (267 .. 305)
    Arguments:
        <state>startState
    Captured Variables:
        <captured-this>0
    Local Variables:
        <state>stateMachineObject
        <state>previousCoroutine

SMCalculator::#ctor (1276 .. 1295)
    Arguments:
    Captured Variables:
        <captured-this>0
    Local Variables:

main (1296 .. 1368)
    Arguments:
    Captured Variables:
    Local Variables:
        c
        handler

<initialize> (0 .. 3)
    Arguments:
    Captured Variables:
    Local Variables:

<method:SetFailure<system::Coroutine>(14)> in SMCalculator::<state>CreateCoroutine (306 .. 311)
    Arguments:
        <value>
    Captured Variables:
        <captured><co-tempexvar0>ex
        <captured><co0>i
        <captured><co1-switch>0
        <captured><co2>i
        <captured><co3-switch>1
        <captured><co4>newNumber
        <captured><co5-switch>2
        <captured><co6-switch>4
        <captured><co7-state>currentState
        <captured><co8-state>state
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured><state>stateMachineObject
        <captured><state>previousCoroutine
        <captured><state>startState
        <captured-this>0
        <captured-this>1
    Local Variables:

<method:SetStatus<system::Coroutine>(15)> in SMCalculator::<state>CreateCoroutine (312 .. 317)
    Arguments:
        <value>
    Captured Variables:
        <captured><co-tempexvar0>ex
        <captured><co0>i
        <captured><co1-switch>0
        <captured><co2>i
        <captured><co3-switch>1
        <captured><co4>newNumber
        <captured><co5-switch>2
        <captured><co6-switch>4
        <captured><co7-state>currentState
        <captured><co8-state>state
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured><state>stateMachineObject
        <captured><state>previousCoroutine
        <captured><state>startState
        <captured-this>0
        <captured-this>1
    Local Variables:

<method:GetFailure<system::Coroutine>(18)> in SMCalculator::<state>CreateCoroutine (318 .. 321)
    Arguments:
    Captured Variables:
        <captured><co-tempexvar0>ex
        <captured><co0>i
        <captured><co1-switch>0
        <captured><co2>i
        <captured><co3-switch>1
        <captured><co4>newNumber
        <captured><co5-switch>2
        <captured><co6-switch>4
        <captured><co7-state>currentState
        <captured><co8-state>state
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured><state>stateMachineObject
        <captured><state>previousCoroutine
        <captured><state>startState
        <captured-this>0
        <captured-this>1
    Local Variables:

<method:GetStatus<system::Coroutine>(19)> in SMCalculator::<state>CreateCoroutine (322 .. 325)
    Arguments:
    Captured Variables:
        <captured><co-tempexvar0>ex
        <captured><co0>i
        <captured><co1-switch>0
        <captured><co2>i
        <captured><co3-switch>1
        <captured><co4>newNumber
        <captured><co5-switch>2
        <captured><co6-switch>4
        <captured><co7-state>currentState
        <captured><co8-state>state
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured><state>stateMachineObject
        <captured><state>previousCoroutine
        <captured><state>startState
        <captured-this>0
        <captured-this>1
    Local Variables:

<method:Resume<system::Coroutine>(20)> in SMCalculator::<state>CreateCoroutine (326 .. 1275)
    Arguments:
        <raise-exception>
        <coroutine-output>
    Captured Variables:
        <captured><co-tempexvar0>ex
        <captured><co0>i
        <captured><co1-switch>0
        <captured><co2>i
        <captured><co3-switch>1
        <captured><co4>newNumber
        <captured><co5-switch>2
        <captured><co6-switch>4
        <captured><co7-state>currentState
        <captured><co8-state>state
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured><state>stateMachineObject
        <captured><state>previousCoroutine
        <captured><state>startState
        <captured-this>0
        <captured-this>1
    Local Variables:
        <anonymous-range-test>
        <switch>3
        <catch><co-ex>
        <catch><co-ex>

<lambda:(19)> in main (1369 .. 1383)
    Arguments:
    Captured Variables:
        <captured>c
    Local Variables:

========================================================
Instructions:
========================================================
//  ""
0    :     LoadValue     : value = <Bool, >
//  var s = "";
1    :     StoreGlobalVar: var = 0(s)
2    :     LoadValue     : value = <null>
3    :     Return        
//  <prop>Value
4    :     LoadCapturedVar: var = 0(<captured-this>0)
//  <prop>Value
5    :     GetProperty   : propertyInfo = <prop>Value<SMCalculator>
//  return <prop>Value;
6    :     Return        
//  func GetValue() : (string)
7    :     LoadValue     : value = <null>
//  func GetValue() : (string)
8    :     Return        
//  <prop>Value
9    :     LoadCapturedVar: var = 0(<captured-this>0)
//  <prop>Value
10   :     GetProperty   : propertyInfo = <prop>Value<SMCalculator>
//  <value>
11   :     LoadLocalVar  : var = 0(<value>)
//  (<prop>Value != <value>)
12   :     CompareValue  
//  (<prop>Value != <value>)
13   :     OpNot         : type = Bool
//  if ((<prop>Value != <value>))
14   :     OpNot         : type = Bool
//  if ((<prop>Value != <value>))
15   :     JumpIf        : label = 25
//  <value>
16   :     LoadLocalVar  : var = 0(<value>)
//  (<prop>Value = <value>)
17   :     Duplicate     : stackPatternCount = 0
//  (<prop>Value = <value>)
18   :     LoadCapturedVar: var = 0(<captured-this>0)
//  (<prop>Value = <value>)
19   :     SetProperty   : propertyInfo = <prop>Value<SMCalculator>
//  (<prop>Value = <value>);
20   :     Pop           
//  ValueChanged()
21   :     LoadCapturedVar: var = 0(<captured-this>0)
//  ValueChanged()
22   :     InvokeEvent   : eventInfo = ValueChanged<SMCalculator>, stackPatternCount = 0
//  ValueChanged();
23   :     Pop           
//  if ((<prop>Value != <value>))
24   :     Jump          : label = 25
//  func SetValue(<value> : string) : (void)
25   :     LoadValue     : value = <null>
//  func SetValue(<value> : string) : (void)
26   :     Return        
//  value
27   :     LoadLocalVar  : var = 0(value)
//  SetValue(value)
28   :     LoadCapturedVar: var = 0(<captured-this>0)
//  SetValue(value)
29   :     InvokeMethod  : methodInfo = SetValue<SMCalculator>, stackPatternCount = 1
//  SetValue(value);
30   :     Pop           
//  value
31   :     LoadLocalVar  : var = 0(value)
//  (valueFirst = value)
32   :     Duplicate     : stackPatternCount = 0
//  (valueFirst = value)
33   :     LoadCapturedVar: var = 0(<captured-this>0)
//  (valueFirst = value)
34   :     SetProperty   : propertyInfo = valueFirst<SMCalculator>
//  (valueFirst = value);
35   :     Pop           
//  func Update(value : string) : (void)
36   :     LoadValue     : value = <null>
//  func Update(value : string) : (void)
37   :     Return        
//  valueFirst
38   :     LoadCapturedVar: var = 0(<captured-this>0)
//  valueFirst
39   :     GetProperty   : propertyInfo = valueFirst<SMCalculator>
//  ""
40   :     LoadValue     : value = <Bool, >
//  (valueFirst == "")
41   :     CompareValue  
//  if ((valueFirst == ""))
42   :     OpNot         : type = Bool
//  if ((valueFirst == ""))
43   :     JumpIf        : label = 51
//  Value
44   :     LoadCapturedVar: var = 0(<captured-this>0)
//  Value
45   :     InvokeMethod  : methodInfo = GetValue<SMCalculator>, stackPatternCount = 0
//  (valueFirst = Value)
46   :     Duplicate     : stackPatternCount = 0
//  (valueFirst = Value)
47   :     LoadCapturedVar: var = 0(<captured-this>0)
//  (valueFirst = Value)
48   :     SetProperty   : propertyInfo = valueFirst<SMCalculator>
//  (valueFirst = Value);
49   :     Pop           
//  if ((valueFirst == ""))
50   :     Jump          : label = 92
//  op
51   :     LoadCapturedVar: var = 0(<captured-this>0)
//  op
52   :     GetProperty   : propertyInfo = op<SMCalculator>
//  "+"
53   :     LoadValue     : value = <Bool, +>
//  (op == "+")
54   :     CompareValue  
//  if ((op == "+"))
55   :     OpNot         : type = Bool
//  if ((op == "+"))
56   :     JumpIf        : label = 69
//  valueFirst
57   :     LoadCapturedVar: var = 0(<captured-this>0)
//  valueFirst
58   :     GetProperty   : propertyInfo = valueFirst<SMCalculator>
//  valueFirst
59   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::Double
//  Value
60   :     LoadCapturedVar: var = 0(<captured-this>0)
//  Value
61   :     InvokeMethod  : methodInfo = GetValue<SMCalculator>, stackPatternCount = 0
//  Value
62   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::Double
//  ((cast (double) valueFirst) + (cast (double) Value))
63   :     OpAdd         : type = F8
//  ((cast (double) valueFirst) + (cast (double) Value))
64   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  Update(((cast (double) valueFirst) + (cast (double) Value)))
65   :     LoadCapturedVar: var = 0(<captured-this>0)
//  Update(((cast (double) valueFirst) + (cast (double) Value)))
66   :     InvokeMethod  : methodInfo = Update<SMCalculator>, stackPatternCount = 1
//  Update(((cast (double) valueFirst) + (cast (double) Value)));
67   :     Pop           
//  if ((op == "+"))
68   :     Jump          : label = 92
//  op
69   :     LoadCapturedVar: var = 0(<captured-this>0)
//  op
70   :     GetProperty   : propertyInfo = op<SMCalculator>
//  "*"
71   :     LoadValue     : value = <Bool, *>
//  (op == "*")
72   :     CompareValue  
//  if ((op == "*"))
73   :     OpNot         : type = Bool
//  if ((op == "*"))
74   :     JumpIf        : label = 87
//  valueFirst
75   :     LoadCapturedVar: var = 0(<captured-this>0)
//  valueFirst
76   :     GetProperty   : propertyInfo = valueFirst<SMCalculator>
//  valueFirst
77   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::Double
//  Value
78   :     LoadCapturedVar: var = 0(<captured-this>0)
//  Value
79   :     InvokeMethod  : methodInfo = GetValue<SMCalculator>, stackPatternCount = 0
//  Value
80   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::Double
//  ((cast (double) valueFirst) * (cast (double) Value))
81   :     OpMul         : type = F8
//  ((cast (double) valueFirst) * (cast (double) Value))
82   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  Update(((cast (double) valueFirst) * (cast (double) Value)))
83   :     LoadCapturedVar: var = 0(<captured-this>0)
//  Update(((cast (double) valueFirst) * (cast (double) Value)))
84   :     InvokeMethod  : methodInfo = Update<SMCalculator>, stackPatternCount = 1
//  Update(((cast (double) valueFirst) * (cast (double) Value)));
85   :     Pop           
//  if ((op == "*"))
86   :     Jump          : label = 92
//  "Unrecognized operator: "
87   :     LoadValue     : value = <Bool, Unrecognized operator: >
//  op
88   :     LoadCapturedVar: var = 0(<captured-this>0)
//  op
89   :     GetProperty   : propertyInfo = op<SMCalculator>
//  ("Unrecognized operator: " & op)
90   :     OpConcat      
//  raise ("Unrecognized operator: " & op);
91   :     RaiseException
//  func Calculate() : (void)
92   :     LoadValue     : value = <null>
//  func Calculate() : (void)
93   :     Return        
//  this
94   :     LoadCapturedVar: var = 0(<captured-this>0)
//  this.stateMachineInitialized
95   :     GetProperty   : propertyInfo = stateMachineInitialized<system::StateMachine>
//  (!this.stateMachineInitialized)
96   :     OpNot         : type = Bool
//  if ((!this.stateMachineInitialized))
97   :     OpNot         : type = Bool
//  if ((!this.stateMachineInitialized))
98   :     JumpIf        : label = 112
//  true
99   :     LoadValue     : value = <Bool, true>
//  (this.stateMachineInitialized = true)
100  :     Duplicate     : stackPatternCount = 0
//  this
101  :     LoadCapturedVar: var = 0(<captured-this>0)
//  (this.stateMachineInitialized = true)
102  :     SetProperty   : propertyInfo = stateMachineInitialized<system::StateMachine>
//  (this.stateMachineInitialized = true);
103  :     Pop           
//  0
104  :     LoadValue     : value = <I8, 0>
//  this
105  :     LoadCapturedVar: var = 0(<captured-this>0)
//  this.<state>CreateCoroutine(0)
106  :     InvokeMethod  : methodInfo = <state>CreateCoroutine<SMCalculator>, stackPatternCount = 1
//  this.<state>CreateCoroutine(0);
107  :     Pop           
//  this
108  :     LoadCapturedVar: var = 0(<captured-this>0)
//  this.ResumeStateMachine()
109  :     InvokeMethod  : methodInfo = ResumeStateMachine<system::StateMachine>, stackPatternCount = 0
//  this.ResumeStateMachine();
110  :     Pop           
//  if ((!this.stateMachineInitialized))
111  :     Jump          : label = 112
//  0
112  :     LoadValue     : value = <I8, 0>
//  (this.stateMachineInput = 0)
113  :     Duplicate     : stackPatternCount = 0
//  this
114  :     LoadCapturedVar: var = 0(<captured-this>0)
//  (this.stateMachineInput = 0)
115  :     SetProperty   : propertyInfo = stateMachineInput<system::StateMachine>
//  (this.stateMachineInput = 0);
116  :     Pop           
//  i
117  :     LoadLocalVar  : var = 0(i)
//  (this.<stateip-Digit>i = i)
118  :     Duplicate     : stackPatternCount = 0
//  this
119  :     LoadCapturedVar: var = 0(<captured-this>0)
//  (this.<stateip-Digit>i = i)
120  :     SetProperty   : propertyInfo = <stateip-Digit>i<SMCalculator>
//  (this.<stateip-Digit>i = i);
121  :     Pop           
//  this
122  :     LoadCapturedVar: var = 0(<captured-this>0)
//  this.ResumeStateMachine()
123  :     InvokeMethod  : methodInfo = ResumeStateMachine<system::StateMachine>, stackPatternCount = 0
//  this.ResumeStateMachine();
124  :     Pop           
//  func Digit(i : ::system::Int64) : (::system::Void)
125  :     LoadValue     : value = <null>
//  func Digit(i : ::system::Int64) : (::system::Void)
126  :     Return        
//  this
127  :     LoadCapturedVar: var = 0(<captured-this>0)
//  this.stateMachineInitialized
128  :     GetProperty   : propertyInfo = stateMachineInitialized<system::StateMachine>
//  (!this.stateMachineInitialized)
129  :     OpNot         : type = Bool
//  if ((!this.stateMachineInitialized))
130  :     OpNot         : type = Bool
//  if ((!this.stateMachineInitialized))
131  :     JumpIf        : label = 145
//  true
132  :     LoadValue     : value = <Bool, true>
//  (this.stateMachineInitialized = true)
133  :     Duplicate     : stackPatternCount = 0
//  this
134  :     LoadCapturedVar: var = 0(<captured-this>0)
//  (this.stateMachineInitialized = true)
135  :     SetProperty   : propertyInfo = stateMachineInitialized<system::StateMachine>
//  (this.stateMachineInitialized = true);
136  :     Pop           
//  0
137  :     LoadValue     : value = <I8, 0>
//  this
138  :     LoadCapturedVar: var = 0(<captured-this>0)
//  this.<state>CreateCoroutine(0)
139  :     InvokeMethod  : methodInfo = <state>CreateCoroutine<SMCalculator>, stackPatternCount = 1
//  this.<state>CreateCoroutine(0);
140  :     Pop           
//  this
141  :     LoadCapturedVar: var = 0(<captured-this>0)
//  this.ResumeStateMachine()
142  :     InvokeMethod  : methodInfo = ResumeStateMachine<system::StateMachine>, stackPatternCount = 0
//  this.ResumeStateMachine();
143  :     Pop           
//  if ((!this.stateMachineInitialized))
144  :     Jump          : label = 145
//  1
145  :     LoadValue     : value = <I8, 1>
//  (this.stateMachineInput = 1)
146  :     Duplicate     : stackPatternCount = 0
//  this
147  :     LoadCapturedVar: var = 0(<captured-this>0)
//  (this.stateMachineInput = 1)
148  :     SetProperty   : propertyInfo = stateMachineInput<system::StateMachine>
//  (this.stateMachineInput = 1);
149  :     Pop           
//  this
150  :     LoadCapturedVar: var = 0(<captured-this>0)
//  this.ResumeStateMachine()
151  :     InvokeMethod  : methodInfo = ResumeStateMachine<system::StateMachine>, stackPatternCount = 0
//  this.ResumeStateMachine();
152  :     Pop           
//  func Dot() : (::system::Void)
153  :     LoadValue     : value = <null>
//  func Dot() : (::system::Void)
154  :     Return        
//  this
155  :     LoadCapturedVar: var = 0(<captured-this>0)
//  this.stateMachineInitialized
156  :     GetProperty   : propertyInfo = stateMachineInitialized<system::StateMachine>
//  (!this.stateMachineInitialized)
157  :     OpNot         : type = Bool
//  if ((!this.stateMachineInitialized))
158  :     OpNot         : type = Bool
//  if ((!this.stateMachineInitialized))
159  :     JumpIf        : label = 173
//  true
160  :     LoadValue     : value = <Bool, true>
//  (this.stateMachineInitialized = true)
161  :     Duplicate     : stackPatternCount = 0
//  this
162  :     LoadCapturedVar: var = 0(<captured-this>0)
//  (this.stateMachineInitialized = true)
163  :     SetProperty   : propertyInfo = stateMachineInitialized<system::StateMachine>
//  (this.stateMachineInitialized = true);
164  :     Pop           
//  0
165  :     LoadValue     : value = <I8, 0>
//  this
166  :     LoadCapturedVar: var = 0(<captured-this>0)
//  this.<state>CreateCoroutine(0)
167  :     InvokeMethod  : methodInfo = <state>CreateCoroutine<SMCalculator>, stackPatternCount = 1
//  this.<state>CreateCoroutine(0);
168  :     Pop           
//  this
169  :     LoadCapturedVar: var = 0(<captured-this>0)
//  this.ResumeStateMachine()
170  :     InvokeMethod  : methodInfo = ResumeStateMachine<system::StateMachine>, stackPatternCount = 0
//  this.ResumeStateMachine();
171  :     Pop           
//  if ((!this.stateMachineInitialized))
172  :     Jump          : label = 173
//  2
173  :     LoadValue     : value = <I8, 2>
//  (this.stateMachineInput = 2)
174  :     Duplicate     : stackPatternCount = 0
//  this
175  :     LoadCapturedVar: var = 0(<captured-this>0)
//  (this.stateMachineInput = 2)
176  :     SetProperty   : propertyInfo = stateMachineInput<system::StateMachine>
//  (this.stateMachineInput = 2);
177  :     Pop           
//  this
178  :     LoadCapturedVar: var = 0(<captured-this>0)
//  this.ResumeStateMachine()
179  :     InvokeMethod  : methodInfo = ResumeStateMachine<system::StateMachine>, stackPatternCount = 0
//  this.ResumeStateMachine();
180  :     Pop           
//  func Add() : (::system::Void)
181  :     LoadValue     : value = <null>
//  func Add() : (::system::Void)
182  :     Return        
//  this
183  :     LoadCapturedVar: var = 0(<captured-this>0)
//  this.stateMachineInitialized
184  :     GetProperty   : propertyInfo = stateMachineInitialized<system::StateMachine>
//  (!this.stateMachineInitialized)
185  :     OpNot         : type = Bool
//  if ((!this.stateMachineInitialized))
186  :     OpNot         : type = Bool
//  if ((!this.stateMachineInitialized))
187  :     JumpIf        : label = 201
//  true
188  :     LoadValue     : value = <Bool, true>
//  (this.stateMachineInitialized = true)
189  :     Duplicate     : stackPatternCount = 0
//  this
190  :     LoadCapturedVar: var = 0(<captured-this>0)
//  (this.stateMachineInitialized = true)
191  :     SetProperty   : propertyInfo = stateMachineInitialized<system::StateMachine>
//  (this.stateMachineInitialized = true);
192  :     Pop           
//  0
193  :     LoadValue     : value = <I8, 0>
//  this
194  :     LoadCapturedVar: var = 0(<captured-this>0)
//  this.<state>CreateCoroutine(0)
195  :     InvokeMethod  : methodInfo = <state>CreateCoroutine<SMCalculator>, stackPatternCount = 1
//  this.<state>CreateCoroutine(0);
196  :     Pop           
//  this
197  :     LoadCapturedVar: var = 0(<captured-this>0)
//  this.ResumeStateMachine()
198  :     InvokeMethod  : methodInfo = ResumeStateMachine<system::StateMachine>, stackPatternCount = 0
//  this.ResumeStateMachine();
199  :     Pop           
//  if ((!this.stateMachineInitialized))
200  :     Jump          : label = 201
//  3
201  :     LoadValue     : value = <I8, 3>
//  (this.stateMachineInput = 3)
202  :     Duplicate     : stackPatternCount = 0
//  this
203  :     LoadCapturedVar: var = 0(<captured-this>0)
//  (this.stateMachineInput = 3)
204  :     SetProperty   : propertyInfo = stateMachineInput<system::StateMachine>
//  (this.stateMachineInput = 3);
205  :     Pop           
//  this
206  :     LoadCapturedVar: var = 0(<captured-this>0)
//  this.ResumeStateMachine()
207  :     InvokeMethod  : methodInfo = ResumeStateMachine<system::StateMachine>, stackPatternCount = 0
//  this.ResumeStateMachine();
208  :     Pop           
//  func Mul() : (::system::Void)
209  :     LoadValue     : value = <null>
//  func Mul() : (::system::Void)
210  :     Return        
//  this
211  :     LoadCapturedVar: var = 0(<captured-this>0)
//  this.stateMachineInitialized
212  :     GetProperty   : propertyInfo = stateMachineInitialized<system::StateMachine>
//  (!this.stateMachineInitialized)
213  :     OpNot         : type = Bool
//  if ((!this.stateMachineInitialized))
214  :     OpNot         : type = Bool
//  if ((!this.stateMachineInitialized))
215  :     JumpIf        : label = 229
//  true
216  :     LoadValue     : value = <Bool, true>
//  (this.stateMachineInitialized = true)
217  :     Duplicate     : stackPatternCount = 0
//  this
218  :     LoadCapturedVar: var = 0(<captured-this>0)
//  (this.stateMachineInitialized = true)
219  :     SetProperty   : propertyInfo = stateMachineInitialized<system::StateMachine>
//  (this.stateMachineInitialized = true);
220  :     Pop           
//  0
221  :     LoadValue     : value = <I8, 0>
//  this
222  :     LoadCapturedVar: var = 0(<captured-this>0)
//  this.<state>CreateCoroutine(0)
223  :     InvokeMethod  : methodInfo = <state>CreateCoroutine<SMCalculator>, stackPatternCount = 1
//  this.<state>CreateCoroutine(0);
224  :     Pop           
//  this
225  :     LoadCapturedVar: var = 0(<captured-this>0)
//  this.ResumeStateMachine()
226  :     InvokeMethod  : methodInfo = ResumeStateMachine<system::StateMachine>, stackPatternCount = 0
//  this.ResumeStateMachine();
227  :     Pop           
//  if ((!this.stateMachineInitialized))
228  :     Jump          : label = 229
//  4
229  :     LoadValue     : value = <I8, 4>
//  (this.stateMachineInput = 4)
230  :     Duplicate     : stackPatternCount = 0
//  this
231  :     LoadCapturedVar: var = 0(<captured-this>0)
//  (this.stateMachineInput = 4)
232  :     SetProperty   : propertyInfo = stateMachineInput<system::StateMachine>
//  (this.stateMachineInput = 4);
233  :     Pop           
//  this
234  :     LoadCapturedVar: var = 0(<captured-this>0)
//  this.ResumeStateMachine()
235  :     InvokeMethod  : methodInfo = ResumeStateMachine<system::StateMachine>, stackPatternCount = 0
//  this.ResumeStateMachine();
236  :     Pop           
//  func Equal() : (::system::Void)
237  :     LoadValue     : value = <null>
//  func Equal() : (::system::Void)
238  :     Return        
//  this
239  :     LoadCapturedVar: var = 0(<captured-this>0)
//  this.stateMachineInitialized
240  :     GetProperty   : propertyInfo = stateMachineInitialized<system::StateMachine>
//  (!this.stateMachineInitialized)
241  :     OpNot         : type = Bool
//  if ((!this.stateMachineInitialized))
242  :     OpNot         : type = Bool
//  if ((!this.stateMachineInitialized))
243  :     JumpIf        : label = 257
//  true
244  :     LoadValue     : value = <Bool, true>
//  (this.stateMachineInitialized = true)
245  :     Duplicate     : stackPatternCount = 0
//  this
246  :     LoadCapturedVar: var = 0(<captured-this>0)
//  (this.stateMachineInitialized = true)
247  :     SetProperty   : propertyInfo = stateMachineInitialized<system::StateMachine>
//  (this.stateMachineInitialized = true);
248  :     Pop           
//  0
249  :     LoadValue     : value = <I8, 0>
//  this
250  :     LoadCapturedVar: var = 0(<captured-this>0)
//  this.<state>CreateCoroutine(0)
251  :     InvokeMethod  : methodInfo = <state>CreateCoroutine<SMCalculator>, stackPatternCount = 1
//  this.<state>CreateCoroutine(0);
252  :     Pop           
//  this
253  :     LoadCapturedVar: var = 0(<captured-this>0)
//  this.ResumeStateMachine()
254  :     InvokeMethod  : methodInfo = ResumeStateMachine<system::StateMachine>, stackPatternCount = 0
//  this.ResumeStateMachine();
255  :     Pop           
//  if ((!this.stateMachineInitialized))
256  :     Jump          : label = 257
//  5
257  :     LoadValue     : value = <I8, 5>
//  (this.stateMachineInput = 5)
258  :     Duplicate     : stackPatternCount = 0
//  this
259  :     LoadCapturedVar: var = 0(<captured-this>0)
//  (this.stateMachineInput = 5)
260  :     SetProperty   : propertyInfo = stateMachineInput<system::StateMachine>
//  (this.stateMachineInput = 5);
261  :     Pop           
//  this
262  :     LoadCapturedVar: var = 0(<captured-this>0)
//  this.ResumeStateMachine()
263  :     InvokeMethod  : methodInfo = ResumeStateMachine<system::StateMachine>, stackPatternCount = 0
//  this.ResumeStateMachine();
264  :     Pop           
//  func Clear() : (::system::Void)
265  :     LoadValue     : value = <null>
//  func Clear() : (::system::Void)
266  :     Return        
//  this
267  :     LoadCapturedVar: var = 0(<captured-this>0)
//  var <state>stateMachineObject = this;
268  :     StoreLocalVar : var = 1(<state>stateMachineObject)
//  <state>stateMachineObject
269  :     LoadLocalVar  : var = 1(<state>stateMachineObject)
//  <state>stateMachineObject.stateMachineCoroutine
270  :     GetProperty   : propertyInfo = stateMachineCoroutine<system::StateMachine>
//  var <state>previousCoroutine = <state>stateMachineObject.stateMachineCoroutine;
271  :     StoreLocalVar : var = 2(<state>previousCoroutine)
//  null
272  :     LoadValue     : value = <null>
//  0
273  :     LoadValue     : value = <I8, 0>
//  0
274  :     LoadValue     : value = <I8, 0>
//  0
275  :     LoadValue     : value = <I8, 0>
//  0
276  :     LoadValue     : value = <I8, 0>
//  false
277  :     LoadValue     : value = <Bool, false>
//  0
278  :     LoadValue     : value = <I8, 0>
//  0
279  :     LoadValue     : value = <I8, 0>
//  0
280  :     LoadValue     : value = <I8, 0>
//  0
281  :     LoadValue     : value = <I8, 0>
//  0
282  :     LoadValue     : value = <I8, 0>
//  1
283  :     LoadValue     : value = <I8, 1>
//  (-1)
284  :     OpNegative    : type = I8
//  null
285  :     LoadValue     : value = <null>
//  Waiting
286  :     LoadValue     : value = <enum: 0>
//  new (::system::Coroutine^)
287  :     LoadLocalVar  : var = 1(<state>stateMachineObject)
//  new (::system::Coroutine^)
288  :     LoadLocalVar  : var = 2(<state>previousCoroutine)
//  new (::system::Coroutine^)
289  :     LoadLocalVar  : var = 0(<state>startState)
//  new (::system::Coroutine^)
290  :     LoadCapturedVar: var = 0(<captured-this>0)
//  new (::system::Coroutine^)
291  :     LoadValue     : value = <null>
//  new (::system::Coroutine^)
292  :     CreateClosureContext: stackPatternCount = 19
//  new (::system::Coroutine^)
293  :     LoadMethodInfo: methodInfo = GetFailure<system::Coroutine>
//  func GetFailure() : (::system::Exception^)
294  :     LoadFunction  : func = 16(<method:GetFailure<system::Coroutine>(18)> in SMCalculator::<state>CreateCoroutine)
//  new (::system::Coroutine^)
295  :     LoadMethodInfo: methodInfo = GetStatus<system::Coroutine>
//  func GetStatus() : (::system::CoroutineStatus)
296  :     LoadFunction  : func = 17(<method:GetStatus<system::Coroutine>(19)> in SMCalculator::<state>CreateCoroutine)
//  new (::system::Coroutine^)
297  :     LoadMethodInfo: methodInfo = Resume<system::Coroutine>
//  func Resume(<raise-exception> : ::system::Boolean, <coroutine-output> : ::system::CoroutineResult^) : (::system::Void)
298  :     LoadFunction  : func = 18(<method:Resume<system::Coroutine>(20)> in SMCalculator::<state>CreateCoroutine)
//  new (::system::Coroutine^)
299  :     CreateInterface: methodInfo = <system::Coroutine>, stackPatternCount = 6
//  (<state>stateMachineObject.stateMachineCoroutine = new (::system::Coroutine^)
300  :     Duplicate     : stackPatternCount = 0
//  <state>stateMachineObject
301  :     LoadLocalVar  : var = 1(<state>stateMachineObject)
//  (<state>stateMachineObject.stateMachineCoroutine = new (::system::Coroutine^)
302  :     SetProperty   : propertyInfo = stateMachineCoroutine<system::StateMachine>
//  (<state>stateMachineObject.stateMachineCoroutine = new (::system::Coroutine^)
303  :     Pop           
//  func <state>CreateCoroutine(<state>startState : ::system::Int64) : (::system::Void)
304  :     LoadValue     : value = <null>
//  func <state>CreateCoroutine(<state>startState : ::system::Int64) : (::system::Void)
305  :     Return        
//  <value>
306  :     LoadLocalVar  : var = 0(<value>)
//  (<prop>Failure = <value>)
307  :     Duplicate     : stackPatternCount = 0
//  (<prop>Failure = <value>)
308  :     StoreCapturedVar: var = 12
//  (<prop>Failure = <value>);
309  :     Pop           
//  func SetFailure(<value> : ::system::Exception^) : (void)
310  :     LoadValue     : value = <null>
//  func SetFailure(<value> : ::system::Exception^) : (void)
311  :     Return        
//  <value>
312  :     LoadLocalVar  : var = 0(<value>)
//  (<prop>Status = <value>)
313  :     Duplicate     : stackPatternCount = 0
//  (<prop>Status = <value>)
314  :     StoreCapturedVar: var = 13
//  (<prop>Status = <value>);
315  :     Pop           
//  func SetStatus(<value> : ::system::CoroutineStatus) : (void)
316  :     LoadValue     : value = <null>
//  func SetStatus(<value> : ::system::CoroutineStatus) : (void)
317  :     Return        
//  <prop>Failure
318  :     LoadCapturedVar: var = 12(<captured><prop>Failure)
//  return <prop>Failure;
319  :     Return        
//  func GetFailure() : (::system::Exception^)
320  :     LoadValue     : value = <null>
//  func GetFailure() : (::system::Exception^)
321  :     Return        
//  <prop>Status
322  :     LoadCapturedVar: var = 13(<captured><prop>Status)
//  return <prop>Status;
323  :     Return        
//  func GetStatus() : (::system::CoroutineStatus)
324  :     LoadValue     : value = <null>
//  func GetStatus() : (::system::CoroutineStatus)
325  :     Return        
//  Status
326  :     LoadCapturedVar: var = 18(<captured-this>1)
//  Status
327  :     InvokeMethod  : methodInfo = GetStatus<system::Coroutine>, stackPatternCount = 0
//  ::system::CoroutineStatus::Waiting
328  :     LoadValue     : value = <enum: 0>
//  (Status != ::system::CoroutineStatus::Waiting)
329  :     CompareValue  
//  (Status != ::system::CoroutineStatus::Waiting)
330  :     OpNot         : type = Bool
//  if ((Status != ::system::CoroutineStatus::Waiting))
331  :     OpNot         : type = Bool
//  if ((Status != ::system::CoroutineStatus::Waiting))
332  :     JumpIf        : label = 336
//  "Resume should be called only when the coroutine is in the waiting status."
333  :     LoadValue     : value = <Bool, Resume should be called only when the coroutine is in the waiting status.>
//  raise "Resume should be called only when the coroutine is in the waiting status.";
334  :     RaiseException
//  if ((Status != ::system::CoroutineStatus::Waiting))
335  :     Jump          : label = 336
//  Executing
336  :     LoadValue     : value = <enum: 1>
//  SetStatus(Executing)
337  :     InvokeWithContext: func = 15(<method:SetStatus<system::Coroutine>(15)> in SMCalculator::<state>CreateCoroutine), stackPatternCount = 1
//  SetStatus(Executing);
338  :     Pop           
//  try
339  :     InstallTry    : label = 1260
//  <co-state-before-pause>
340  :     LoadCapturedVar: var = 11(<captured><co-state-before-pause>)
//  1
341  :     LoadValue     : value = <I8, 1>
//  (-1)
342  :     OpNegative    : type = I8
//  (<co-state-before-pause> != (-1))
343  :     CompareValue  
//  (<co-state-before-pause> != (-1))
344  :     OpNot         : type = Bool
//  if ((<co-state-before-pause> != (-1)))
345  :     OpNot         : type = Bool
//  if ((<co-state-before-pause> != (-1)))
346  :     JumpIf        : label = 413
//  <coroutine-output>
347  :     LoadLocalVar  : var = 1(<coroutine-output>)
//  <coroutine-output> is null
348  :     LoadValue     : value = <null>
//  <coroutine-output> is null
349  :     CompareReference
//  if (<coroutine-output> is null)
350  :     OpNot         : type = Bool
//  if (<coroutine-output> is null)
351  :     JumpIf        : label = 358
//  1
352  :     LoadValue     : value = <I8, 1>
//  (-1)
353  :     OpNegative    : type = I8
//  (<co-state-before-pause> = (-1))
354  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = (-1))
355  :     StoreCapturedVar: var = 11
//  (<co-state-before-pause> = (-1));
356  :     Pop           
//  if (<coroutine-output> is null)
357  :     Jump          : label = 412
//  <coroutine-output>
358  :     LoadLocalVar  : var = 1(<coroutine-output>)
//  <coroutine-output>.Failure
359  :     InvokeMethod  : methodInfo = GetFailure<system::CoroutineResult>, stackPatternCount = 0
//  <coroutine-output>.Failure is null
360  :     LoadValue     : value = <null>
//  <coroutine-output>.Failure is null
361  :     CompareReference
//  if (<coroutine-output>.Failure is null)
362  :     OpNot         : type = Bool
//  if (<coroutine-output>.Failure is null)
363  :     JumpIf        : label = 370
//  1
364  :     LoadValue     : value = <I8, 1>
//  (-1)
365  :     OpNegative    : type = I8
//  (<co-state-before-pause> = (-1))
366  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = (-1))
367  :     StoreCapturedVar: var = 11
//  (<co-state-before-pause> = (-1));
368  :     Pop           
//  if (<coroutine-output>.Failure is null)
369  :     Jump          : label = 412
//  <co-state-before-pause>
370  :     LoadCapturedVar: var = 11(<captured><co-state-before-pause>)
//  0
371  :     LoadValue     : value = <I8, 0>
//  (<co-state-before-pause> == 0)
372  :     CompareValue  
//  <co-state-before-pause>
373  :     LoadCapturedVar: var = 11(<captured><co-state-before-pause>)
//  <co-state-before-pause> in range [3, 20]
374  :     StoreLocalVar : var = 2(<anonymous-range-test>)
//  <co-state-before-pause> in range [3, 20]
375  :     LoadLocalVar  : var = 2(<anonymous-range-test>)
//  3
376  :     LoadValue     : value = <I8, 3>
//  <co-state-before-pause> in range [3, 20]
377  :     CompareLiteral: type = I8
//  <co-state-before-pause> in range [3, 20]
378  :     OpGE          
//  <co-state-before-pause> in range [3, 20]
379  :     LoadLocalVar  : var = 2(<anonymous-range-test>)
//  20
380  :     LoadValue     : value = <I8, 20>
//  <co-state-before-pause> in range [3, 20]
381  :     CompareLiteral: type = I8
//  <co-state-before-pause> in range [3, 20]
382  :     OpLE          
//  <co-state-before-pause> in range [3, 20]
383  :     OpAnd         : type = Bool
//  <co-state-before-pause> in range [3, 20]
384  :     LoadValue     : value = <null>
//  <co-state-before-pause> in range [3, 20]
385  :     StoreLocalVar : var = 2(<anonymous-range-test>)
//  ((<co-state-before-pause> == 0) or <co-state-before-pause> in range [3, 20])
386  :     OpOr          : type = Bool
//  if (((<co-state-before-pause> == 0) or <co-state-before-pause> in range [3, 20]))
387  :     OpNot         : type = Bool
//  if (((<co-state-before-pause> == 0) or <co-state-before-pause> in range [3, 20]))
388  :     JumpIf        : label = 404
//  1
389  :     LoadValue     : value = <I8, 1>
//  (-1)
390  :     OpNegative    : type = I8
//  (<co-state-before-pause> = (-1))
391  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = (-1))
392  :     StoreCapturedVar: var = 11
//  (<co-state-before-pause> = (-1));
393  :     Pop           
//  <coroutine-output>
394  :     LoadLocalVar  : var = 1(<coroutine-output>)
//  <coroutine-output>.Failure
395  :     InvokeMethod  : methodInfo = GetFailure<system::CoroutineResult>, stackPatternCount = 0
//  (<co-tempexvar0>ex = <coroutine-output>.Failure)
396  :     Duplicate     : stackPatternCount = 0
//  (<co-tempexvar0>ex = <coroutine-output>.Failure)
397  :     StoreCapturedVar: var = 0
//  (<co-tempexvar0>ex = <coroutine-output>.Failure);
398  :     Pop           
//  2
399  :     LoadValue     : value = <I8, 2>
//  (<co-state> = 2)
400  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 2)
401  :     StoreCapturedVar: var = 10
//  (<co-state> = 2);
402  :     Pop           
//  if (((<co-state-before-pause> == 0) or <co-state-before-pause> in range [3, 20]))
403  :     Jump          : label = 412
//  1
404  :     LoadValue     : value = <I8, 1>
//  (-1)
405  :     OpNegative    : type = I8
//  (<co-state-before-pause> = (-1))
406  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = (-1))
407  :     StoreCapturedVar: var = 11
//  (<co-state-before-pause> = (-1));
408  :     Pop           
//  <coroutine-output>
409  :     LoadLocalVar  : var = 1(<coroutine-output>)
//  <coroutine-output>.Failure
410  :     InvokeMethod  : methodInfo = GetFailure<system::CoroutineResult>, stackPatternCount = 0
//  raise <coroutine-output>.Failure;
411  :     RaiseException
//  if ((<co-state-before-pause> != (-1)))
412  :     Jump          : label = 413
//  true
413  :     LoadValue     : value = <Bool, true>
//  while (true)
414  :     OpNot         : type = Bool
//  while (true)
415  :     JumpIf        : label = 1258
//  <co-state>
416  :     LoadCapturedVar: var = 10(<captured><co-state>)
//  1
417  :     LoadValue     : value = <I8, 1>
//  (<co-state> == 1)
418  :     CompareValue  
//  if ((<co-state> == 1))
419  :     OpNot         : type = Bool
//  if ((<co-state> == 1))
420  :     JumpIf        : label = 428
//  Stopped
421  :     LoadValue     : value = <enum: 2>
//  SetStatus(Stopped)
422  :     InvokeWithContext: func = 15(<method:SetStatus<system::Coroutine>(15)> in SMCalculator::<state>CreateCoroutine), stackPatternCount = 1
//  SetStatus(Stopped);
423  :     Pop           
//  try
424  :     UninstallTry  : stackPatternCount = 0
//  return;
425  :     LoadValue     : value = <null>
//  return;
426  :     Return        
//  if ((<co-state> == 1))
427  :     Jump          : label = 428
//  <co-state>
428  :     LoadCapturedVar: var = 10(<captured><co-state>)
//  2
429  :     LoadValue     : value = <I8, 2>
//  (<co-state> == 2)
430  :     CompareValue  
//  if ((<co-state> == 2))
431  :     OpNot         : type = Bool
//  if ((<co-state> == 2))
432  :     JumpIf        : label = 442
//  <state>previousCoroutine
433  :     LoadCapturedVar: var = 15(<captured><state>previousCoroutine)
//  (<state>stateMachineObject.stateMachineCoroutine = <state>previousCoroutine)
434  :     Duplicate     : stackPatternCount = 0
//  <state>stateMachineObject
435  :     LoadCapturedVar: var = 14(<captured><state>stateMachineObject)
//  (<state>stateMachineObject.stateMachineCoroutine = <state>previousCoroutine)
436  :     SetProperty   : propertyInfo = stateMachineCoroutine<system::StateMachine>
//  (<state>stateMachineObject.stateMachineCoroutine = <state>previousCoroutine);
437  :     Pop           
//  <co-tempexvar0>ex
438  :     LoadCapturedVar: var = 0(<captured><co-tempexvar0>ex)
//  <co-tempexvar0>ex.Message
439  :     InvokeMethod  : methodInfo = GetMessage<system::Exception>, stackPatternCount = 0
//  raise <co-tempexvar0>ex.Message;
440  :     RaiseException
//  if ((<co-state> == 2))
441  :     Jump          : label = 442
//  <co-state>
442  :     LoadCapturedVar: var = 10(<captured><co-state>)
//  21
443  :     LoadValue     : value = <I8, 21>
//  (<co-state> == 21)
444  :     CompareValue  
//  if ((<co-state> == 21))
445  :     OpNot         : type = Bool
//  if ((<co-state> == 21))
446  :     JumpIf        : label = 458
//  <state>previousCoroutine
447  :     LoadCapturedVar: var = 15(<captured><state>previousCoroutine)
//  (<state>stateMachineObject.stateMachineCoroutine = <state>previousCoroutine)
448  :     Duplicate     : stackPatternCount = 0
//  <state>stateMachineObject
449  :     LoadCapturedVar: var = 14(<captured><state>stateMachineObject)
//  (<state>stateMachineObject.stateMachineCoroutine = <state>previousCoroutine)
450  :     SetProperty   : propertyInfo = stateMachineCoroutine<system::StateMachine>
//  (<state>stateMachineObject.stateMachineCoroutine = <state>previousCoroutine);
451  :     Pop           
//  1
452  :     LoadValue     : value = <I8, 1>
//  (<co-state> = 1)
453  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 1)
454  :     StoreCapturedVar: var = 10
//  (<co-state> = 1);
455  :     Pop           
//  continue;
456  :     Jump          : label = 413
//  if ((<co-state> == 21))
457  :     Jump          : label = 458
//  try
458  :     InstallTry    : label = 1246
//  <co-state>
459  :     LoadCapturedVar: var = 10(<captured><co-state>)
//  0
460  :     LoadValue     : value = <I8, 0>
//  (<co-state> == 0)
461  :     CompareValue  
//  if ((<co-state> == 0))
462  :     OpNot         : type = Bool
//  if ((<co-state> == 0))
463  :     JumpIf        : label = 485
//  <state>startState
464  :     LoadCapturedVar: var = 16(<captured><state>startState)
//  (<co8-state>state = <state>startState)
465  :     Duplicate     : stackPatternCount = 0
//  (<co8-state>state = <state>startState)
466  :     StoreCapturedVar: var = 9
//  (<co8-state>state = <state>startState);
467  :     Pop           
//  true
468  :     LoadValue     : value = <Bool, true>
//  if (true)
469  :     OpNot         : type = Bool
//  if (true)
470  :     JumpIf        : label = 478
//  4
471  :     LoadValue     : value = <I8, 4>
//  (<co-state> = 4)
472  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 4)
473  :     StoreCapturedVar: var = 10
//  (<co-state> = 4);
474  :     Pop           
//  try
475  :     UninstallTry  : stackPatternCount = 0
//  continue;
476  :     Jump          : label = 413
//  if (true)
477  :     Jump          : label = 478
//  21
478  :     LoadValue     : value = <I8, 21>
//  (<co-state> = 21)
479  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 21)
480  :     StoreCapturedVar: var = 10
//  (<co-state> = 21);
481  :     Pop           
//  try
482  :     UninstallTry  : stackPatternCount = 0
//  continue;
483  :     Jump          : label = 413
//  if ((<co-state> == 0))
484  :     Jump          : label = 485
//  <co-state>
485  :     LoadCapturedVar: var = 10(<captured><co-state>)
//  3
486  :     LoadValue     : value = <I8, 3>
//  (<co-state> == 3)
487  :     CompareValue  
//  if ((<co-state> == 3))
488  :     OpNot         : type = Bool
//  if ((<co-state> == 3))
489  :     JumpIf        : label = 507
//  true
490  :     LoadValue     : value = <Bool, true>
//  if (true)
491  :     OpNot         : type = Bool
//  if (true)
492  :     JumpIf        : label = 500
//  4
493  :     LoadValue     : value = <I8, 4>
//  (<co-state> = 4)
494  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 4)
495  :     StoreCapturedVar: var = 10
//  (<co-state> = 4);
496  :     Pop           
//  try
497  :     UninstallTry  : stackPatternCount = 0
//  continue;
498  :     Jump          : label = 413
//  if (true)
499  :     Jump          : label = 500
//  21
500  :     LoadValue     : value = <I8, 21>
//  (<co-state> = 21)
501  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 21)
502  :     StoreCapturedVar: var = 10
//  (<co-state> = 21);
503  :     Pop           
//  try
504  :     UninstallTry  : stackPatternCount = 0
//  continue;
505  :     Jump          : label = 413
//  if ((<co-state> == 3))
506  :     Jump          : label = 507
//  <co-state>
507  :     LoadCapturedVar: var = 10(<captured><co-state>)
//  4
508  :     LoadValue     : value = <I8, 4>
//  (<co-state> == 4)
509  :     CompareValue  
//  if ((<co-state> == 4))
510  :     OpNot         : type = Bool
//  if ((<co-state> == 4))
511  :     JumpIf        : label = 666
//  <co8-state>state
512  :     LoadCapturedVar: var = 9(<captured><co8-state>state)
//  (<co7-state>currentState = <co8-state>state)
513  :     Duplicate     : stackPatternCount = 0
//  (<co7-state>currentState = <co8-state>state)
514  :     StoreCapturedVar: var = 8
//  (<co7-state>currentState = <co8-state>state);
515  :     Pop           
//  1
516  :     LoadValue     : value = <I8, 1>
//  (-1)
517  :     OpNegative    : type = I8
//  (<co8-state>state = (-1))
518  :     Duplicate     : stackPatternCount = 0
//  (<co8-state>state = (-1))
519  :     StoreCapturedVar: var = 9
//  (<co8-state>state = (-1));
520  :     Pop           
//  <co7-state>currentState
521  :     LoadCapturedVar: var = 8(<captured><co7-state>currentState)
//  (<co6-switch>4 = <co7-state>currentState)
522  :     Duplicate     : stackPatternCount = 0
//  (<co6-switch>4 = <co7-state>currentState)
523  :     StoreCapturedVar: var = 7
//  (<co6-switch>4 = <co7-state>currentState);
524  :     Pop           
//  <co6-switch>4
525  :     LoadCapturedVar: var = 7(<captured><co6-switch>4)
//  1
526  :     LoadValue     : value = <I8, 1>
//  (<co6-switch>4 == 1 of (::system::Int64))
527  :     CompareValue  
//  if ((<co6-switch>4 == 1 of (::system::Int64)))
528  :     OpNot         : type = Bool
//  if ((<co6-switch>4 == 1 of (::system::Int64)))
529  :     JumpIf        : label = 560
//  <state>stateMachineObject
530  :     LoadCapturedVar: var = 14(<captured><state>stateMachineObject)
//  <state>stateMachineObject.stateMachineInput
531  :     GetProperty   : propertyInfo = stateMachineInput<system::StateMachine>
//  1
532  :     LoadValue     : value = <I8, 1>
//  (-1)
533  :     OpNegative    : type = I8
//  (<state>stateMachineObject.stateMachineInput == (-1))
534  :     CompareValue  
//  if ((<state>stateMachineObject.stateMachineInput == (-1)))
535  :     OpNot         : type = Bool
//  if ((<state>stateMachineObject.stateMachineInput == (-1)))
536  :     JumpIf        : label = 553
//  Waiting
537  :     LoadValue     : value = <enum: 0>
//  SetStatus(Waiting)
538  :     InvokeWithContext: func = 15(<method:SetStatus<system::Coroutine>(15)> in SMCalculator::<state>CreateCoroutine), stackPatternCount = 1
//  SetStatus(Waiting);
539  :     Pop           
//  <co-state>
540  :     LoadCapturedVar: var = 10(<captured><co-state>)
//  (<co-state-before-pause> = <co-state>)
541  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = <co-state>)
542  :     StoreCapturedVar: var = 11
//  (<co-state-before-pause> = <co-state>);
543  :     Pop           
//  5
544  :     LoadValue     : value = <I8, 5>
//  (<co-state> = 5)
545  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 5)
546  :     StoreCapturedVar: var = 10
//  (<co-state> = 5);
547  :     Pop           
//  try
548  :     UninstallTry  : stackPatternCount = 0
//  try
549  :     UninstallTry  : stackPatternCount = 0
//  return;
550  :     LoadValue     : value = <null>
//  return;
551  :     Return        
//  if ((<state>stateMachineObject.stateMachineInput == (-1)))
552  :     Jump          : label = 553
//  5
553  :     LoadValue     : value = <I8, 5>
//  (<co-state> = 5)
554  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 5)
555  :     StoreCapturedVar: var = 10
//  (<co-state> = 5);
556  :     Pop           
//  try
557  :     UninstallTry  : stackPatternCount = 0
//  continue;
558  :     Jump          : label = 413
//  if ((<co6-switch>4 == 1 of (::system::Int64)))
559  :     Jump          : label = 560
//  <co6-switch>4
560  :     LoadCapturedVar: var = 7(<captured><co6-switch>4)
//  2
561  :     LoadValue     : value = <I8, 2>
//  (<co6-switch>4 == 2 of (::system::Int64))
562  :     CompareValue  
//  if ((<co6-switch>4 == 2 of (::system::Int64)))
563  :     OpNot         : type = Bool
//  if ((<co6-switch>4 == 2 of (::system::Int64)))
564  :     JumpIf        : label = 600
//  <state>stateMachineObject
565  :     LoadCapturedVar: var = 14(<captured><state>stateMachineObject)
//  <state>stateMachineObject.<statesp-Integer>newNumber
566  :     GetProperty   : propertyInfo = <statesp-Integer>newNumber<SMCalculator>
//  (<co4>newNumber = <state>stateMachineObject.<statesp-Integer>newNumber)
567  :     Duplicate     : stackPatternCount = 0
//  (<co4>newNumber = <state>stateMachineObject.<statesp-Integer>newNumber)
568  :     StoreCapturedVar: var = 5
//  (<co4>newNumber = <state>stateMachineObject.<statesp-Integer>newNumber);
569  :     Pop           
//  <state>stateMachineObject
570  :     LoadCapturedVar: var = 14(<captured><state>stateMachineObject)
//  <state>stateMachineObject.stateMachineInput
571  :     GetProperty   : propertyInfo = stateMachineInput<system::StateMachine>
//  1
572  :     LoadValue     : value = <I8, 1>
//  (-1)
573  :     OpNegative    : type = I8
//  (<state>stateMachineObject.stateMachineInput == (-1))
574  :     CompareValue  
//  if ((<state>stateMachineObject.stateMachineInput == (-1)))
575  :     OpNot         : type = Bool
//  if ((<state>stateMachineObject.stateMachineInput == (-1)))
576  :     JumpIf        : label = 593
//  Waiting
577  :     LoadValue     : value = <enum: 0>
//  SetStatus(Waiting)
578  :     InvokeWithContext: func = 15(<method:SetStatus<system::Coroutine>(15)> in SMCalculator::<state>CreateCoroutine), stackPatternCount = 1
//  SetStatus(Waiting);
579  :     Pop           
//  <co-state>
580  :     LoadCapturedVar: var = 10(<captured><co-state>)
//  (<co-state-before-pause> = <co-state>)
581  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = <co-state>)
582  :     StoreCapturedVar: var = 11
//  (<co-state-before-pause> = <co-state>);
583  :     Pop           
//  7
584  :     LoadValue     : value = <I8, 7>
//  (<co-state> = 7)
585  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 7)
586  :     StoreCapturedVar: var = 10
//  (<co-state> = 7);
587  :     Pop           
//  try
588  :     UninstallTry  : stackPatternCount = 0
//  try
589  :     UninstallTry  : stackPatternCount = 0
//  return;
590  :     LoadValue     : value = <null>
//  return;
591  :     Return        
//  if ((<state>stateMachineObject.stateMachineInput == (-1)))
592  :     Jump          : label = 593
//  7
593  :     LoadValue     : value = <I8, 7>
//  (<co-state> = 7)
594  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 7)
595  :     StoreCapturedVar: var = 10
//  (<co-state> = 7);
596  :     Pop           
//  try
597  :     UninstallTry  : stackPatternCount = 0
//  continue;
598  :     Jump          : label = 413
//  if ((<co6-switch>4 == 2 of (::system::Int64)))
599  :     Jump          : label = 600
//  <co6-switch>4
600  :     LoadCapturedVar: var = 7(<captured><co6-switch>4)
//  3
601  :     LoadValue     : value = <I8, 3>
//  (<co6-switch>4 == 3 of (::system::Int64))
602  :     CompareValue  
//  if ((<co6-switch>4 == 3 of (::system::Int64)))
603  :     OpNot         : type = Bool
//  if ((<co6-switch>4 == 3 of (::system::Int64)))
604  :     JumpIf        : label = 621
//  true
605  :     LoadValue     : value = <Bool, true>
//  (<state>stateMachineObject.<statesp-Integer>newNumber = true)
606  :     Duplicate     : stackPatternCount = 0
//  <state>stateMachineObject
607  :     LoadCapturedVar: var = 14(<captured><state>stateMachineObject)
//  (<state>stateMachineObject.<statesp-Integer>newNumber = true)
608  :     SetProperty   : propertyInfo = <statesp-Integer>newNumber<SMCalculator>
//  (<state>stateMachineObject.<statesp-Integer>newNumber = true);
609  :     Pop           
//  2
610  :     LoadValue     : value = <I8, 2>
//  <state>stateMachineObject
611  :     LoadCapturedVar: var = 14(<captured><state>stateMachineObject)
//  <state>stateMachineObject.<state>CreateCoroutine(2)
612  :     InvokeMethod  : methodInfo = <state>CreateCoroutine<SMCalculator>, stackPatternCount = 1
//  <state>stateMachineObject.<state>CreateCoroutine(2);
613  :     Pop           
//  9
614  :     LoadValue     : value = <I8, 9>
//  (<co-state> = 9)
615  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 9)
616  :     StoreCapturedVar: var = 10
//  (<co-state> = 9);
617  :     Pop           
//  try
618  :     UninstallTry  : stackPatternCount = 0
//  continue;
619  :     Jump          : label = 413
//  if ((<co6-switch>4 == 3 of (::system::Int64)))
620  :     Jump          : label = 621
//  <co6-switch>4
621  :     LoadCapturedVar: var = 7(<captured><co6-switch>4)
//  4
622  :     LoadValue     : value = <I8, 4>
//  (<co6-switch>4 == 4 of (::system::Int64))
623  :     CompareValue  
//  if ((<co6-switch>4 == 4 of (::system::Int64)))
624  :     OpNot         : type = Bool
//  if ((<co6-switch>4 == 4 of (::system::Int64)))
625  :     JumpIf        : label = 637
//  3
626  :     LoadValue     : value = <I8, 3>
//  <state>stateMachineObject
627  :     LoadCapturedVar: var = 14(<captured><state>stateMachineObject)
//  <state>stateMachineObject.<state>CreateCoroutine(3)
628  :     InvokeMethod  : methodInfo = <state>CreateCoroutine<SMCalculator>, stackPatternCount = 1
//  <state>stateMachineObject.<state>CreateCoroutine(3);
629  :     Pop           
//  16
630  :     LoadValue     : value = <I8, 16>
//  (<co-state> = 16)
631  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 16)
632  :     StoreCapturedVar: var = 10
//  (<co-state> = 16);
633  :     Pop           
//  try
634  :     UninstallTry  : stackPatternCount = 0
//  continue;
635  :     Jump          : label = 413
//  if ((<co6-switch>4 == 4 of (::system::Int64)))
636  :     Jump          : label = 637
//  <co6-switch>4
637  :     LoadCapturedVar: var = 7(<captured><co6-switch>4)
//  0
638  :     LoadValue     : value = <I8, 0>
//  (<co6-switch>4 == 0 of (::system::Int64))
639  :     CompareValue  
//  if ((<co6-switch>4 == 0 of (::system::Int64)))
640  :     OpNot         : type = Bool
//  if ((<co6-switch>4 == 0 of (::system::Int64)))
641  :     JumpIf        : label = 659
//  4
642  :     LoadValue     : value = <I8, 4>
//  (<co8-state>state = 4)
643  :     Duplicate     : stackPatternCount = 0
//  (<co8-state>state = 4)
644  :     StoreCapturedVar: var = 9
//  (<co8-state>state = 4);
645  :     Pop           
//  3
646  :     LoadValue     : value = <I8, 3>
//  (<co-state> = 3)
647  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 3)
648  :     StoreCapturedVar: var = 10
//  (<co-state> = 3);
649  :     Pop           
//  try
650  :     UninstallTry  : stackPatternCount = 0
//  continue;
651  :     Jump          : label = 413
//  20
652  :     LoadValue     : value = <I8, 20>
//  (<co-state> = 20)
653  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 20)
654  :     StoreCapturedVar: var = 10
//  (<co-state> = 20);
655  :     Pop           
//  try
656  :     UninstallTry  : stackPatternCount = 0
//  continue;
657  :     Jump          : label = 413
//  if ((<co6-switch>4 == 0 of (::system::Int64)))
658  :     Jump          : label = 659
//  3
659  :     LoadValue     : value = <I8, 3>
//  (<co-state> = 3)
660  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 3)
661  :     StoreCapturedVar: var = 10
//  (<co-state> = 3);
662  :     Pop           
//  try
663  :     UninstallTry  : stackPatternCount = 0
//  continue;
664  :     Jump          : label = 413
//  if ((<co-state> == 4))
665  :     Jump          : label = 666
//  <co-state>
666  :     LoadCapturedVar: var = 10(<captured><co-state>)
//  5
667  :     LoadValue     : value = <I8, 5>
//  (<co-state> == 5)
668  :     CompareValue  
//  if ((<co-state> == 5))
669  :     OpNot         : type = Bool
//  if ((<co-state> == 5))
670  :     JumpIf        : label = 726
//  <state>stateMachineObject
671  :     LoadCapturedVar: var = 14(<captured><state>stateMachineObject)
//  <state>stateMachineObject.stateMachineInput
672  :     GetProperty   : propertyInfo = stateMachineInput<system::StateMachine>
//  (<co1-switch>0 = <state>stateMachineObject.stateMachineInput)
673  :     Duplicate     : stackPatternCount = 0
//  (<co1-switch>0 = <state>stateMachineObject.stateMachineInput)
674  :     StoreCapturedVar: var = 2
//  (<co1-switch>0 = <state>stateMachineObject.stateMachineInput);
675  :     Pop           
//  <co1-switch>0
676  :     LoadCapturedVar: var = 2(<captured><co1-switch>0)
//  0
677  :     LoadValue     : value = <I8, 0>
//  (<co1-switch>0 == 0 of (::system::Int64))
678  :     CompareValue  
//  if ((<co1-switch>0 == 0 of (::system::Int64)))
679  :     OpNot         : type = Bool
//  if ((<co1-switch>0 == 0 of (::system::Int64)))
680  :     JumpIf        : label = 719
//  1
681  :     LoadValue     : value = <I8, 1>
//  (-1)
682  :     OpNegative    : type = I8
//  (<state>stateMachineObject.stateMachineInput = (-1))
683  :     Duplicate     : stackPatternCount = 0
//  <state>stateMachineObject
684  :     LoadCapturedVar: var = 14(<captured><state>stateMachineObject)
//  (<state>stateMachineObject.stateMachineInput = (-1))
685  :     SetProperty   : propertyInfo = stateMachineInput<system::StateMachine>
//  (<state>stateMachineObject.stateMachineInput = (-1));
686  :     Pop           
//  <state>stateMachineObject
687  :     LoadCapturedVar: var = 14(<captured><state>stateMachineObject)
//  <state>stateMachineObject.<stateip-Digit>i
688  :     GetProperty   : propertyInfo = <stateip-Digit>i<SMCalculator>
//  (<co0>i = <state>stateMachineObject.<stateip-Digit>i)
689  :     Duplicate     : stackPatternCount = 0
//  (<co0>i = <state>stateMachineObject.<stateip-Digit>i)
690  :     StoreCapturedVar: var = 1
//  (<co0>i = <state>stateMachineObject.<stateip-Digit>i);
691  :     Pop           
//  Value
692  :     LoadCapturedVar: var = 17(<captured-this>0)
//  Value
693  :     InvokeMethod  : methodInfo = GetValue<SMCalculator>, stackPatternCount = 0
//  <co0>i
694  :     LoadCapturedVar: var = 1(<captured><co0>i)
//  <co0>i
695  :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  (Value & <co0>i)
696  :     OpConcat      
//  (Value = (Value & <co0>i))
697  :     Duplicate     : stackPatternCount = 0
//  (Value = (Value & <co0>i))
698  :     LoadCapturedVar: var = 17(<captured-this>0)
//  (Value = (Value & <co0>i))
699  :     InvokeMethod  : methodInfo = SetValue<SMCalculator>, stackPatternCount = 1
//  (Value = (Value & <co0>i))
700  :     Pop           
//  (Value = (Value & <co0>i));
701  :     Pop           
//  1
702  :     LoadValue     : value = <I8, 1>
//  (<co8-state>state = 1)
703  :     Duplicate     : stackPatternCount = 0
//  (<co8-state>state = 1)
704  :     StoreCapturedVar: var = 9
//  (<co8-state>state = 1);
705  :     Pop           
//  3
706  :     LoadValue     : value = <I8, 3>
//  (<co-state> = 3)
707  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 3)
708  :     StoreCapturedVar: var = 10
//  (<co-state> = 3);
709  :     Pop           
//  try
710  :     UninstallTry  : stackPatternCount = 0
//  continue;
711  :     Jump          : label = 413
//  6
712  :     LoadValue     : value = <I8, 6>
//  (<co-state> = 6)
713  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 6)
714  :     StoreCapturedVar: var = 10
//  (<co-state> = 6);
715  :     Pop           
//  try
716  :     UninstallTry  : stackPatternCount = 0
//  continue;
717  :     Jump          : label = 413
//  if ((<co1-switch>0 == 0 of (::system::Int64)))
718  :     Jump          : label = 719
//  6
719  :     LoadValue     : value = <I8, 6>
//  (<co-state> = 6)
720  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 6)
721  :     StoreCapturedVar: var = 10
//  (<co-state> = 6);
722  :     Pop           
//  try
723  :     UninstallTry  : stackPatternCount = 0
//  continue;
724  :     Jump          : label = 413
//  if ((<co-state> == 5))
725  :     Jump          : label = 726
//  <co-state>
726  :     LoadCapturedVar: var = 10(<captured><co-state>)
//  6
727  :     LoadValue     : value = <I8, 6>
//  (<co-state> == 6)
728  :     CompareValue  
//  if ((<co-state> == 6))
729  :     OpNot         : type = Bool
//  if ((<co-state> == 6))
730  :     JumpIf        : label = 744
//  21
731  :     LoadValue     : value = <I8, 21>
//  (<co-state> = 21)
732  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 21)
733  :     StoreCapturedVar: var = 10
//  (<co-state> = 21);
734  :     Pop           
//  try
735  :     UninstallTry  : stackPatternCount = 0
//  continue;
736  :     Jump          : label = 413
//  3
737  :     LoadValue     : value = <I8, 3>
//  (<co-state> = 3)
738  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 3)
739  :     StoreCapturedVar: var = 10
//  (<co-state> = 3);
740  :     Pop           
//  try
741  :     UninstallTry  : stackPatternCount = 0
//  continue;
742  :     Jump          : label = 413
//  if ((<co-state> == 6))
743  :     Jump          : label = 744
//  <co-state>
744  :     LoadCapturedVar: var = 10(<captured><co-state>)
//  7
745  :     LoadValue     : value = <I8, 7>
//  (<co-state> == 7)
746  :     CompareValue  
//  if ((<co-state> == 7))
747  :     OpNot         : type = Bool
//  if ((<co-state> == 7))
748  :     JumpIf        : label = 815
//  <state>stateMachineObject
749  :     LoadCapturedVar: var = 14(<captured><state>stateMachineObject)
//  <state>stateMachineObject.stateMachineInput
750  :     GetProperty   : propertyInfo = stateMachineInput<system::StateMachine>
//  (<co3-switch>1 = <state>stateMachineObject.stateMachineInput)
751  :     Duplicate     : stackPatternCount = 0
//  (<co3-switch>1 = <state>stateMachineObject.stateMachineInput)
752  :     StoreCapturedVar: var = 4
//  (<co3-switch>1 = <state>stateMachineObject.stateMachineInput);
753  :     Pop           
//  <co3-switch>1
754  :     LoadCapturedVar: var = 4(<captured><co3-switch>1)
//  0
755  :     LoadValue     : value = <I8, 0>
//  (<co3-switch>1 == 0 of (::system::Int64))
756  :     CompareValue  
//  if ((<co3-switch>1 == 0 of (::system::Int64)))
757  :     OpNot         : type = Bool
//  if ((<co3-switch>1 == 0 of (::system::Int64)))
758  :     JumpIf        : label = 808
//  1
759  :     LoadValue     : value = <I8, 1>
//  (-1)
760  :     OpNegative    : type = I8
//  (<state>stateMachineObject.stateMachineInput = (-1))
761  :     Duplicate     : stackPatternCount = 0
//  <state>stateMachineObject
762  :     LoadCapturedVar: var = 14(<captured><state>stateMachineObject)
//  (<state>stateMachineObject.stateMachineInput = (-1))
763  :     SetProperty   : propertyInfo = stateMachineInput<system::StateMachine>
//  (<state>stateMachineObject.stateMachineInput = (-1));
764  :     Pop           
//  <state>stateMachineObject
765  :     LoadCapturedVar: var = 14(<captured><state>stateMachineObject)
//  <state>stateMachineObject.<stateip-Digit>i
766  :     GetProperty   : propertyInfo = <stateip-Digit>i<SMCalculator>
//  (<co2>i = <state>stateMachineObject.<stateip-Digit>i)
767  :     Duplicate     : stackPatternCount = 0
//  (<co2>i = <state>stateMachineObject.<stateip-Digit>i)
768  :     StoreCapturedVar: var = 3
//  (<co2>i = <state>stateMachineObject.<stateip-Digit>i);
769  :     Pop           
//  <co4>newNumber
770  :     LoadCapturedVar: var = 5(<captured><co4>newNumber)
//  if (<co4>newNumber)
771  :     OpNot         : type = Bool
//  if (<co4>newNumber)
772  :     JumpIf        : label = 781
//  <co2>i
773  :     LoadCapturedVar: var = 3(<captured><co2>i)
//  <co2>i
774  :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  (Value = <co2>i)
775  :     Duplicate     : stackPatternCount = 0
//  (Value = <co2>i)
776  :     LoadCapturedVar: var = 17(<captured-this>0)
//  (Value = <co2>i)
777  :     InvokeMethod  : methodInfo = SetValue<SMCalculator>, stackPatternCount = 1
//  (Value = <co2>i)
778  :     Pop           
//  (Value = <co2>i);
779  :     Pop           
//  if (<co4>newNumber)
780  :     Jump          : label = 791
//  Value
781  :     LoadCapturedVar: var = 17(<captured-this>0)
//  Value
782  :     InvokeMethod  : methodInfo = GetValue<SMCalculator>, stackPatternCount = 0
//  <co2>i
783  :     LoadCapturedVar: var = 3(<captured><co2>i)
//  <co2>i
784  :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  (Value & <co2>i)
785  :     OpConcat      
//  (Value = (Value & <co2>i))
786  :     Duplicate     : stackPatternCount = 0
//  (Value = (Value & <co2>i))
787  :     LoadCapturedVar: var = 17(<captured-this>0)
//  (Value = (Value & <co2>i))
788  :     InvokeMethod  : methodInfo = SetValue<SMCalculator>, stackPatternCount = 1
//  (Value = (Value & <co2>i))
789  :     Pop           
//  (Value = (Value & <co2>i));
790  :     Pop           
//  1
791  :     LoadValue     : value = <I8, 1>
//  (<co8-state>state = 1)
792  :     Duplicate     : stackPatternCount = 0
//  (<co8-state>state = 1)
793  :     StoreCapturedVar: var = 9
//  (<co8-state>state = 1);
794  :     Pop           
//  3
795  :     LoadValue     : value = <I8, 3>
//  (<co-state> = 3)
796  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 3)
797  :     StoreCapturedVar: var = 10
//  (<co-state> = 3);
798  :     Pop           
//  try
799  :     UninstallTry  : stackPatternCount = 0
//  continue;
800  :     Jump          : label = 413
//  8
801  :     LoadValue     : value = <I8, 8>
//  (<co-state> = 8)
802  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 8)
803  :     StoreCapturedVar: var = 10
//  (<co-state> = 8);
804  :     Pop           
//  try
805  :     UninstallTry  : stackPatternCount = 0
//  continue;
806  :     Jump          : label = 413
//  if ((<co3-switch>1 == 0 of (::system::Int64)))
807  :     Jump          : label = 808
//  8
808  :     LoadValue     : value = <I8, 8>
//  (<co-state> = 8)
809  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 8)
810  :     StoreCapturedVar: var = 10
//  (<co-state> = 8);
811  :     Pop           
//  try
812  :     UninstallTry  : stackPatternCount = 0
//  continue;
813  :     Jump          : label = 413
//  if ((<co-state> == 7))
814  :     Jump          : label = 815
//  <co-state>
815  :     LoadCapturedVar: var = 10(<captured><co-state>)
//  8
816  :     LoadValue     : value = <I8, 8>
//  (<co-state> == 8)
817  :     CompareValue  
//  if ((<co-state> == 8))
818  :     OpNot         : type = Bool
//  if ((<co-state> == 8))
819  :     JumpIf        : label = 833
//  21
820  :     LoadValue     : value = <I8, 21>
//  (<co-state> = 21)
821  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 21)
822  :     StoreCapturedVar: var = 10
//  (<co-state> = 21);
823  :     Pop           
//  try
824  :     UninstallTry  : stackPatternCount = 0
//  continue;
825  :     Jump          : label = 413
//  3
826  :     LoadValue     : value = <I8, 3>
//  (<co-state> = 3)
827  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 3)
828  :     StoreCapturedVar: var = 10
//  (<co-state> = 3);
829  :     Pop           
//  try
830  :     UninstallTry  : stackPatternCount = 0
//  continue;
831  :     Jump          : label = 413
//  if ((<co-state> == 8))
832  :     Jump          : label = 833
//  <co-state>
833  :     LoadCapturedVar: var = 10(<captured><co-state>)
//  9
834  :     LoadValue     : value = <I8, 9>
//  (<co-state> == 9)
835  :     CompareValue  
//  if ((<co-state> == 9))
836  :     OpNot         : type = Bool
//  if ((<co-state> == 9))
837  :     JumpIf        : label = 854
//  Waiting
838  :     LoadValue     : value = <enum: 0>
//  SetStatus(Waiting)
839  :     InvokeWithContext: func = 15(<method:SetStatus<system::Coroutine>(15)> in SMCalculator::<state>CreateCoroutine), stackPatternCount = 1
//  SetStatus(Waiting);
840  :     Pop           
//  <co-state>
841  :     LoadCapturedVar: var = 10(<captured><co-state>)
//  (<co-state-before-pause> = <co-state>)
842  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = <co-state>)
843  :     StoreCapturedVar: var = 11
//  (<co-state-before-pause> = <co-state>);
844  :     Pop           
//  10
845  :     LoadValue     : value = <I8, 10>
//  (<co-state> = 10)
846  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 10)
847  :     StoreCapturedVar: var = 10
//  (<co-state> = 10);
848  :     Pop           
//  try
849  :     UninstallTry  : stackPatternCount = 0
//  try
850  :     UninstallTry  : stackPatternCount = 0
//  return;
851  :     LoadValue     : value = <null>
//  return;
852  :     Return        
//  if ((<co-state> == 9))
853  :     Jump          : label = 854
//  <co-state>
854  :     LoadCapturedVar: var = 10(<captured><co-state>)
//  10
855  :     LoadValue     : value = <I8, 10>
//  (<co-state> == 10)
856  :     CompareValue  
//  if ((<co-state> == 10))
857  :     OpNot         : type = Bool
//  if ((<co-state> == 10))
858  :     JumpIf        : label = 889
//  <state>stateMachineObject
859  :     LoadCapturedVar: var = 14(<captured><state>stateMachineObject)
//  <state>stateMachineObject.stateMachineInput
860  :     GetProperty   : propertyInfo = stateMachineInput<system::StateMachine>
//  1
861  :     LoadValue     : value = <I8, 1>
//  (-1)
862  :     OpNegative    : type = I8
//  (<state>stateMachineObject.stateMachineInput == (-1))
863  :     CompareValue  
//  if ((<state>stateMachineObject.stateMachineInput == (-1)))
864  :     OpNot         : type = Bool
//  if ((<state>stateMachineObject.stateMachineInput == (-1)))
865  :     JumpIf        : label = 882
//  Waiting
866  :     LoadValue     : value = <enum: 0>
//  SetStatus(Waiting)
867  :     InvokeWithContext: func = 15(<method:SetStatus<system::Coroutine>(15)> in SMCalculator::<state>CreateCoroutine), stackPatternCount = 1
//  SetStatus(Waiting);
868  :     Pop           
//  <co-state>
869  :     LoadCapturedVar: var = 10(<captured><co-state>)
//  (<co-state-before-pause> = <co-state>)
870  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = <co-state>)
871  :     StoreCapturedVar: var = 11
//  (<co-state-before-pause> = <co-state>);
872  :     Pop           
//  11
873  :     LoadValue     : value = <I8, 11>
//  (<co-state> = 11)
874  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 11)
875  :     StoreCapturedVar: var = 10
//  (<co-state> = 11);
876  :     Pop           
//  try
877  :     UninstallTry  : stackPatternCount = 0
//  try
878  :     UninstallTry  : stackPatternCount = 0
//  return;
879  :     LoadValue     : value = <null>
//  return;
880  :     Return        
//  if ((<state>stateMachineObject.stateMachineInput == (-1)))
881  :     Jump          : label = 882
//  11
882  :     LoadValue     : value = <I8, 11>
//  (<co-state> = 11)
883  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 11)
884  :     StoreCapturedVar: var = 10
//  (<co-state> = 11);
885  :     Pop           
//  try
886  :     UninstallTry  : stackPatternCount = 0
//  continue;
887  :     Jump          : label = 413
//  if ((<co-state> == 10))
888  :     Jump          : label = 889
//  <co-state>
889  :     LoadCapturedVar: var = 10(<captured><co-state>)
//  11
890  :     LoadValue     : value = <I8, 11>
//  (<co-state> == 11)
891  :     CompareValue  
//  if ((<co-state> == 11))
892  :     OpNot         : type = Bool
//  if ((<co-state> == 11))
893  :     JumpIf        : label = 933
//  <state>stateMachineObject
894  :     LoadCapturedVar: var = 14(<captured><state>stateMachineObject)
//  <state>stateMachineObject.stateMachineInput
895  :     GetProperty   : propertyInfo = stateMachineInput<system::StateMachine>
//  (<co5-switch>2 = <state>stateMachineObject.stateMachineInput)
896  :     Duplicate     : stackPatternCount = 0
//  (<co5-switch>2 = <state>stateMachineObject.stateMachineInput)
897  :     StoreCapturedVar: var = 6
//  (<co5-switch>2 = <state>stateMachineObject.stateMachineInput);
898  :     Pop           
//  <co5-switch>2
899  :     LoadCapturedVar: var = 6(<captured><co5-switch>2)
//  1
900  :     LoadValue     : value = <I8, 1>
//  (<co5-switch>2 == 1 of (::system::Int64))
901  :     CompareValue  
//  if ((<co5-switch>2 == 1 of (::system::Int64)))
902  :     OpNot         : type = Bool
//  if ((<co5-switch>2 == 1 of (::system::Int64)))
903  :     JumpIf        : label = 926
//  1
904  :     LoadValue     : value = <I8, 1>
//  (-1)
905  :     OpNegative    : type = I8
//  (<state>stateMachineObject.stateMachineInput = (-1))
906  :     Duplicate     : stackPatternCount = 0
//  <state>stateMachineObject
907  :     LoadCapturedVar: var = 14(<captured><state>stateMachineObject)
//  (<state>stateMachineObject.stateMachineInput = (-1))
908  :     SetProperty   : propertyInfo = stateMachineInput<system::StateMachine>
//  (<state>stateMachineObject.stateMachineInput = (-1));
909  :     Pop           
//  Value
910  :     LoadCapturedVar: var = 17(<captured-this>0)
//  Value
911  :     InvokeMethod  : methodInfo = GetValue<SMCalculator>, stackPatternCount = 0
//  "."
912  :     LoadValue     : value = <Bool, .>
//  (Value & ".")
913  :     OpConcat      
//  (Value = (Value & "."))
914  :     Duplicate     : stackPatternCount = 0
//  (Value = (Value & "."))
915  :     LoadCapturedVar: var = 17(<captured-this>0)
//  (Value = (Value & "."))
916  :     InvokeMethod  : methodInfo = SetValue<SMCalculator>, stackPatternCount = 1
//  (Value = (Value & "."))
917  :     Pop           
//  (Value = (Value & "."));
918  :     Pop           
//  12
919  :     LoadValue     : value = <I8, 12>
//  (<co-state> = 12)
920  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 12)
921  :     StoreCapturedVar: var = 10
//  (<co-state> = 12);
922  :     Pop           
//  try
923  :     UninstallTry  : stackPatternCount = 0
//  continue;
924  :     Jump          : label = 413
//  if ((<co5-switch>2 == 1 of (::system::Int64)))
925  :     Jump          : label = 926
//  13
926  :     LoadValue     : value = <I8, 13>
//  (<co-state> = 13)
927  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 13)
928  :     StoreCapturedVar: var = 10
//  (<co-state> = 13);
929  :     Pop           
//  try
930  :     UninstallTry  : stackPatternCount = 0
//  continue;
931  :     Jump          : label = 413
//  if ((<co-state> == 11))
932  :     Jump          : label = 933
//  <co-state>
933  :     LoadCapturedVar: var = 10(<captured><co-state>)
//  12
934  :     LoadValue     : value = <I8, 12>
//  (<co-state> == 12)
935  :     CompareValue  
//  if ((<co-state> == 12))
936  :     OpNot         : type = Bool
//  if ((<co-state> == 12))
937  :     JumpIf        : label = 954
//  false
938  :     LoadValue     : value = <Bool, false>
//  (<state>stateMachineObject.<statesp-Integer>newNumber = false)
939  :     Duplicate     : stackPatternCount = 0
//  <state>stateMachineObject
940  :     LoadCapturedVar: var = 14(<captured><state>stateMachineObject)
//  (<state>stateMachineObject.<statesp-Integer>newNumber = false)
941  :     SetProperty   : propertyInfo = <statesp-Integer>newNumber<SMCalculator>
//  (<state>stateMachineObject.<statesp-Integer>newNumber = false);
942  :     Pop           
//  2
943  :     LoadValue     : value = <I8, 2>
//  <state>stateMachineObject
944  :     LoadCapturedVar: var = 14(<captured><state>stateMachineObject)
//  <state>stateMachineObject.<state>CreateCoroutine(2)
945  :     InvokeMethod  : methodInfo = <state>CreateCoroutine<SMCalculator>, stackPatternCount = 1
//  <state>stateMachineObject.<state>CreateCoroutine(2);
946  :     Pop           
//  14
947  :     LoadValue     : value = <I8, 14>
//  (<co-state> = 14)
948  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 14)
949  :     StoreCapturedVar: var = 10
//  (<co-state> = 14);
950  :     Pop           
//  try
951  :     UninstallTry  : stackPatternCount = 0
//  continue;
952  :     Jump          : label = 413
//  if ((<co-state> == 12))
953  :     Jump          : label = 954
//  <co-state>
954  :     LoadCapturedVar: var = 10(<captured><co-state>)
//  13
955  :     LoadValue     : value = <I8, 13>
//  (<co-state> == 13)
956  :     CompareValue  
//  if ((<co-state> == 13))
957  :     OpNot         : type = Bool
//  if ((<co-state> == 13))
958  :     JumpIf        : label = 972
//  21
959  :     LoadValue     : value = <I8, 21>
//  (<co-state> = 21)
960  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 21)
961  :     StoreCapturedVar: var = 10
//  (<co-state> = 21);
962  :     Pop           
//  try
963  :     UninstallTry  : stackPatternCount = 0
//  continue;
964  :     Jump          : label = 413
//  12
965  :     LoadValue     : value = <I8, 12>
//  (<co-state> = 12)
966  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 12)
967  :     StoreCapturedVar: var = 10
//  (<co-state> = 12);
968  :     Pop           
//  try
969  :     UninstallTry  : stackPatternCount = 0
//  continue;
970  :     Jump          : label = 413
//  if ((<co-state> == 13))
971  :     Jump          : label = 972
//  <co-state>
972  :     LoadCapturedVar: var = 10(<captured><co-state>)
//  14
973  :     LoadValue     : value = <I8, 14>
//  (<co-state> == 14)
974  :     CompareValue  
//  if ((<co-state> == 14))
975  :     OpNot         : type = Bool
//  if ((<co-state> == 14))
976  :     JumpIf        : label = 993
//  Waiting
977  :     LoadValue     : value = <enum: 0>
//  SetStatus(Waiting)
978  :     InvokeWithContext: func = 15(<method:SetStatus<system::Coroutine>(15)> in SMCalculator::<state>CreateCoroutine), stackPatternCount = 1
//  SetStatus(Waiting);
979  :     Pop           
//  <co-state>
980  :     LoadCapturedVar: var = 10(<captured><co-state>)
//  (<co-state-before-pause> = <co-state>)
981  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = <co-state>)
982  :     StoreCapturedVar: var = 11
//  (<co-state-before-pause> = <co-state>);
983  :     Pop           
//  15
984  :     LoadValue     : value = <I8, 15>
//  (<co-state> = 15)
985  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 15)
986  :     StoreCapturedVar: var = 10
//  (<co-state> = 15);
987  :     Pop           
//  try
988  :     UninstallTry  : stackPatternCount = 0
//  try
989  :     UninstallTry  : stackPatternCount = 0
//  return;
990  :     LoadValue     : value = <null>
//  return;
991  :     Return        
//  if ((<co-state> == 14))
992  :     Jump          : label = 993
//  <co-state>
993  :     LoadCapturedVar: var = 10(<captured><co-state>)
//  15
994  :     LoadValue     : value = <I8, 15>
//  (<co-state> == 15)
995  :     CompareValue  
//  if ((<co-state> == 15))
996  :     OpNot         : type = Bool
//  if ((<co-state> == 15))
997  :     JumpIf        : label = 1011
//  21
998  :     LoadValue     : value = <I8, 21>
//  (<co-state> = 21)
999  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 21)
1000 :     StoreCapturedVar: var = 10
//  (<co-state> = 21);
1001 :     Pop           
//  try
1002 :     UninstallTry  : stackPatternCount = 0
//  continue;
1003 :     Jump          : label = 413
//  3
1004 :     LoadValue     : value = <I8, 3>
//  (<co-state> = 3)
1005 :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 3)
1006 :     StoreCapturedVar: var = 10
//  (<co-state> = 3);
1007 :     Pop           
//  try
1008 :     UninstallTry  : stackPatternCount = 0
//  continue;
1009 :     Jump          : label = 413
//  if ((<co-state> == 15))
1010 :     Jump          : label = 1011
//  <co-state>
1011 :     LoadCapturedVar: var = 10(<captured><co-state>)
//  16
1012 :     LoadValue     : value = <I8, 16>
//  (<co-state> == 16)
1013 :     CompareValue  
//  if ((<co-state> == 16))
1014 :     OpNot         : type = Bool
//  if ((<co-state> == 16))
1015 :     JumpIf        : label = 1032
//  Waiting
1016 :     LoadValue     : value = <enum: 0>
//  SetStatus(Waiting)
1017 :     InvokeWithContext: func = 15(<method:SetStatus<system::Coroutine>(15)> in SMCalculator::<state>CreateCoroutine), stackPatternCount = 1
//  SetStatus(Waiting);
1018 :     Pop           
//  <co-state>
1019 :     LoadCapturedVar: var = 10(<captured><co-state>)
//  (<co-state-before-pause> = <co-state>)
1020 :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = <co-state>)
1021 :     StoreCapturedVar: var = 11
//  (<co-state-before-pause> = <co-state>);
1022 :     Pop           
//  17
1023 :     LoadValue     : value = <I8, 17>
//  (<co-state> = 17)
1024 :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 17)
1025 :     StoreCapturedVar: var = 10
//  (<co-state> = 17);
1026 :     Pop           
//  try
1027 :     UninstallTry  : stackPatternCount = 0
//  try
1028 :     UninstallTry  : stackPatternCount = 0
//  return;
1029 :     LoadValue     : value = <null>
//  return;
1030 :     Return        
//  if ((<co-state> == 16))
1031 :     Jump          : label = 1032
//  <co-state>
1032 :     LoadCapturedVar: var = 10(<captured><co-state>)
//  17
1033 :     LoadValue     : value = <I8, 17>
//  (<co-state> == 17)
1034 :     CompareValue  
//  if ((<co-state> == 17))
1035 :     OpNot         : type = Bool
//  if ((<co-state> == 17))
1036 :     JumpIf        : label = 1067
//  <state>stateMachineObject
1037 :     LoadCapturedVar: var = 14(<captured><state>stateMachineObject)
//  <state>stateMachineObject.stateMachineInput
1038 :     GetProperty   : propertyInfo = stateMachineInput<system::StateMachine>
//  1
1039 :     LoadValue     : value = <I8, 1>
//  (-1)
1040 :     OpNegative    : type = I8
//  (<state>stateMachineObject.stateMachineInput == (-1))
1041 :     CompareValue  
//  if ((<state>stateMachineObject.stateMachineInput == (-1)))
1042 :     OpNot         : type = Bool
//  if ((<state>stateMachineObject.stateMachineInput == (-1)))
1043 :     JumpIf        : label = 1060
//  Waiting
1044 :     LoadValue     : value = <enum: 0>
//  SetStatus(Waiting)
1045 :     InvokeWithContext: func = 15(<method:SetStatus<system::Coroutine>(15)> in SMCalculator::<state>CreateCoroutine), stackPatternCount = 1
//  SetStatus(Waiting);
1046 :     Pop           
//  <co-state>
1047 :     LoadCapturedVar: var = 10(<captured><co-state>)
//  (<co-state-before-pause> = <co-state>)
1048 :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = <co-state>)
1049 :     StoreCapturedVar: var = 11
//  (<co-state-before-pause> = <co-state>);
1050 :     Pop           
//  18
1051 :     LoadValue     : value = <I8, 18>
//  (<co-state> = 18)
1052 :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 18)
1053 :     StoreCapturedVar: var = 10
//  (<co-state> = 18);
1054 :     Pop           
//  try
1055 :     UninstallTry  : stackPatternCount = 0
//  try
1056 :     UninstallTry  : stackPatternCount = 0
//  return;
1057 :     LoadValue     : value = <null>
//  return;
1058 :     Return        
//  if ((<state>stateMachineObject.stateMachineInput == (-1)))
1059 :     Jump          : label = 1060
//  18
1060 :     LoadValue     : value = <I8, 18>
//  (<co-state> = 18)
1061 :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 18)
1062 :     StoreCapturedVar: var = 10
//  (<co-state> = 18);
1063 :     Pop           
//  try
1064 :     UninstallTry  : stackPatternCount = 0
//  continue;
1065 :     Jump          : label = 413
//  if ((<co-state> == 17))
1066 :     Jump          : label = 1067
//  <co-state>
1067 :     LoadCapturedVar: var = 10(<captured><co-state>)
//  18
1068 :     LoadValue     : value = <I8, 18>
//  (<co-state> == 18)
1069 :     CompareValue  
//  if ((<co-state> == 18))
1070 :     OpNot         : type = Bool
//  if ((<co-state> == 18))
1071 :     JumpIf        : label = 1208
//  <state>stateMachineObject
1072 :     LoadCapturedVar: var = 14(<captured><state>stateMachineObject)
//  <state>stateMachineObject.stateMachineInput
1073 :     GetProperty   : propertyInfo = stateMachineInput<system::StateMachine>
//  var <switch>3 : ::system::Int64 = <state>stateMachineObject.stateMachineInput;
1074 :     StoreLocalVar : var = 3(<switch>3)
//  <switch>3
1075 :     LoadLocalVar  : var = 3(<switch>3)
//  2
1076 :     LoadValue     : value = <I8, 2>
//  (<switch>3 == 2 of (::system::Int64))
1077 :     CompareValue  
//  if ((<switch>3 == 2 of (::system::Int64)))
1078 :     OpNot         : type = Bool
//  if ((<switch>3 == 2 of (::system::Int64)))
1079 :     JumpIf        : label = 1095
//  1
1080 :     LoadValue     : value = <I8, 1>
//  (-1)
1081 :     OpNegative    : type = I8
//  (<state>stateMachineObject.stateMachineInput = (-1))
1082 :     Duplicate     : stackPatternCount = 0
//  <state>stateMachineObject
1083 :     LoadCapturedVar: var = 14(<captured><state>stateMachineObject)
//  (<state>stateMachineObject.stateMachineInput = (-1))
1084 :     SetProperty   : propertyInfo = stateMachineInput<system::StateMachine>
//  (<state>stateMachineObject.stateMachineInput = (-1));
1085 :     Pop           
//  Calculate()
1086 :     LoadCapturedVar: var = 17(<captured-this>0)
//  Calculate()
1087 :     InvokeMethod  : methodInfo = Calculate<SMCalculator>, stackPatternCount = 0
//  Calculate();
1088 :     Pop           
//  "+"
1089 :     LoadValue     : value = <Bool, +>
//  (op = "+")
1090 :     Duplicate     : stackPatternCount = 0
//  (op = "+")
1091 :     LoadCapturedVar: var = 17(<captured-this>0)
//  (op = "+")
1092 :     SetProperty   : propertyInfo = op<SMCalculator>
//  (op = "+");
1093 :     Pop           
//  if ((<switch>3 == 2 of (::system::Int64)))
1094 :     Jump          : label = 1191
//  <switch>3
1095 :     LoadLocalVar  : var = 3(<switch>3)
//  3
1096 :     LoadValue     : value = <I8, 3>
//  (<switch>3 == 3 of (::system::Int64))
1097 :     CompareValue  
//  if ((<switch>3 == 3 of (::system::Int64)))
1098 :     OpNot         : type = Bool
//  if ((<switch>3 == 3 of (::system::Int64)))
1099 :     JumpIf        : label = 1115
//  1
1100 :     LoadValue     : value = <I8, 1>
//  (-1)
1101 :     OpNegative    : type = I8
//  (<state>stateMachineObject.stateMachineInput = (-1))
1102 :     Duplicate     : stackPatternCount = 0
//  <state>stateMachineObject
1103 :     LoadCapturedVar: var = 14(<captured><state>stateMachineObject)
//  (<state>stateMachineObject.stateMachineInput = (-1))
1104 :     SetProperty   : propertyInfo = stateMachineInput<system::StateMachine>
//  (<state>stateMachineObject.stateMachineInput = (-1));
1105 :     Pop           
//  Calculate()
1106 :     LoadCapturedVar: var = 17(<captured-this>0)
//  Calculate()
1107 :     InvokeMethod  : methodInfo = Calculate<SMCalculator>, stackPatternCount = 0
//  Calculate();
1108 :     Pop           
//  "*"
1109 :     LoadValue     : value = <Bool, *>
//  (op = "*")
1110 :     Duplicate     : stackPatternCount = 0
//  (op = "*")
1111 :     LoadCapturedVar: var = 17(<captured-this>0)
//  (op = "*")
1112 :     SetProperty   : propertyInfo = op<SMCalculator>
//  (op = "*");
1113 :     Pop           
//  if ((<switch>3 == 3 of (::system::Int64)))
1114 :     Jump          : label = 1191
//  <switch>3
1115 :     LoadLocalVar  : var = 3(<switch>3)
//  4
1116 :     LoadValue     : value = <I8, 4>
//  (<switch>3 == 4 of (::system::Int64))
1117 :     CompareValue  
//  if ((<switch>3 == 4 of (::system::Int64)))
1118 :     OpNot         : type = Bool
//  if ((<switch>3 == 4 of (::system::Int64)))
1119 :     JumpIf        : label = 1135
//  1
1120 :     LoadValue     : value = <I8, 1>
//  (-1)
1121 :     OpNegative    : type = I8
//  (<state>stateMachineObject.stateMachineInput = (-1))
1122 :     Duplicate     : stackPatternCount = 0
//  <state>stateMachineObject
1123 :     LoadCapturedVar: var = 14(<captured><state>stateMachineObject)
//  (<state>stateMachineObject.stateMachineInput = (-1))
1124 :     SetProperty   : propertyInfo = stateMachineInput<system::StateMachine>
//  (<state>stateMachineObject.stateMachineInput = (-1));
1125 :     Pop           
//  Calculate()
1126 :     LoadCapturedVar: var = 17(<captured-this>0)
//  Calculate()
1127 :     InvokeMethod  : methodInfo = Calculate<SMCalculator>, stackPatternCount = 0
//  Calculate();
1128 :     Pop           
//  "="
1129 :     LoadValue     : value = <Bool, =>
//  (op = "=")
1130 :     Duplicate     : stackPatternCount = 0
//  (op = "=")
1131 :     LoadCapturedVar: var = 17(<captured-this>0)
//  (op = "=")
1132 :     SetProperty   : propertyInfo = op<SMCalculator>
//  (op = "=");
1133 :     Pop           
//  if ((<switch>3 == 4 of (::system::Int64)))
1134 :     Jump          : label = 1191
//  <switch>3
1135 :     LoadLocalVar  : var = 3(<switch>3)
//  5
1136 :     LoadValue     : value = <I8, 5>
//  (<switch>3 == 5 of (::system::Int64))
1137 :     CompareValue  
//  if ((<switch>3 == 5 of (::system::Int64)))
1138 :     OpNot         : type = Bool
//  if ((<switch>3 == 5 of (::system::Int64)))
1139 :     JumpIf        : label = 1163
//  1
1140 :     LoadValue     : value = <I8, 1>
//  (-1)
1141 :     OpNegative    : type = I8
//  (<state>stateMachineObject.stateMachineInput = (-1))
1142 :     Duplicate     : stackPatternCount = 0
//  <state>stateMachineObject
1143 :     LoadCapturedVar: var = 14(<captured><state>stateMachineObject)
//  (<state>stateMachineObject.stateMachineInput = (-1))
1144 :     SetProperty   : propertyInfo = stateMachineInput<system::StateMachine>
//  (<state>stateMachineObject.stateMachineInput = (-1));
1145 :     Pop           
//  ""
1146 :     LoadValue     : value = <Bool, >
//  (valueFirst = "")
1147 :     Duplicate     : stackPatternCount = 0
//  (valueFirst = "")
1148 :     LoadCapturedVar: var = 17(<captured-this>0)
//  (valueFirst = "")
1149 :     SetProperty   : propertyInfo = valueFirst<SMCalculator>
//  (valueFirst = "");
1150 :     Pop           
//  ""
1151 :     LoadValue     : value = <Bool, >
//  (op = "")
1152 :     Duplicate     : stackPatternCount = 0
//  (op = "")
1153 :     LoadCapturedVar: var = 17(<captured-this>0)
//  (op = "")
1154 :     SetProperty   : propertyInfo = op<SMCalculator>
//  (op = "");
1155 :     Pop           
//  "0"
1156 :     LoadValue     : value = <Bool, 0>
//  (Value = "0")
1157 :     Duplicate     : stackPatternCount = 0
//  (Value = "0")
1158 :     LoadCapturedVar: var = 17(<captured-this>0)
//  (Value = "0")
1159 :     InvokeMethod  : methodInfo = SetValue<SMCalculator>, stackPatternCount = 1
//  (Value = "0")
1160 :     Pop           
//  (Value = "0");
1161 :     Pop           
//  if ((<switch>3 == 5 of (::system::Int64)))
1162 :     Jump          : label = 1191
//  <switch>3
1163 :     LoadLocalVar  : var = 3(<switch>3)
//  0
1164 :     LoadValue     : value = <I8, 0>
//  (<switch>3 == 0 of (::system::Int64))
1165 :     CompareValue  
//  if ((<switch>3 == 0 of (::system::Int64)))
1166 :     OpNot         : type = Bool
//  if ((<switch>3 == 0 of (::system::Int64)))
1167 :     JumpIf        : label = 1177
//  1
1168 :     LoadValue     : value = <I8, 1>
//  (-1)
1169 :     OpNegative    : type = I8
//  (<state>stateMachineObject.stateMachineInput = (-1))
1170 :     Duplicate     : stackPatternCount = 0
//  <state>stateMachineObject
1171 :     LoadCapturedVar: var = 14(<captured><state>stateMachineObject)
//  (<state>stateMachineObject.stateMachineInput = (-1))
1172 :     SetProperty   : propertyInfo = stateMachineInput<system::StateMachine>
//  (<state>stateMachineObject.stateMachineInput = (-1));
1173 :     Pop           
//  "Method \"Digit\" of class \"SMCalculator\" cannot be called at this moment."
1174 :     LoadValue     : value = <Bool, Method "Digit" of class "SMCalculator" cannot be called at this moment.>
//  raise "Method \"Digit\" of class \"SMCalculator\" cannot be called at this moment.";
1175 :     RaiseException
//  if ((<switch>3 == 0 of (::system::Int64)))
1176 :     Jump          : label = 1191
//  <switch>3
1177 :     LoadLocalVar  : var = 3(<switch>3)
//  1
1178 :     LoadValue     : value = <I8, 1>
//  (<switch>3 == 1 of (::system::Int64))
1179 :     CompareValue  
//  if ((<switch>3 == 1 of (::system::Int64)))
1180 :     OpNot         : type = Bool
//  if ((<switch>3 == 1 of (::system::Int64)))
1181 :     JumpIf        : label = 1191
//  1
1182 :     LoadValue     : value = <I8, 1>
//  (-1)
1183 :     OpNegative    : type = I8
//  (<state>stateMachineObject.stateMachineInput = (-1))
1184 :     Duplicate     : stackPatternCount = 0
//  <state>stateMachineObject
1185 :     LoadCapturedVar: var = 14(<captured><state>stateMachineObject)
//  (<state>stateMachineObject.stateMachineInput = (-1))
1186 :     SetProperty   : propertyInfo = stateMachineInput<system::StateMachine>
//  (<state>stateMachineObject.stateMachineInput = (-1));
1187 :     Pop           
//  "Method \"Dot\" of class \"SMCalculator\" cannot be called at this moment."
1188 :     LoadValue     : value = <Bool, Method "Dot" of class "SMCalculator" cannot be called at this moment.>
//  raise "Method \"Dot\" of class \"SMCalculator\" cannot be called at this moment.";
1189 :     RaiseException
//  if ((<switch>3 == 1 of (::system::Int64)))
1190 :     Jump          : label = 1191
//  4
1191 :     LoadValue     : value = <I8, 4>
//  (<co8-state>state = 4)
1192 :     Duplicate     : stackPatternCount = 0
//  (<co8-state>state = 4)
1193 :     StoreCapturedVar: var = 9
//  (<co8-state>state = 4);
1194 :     Pop           
//  3
1195 :     LoadValue     : value = <I8, 3>
//  (<co-state> = 3)
1196 :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 3)
1197 :     StoreCapturedVar: var = 10
//  (<co-state> = 3);
1198 :     Pop           
//  try
1199 :     UninstallTry  : stackPatternCount = 0
//  continue;
1200 :     Jump          : label = 413
//  19
1201 :     LoadValue     : value = <I8, 19>
//  (<co-state> = 19)
1202 :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 19)
1203 :     StoreCapturedVar: var = 10
//  (<co-state> = 19);
1204 :     Pop           
//  try
1205 :     UninstallTry  : stackPatternCount = 0
//  continue;
1206 :     Jump          : label = 413
//  if ((<co-state> == 18))
1207 :     Jump          : label = 1208
//  <co-state>
1208 :     LoadCapturedVar: var = 10(<captured><co-state>)
//  19
1209 :     LoadValue     : value = <I8, 19>
//  (<co-state> == 19)
1210 :     CompareValue  
//  if ((<co-state> == 19))
1211 :     OpNot         : type = Bool
//  if ((<co-state> == 19))
1212 :     JumpIf        : label = 1226
//  21
1213 :     LoadValue     : value = <I8, 21>
//  (<co-state> = 21)
1214 :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 21)
1215 :     StoreCapturedVar: var = 10
//  (<co-state> = 21);
1216 :     Pop           
//  try
1217 :     UninstallTry  : stackPatternCount = 0
//  continue;
1218 :     Jump          : label = 413
//  3
1219 :     LoadValue     : value = <I8, 3>
//  (<co-state> = 3)
1220 :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 3)
1221 :     StoreCapturedVar: var = 10
//  (<co-state> = 3);
1222 :     Pop           
//  try
1223 :     UninstallTry  : stackPatternCount = 0
//  continue;
1224 :     Jump          : label = 413
//  if ((<co-state> == 19))
1225 :     Jump          : label = 1226
//  <co-state>
1226 :     LoadCapturedVar: var = 10(<captured><co-state>)
//  20
1227 :     LoadValue     : value = <I8, 20>
//  (<co-state> == 20)
1228 :     CompareValue  
//  if ((<co-state> == 20))
1229 :     OpNot         : type = Bool
//  if ((<co-state> == 20))
1230 :     JumpIf        : label = 1244
//  21
1231 :     LoadValue     : value = <I8, 21>
//  (<co-state> = 21)
1232 :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 21)
1233 :     StoreCapturedVar: var = 10
//  (<co-state> = 21);
1234 :     Pop           
//  try
1235 :     UninstallTry  : stackPatternCount = 0
//  continue;
1236 :     Jump          : label = 413
//  3
1237 :     LoadValue     : value = <I8, 3>
//  (<co-state> = 3)
1238 :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 3)
1239 :     StoreCapturedVar: var = 10
//  (<co-state> = 3);
1240 :     Pop           
//  try
1241 :     UninstallTry  : stackPatternCount = 0
//  continue;
1242 :     Jump          : label = 413
//  if ((<co-state> == 20))
1243 :     Jump          : label = 1244
//  try
1244 :     UninstallTry  : stackPatternCount = 0
//  try
1245 :     Jump          : label = 1257
//  try
1246 :     LoadException 
//  try
1247 :     StoreLocalVar : var = 4(<catch><co-ex>)
//  <co-ex>
1248 :     LoadLocalVar  : var = 4(<catch><co-ex>)
//  (<co-tempexvar0>ex = <co-ex>)
1249 :     Duplicate     : stackPatternCount = 0
//  (<co-tempexvar0>ex = <co-ex>)
1250 :     StoreCapturedVar: var = 0
//  (<co-tempexvar0>ex = <co-ex>);
1251 :     Pop           
//  2
1252 :     LoadValue     : value = <I8, 2>
//  (<co-state> = 2)
1253 :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 2)
1254 :     StoreCapturedVar: var = 10
//  (<co-state> = 2);
1255 :     Pop           
//  continue;
1256 :     Jump          : label = 413
//  while (true)
1257 :     Jump          : label = 413
//  try
1258 :     UninstallTry  : stackPatternCount = 0
//  try
1259 :     Jump          : label = 1274
//  try
1260 :     LoadException 
//  try
1261 :     StoreLocalVar : var = 5(<catch><co-ex>)
//  <co-ex>
1262 :     LoadLocalVar  : var = 5(<catch><co-ex>)
//  SetFailure(<co-ex>)
1263 :     InvokeWithContext: func = 14(<method:SetFailure<system::Coroutine>(14)> in SMCalculator::<state>CreateCoroutine), stackPatternCount = 1
//  SetFailure(<co-ex>);
1264 :     Pop           
//  Stopped
1265 :     LoadValue     : value = <enum: 2>
//  SetStatus(Stopped)
1266 :     InvokeWithContext: func = 15(<method:SetStatus<system::Coroutine>(15)> in SMCalculator::<state>CreateCoroutine), stackPatternCount = 1
//  SetStatus(Stopped);
1267 :     Pop           
//  <raise-exception>
1268 :     LoadLocalVar  : var = 0(<raise-exception>)
//  if (<raise-exception>)
1269 :     OpNot         : type = Bool
//  if (<raise-exception>)
1270 :     JumpIf        : label = 1274
//  raise;
1271 :     LoadLocalVar  : var = 5(<catch><co-ex>)
//  raise;
1272 :     RaiseException
//  if (<raise-exception>)
1273 :     Jump          : label = 1274
//  func Resume(<raise-exception> : ::system::Boolean, <coroutine-output> : ::system::CoroutineResult^) : (::system::Void)
1274 :     LoadValue     : value = <null>
//  func Resume(<raise-exception> : ::system::Boolean, <coroutine-output> : ::system::CoroutineResult^) : (::system::Void)
1275 :     Return        
//  new ()
1276 :     LoadCapturedVar: var = 0(<captured-this>0)
//  new ()
1277 :     InvokeBaseCtor: methodInfo = <system::StateMachine>, stackPatternCount = 0
//  new ()
1278 :     Pop           
//  ""
1279 :     LoadValue     : value = <Bool, >
//  var valueFirst : string = "";
1280 :     LoadCapturedVar: var = 0(<captured-this>0)
//  var valueFirst : string = "";
1281 :     SetProperty   : propertyInfo = valueFirst<SMCalculator>
//  ""
1282 :     LoadValue     : value = <Bool, >
//  var op : string = "";
1283 :     LoadCapturedVar: var = 0(<captured-this>0)
//  var op : string = "";
1284 :     SetProperty   : propertyInfo = op<SMCalculator>
//  "0"
1285 :     LoadValue     : value = <Bool, 0>
//  var <prop>Value : string = "0";
1286 :     LoadCapturedVar: var = 0(<captured-this>0)
//  var <prop>Value : string = "0";
1287 :     SetProperty   : propertyInfo = <prop>Value<SMCalculator>
//  0
1288 :     LoadValue     : value = <I8, 0>
//  var <stateip-Digit>i : ::system::Int64 = 0 of (::system::Int64);
1289 :     LoadCapturedVar: var = 0(<captured-this>0)
//  var <stateip-Digit>i : ::system::Int64 = 0 of (::system::Int64);
1290 :     SetProperty   : propertyInfo = <stateip-Digit>i<SMCalculator>
//  false
1291 :     LoadValue     : value = <Bool, false>
//  var <statesp-Integer>newNumber : ::system::Boolean = false;
1292 :     LoadCapturedVar: var = 0(<captured-this>0)
//  var <statesp-Integer>newNumber : ::system::Boolean = false;
1293 :     SetProperty   : propertyInfo = <statesp-Integer>newNumber<SMCalculator>
//  new ()
1294 :     LoadValue     : value = <null>
//  new ()
1295 :     Return        
//  new (SMCalculator^)()
1296 :     LoadValue     : value = <null>
//  new (SMCalculator^)()
1297 :     InvokeMethod  : methodInfo = <SMCalculator>, stackPatternCount = 0
//  var c = new (SMCalculator^)();
1298 :     StoreLocalVar : var = 0(c)
//  "["
1299 :     LoadValue     : value = <Bool, [>
//  c
1300 :     LoadLocalVar  : var = 0(c)
//  c.Value
1301 :     InvokeMethod  : methodInfo = GetValue<SMCalculator>, stackPatternCount = 0
//  ("[" & c.Value)
1302 :     OpConcat      
//  "]"
1303 :     LoadValue     : value = <Bool, ]>
//  (("[" & c.Value) & "]")
1304 :     OpConcat      
//  (s = (("[" & c.Value) & "]"))
1305 :     Duplicate     : stackPatternCount = 0
//  (s = (("[" & c.Value) & "]"))
1306 :     StoreGlobalVar: var = 0(s)
//  (s = (("[" & c.Value) & "]"));
1307 :     Pop           
//  c
1308 :     LoadLocalVar  : var = 0(c)
//  func () : (void)
1309 :     LoadLocalVar  : var = 0(c)
//  func () : (void)
1310 :     CreateClosureContext: stackPatternCount = 1
//  func () : (void)
1311 :     LoadFunction  : func = 19(<lambda:(19)> in main)
//  func () : (void)
1312 :     CreateClosure 
//  attach(c.ValueChanged, func () : (void)
1313 :     AttachEvent   : eventInfo = ValueChanged<SMCalculator>
//  var handler = attach(c.ValueChanged, func () : (void)
1314 :     StoreLocalVar : var = 1(handler)
//  1
1315 :     LoadValue     : value = <I8, 1>
//  c
1316 :     LoadLocalVar  : var = 0(c)
//  c.Digit(1)
1317 :     InvokeMethod  : methodInfo = Digit<SMCalculator>, stackPatternCount = 1
//  c.Digit(1);
1318 :     Pop           
//  c
1319 :     LoadLocalVar  : var = 0(c)
//  c.Dot()
1320 :     InvokeMethod  : methodInfo = Dot<SMCalculator>, stackPatternCount = 0
//  c.Dot();
1321 :     Pop           
//  5
1322 :     LoadValue     : value = <I8, 5>
//  c
1323 :     LoadLocalVar  : var = 0(c)
//  c.Digit(5)
1324 :     InvokeMethod  : methodInfo = Digit<SMCalculator>, stackPatternCount = 1
//  c.Digit(5);
1325 :     Pop           
//  c
1326 :     LoadLocalVar  : var = 0(c)
//  c.Add()
1327 :     InvokeMethod  : methodInfo = Add<SMCalculator>, stackPatternCount = 0
//  c.Add();
1328 :     Pop           
//  2
1329 :     LoadValue     : value = <I8, 2>
//  c
1330 :     LoadLocalVar  : var = 0(c)
//  c.Digit(2)
1331 :     InvokeMethod  : methodInfo = Digit<SMCalculator>, stackPatternCount = 1
//  c.Digit(2);
1332 :     Pop           
//  1
1333 :     LoadValue     : value = <I8, 1>
//  c
1334 :     LoadLocalVar  : var = 0(c)
//  c.Digit(1)
1335 :     InvokeMethod  : methodInfo = Digit<SMCalculator>, stackPatternCount = 1
//  c.Digit(1);
1336 :     Pop           
//  c
1337 :     LoadLocalVar  : var = 0(c)
//  c.Dot()
1338 :     InvokeMethod  : methodInfo = Dot<SMCalculator>, stackPatternCount = 0
//  c.Dot();
1339 :     Pop           
//  2
1340 :     LoadValue     : value = <I8, 2>
//  c
1341 :     LoadLocalVar  : var = 0(c)
//  c.Digit(2)
1342 :     InvokeMethod  : methodInfo = Digit<SMCalculator>, stackPatternCount = 1
//  c.Digit(2);
1343 :     Pop           
//  5
1344 :     LoadValue     : value = <I8, 5>
//  c
1345 :     LoadLocalVar  : var = 0(c)
//  c.Digit(5)
1346 :     InvokeMethod  : methodInfo = Digit<SMCalculator>, stackPatternCount = 1
//  c.Digit(5);
1347 :     Pop           
//  c
1348 :     LoadLocalVar  : var = 0(c)
//  c.Mul()
1349 :     InvokeMethod  : methodInfo = Mul<SMCalculator>, stackPatternCount = 0
//  c.Mul();
1350 :     Pop           
//  2
1351 :     LoadValue     : value = <I8, 2>
//  c
1352 :     LoadLocalVar  : var = 0(c)
//  c.Digit(2)
1353 :     InvokeMethod  : methodInfo = Digit<SMCalculator>, stackPatternCount = 1
//  c.Digit(2);
1354 :     Pop           
//  c
1355 :     LoadLocalVar  : var = 0(c)
//  c.Equal()
1356 :     InvokeMethod  : methodInfo = Equal<SMCalculator>, stackPatternCount = 0
//  c.Equal();
1357 :     Pop           
//  c
1358 :     LoadLocalVar  : var = 0(c)
//  c.Clear()
1359 :     InvokeMethod  : methodInfo = Clear<SMCalculator>, stackPatternCount = 0
//  c.Clear();
1360 :     Pop           
//  c
1361 :     LoadLocalVar  : var = 0(c)
//  handler
1362 :     LoadLocalVar  : var = 1(handler)
//  detach(c.ValueChanged, handler)
1363 :     DetachEvent   : eventInfo = ValueChanged<SMCalculator>
//  detach(c.ValueChanged, handler);
1364 :     Pop           
//  s
1365 :     LoadGlobalVar : var = 0(s)
//  return s;
1366 :     Return        
//  func main() : (string)
1367 :     LoadValue     : value = <null>
//  func main() : (string)
1368 :     Return        
//  ""
1369 :     LoadValue     : value = <Bool, >
//  s
1370 :     LoadGlobalVar : var = 0(s)
//  ("" & s)
1371 :     OpConcat      
//  "["
1372 :     LoadValue     : value = <Bool, [>
//  (("" & s) & "[")
1373 :     OpConcat      
//  c
1374 :     LoadCapturedVar: var = 0(<captured>c)
//  c.Value
1375 :     InvokeMethod  : methodInfo = GetValue<SMCalculator>, stackPatternCount = 0
//  ((("" & s) & "[") & c.Value)
1376 :     OpConcat      
//  "]"
1377 :     LoadValue     : value = <Bool, ]>
//  (((("" & s) & "[") & c.Value) & "]")
1378 :     OpConcat      
//  (s = (((("" & s) & "[") & c.Value) & "]"))
1379 :     Duplicate     : stackPatternCount = 0
//  (s = (((("" & s) & "[") & c.Value) & "]"))
1380 :     StoreGlobalVar: var = 0(s)
//  (s = (((("" & s) & "[") & c.Value) & "]"));
1381 :     Pop           
//  func () : (void)
1382 :     LoadValue     : value = <null>
//  func () : (void)
1383 :     Return        
