========================================================
Global Variables:
========================================================
s

========================================================
Functions:
========================================================
SMSwitchIR1::A (4 .. 31)
    Arguments:
    Captured Variables:
        <captured-this>0
    Local Variables:

SMSwitchIR1::B (32 .. 59)
    Arguments:
    Captured Variables:
        <captured-this>0
    Local Variables:

SMSwitchIR1::<state>CreateCoroutine (60 .. 93)
    Arguments:
        <state>startState
    Captured Variables:
        <captured-this>0
    Local Variables:
        <state>stateMachineObject
        <state>previousCoroutine

SMSwitchIR1::#ctor (480 .. 484)
    Arguments:
    Captured Variables:
        <captured-this>0
    Local Variables:

main (485 .. 507)
    Arguments:
    Captured Variables:
    Local Variables:
        sm
        <catch>ex

<initialize> (0 .. 3)
    Arguments:
    Captured Variables:
    Local Variables:

<method:SetFailure<system::Coroutine>(6)> in SMSwitchIR1::<state>CreateCoroutine (94 .. 99)
    Arguments:
        <value>
    Captured Variables:
        <captured><co-tempexvar0>ex
        <captured><co0-switch>0
        <captured><co1-switch>1
        <captured><co2-state>currentState
        <captured><co3-state>state
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured><state>stateMachineObject
        <captured><state>previousCoroutine
        <captured><state>startState
        <captured-this>0
        <captured-this>1
    Local Variables:

<method:SetStatus<system::Coroutine>(7)> in SMSwitchIR1::<state>CreateCoroutine (100 .. 105)
    Arguments:
        <value>
    Captured Variables:
        <captured><co-tempexvar0>ex
        <captured><co0-switch>0
        <captured><co1-switch>1
        <captured><co2-state>currentState
        <captured><co3-state>state
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured><state>stateMachineObject
        <captured><state>previousCoroutine
        <captured><state>startState
        <captured-this>0
        <captured-this>1
    Local Variables:

<method:GetFailure<system::Coroutine>(10)> in SMSwitchIR1::<state>CreateCoroutine (106 .. 109)
    Arguments:
    Captured Variables:
        <captured><co-tempexvar0>ex
        <captured><co0-switch>0
        <captured><co1-switch>1
        <captured><co2-state>currentState
        <captured><co3-state>state
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured><state>stateMachineObject
        <captured><state>previousCoroutine
        <captured><state>startState
        <captured-this>0
        <captured-this>1
    Local Variables:

<method:GetStatus<system::Coroutine>(11)> in SMSwitchIR1::<state>CreateCoroutine (110 .. 113)
    Arguments:
    Captured Variables:
        <captured><co-tempexvar0>ex
        <captured><co0-switch>0
        <captured><co1-switch>1
        <captured><co2-state>currentState
        <captured><co3-state>state
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured><state>stateMachineObject
        <captured><state>previousCoroutine
        <captured><state>startState
        <captured-this>0
        <captured-this>1
    Local Variables:

<method:Resume<system::Coroutine>(12)> in SMSwitchIR1::<state>CreateCoroutine (114 .. 479)
    Arguments:
        <raise-exception>
        <coroutine-output>
    Captured Variables:
        <captured><co-tempexvar0>ex
        <captured><co0-switch>0
        <captured><co1-switch>1
        <captured><co2-state>currentState
        <captured><co3-state>state
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured><state>stateMachineObject
        <captured><state>previousCoroutine
        <captured><state>startState
        <captured-this>0
        <captured-this>1
    Local Variables:
        <anonymous-range-test>
        <catch><co-ex>
        <catch><co-ex>

========================================================
Instructions:
========================================================
//  ""
0    :     LoadValue     : value = <String, >
//  var s = "";
1    :     StoreGlobalVar: var = 0(s)
2    :     LoadValue     : value = <null>
3    :     Return        
//  this
4    :     LoadCapturedVar: var = 0(<captured-this>0)
//  this.stateMachineInitialized
5    :     GetProperty   : propertyInfo = stateMachineInitialized<system::StateMachine>
//  (!this.stateMachineInitialized)
6    :     OpNot         : type = Bool
//  if ((!this.stateMachineInitialized))
7    :     OpNot         : type = Bool
//  if ((!this.stateMachineInitialized))
8    :     JumpIf        : label = 22
//  true
9    :     LoadValue     : value = <Bool, true>
//  (this.stateMachineInitialized = true)
10   :     Duplicate     : stackPatternCount = 0
//  this
11   :     LoadCapturedVar: var = 0(<captured-this>0)
//  (this.stateMachineInitialized = true)
12   :     SetProperty   : propertyInfo = stateMachineInitialized<system::StateMachine>
//  (this.stateMachineInitialized = true);
13   :     Pop           
//  0
14   :     LoadValue     : value = <I8, 0>
//  this
15   :     LoadCapturedVar: var = 0(<captured-this>0)
//  this.<state>CreateCoroutine(0)
16   :     InvokeMethod  : methodInfo = <state>CreateCoroutine<SMSwitchIR1>, stackPatternCount = 1
//  this.<state>CreateCoroutine(0);
17   :     Pop           
//  this
18   :     LoadCapturedVar: var = 0(<captured-this>0)
//  this.ResumeStateMachine()
19   :     InvokeMethod  : methodInfo = ResumeStateMachine<system::StateMachine>, stackPatternCount = 0
//  this.ResumeStateMachine();
20   :     Pop           
//  if ((!this.stateMachineInitialized))
21   :     Jump          : label = 22
//  0
22   :     LoadValue     : value = <I8, 0>
//  (this.stateMachineInput = 0)
23   :     Duplicate     : stackPatternCount = 0
//  this
24   :     LoadCapturedVar: var = 0(<captured-this>0)
//  (this.stateMachineInput = 0)
25   :     SetProperty   : propertyInfo = stateMachineInput<system::StateMachine>
//  (this.stateMachineInput = 0);
26   :     Pop           
//  this
27   :     LoadCapturedVar: var = 0(<captured-this>0)
//  this.ResumeStateMachine()
28   :     InvokeMethod  : methodInfo = ResumeStateMachine<system::StateMachine>, stackPatternCount = 0
//  this.ResumeStateMachine();
29   :     Pop           
//  func A() : (::system::Void)
30   :     LoadValue     : value = <null>
//  func A() : (::system::Void)
31   :     Return        
//  this
32   :     LoadCapturedVar: var = 0(<captured-this>0)
//  this.stateMachineInitialized
33   :     GetProperty   : propertyInfo = stateMachineInitialized<system::StateMachine>
//  (!this.stateMachineInitialized)
34   :     OpNot         : type = Bool
//  if ((!this.stateMachineInitialized))
35   :     OpNot         : type = Bool
//  if ((!this.stateMachineInitialized))
36   :     JumpIf        : label = 50
//  true
37   :     LoadValue     : value = <Bool, true>
//  (this.stateMachineInitialized = true)
38   :     Duplicate     : stackPatternCount = 0
//  this
39   :     LoadCapturedVar: var = 0(<captured-this>0)
//  (this.stateMachineInitialized = true)
40   :     SetProperty   : propertyInfo = stateMachineInitialized<system::StateMachine>
//  (this.stateMachineInitialized = true);
41   :     Pop           
//  0
42   :     LoadValue     : value = <I8, 0>
//  this
43   :     LoadCapturedVar: var = 0(<captured-this>0)
//  this.<state>CreateCoroutine(0)
44   :     InvokeMethod  : methodInfo = <state>CreateCoroutine<SMSwitchIR1>, stackPatternCount = 1
//  this.<state>CreateCoroutine(0);
45   :     Pop           
//  this
46   :     LoadCapturedVar: var = 0(<captured-this>0)
//  this.ResumeStateMachine()
47   :     InvokeMethod  : methodInfo = ResumeStateMachine<system::StateMachine>, stackPatternCount = 0
//  this.ResumeStateMachine();
48   :     Pop           
//  if ((!this.stateMachineInitialized))
49   :     Jump          : label = 50
//  1
50   :     LoadValue     : value = <I8, 1>
//  (this.stateMachineInput = 1)
51   :     Duplicate     : stackPatternCount = 0
//  this
52   :     LoadCapturedVar: var = 0(<captured-this>0)
//  (this.stateMachineInput = 1)
53   :     SetProperty   : propertyInfo = stateMachineInput<system::StateMachine>
//  (this.stateMachineInput = 1);
54   :     Pop           
//  this
55   :     LoadCapturedVar: var = 0(<captured-this>0)
//  this.ResumeStateMachine()
56   :     InvokeMethod  : methodInfo = ResumeStateMachine<system::StateMachine>, stackPatternCount = 0
//  this.ResumeStateMachine();
57   :     Pop           
//  func B() : (::system::Void)
58   :     LoadValue     : value = <null>
//  func B() : (::system::Void)
59   :     Return        
//  this
60   :     LoadCapturedVar: var = 0(<captured-this>0)
//  var <state>stateMachineObject = this;
61   :     StoreLocalVar : var = 1(<state>stateMachineObject)
//  <state>stateMachineObject
62   :     LoadLocalVar  : var = 1(<state>stateMachineObject)
//  <state>stateMachineObject.stateMachineCoroutine
63   :     GetProperty   : propertyInfo = stateMachineCoroutine<system::StateMachine>
//  var <state>previousCoroutine = <state>stateMachineObject.stateMachineCoroutine;
64   :     StoreLocalVar : var = 2(<state>previousCoroutine)
//  null
65   :     LoadValue     : value = <null>
//  0
66   :     LoadValue     : value = <I8, 0>
//  0
67   :     LoadValue     : value = <I8, 0>
//  0
68   :     LoadValue     : value = <I8, 0>
//  0
69   :     LoadValue     : value = <I8, 0>
//  0
70   :     LoadValue     : value = <I8, 0>
//  1
71   :     LoadValue     : value = <I8, 1>
//  (-1)
72   :     OpNegative    : type = I8
//  null
73   :     LoadValue     : value = <null>
//  Waiting
74   :     LoadValue     : value = <enum: 0>
//  new (::system::Coroutine^)
75   :     LoadLocalVar  : var = 1(<state>stateMachineObject)
//  new (::system::Coroutine^)
76   :     LoadLocalVar  : var = 2(<state>previousCoroutine)
//  new (::system::Coroutine^)
77   :     LoadLocalVar  : var = 0(<state>startState)
//  new (::system::Coroutine^)
78   :     LoadCapturedVar: var = 0(<captured-this>0)
//  new (::system::Coroutine^)
79   :     LoadValue     : value = <null>
//  new (::system::Coroutine^)
80   :     CreateClosureContext: stackPatternCount = 14
//  new (::system::Coroutine^)
81   :     LoadMethodInfo: methodInfo = GetFailure<system::Coroutine>
//  func GetFailure() : (::system::Exception^)
82   :     LoadFunction  : func = 8(<method:GetFailure<system::Coroutine>(10)> in SMSwitchIR1::<state>CreateCoroutine)
//  new (::system::Coroutine^)
83   :     LoadMethodInfo: methodInfo = GetStatus<system::Coroutine>
//  func GetStatus() : (::system::CoroutineStatus)
84   :     LoadFunction  : func = 9(<method:GetStatus<system::Coroutine>(11)> in SMSwitchIR1::<state>CreateCoroutine)
//  new (::system::Coroutine^)
85   :     LoadMethodInfo: methodInfo = Resume<system::Coroutine>
//  func Resume(<raise-exception> : ::system::Boolean, <coroutine-output> : ::system::CoroutineResult^) : (::system::Void)
86   :     LoadFunction  : func = 10(<method:Resume<system::Coroutine>(12)> in SMSwitchIR1::<state>CreateCoroutine)
//  new (::system::Coroutine^)
87   :     CreateInterface: methodInfo = <system::Coroutine>, stackPatternCount = 6
//  (<state>stateMachineObject.stateMachineCoroutine = new (::system::Coroutine^)
88   :     Duplicate     : stackPatternCount = 0
//  <state>stateMachineObject
89   :     LoadLocalVar  : var = 1(<state>stateMachineObject)
//  (<state>stateMachineObject.stateMachineCoroutine = new (::system::Coroutine^)
90   :     SetProperty   : propertyInfo = stateMachineCoroutine<system::StateMachine>
//  (<state>stateMachineObject.stateMachineCoroutine = new (::system::Coroutine^)
91   :     Pop           
//  func <state>CreateCoroutine(<state>startState : ::system::Int64) : (::system::Void)
92   :     LoadValue     : value = <null>
//  func <state>CreateCoroutine(<state>startState : ::system::Int64) : (::system::Void)
93   :     Return        
//  <value>
94   :     LoadLocalVar  : var = 0(<value>)
//  (<prop>Failure = <value>)
95   :     Duplicate     : stackPatternCount = 0
//  (<prop>Failure = <value>)
96   :     StoreCapturedVar: var = 7
//  (<prop>Failure = <value>);
97   :     Pop           
//  func SetFailure(<value> : ::system::Exception^) : (void)
98   :     LoadValue     : value = <null>
//  func SetFailure(<value> : ::system::Exception^) : (void)
99   :     Return        
//  <value>
100  :     LoadLocalVar  : var = 0(<value>)
//  (<prop>Status = <value>)
101  :     Duplicate     : stackPatternCount = 0
//  (<prop>Status = <value>)
102  :     StoreCapturedVar: var = 8
//  (<prop>Status = <value>);
103  :     Pop           
//  func SetStatus(<value> : ::system::CoroutineStatus) : (void)
104  :     LoadValue     : value = <null>
//  func SetStatus(<value> : ::system::CoroutineStatus) : (void)
105  :     Return        
//  <prop>Failure
106  :     LoadCapturedVar: var = 7(<captured><prop>Failure)
//  return <prop>Failure;
107  :     Return        
//  func GetFailure() : (::system::Exception^)
108  :     LoadValue     : value = <null>
//  func GetFailure() : (::system::Exception^)
109  :     Return        
//  <prop>Status
110  :     LoadCapturedVar: var = 8(<captured><prop>Status)
//  return <prop>Status;
111  :     Return        
//  func GetStatus() : (::system::CoroutineStatus)
112  :     LoadValue     : value = <null>
//  func GetStatus() : (::system::CoroutineStatus)
113  :     Return        
//  Status
114  :     LoadCapturedVar: var = 13(<captured-this>1)
//  Status
115  :     InvokeMethod  : methodInfo = GetStatus<system::Coroutine>, stackPatternCount = 0
//  ::system::CoroutineStatus::Waiting
116  :     LoadValue     : value = <enum: 0>
//  (Status != ::system::CoroutineStatus::Waiting)
117  :     CompareValue  
//  (Status != ::system::CoroutineStatus::Waiting)
118  :     OpNot         : type = Bool
//  if ((Status != ::system::CoroutineStatus::Waiting))
119  :     OpNot         : type = Bool
//  if ((Status != ::system::CoroutineStatus::Waiting))
120  :     JumpIf        : label = 124
//  "Resume should be called only when the coroutine is in the waiting status."
121  :     LoadValue     : value = <String, Resume should be called only when the coroutine is in the waiting status.>
//  raise "Resume should be called only when the coroutine is in the waiting status.";
122  :     RaiseException
//  if ((Status != ::system::CoroutineStatus::Waiting))
123  :     Jump          : label = 124
//  Executing
124  :     LoadValue     : value = <enum: 1>
//  SetStatus(Executing)
125  :     InvokeWithContext: func = 7(<method:SetStatus<system::Coroutine>(7)> in SMSwitchIR1::<state>CreateCoroutine), stackPatternCount = 1
//  SetStatus(Executing);
126  :     Pop           
//  try
127  :     InstallTry    : label = 464
//  <co-state-before-pause>
128  :     LoadCapturedVar: var = 6(<captured><co-state-before-pause>)
//  1
129  :     LoadValue     : value = <I8, 1>
//  (-1)
130  :     OpNegative    : type = I8
//  (<co-state-before-pause> != (-1))
131  :     CompareValue  
//  (<co-state-before-pause> != (-1))
132  :     OpNot         : type = Bool
//  if ((<co-state-before-pause> != (-1)))
133  :     OpNot         : type = Bool
//  if ((<co-state-before-pause> != (-1)))
134  :     JumpIf        : label = 201
//  <coroutine-output>
135  :     LoadLocalVar  : var = 1(<coroutine-output>)
//  <coroutine-output> is null
136  :     LoadValue     : value = <null>
//  <coroutine-output> is null
137  :     CompareReference
//  if (<coroutine-output> is null)
138  :     OpNot         : type = Bool
//  if (<coroutine-output> is null)
139  :     JumpIf        : label = 146
//  1
140  :     LoadValue     : value = <I8, 1>
//  (-1)
141  :     OpNegative    : type = I8
//  (<co-state-before-pause> = (-1))
142  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = (-1))
143  :     StoreCapturedVar: var = 6
//  (<co-state-before-pause> = (-1));
144  :     Pop           
//  if (<coroutine-output> is null)
145  :     Jump          : label = 200
//  <coroutine-output>
146  :     LoadLocalVar  : var = 1(<coroutine-output>)
//  <coroutine-output>.Failure
147  :     InvokeMethod  : methodInfo = GetFailure<system::CoroutineResult>, stackPatternCount = 0
//  <coroutine-output>.Failure is null
148  :     LoadValue     : value = <null>
//  <coroutine-output>.Failure is null
149  :     CompareReference
//  if (<coroutine-output>.Failure is null)
150  :     OpNot         : type = Bool
//  if (<coroutine-output>.Failure is null)
151  :     JumpIf        : label = 158
//  1
152  :     LoadValue     : value = <I8, 1>
//  (-1)
153  :     OpNegative    : type = I8
//  (<co-state-before-pause> = (-1))
154  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = (-1))
155  :     StoreCapturedVar: var = 6
//  (<co-state-before-pause> = (-1));
156  :     Pop           
//  if (<coroutine-output>.Failure is null)
157  :     Jump          : label = 200
//  <co-state-before-pause>
158  :     LoadCapturedVar: var = 6(<captured><co-state-before-pause>)
//  0
159  :     LoadValue     : value = <I8, 0>
//  (<co-state-before-pause> == 0)
160  :     CompareValue  
//  <co-state-before-pause>
161  :     LoadCapturedVar: var = 6(<captured><co-state-before-pause>)
//  <co-state-before-pause> in range [3, 7]
162  :     StoreLocalVar : var = 2(<anonymous-range-test>)
//  <co-state-before-pause> in range [3, 7]
163  :     LoadLocalVar  : var = 2(<anonymous-range-test>)
//  3
164  :     LoadValue     : value = <I8, 3>
//  <co-state-before-pause> in range [3, 7]
165  :     CompareLiteral: type = I8
//  <co-state-before-pause> in range [3, 7]
166  :     OpGE          
//  <co-state-before-pause> in range [3, 7]
167  :     LoadLocalVar  : var = 2(<anonymous-range-test>)
//  7
168  :     LoadValue     : value = <I8, 7>
//  <co-state-before-pause> in range [3, 7]
169  :     CompareLiteral: type = I8
//  <co-state-before-pause> in range [3, 7]
170  :     OpLE          
//  <co-state-before-pause> in range [3, 7]
171  :     OpAnd         : type = Bool
//  <co-state-before-pause> in range [3, 7]
172  :     LoadValue     : value = <null>
//  <co-state-before-pause> in range [3, 7]
173  :     StoreLocalVar : var = 2(<anonymous-range-test>)
//  ((<co-state-before-pause> == 0) or <co-state-before-pause> in range [3, 7])
174  :     OpOr          : type = Bool
//  if (((<co-state-before-pause> == 0) or <co-state-before-pause> in range [3, 7]))
175  :     OpNot         : type = Bool
//  if (((<co-state-before-pause> == 0) or <co-state-before-pause> in range [3, 7]))
176  :     JumpIf        : label = 192
//  1
177  :     LoadValue     : value = <I8, 1>
//  (-1)
178  :     OpNegative    : type = I8
//  (<co-state-before-pause> = (-1))
179  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = (-1))
180  :     StoreCapturedVar: var = 6
//  (<co-state-before-pause> = (-1));
181  :     Pop           
//  <coroutine-output>
182  :     LoadLocalVar  : var = 1(<coroutine-output>)
//  <coroutine-output>.Failure
183  :     InvokeMethod  : methodInfo = GetFailure<system::CoroutineResult>, stackPatternCount = 0
//  (<co-tempexvar0>ex = <coroutine-output>.Failure)
184  :     Duplicate     : stackPatternCount = 0
//  (<co-tempexvar0>ex = <coroutine-output>.Failure)
185  :     StoreCapturedVar: var = 0
//  (<co-tempexvar0>ex = <coroutine-output>.Failure);
186  :     Pop           
//  2
187  :     LoadValue     : value = <I8, 2>
//  (<co-state> = 2)
188  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 2)
189  :     StoreCapturedVar: var = 5
//  (<co-state> = 2);
190  :     Pop           
//  if (((<co-state-before-pause> == 0) or <co-state-before-pause> in range [3, 7]))
191  :     Jump          : label = 200
//  1
192  :     LoadValue     : value = <I8, 1>
//  (-1)
193  :     OpNegative    : type = I8
//  (<co-state-before-pause> = (-1))
194  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = (-1))
195  :     StoreCapturedVar: var = 6
//  (<co-state-before-pause> = (-1));
196  :     Pop           
//  <coroutine-output>
197  :     LoadLocalVar  : var = 1(<coroutine-output>)
//  <coroutine-output>.Failure
198  :     InvokeMethod  : methodInfo = GetFailure<system::CoroutineResult>, stackPatternCount = 0
//  raise <coroutine-output>.Failure;
199  :     RaiseException
//  if ((<co-state-before-pause> != (-1)))
200  :     Jump          : label = 201
//  true
201  :     LoadValue     : value = <Bool, true>
//  while (true)
202  :     OpNot         : type = Bool
//  while (true)
203  :     JumpIf        : label = 462
//  <co-state>
204  :     LoadCapturedVar: var = 5(<captured><co-state>)
//  1
205  :     LoadValue     : value = <I8, 1>
//  (<co-state> == 1)
206  :     CompareValue  
//  if ((<co-state> == 1))
207  :     OpNot         : type = Bool
//  if ((<co-state> == 1))
208  :     JumpIf        : label = 216
//  Stopped
209  :     LoadValue     : value = <enum: 2>
//  SetStatus(Stopped)
210  :     InvokeWithContext: func = 7(<method:SetStatus<system::Coroutine>(7)> in SMSwitchIR1::<state>CreateCoroutine), stackPatternCount = 1
//  SetStatus(Stopped);
211  :     Pop           
//  try
212  :     UninstallTry  : stackPatternCount = 0
//  return;
213  :     LoadValue     : value = <null>
//  return;
214  :     Return        
//  if ((<co-state> == 1))
215  :     Jump          : label = 216
//  <co-state>
216  :     LoadCapturedVar: var = 5(<captured><co-state>)
//  2
217  :     LoadValue     : value = <I8, 2>
//  (<co-state> == 2)
218  :     CompareValue  
//  if ((<co-state> == 2))
219  :     OpNot         : type = Bool
//  if ((<co-state> == 2))
220  :     JumpIf        : label = 230
//  <state>previousCoroutine
221  :     LoadCapturedVar: var = 10(<captured><state>previousCoroutine)
//  (<state>stateMachineObject.stateMachineCoroutine = <state>previousCoroutine)
222  :     Duplicate     : stackPatternCount = 0
//  <state>stateMachineObject
223  :     LoadCapturedVar: var = 9(<captured><state>stateMachineObject)
//  (<state>stateMachineObject.stateMachineCoroutine = <state>previousCoroutine)
224  :     SetProperty   : propertyInfo = stateMachineCoroutine<system::StateMachine>
//  (<state>stateMachineObject.stateMachineCoroutine = <state>previousCoroutine);
225  :     Pop           
//  <co-tempexvar0>ex
226  :     LoadCapturedVar: var = 0(<captured><co-tempexvar0>ex)
//  <co-tempexvar0>ex.Message
227  :     InvokeMethod  : methodInfo = GetMessage<system::Exception>, stackPatternCount = 0
//  raise <co-tempexvar0>ex.Message;
228  :     RaiseException
//  if ((<co-state> == 2))
229  :     Jump          : label = 230
//  <co-state>
230  :     LoadCapturedVar: var = 5(<captured><co-state>)
//  8
231  :     LoadValue     : value = <I8, 8>
//  (<co-state> == 8)
232  :     CompareValue  
//  if ((<co-state> == 8))
233  :     OpNot         : type = Bool
//  if ((<co-state> == 8))
234  :     JumpIf        : label = 246
//  <state>previousCoroutine
235  :     LoadCapturedVar: var = 10(<captured><state>previousCoroutine)
//  (<state>stateMachineObject.stateMachineCoroutine = <state>previousCoroutine)
236  :     Duplicate     : stackPatternCount = 0
//  <state>stateMachineObject
237  :     LoadCapturedVar: var = 9(<captured><state>stateMachineObject)
//  (<state>stateMachineObject.stateMachineCoroutine = <state>previousCoroutine)
238  :     SetProperty   : propertyInfo = stateMachineCoroutine<system::StateMachine>
//  (<state>stateMachineObject.stateMachineCoroutine = <state>previousCoroutine);
239  :     Pop           
//  1
240  :     LoadValue     : value = <I8, 1>
//  (<co-state> = 1)
241  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 1)
242  :     StoreCapturedVar: var = 5
//  (<co-state> = 1);
243  :     Pop           
//  continue;
244  :     Jump          : label = 201
//  if ((<co-state> == 8))
245  :     Jump          : label = 246
//  try
246  :     InstallTry    : label = 450
//  <co-state>
247  :     LoadCapturedVar: var = 5(<captured><co-state>)
//  0
248  :     LoadValue     : value = <I8, 0>
//  (<co-state> == 0)
249  :     CompareValue  
//  if ((<co-state> == 0))
250  :     OpNot         : type = Bool
//  if ((<co-state> == 0))
251  :     JumpIf        : label = 273
//  <state>startState
252  :     LoadCapturedVar: var = 11(<captured><state>startState)
//  (<co3-state>state = <state>startState)
253  :     Duplicate     : stackPatternCount = 0
//  (<co3-state>state = <state>startState)
254  :     StoreCapturedVar: var = 4
//  (<co3-state>state = <state>startState);
255  :     Pop           
//  true
256  :     LoadValue     : value = <Bool, true>
//  if (true)
257  :     OpNot         : type = Bool
//  if (true)
258  :     JumpIf        : label = 266
//  4
259  :     LoadValue     : value = <I8, 4>
//  (<co-state> = 4)
260  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 4)
261  :     StoreCapturedVar: var = 5
//  (<co-state> = 4);
262  :     Pop           
//  try
263  :     UninstallTry  : stackPatternCount = 0
//  continue;
264  :     Jump          : label = 201
//  if (true)
265  :     Jump          : label = 266
//  8
266  :     LoadValue     : value = <I8, 8>
//  (<co-state> = 8)
267  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 8)
268  :     StoreCapturedVar: var = 5
//  (<co-state> = 8);
269  :     Pop           
//  try
270  :     UninstallTry  : stackPatternCount = 0
//  continue;
271  :     Jump          : label = 201
//  if ((<co-state> == 0))
272  :     Jump          : label = 273
//  <co-state>
273  :     LoadCapturedVar: var = 5(<captured><co-state>)
//  3
274  :     LoadValue     : value = <I8, 3>
//  (<co-state> == 3)
275  :     CompareValue  
//  if ((<co-state> == 3))
276  :     OpNot         : type = Bool
//  if ((<co-state> == 3))
277  :     JumpIf        : label = 295
//  true
278  :     LoadValue     : value = <Bool, true>
//  if (true)
279  :     OpNot         : type = Bool
//  if (true)
280  :     JumpIf        : label = 288
//  4
281  :     LoadValue     : value = <I8, 4>
//  (<co-state> = 4)
282  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 4)
283  :     StoreCapturedVar: var = 5
//  (<co-state> = 4);
284  :     Pop           
//  try
285  :     UninstallTry  : stackPatternCount = 0
//  continue;
286  :     Jump          : label = 201
//  if (true)
287  :     Jump          : label = 288
//  8
288  :     LoadValue     : value = <I8, 8>
//  (<co-state> = 8)
289  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 8)
290  :     StoreCapturedVar: var = 5
//  (<co-state> = 8);
291  :     Pop           
//  try
292  :     UninstallTry  : stackPatternCount = 0
//  continue;
293  :     Jump          : label = 201
//  if ((<co-state> == 3))
294  :     Jump          : label = 295
//  <co-state>
295  :     LoadCapturedVar: var = 5(<captured><co-state>)
//  4
296  :     LoadValue     : value = <I8, 4>
//  (<co-state> == 4)
297  :     CompareValue  
//  if ((<co-state> == 4))
298  :     OpNot         : type = Bool
//  if ((<co-state> == 4))
299  :     JumpIf        : label = 355
//  <co3-state>state
300  :     LoadCapturedVar: var = 4(<captured><co3-state>state)
//  (<co2-state>currentState = <co3-state>state)
301  :     Duplicate     : stackPatternCount = 0
//  (<co2-state>currentState = <co3-state>state)
302  :     StoreCapturedVar: var = 3
//  (<co2-state>currentState = <co3-state>state);
303  :     Pop           
//  1
304  :     LoadValue     : value = <I8, 1>
//  (-1)
305  :     OpNegative    : type = I8
//  (<co3-state>state = (-1))
306  :     Duplicate     : stackPatternCount = 0
//  (<co3-state>state = (-1))
307  :     StoreCapturedVar: var = 4
//  (<co3-state>state = (-1));
308  :     Pop           
//  <co2-state>currentState
309  :     LoadCapturedVar: var = 3(<captured><co2-state>currentState)
//  (<co1-switch>1 = <co2-state>currentState)
310  :     Duplicate     : stackPatternCount = 0
//  (<co1-switch>1 = <co2-state>currentState)
311  :     StoreCapturedVar: var = 2
//  (<co1-switch>1 = <co2-state>currentState);
312  :     Pop           
//  <co1-switch>1
313  :     LoadCapturedVar: var = 2(<captured><co1-switch>1)
//  0
314  :     LoadValue     : value = <I8, 0>
//  (<co1-switch>1 == 0 of (::system::Int64))
315  :     CompareValue  
//  if ((<co1-switch>1 == 0 of (::system::Int64)))
316  :     OpNot         : type = Bool
//  if ((<co1-switch>1 == 0 of (::system::Int64)))
317  :     JumpIf        : label = 348
//  <state>stateMachineObject
318  :     LoadCapturedVar: var = 9(<captured><state>stateMachineObject)
//  <state>stateMachineObject.stateMachineInput
319  :     GetProperty   : propertyInfo = stateMachineInput<system::StateMachine>
//  1
320  :     LoadValue     : value = <I8, 1>
//  (-1)
321  :     OpNegative    : type = I8
//  (<state>stateMachineObject.stateMachineInput == (-1))
322  :     CompareValue  
//  if ((<state>stateMachineObject.stateMachineInput == (-1)))
323  :     OpNot         : type = Bool
//  if ((<state>stateMachineObject.stateMachineInput == (-1)))
324  :     JumpIf        : label = 341
//  Waiting
325  :     LoadValue     : value = <enum: 0>
//  SetStatus(Waiting)
326  :     InvokeWithContext: func = 7(<method:SetStatus<system::Coroutine>(7)> in SMSwitchIR1::<state>CreateCoroutine), stackPatternCount = 1
//  SetStatus(Waiting);
327  :     Pop           
//  <co-state>
328  :     LoadCapturedVar: var = 5(<captured><co-state>)
//  (<co-state-before-pause> = <co-state>)
329  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = <co-state>)
330  :     StoreCapturedVar: var = 6
//  (<co-state-before-pause> = <co-state>);
331  :     Pop           
//  5
332  :     LoadValue     : value = <I8, 5>
//  (<co-state> = 5)
333  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 5)
334  :     StoreCapturedVar: var = 5
//  (<co-state> = 5);
335  :     Pop           
//  try
336  :     UninstallTry  : stackPatternCount = 0
//  try
337  :     UninstallTry  : stackPatternCount = 0
//  return;
338  :     LoadValue     : value = <null>
//  return;
339  :     Return        
//  if ((<state>stateMachineObject.stateMachineInput == (-1)))
340  :     Jump          : label = 341
//  5
341  :     LoadValue     : value = <I8, 5>
//  (<co-state> = 5)
342  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 5)
343  :     StoreCapturedVar: var = 5
//  (<co-state> = 5);
344  :     Pop           
//  try
345  :     UninstallTry  : stackPatternCount = 0
//  continue;
346  :     Jump          : label = 201
//  if ((<co1-switch>1 == 0 of (::system::Int64)))
347  :     Jump          : label = 348
//  3
348  :     LoadValue     : value = <I8, 3>
//  (<co-state> = 3)
349  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 3)
350  :     StoreCapturedVar: var = 5
//  (<co-state> = 3);
351  :     Pop           
//  try
352  :     UninstallTry  : stackPatternCount = 0
//  continue;
353  :     Jump          : label = 201
//  if ((<co-state> == 4))
354  :     Jump          : label = 355
//  <co-state>
355  :     LoadCapturedVar: var = 5(<captured><co-state>)
//  5
356  :     LoadValue     : value = <I8, 5>
//  (<co-state> == 5)
357  :     CompareValue  
//  if ((<co-state> == 5))
358  :     OpNot         : type = Bool
//  if ((<co-state> == 5))
359  :     JumpIf        : label = 398
//  <state>stateMachineObject
360  :     LoadCapturedVar: var = 9(<captured><state>stateMachineObject)
//  <state>stateMachineObject.stateMachineInput
361  :     GetProperty   : propertyInfo = stateMachineInput<system::StateMachine>
//  (<co0-switch>0 = <state>stateMachineObject.stateMachineInput)
362  :     Duplicate     : stackPatternCount = 0
//  (<co0-switch>0 = <state>stateMachineObject.stateMachineInput)
363  :     StoreCapturedVar: var = 1
//  (<co0-switch>0 = <state>stateMachineObject.stateMachineInput);
364  :     Pop           
//  <co0-switch>0
365  :     LoadCapturedVar: var = 1(<captured><co0-switch>0)
//  0
366  :     LoadValue     : value = <I8, 0>
//  (<co0-switch>0 == 0 of (::system::Int64))
367  :     CompareValue  
//  if ((<co0-switch>0 == 0 of (::system::Int64)))
368  :     OpNot         : type = Bool
//  if ((<co0-switch>0 == 0 of (::system::Int64)))
369  :     JumpIf        : label = 391
//  1
370  :     LoadValue     : value = <I8, 1>
//  (-1)
371  :     OpNegative    : type = I8
//  (<state>stateMachineObject.stateMachineInput = (-1))
372  :     Duplicate     : stackPatternCount = 0
//  <state>stateMachineObject
373  :     LoadCapturedVar: var = 9(<captured><state>stateMachineObject)
//  (<state>stateMachineObject.stateMachineInput = (-1))
374  :     SetProperty   : propertyInfo = stateMachineInput<system::StateMachine>
//  (<state>stateMachineObject.stateMachineInput = (-1));
375  :     Pop           
//  ""
376  :     LoadValue     : value = <String, >
//  s
377  :     LoadGlobalVar : var = 0(s)
//  ("" & s)
378  :     OpConcat      
//  "[A]"
379  :     LoadValue     : value = <String, [A]>
//  (("" & s) & "[A]")
380  :     OpConcat      
//  (s = (("" & s) & "[A]"))
381  :     Duplicate     : stackPatternCount = 0
//  (s = (("" & s) & "[A]"))
382  :     StoreGlobalVar: var = 0(s)
//  (s = (("" & s) & "[A]"));
383  :     Pop           
//  6
384  :     LoadValue     : value = <I8, 6>
//  (<co-state> = 6)
385  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 6)
386  :     StoreCapturedVar: var = 5
//  (<co-state> = 6);
387  :     Pop           
//  try
388  :     UninstallTry  : stackPatternCount = 0
//  continue;
389  :     Jump          : label = 201
//  if ((<co0-switch>0 == 0 of (::system::Int64)))
390  :     Jump          : label = 391
//  7
391  :     LoadValue     : value = <I8, 7>
//  (<co-state> = 7)
392  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 7)
393  :     StoreCapturedVar: var = 5
//  (<co-state> = 7);
394  :     Pop           
//  try
395  :     UninstallTry  : stackPatternCount = 0
//  continue;
396  :     Jump          : label = 201
//  if ((<co-state> == 5))
397  :     Jump          : label = 398
//  <co-state>
398  :     LoadCapturedVar: var = 5(<captured><co-state>)
//  6
399  :     LoadValue     : value = <I8, 6>
//  (<co-state> == 6)
400  :     CompareValue  
//  if ((<co-state> == 6))
401  :     OpNot         : type = Bool
//  if ((<co-state> == 6))
402  :     JumpIf        : label = 424
//  ""
403  :     LoadValue     : value = <String, >
//  s
404  :     LoadGlobalVar : var = 0(s)
//  ("" & s)
405  :     OpConcat      
//  "."
406  :     LoadValue     : value = <String, .>
//  (("" & s) & ".")
407  :     OpConcat      
//  (s = (("" & s) & "."))
408  :     Duplicate     : stackPatternCount = 0
//  (s = (("" & s) & "."))
409  :     StoreGlobalVar: var = 0(s)
//  (s = (("" & s) & "."));
410  :     Pop           
//  8
411  :     LoadValue     : value = <I8, 8>
//  (<co-state> = 8)
412  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 8)
413  :     StoreCapturedVar: var = 5
//  (<co-state> = 8);
414  :     Pop           
//  try
415  :     UninstallTry  : stackPatternCount = 0
//  continue;
416  :     Jump          : label = 201
//  3
417  :     LoadValue     : value = <I8, 3>
//  (<co-state> = 3)
418  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 3)
419  :     StoreCapturedVar: var = 5
//  (<co-state> = 3);
420  :     Pop           
//  try
421  :     UninstallTry  : stackPatternCount = 0
//  continue;
422  :     Jump          : label = 201
//  if ((<co-state> == 6))
423  :     Jump          : label = 424
//  <co-state>
424  :     LoadCapturedVar: var = 5(<captured><co-state>)
//  7
425  :     LoadValue     : value = <I8, 7>
//  (<co-state> == 7)
426  :     CompareValue  
//  if ((<co-state> == 7))
427  :     OpNot         : type = Bool
//  if ((<co-state> == 7))
428  :     JumpIf        : label = 448
//  1
429  :     LoadValue     : value = <I8, 1>
//  (-1)
430  :     OpNegative    : type = I8
//  (<state>stateMachineObject.stateMachineInput = (-1))
431  :     Duplicate     : stackPatternCount = 0
//  <state>stateMachineObject
432  :     LoadCapturedVar: var = 9(<captured><state>stateMachineObject)
//  (<state>stateMachineObject.stateMachineInput = (-1))
433  :     SetProperty   : propertyInfo = stateMachineInput<system::StateMachine>
//  (<state>stateMachineObject.stateMachineInput = (-1));
434  :     Pop           
//  8
435  :     LoadValue     : value = <I8, 8>
//  (<co-state> = 8)
436  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 8)
437  :     StoreCapturedVar: var = 5
//  (<co-state> = 8);
438  :     Pop           
//  try
439  :     UninstallTry  : stackPatternCount = 0
//  continue;
440  :     Jump          : label = 201
//  6
441  :     LoadValue     : value = <I8, 6>
//  (<co-state> = 6)
442  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 6)
443  :     StoreCapturedVar: var = 5
//  (<co-state> = 6);
444  :     Pop           
//  try
445  :     UninstallTry  : stackPatternCount = 0
//  continue;
446  :     Jump          : label = 201
//  if ((<co-state> == 7))
447  :     Jump          : label = 448
//  try
448  :     UninstallTry  : stackPatternCount = 0
//  try
449  :     Jump          : label = 461
//  try
450  :     LoadException 
//  try
451  :     StoreLocalVar : var = 3(<catch><co-ex>)
//  <co-ex>
452  :     LoadLocalVar  : var = 3(<catch><co-ex>)
//  (<co-tempexvar0>ex = <co-ex>)
453  :     Duplicate     : stackPatternCount = 0
//  (<co-tempexvar0>ex = <co-ex>)
454  :     StoreCapturedVar: var = 0
//  (<co-tempexvar0>ex = <co-ex>);
455  :     Pop           
//  2
456  :     LoadValue     : value = <I8, 2>
//  (<co-state> = 2)
457  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 2)
458  :     StoreCapturedVar: var = 5
//  (<co-state> = 2);
459  :     Pop           
//  continue;
460  :     Jump          : label = 201
//  while (true)
461  :     Jump          : label = 201
//  try
462  :     UninstallTry  : stackPatternCount = 0
//  try
463  :     Jump          : label = 478
//  try
464  :     LoadException 
//  try
465  :     StoreLocalVar : var = 4(<catch><co-ex>)
//  <co-ex>
466  :     LoadLocalVar  : var = 4(<catch><co-ex>)
//  SetFailure(<co-ex>)
467  :     InvokeWithContext: func = 6(<method:SetFailure<system::Coroutine>(6)> in SMSwitchIR1::<state>CreateCoroutine), stackPatternCount = 1
//  SetFailure(<co-ex>);
468  :     Pop           
//  Stopped
469  :     LoadValue     : value = <enum: 2>
//  SetStatus(Stopped)
470  :     InvokeWithContext: func = 7(<method:SetStatus<system::Coroutine>(7)> in SMSwitchIR1::<state>CreateCoroutine), stackPatternCount = 1
//  SetStatus(Stopped);
471  :     Pop           
//  <raise-exception>
472  :     LoadLocalVar  : var = 0(<raise-exception>)
//  if (<raise-exception>)
473  :     OpNot         : type = Bool
//  if (<raise-exception>)
474  :     JumpIf        : label = 478
//  raise;
475  :     LoadLocalVar  : var = 4(<catch><co-ex>)
//  raise;
476  :     RaiseException
//  if (<raise-exception>)
477  :     Jump          : label = 478
//  func Resume(<raise-exception> : ::system::Boolean, <coroutine-output> : ::system::CoroutineResult^) : (::system::Void)
478  :     LoadValue     : value = <null>
//  func Resume(<raise-exception> : ::system::Boolean, <coroutine-output> : ::system::CoroutineResult^) : (::system::Void)
479  :     Return        
//  new ()
480  :     LoadCapturedVar: var = 0(<captured-this>0)
//  new ()
481  :     InvokeBaseCtor: methodInfo = <system::StateMachine>, stackPatternCount = 0
//  new ()
482  :     Pop           
//  new ()
483  :     LoadValue     : value = <null>
//  new ()
484  :     Return        
//  new (SMSwitchIR1^)()
485  :     LoadValue     : value = <null>
//  new (SMSwitchIR1^)()
486  :     InvokeMethod  : methodInfo = <SMSwitchIR1>, stackPatternCount = 0
//  var sm = new (SMSwitchIR1^)();
487  :     StoreLocalVar : var = 0(sm)
//  try
488  :     InstallTry    : label = 494
//  sm
489  :     LoadLocalVar  : var = 0(sm)
//  sm.A()
490  :     InvokeMethod  : methodInfo = A<SMSwitchIR1>, stackPatternCount = 0
//  sm.A();
491  :     Pop           
//  try
492  :     UninstallTry  : stackPatternCount = 0
//  try
493  :     Jump          : label = 504
//  try
494  :     LoadException 
//  try
495  :     StoreLocalVar : var = 1(<catch>ex)
//  ""
496  :     LoadValue     : value = <String, >
//  s
497  :     LoadGlobalVar : var = 0(s)
//  ("" & s)
498  :     OpConcat      
//  "!"
499  :     LoadValue     : value = <String, !>
//  (("" & s) & "!")
500  :     OpConcat      
//  (s = (("" & s) & "!"))
501  :     Duplicate     : stackPatternCount = 0
//  (s = (("" & s) & "!"))
502  :     StoreGlobalVar: var = 0(s)
//  (s = (("" & s) & "!"));
503  :     Pop           
//  s
504  :     LoadGlobalVar : var = 0(s)
//  return s;
505  :     Return        
//  func main() : (string)
506  :     LoadValue     : value = <null>
//  func main() : (string)
507  :     Return        
