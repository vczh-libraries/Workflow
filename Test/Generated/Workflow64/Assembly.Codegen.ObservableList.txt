========================================================
Global Variables:
========================================================
s

========================================================
Functions:
========================================================
Callback (4 .. 26)
    Arguments:
        index
        oldCount
        newCount
    Captured Variables:
    Local Variables:

main (27 .. 122)
    Arguments:
    Captured Variables:
    Local Variables:
        list
        <for-enumerable>i
        <for-enumerator>i
        i
        <for-begin>i
        <for-end>i
        i
        <for-enumerable>i
        <for-enumerator>i
        i

<initialize> (0 .. 3)
    Arguments:
    Captured Variables:
    Local Variables:

========================================================
Instructions:
========================================================
//  ""
0    :     LoadValue     : value = <Bool, >
//  var s : string = "";
1    :     StoreGlobalVar: var = 0(s)
2    :     LoadValue     : value = <null>
3    :     Return        
//  s
4    :     LoadGlobalVar : var = 0(s)
//  "["
5    :     LoadValue     : value = <Bool, [>
//  index
6    :     LoadLocalVar  : var = 0(index)
//  index
7    :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  ("[" & index)
8    :     OpConcat      
//  ":"
9    :     LoadValue     : value = <Bool, :>
//  (("[" & index) & ":")
10   :     OpConcat      
//  oldCount
11   :     LoadLocalVar  : var = 1(oldCount)
//  oldCount
12   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  ((("[" & index) & ":") & oldCount)
13   :     OpConcat      
//  ":"
14   :     LoadValue     : value = <Bool, :>
//  (((("[" & index) & ":") & oldCount) & ":")
15   :     OpConcat      
//  newCount
16   :     LoadLocalVar  : var = 2(newCount)
//  newCount
17   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  ((((("[" & index) & ":") & oldCount) & ":") & newCount)
18   :     OpConcat      
//  "]"
19   :     LoadValue     : value = <Bool, ]>
//  (((((("[" & index) & ":") & oldCount) & ":") & newCount) & "]")
20   :     OpConcat      
//  (s & (((((("[" & index) & ":") & oldCount) & ":") & newCount) & "]"))
21   :     OpConcat      
//  (s = (s & (((((("[" & index) & ":") & oldCount) & ":") & newCount) & "]")))
22   :     Duplicate     : stackPatternCount = 0
//  (s = (s & (((((("[" & index) & ":") & oldCount) & ":") & newCount) & "]")))
23   :     StoreGlobalVar: var = 0(s)
//  (s = (s & (((((("[" & index) & ":") & oldCount) & ":") & newCount) & "]")));
24   :     Pop           
//  func Callback(index : int, oldCount : int, newCount : int) : (void)
25   :     LoadValue     : value = <null>
//  func Callback(index : int, oldCount : int, newCount : int) : (void)
26   :     Return        
//  5
27   :     LoadValue     : value = <I8, 5>
//  4
28   :     LoadValue     : value = <I8, 4>
//  3
29   :     LoadValue     : value = <I8, 3>
//  2
30   :     LoadValue     : value = <I8, 2>
//  1
31   :     LoadValue     : value = <I8, 1>
//  {1; 2; 3; 4; 5;}
32   :     NewObservableList: stackPatternCount = 5
//  var list : observe int[] = {1; 2; 3; 4; 5;};
33   :     StoreLocalVar : var = 0(list)
//  list
34   :     LoadLocalVar  : var = 0(list)
//  Callback
35   :     CreateClosureContext: stackPatternCount = 0
//  Callback
36   :     LoadFunction  : func = 0(Callback)
//  Callback
37   :     CreateClosure 
//  attach(list.ItemChanged, Callback)
38   :     AttachEvent   : eventInfo = ItemChanged<system::ObservableList>
//  attach(list.ItemChanged, Callback);
39   :     Pop           
//  10
40   :     LoadValue     : value = <I8, 10>
//  8
41   :     LoadValue     : value = <I8, 8>
//  6
42   :     LoadValue     : value = <I8, 6>
//  4
43   :     LoadValue     : value = <I8, 4>
//  2
44   :     LoadValue     : value = <I8, 2>
//  {2; 4; 6; 8; 10;}
45   :     NewList       : stackPatternCount = 5
//  {2; 4; 6; 8; 10;}
46   :     ConvertToType : flag = SharedPtr, typeDescriptor = system::Enumerable
//  var <for-enumerable>i = {2; 4; 6; 8; 10;} of (::system::Enumerable^);
47   :     StoreLocalVar : var = 1(<for-enumerable>i)
//  <for-enumerable>i
48   :     LoadLocalVar  : var = 1(<for-enumerable>i)
//  <for-enumerable>i.CreateEnumerator()
49   :     InvokeMethod  : methodInfo = CreateEnumerator<system::Enumerable>, stackPatternCount = 0
//  var <for-enumerator>i = <for-enumerable>i.CreateEnumerator();
50   :     StoreLocalVar : var = 2(<for-enumerator>i)
//  <for-enumerator>i
51   :     LoadLocalVar  : var = 2(<for-enumerator>i)
//  <for-enumerator>i.Next()
52   :     InvokeMethod  : methodInfo = Next<system::Enumerator>, stackPatternCount = 0
//  while (<for-enumerator>i.Next())
53   :     OpNot         : type = Bool
//  while (<for-enumerator>i.Next())
54   :     JumpIf        : label = 67
//  <for-enumerator>i
55   :     LoadLocalVar  : var = 2(<for-enumerator>i)
//  <for-enumerator>i.GetCurrent()
56   :     InvokeMethod  : methodInfo = GetCurrent<system::Enumerator>, stackPatternCount = 0
//  <for-enumerator>i.GetCurrent()
57   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::Int64
//  var i = (cast (::system::Int64) <for-enumerator>i.GetCurrent());
58   :     StoreLocalVar : var = 3(i)
//  i
59   :     LoadLocalVar  : var = 3(i)
//  1
60   :     LoadValue     : value = <I8, 1>
//  (i - 1)
61   :     OpSub         : type = I8
//  i
62   :     LoadLocalVar  : var = 3(i)
//  list
63   :     LoadLocalVar  : var = 0(list)
//  list.Insert((i - 1), i)
64   :     InvokeMethod  : methodInfo = Insert<system::List>, stackPatternCount = 2
//  list.Insert((i - 1), i);
65   :     Pop           
//  while (<for-enumerator>i.Next())
66   :     Jump          : label = 51
//  0
67   :     LoadValue     : value = <I8, 0>
//  var <for-begin>i : ::system::Int64 = 0;
68   :     StoreLocalVar : var = 4(<for-begin>i)
//  4
69   :     LoadValue     : value = <I8, 4>
//  var <for-end>i : ::system::Int64 = 4;
70   :     StoreLocalVar : var = 5(<for-end>i)
//  <for-begin>i
71   :     LoadLocalVar  : var = 4(<for-begin>i)
//  var i = <for-begin>i;
72   :     StoreLocalVar : var = 6(i)
//  i
73   :     LoadLocalVar  : var = 6(i)
//  <for-end>i
74   :     LoadLocalVar  : var = 5(<for-end>i)
//  (i <= <for-end>i)
75   :     CompareLiteral: type = I8
//  (i <= <for-end>i)
76   :     OpLE          
//  while ((i <= <for-end>i))
77   :     OpNot         : type = Bool
//  while ((i <= <for-end>i))
78   :     JumpIf        : label = 90
//  i
79   :     LoadLocalVar  : var = 6(i)
//  list
80   :     LoadLocalVar  : var = 0(list)
//  list.RemoveAt(i)
81   :     InvokeMethod  : methodInfo = RemoveAt<system::List>, stackPatternCount = 1
//  list.RemoveAt(i);
82   :     Pop           
//  i
83   :     LoadLocalVar  : var = 6(i)
//  1
84   :     LoadValue     : value = <I8, 1>
//  (i + 1)
85   :     OpAdd         : type = I8
//  (i = (i + 1))
86   :     Duplicate     : stackPatternCount = 0
//  (i = (i + 1))
87   :     StoreLocalVar : var = 6(i)
//  (i = (i + 1));
88   :     Pop           
//  while ((i <= <for-end>i))
89   :     Jump          : label = 73
//  list
90   :     LoadLocalVar  : var = 0(list)
//  list
91   :     ConvertToType : flag = SharedPtr, typeDescriptor = system::Enumerable
//  var <for-enumerable>i = list of (::system::Enumerable^);
92   :     StoreLocalVar : var = 7(<for-enumerable>i)
//  <for-enumerable>i
93   :     LoadLocalVar  : var = 7(<for-enumerable>i)
//  <for-enumerable>i.CreateEnumerator()
94   :     InvokeMethod  : methodInfo = CreateEnumerator<system::Enumerable>, stackPatternCount = 0
//  var <for-enumerator>i = <for-enumerable>i.CreateEnumerator();
95   :     StoreLocalVar : var = 8(<for-enumerator>i)
//  <for-enumerator>i
96   :     LoadLocalVar  : var = 8(<for-enumerator>i)
//  <for-enumerator>i.Next()
97   :     InvokeMethod  : methodInfo = Next<system::Enumerator>, stackPatternCount = 0
//  while (<for-enumerator>i.Next())
98   :     OpNot         : type = Bool
//  while (<for-enumerator>i.Next())
99   :     JumpIf        : label = 116
//  <for-enumerator>i
100  :     LoadLocalVar  : var = 8(<for-enumerator>i)
//  <for-enumerator>i.GetCurrent()
101  :     InvokeMethod  : methodInfo = GetCurrent<system::Enumerator>, stackPatternCount = 0
//  <for-enumerator>i.GetCurrent()
102  :     ConvertToType : flag = BoxedValue, typeDescriptor = system::Int64
//  var i = (cast (::system::Int64) <for-enumerator>i.GetCurrent());
103  :     StoreLocalVar : var = 9(i)
//  s
104  :     LoadGlobalVar : var = 0(s)
//  "["
105  :     LoadValue     : value = <Bool, [>
//  i
106  :     LoadLocalVar  : var = 9(i)
//  i
107  :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  ("[" & i)
108  :     OpConcat      
//  "]"
109  :     LoadValue     : value = <Bool, ]>
//  (("[" & i) & "]")
110  :     OpConcat      
//  (s & (("[" & i) & "]"))
111  :     OpConcat      
//  (s = (s & (("[" & i) & "]")))
112  :     Duplicate     : stackPatternCount = 0
//  (s = (s & (("[" & i) & "]")))
113  :     StoreGlobalVar: var = 0(s)
//  (s = (s & (("[" & i) & "]")));
114  :     Pop           
//  while (<for-enumerator>i.Next())
115  :     Jump          : label = 96
//  list
116  :     LoadLocalVar  : var = 0(list)
//  list.Clear()
117  :     InvokeMethod  : methodInfo = Clear<system::List>, stackPatternCount = 0
//  list.Clear();
118  :     Pop           
//  s
119  :     LoadGlobalVar : var = 0(s)
//  return s;
120  :     Return        
//  func main() : (string)
121  :     LoadValue     : value = <null>
//  func main() : (string)
122  :     Return        
