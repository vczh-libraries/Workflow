========================================================
Global Variables:
========================================================

========================================================
Functions:
========================================================
Show1 (2 .. 44)
    Arguments:
        xs
    Captured Variables:
    Local Variables:
        s
        <for-enumerable>x
        <for-enumerator>x
        x

Show2 (45 .. 89)
    Arguments:
        xs
    Captured Variables:
    Local Variables:
        s
        <for-enumerable>x
        <for-enumerator>x
        x

main (90 .. 116)
    Arguments:
    Captured Variables:
    Local Variables:
        begin
        end
        xs

<initialize> (0 .. 1)
    Arguments:
    Captured Variables:
    Local Variables:

<method:CreateEnumerator<system::Enumerable>(4)> in main (117 .. 133)
    Arguments:
    Captured Variables:
        <captured>begin
        <captured>end
        <captured-this>0
    Local Variables:

<method:GetCurrent<system::Enumerator>(5)> in <method:CreateEnumerator<system::Enumerable>(4)> in main (134 .. 139)
    Arguments:
    Captured Variables:
        <captured>index
        <captured>begin
        <captured>end
        <captured-this>0
        <captured-this>1
    Local Variables:

<method:GetIndex<system::Enumerator>(6)> in <method:CreateEnumerator<system::Enumerable>(4)> in main (140 .. 143)
    Arguments:
    Captured Variables:
        <captured>index
        <captured>begin
        <captured>end
        <captured-this>0
        <captured-this>1
    Local Variables:

<method:Next<system::Enumerator>(7)> in <method:CreateEnumerator<system::Enumerable>(4)> in main (144 .. 163)
    Arguments:
    Captured Variables:
        <captured>index
        <captured>begin
        <captured>end
        <captured-this>0
        <captured-this>1
    Local Variables:

========================================================
Instructions:
========================================================
0    :     LoadValue     : value = <null>
1    :     Return        
//  ""
2    :     LoadValue     : value = <String, >
//  var s = "";
3    :     StoreLocalVar : var = 1(s)
//  xs
4    :     LoadLocalVar  : var = 0(xs)
//  xs
5    :     ConvertToType : flag = SharedPtr, typeDescriptor = system::Enumerable
//  var <for-enumerable>x = xs of (::system::Enumerable^);
6    :     StoreLocalVar : var = 2(<for-enumerable>x)
//  <for-enumerable>x
7    :     LoadLocalVar  : var = 2(<for-enumerable>x)
//  <for-enumerable>x.CreateEnumerator()
8    :     InvokeMethod  : methodInfo = CreateEnumerator<system::Enumerable>, stackPatternCount = 0
//  var <for-enumerator>x = <for-enumerable>x.CreateEnumerator();
9    :     StoreLocalVar : var = 3(<for-enumerator>x)
//  <for-enumerator>x
10   :     LoadLocalVar  : var = 3(<for-enumerator>x)
//  <for-enumerator>x.Next()
11   :     InvokeMethod  : methodInfo = Next<system::Enumerator>, stackPatternCount = 0
//  while (<for-enumerator>x.Next())
12   :     OpNot         : type = Bool
//  while (<for-enumerator>x.Next())
13   :     JumpIf        : label = 41
//  <for-enumerator>x
14   :     LoadLocalVar  : var = 3(<for-enumerator>x)
//  <for-enumerator>x.GetCurrent()
15   :     InvokeMethod  : methodInfo = GetCurrent<system::Enumerator>, stackPatternCount = 0
//  <for-enumerator>x.GetCurrent()
16   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::Int64
//  var x = (cast (::system::Int64) <for-enumerator>x.GetCurrent());
17   :     StoreLocalVar : var = 4(x)
//  s
18   :     LoadLocalVar  : var = 1(s)
//  ""
19   :     LoadValue     : value = <String, >
//  (s == "")
20   :     CompareValue  
//  if ((s == ""))
21   :     OpNot         : type = Bool
//  if ((s == ""))
22   :     JumpIf        : label = 31
//  s
23   :     LoadLocalVar  : var = 1(s)
//  x
24   :     LoadLocalVar  : var = 4(x)
//  x
25   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  (s & x)
26   :     OpConcat      
//  (s = (s & x))
27   :     Duplicate     : stackPatternCount = 0
//  (s = (s & x))
28   :     StoreLocalVar : var = 1(s)
//  (s = (s & x));
29   :     Pop           
//  if ((s == ""))
30   :     Jump          : label = 40
//  s
31   :     LoadLocalVar  : var = 1(s)
//  ", "
32   :     LoadValue     : value = <String, , >
//  (s & ", ")
33   :     OpConcat      
//  x
34   :     LoadLocalVar  : var = 4(x)
//  x
35   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  ((s & ", ") & x)
36   :     OpConcat      
//  (s = ((s & ", ") & x))
37   :     Duplicate     : stackPatternCount = 0
//  (s = ((s & ", ") & x))
38   :     StoreLocalVar : var = 1(s)
//  (s = ((s & ", ") & x));
39   :     Pop           
//  while (<for-enumerator>x.Next())
40   :     Jump          : label = 10
//  s
41   :     LoadLocalVar  : var = 1(s)
//  return s;
42   :     Return        
//  func Show1(xs : int{}) : (string)
43   :     LoadValue     : value = <null>
//  func Show1(xs : int{}) : (string)
44   :     Return        
//  ""
45   :     LoadValue     : value = <String, >
//  var s = "";
46   :     StoreLocalVar : var = 1(s)
//  xs
47   :     LoadLocalVar  : var = 0(xs)
//  xs
48   :     ConvertToType : flag = SharedPtr, typeDescriptor = system::Enumerable
//  ::system::Sys::ReverseEnumerable(xs)
49   :     LoadValue     : value = <null>
//  ::system::Sys::ReverseEnumerable(xs)
50   :     InvokeMethod  : methodInfo = ReverseEnumerable<system::Sys>, stackPatternCount = 1
//  var <for-enumerable>x = ::system::Sys::ReverseEnumerable(xs);
51   :     StoreLocalVar : var = 2(<for-enumerable>x)
//  <for-enumerable>x
52   :     LoadLocalVar  : var = 2(<for-enumerable>x)
//  <for-enumerable>x.CreateEnumerator()
53   :     InvokeMethod  : methodInfo = CreateEnumerator<system::Enumerable>, stackPatternCount = 0
//  var <for-enumerator>x = <for-enumerable>x.CreateEnumerator();
54   :     StoreLocalVar : var = 3(<for-enumerator>x)
//  <for-enumerator>x
55   :     LoadLocalVar  : var = 3(<for-enumerator>x)
//  <for-enumerator>x.Next()
56   :     InvokeMethod  : methodInfo = Next<system::Enumerator>, stackPatternCount = 0
//  while (<for-enumerator>x.Next())
57   :     OpNot         : type = Bool
//  while (<for-enumerator>x.Next())
58   :     JumpIf        : label = 86
//  <for-enumerator>x
59   :     LoadLocalVar  : var = 3(<for-enumerator>x)
//  <for-enumerator>x.GetCurrent()
60   :     InvokeMethod  : methodInfo = GetCurrent<system::Enumerator>, stackPatternCount = 0
//  <for-enumerator>x.GetCurrent()
61   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::Int64
//  var x = (cast (::system::Int64) <for-enumerator>x.GetCurrent());
62   :     StoreLocalVar : var = 4(x)
//  s
63   :     LoadLocalVar  : var = 1(s)
//  ""
64   :     LoadValue     : value = <String, >
//  (s == "")
65   :     CompareValue  
//  if ((s == ""))
66   :     OpNot         : type = Bool
//  if ((s == ""))
67   :     JumpIf        : label = 76
//  s
68   :     LoadLocalVar  : var = 1(s)
//  x
69   :     LoadLocalVar  : var = 4(x)
//  x
70   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  (s & x)
71   :     OpConcat      
//  (s = (s & x))
72   :     Duplicate     : stackPatternCount = 0
//  (s = (s & x))
73   :     StoreLocalVar : var = 1(s)
//  (s = (s & x));
74   :     Pop           
//  if ((s == ""))
75   :     Jump          : label = 85
//  s
76   :     LoadLocalVar  : var = 1(s)
//  ", "
77   :     LoadValue     : value = <String, , >
//  (s & ", ")
78   :     OpConcat      
//  x
79   :     LoadLocalVar  : var = 4(x)
//  x
80   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  ((s & ", ") & x)
81   :     OpConcat      
//  (s = ((s & ", ") & x))
82   :     Duplicate     : stackPatternCount = 0
//  (s = ((s & ", ") & x))
83   :     StoreLocalVar : var = 1(s)
//  (s = ((s & ", ") & x));
84   :     Pop           
//  while (<for-enumerator>x.Next())
85   :     Jump          : label = 55
//  s
86   :     LoadLocalVar  : var = 1(s)
//  return s;
87   :     Return        
//  func Show2(xs : int{}) : (string)
88   :     LoadValue     : value = <null>
//  func Show2(xs : int{}) : (string)
89   :     Return        
//  1
90   :     LoadValue     : value = <I8, 1>
//  var begin = 1;
91   :     StoreLocalVar : var = 0(begin)
//  5
92   :     LoadValue     : value = <I8, 5>
//  var end = 5;
93   :     StoreLocalVar : var = 1(end)
//  new (Enumerable^)
94   :     LoadLocalVar  : var = 0(begin)
//  new (Enumerable^)
95   :     LoadLocalVar  : var = 1(end)
//  new (Enumerable^)
96   :     LoadValue     : value = <null>
//  new (Enumerable^)
97   :     CreateClosureContext: stackPatternCount = 3
//  new (Enumerable^)
98   :     LoadMethodInfo: methodInfo = CreateEnumerator<system::Enumerable>
//  func CreateEnumerator() : (Enumerator^)
99   :     LoadFunction  : func = 4(<method:CreateEnumerator<system::Enumerable>(4)> in main)
//  new (Enumerable^)
100  :     CreateInterface: methodInfo = <system::Enumerable>, stackPatternCount = 2
//  new (Enumerable^)
101  :     ConvertToType : flag = SharedPtr, typeDescriptor = system::Enumerable
//  var xs = (cast (int{}) new (Enumerable^)
102  :     StoreLocalVar : var = 2(xs)
//  "["
103  :     LoadValue     : value = <String, [>
//  xs
104  :     LoadLocalVar  : var = 2(xs)
//  Show1(xs)
105  :     Invoke        : func = 0(Show1), stackPatternCount = 1
//  ("[" & Show1(xs))
106  :     OpConcat      
//  "]["
107  :     LoadValue     : value = <String, ][>
//  (("[" & Show1(xs)) & "][")
108  :     OpConcat      
//  xs
109  :     LoadLocalVar  : var = 2(xs)
//  Show2(xs)
110  :     Invoke        : func = 1(Show2), stackPatternCount = 1
//  ((("[" & Show1(xs)) & "][") & Show2(xs))
111  :     OpConcat      
//  "]"
112  :     LoadValue     : value = <String, ]>
//  (((("[" & Show1(xs)) & "][") & Show2(xs)) & "]")
113  :     OpConcat      
//  return (((("[" & Show1(xs)) & "][") & Show2(xs)) & "]");
114  :     Return        
//  func main() : (string)
115  :     LoadValue     : value = <null>
//  func main() : (string)
116  :     Return        
//  1
117  :     LoadValue     : value = <I8, 1>
//  (-1)
118  :     OpNegative    : type = I8
//  new (Enumerator^)
119  :     LoadCapturedVar: var = 0(<captured>begin)
//  new (Enumerator^)
120  :     LoadCapturedVar: var = 1(<captured>end)
//  new (Enumerator^)
121  :     LoadCapturedVar: var = 2(<captured-this>0)
//  new (Enumerator^)
122  :     LoadValue     : value = <null>
//  new (Enumerator^)
123  :     CreateClosureContext: stackPatternCount = 5
//  new (Enumerator^)
124  :     LoadMethodInfo: methodInfo = GetCurrent<system::Enumerator>
//  func GetCurrent() : (object)
125  :     LoadFunction  : func = 5(<method:GetCurrent<system::Enumerator>(5)> in <method:CreateEnumerator<system::Enumerable>(4)> in main)
//  new (Enumerator^)
126  :     LoadMethodInfo: methodInfo = GetIndex<system::Enumerator>
//  func GetIndex() : (int)
127  :     LoadFunction  : func = 6(<method:GetIndex<system::Enumerator>(6)> in <method:CreateEnumerator<system::Enumerable>(4)> in main)
//  new (Enumerator^)
128  :     LoadMethodInfo: methodInfo = Next<system::Enumerator>
//  func Next() : (bool)
129  :     LoadFunction  : func = 7(<method:Next<system::Enumerator>(7)> in <method:CreateEnumerator<system::Enumerable>(4)> in main)
//  new (Enumerator^)
130  :     CreateInterface: methodInfo = <system::Enumerator>, stackPatternCount = 6
//  return new (Enumerator^)
131  :     Return        
//  func CreateEnumerator() : (Enumerator^)
132  :     LoadValue     : value = <null>
//  func CreateEnumerator() : (Enumerator^)
133  :     Return        
//  begin
134  :     LoadCapturedVar: var = 1(<captured>begin)
//  index
135  :     LoadCapturedVar: var = 0(<captured>index)
//  (begin + index)
136  :     OpAdd         : type = I8
//  return (begin + index);
137  :     Return        
//  func GetCurrent() : (object)
138  :     LoadValue     : value = <null>
//  func GetCurrent() : (object)
139  :     Return        
//  index
140  :     LoadCapturedVar: var = 0(<captured>index)
//  return index;
141  :     Return        
//  func GetIndex() : (int)
142  :     LoadValue     : value = <null>
//  func GetIndex() : (int)
143  :     Return        
//  index
144  :     LoadCapturedVar: var = 0(<captured>index)
//  end
145  :     LoadCapturedVar: var = 2(<captured>end)
//  begin
146  :     LoadCapturedVar: var = 1(<captured>begin)
//  (end - begin)
147  :     OpSub         : type = I8
//  (index == (end - begin))
148  :     CompareValue  
//  if ((index == (end - begin)))
149  :     OpNot         : type = Bool
//  if ((index == (end - begin)))
150  :     JumpIf        : label = 154
//  false
151  :     LoadValue     : value = <Bool, false>
//  return false;
152  :     Return        
//  if ((index == (end - begin)))
153  :     Jump          : label = 162
//  index
154  :     LoadCapturedVar: var = 0(<captured>index)
//  1
155  :     LoadValue     : value = <I8, 1>
//  (index + 1)
156  :     OpAdd         : type = I8
//  (index = (index + 1))
157  :     Duplicate     : stackPatternCount = 0
//  (index = (index + 1))
158  :     StoreCapturedVar: var = 0
//  (index = (index + 1));
159  :     Pop           
//  true
160  :     LoadValue     : value = <Bool, true>
//  return true;
161  :     Return        
//  func Next() : (bool)
162  :     LoadValue     : value = <null>
//  func Next() : (bool)
163  :     Return        
