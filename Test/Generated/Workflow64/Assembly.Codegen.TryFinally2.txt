========================================================
Global Variables:
========================================================
sum

========================================================
Functions:
========================================================
test1 (4 .. 51)
    Arguments:
    Captured Variables:
    Local Variables:
        <for-begin>x
        <for-end>x
        x
        <catch>

test2 (52 .. 99)
    Arguments:
    Captured Variables:
    Local Variables:
        <for-begin>x
        <for-end>x
        x
        <catch>

test3 (100 .. 128)
    Arguments:
    Captured Variables:
    Local Variables:
        <catch>

test4 (129 .. 209)
    Arguments:
    Captured Variables:
    Local Variables:
        <catch>
        <catch>
        <catch>

main (210 .. 222)
    Arguments:
    Captured Variables:
    Local Variables:

<initialize> (0 .. 3)
    Arguments:
    Captured Variables:
    Local Variables:

========================================================
Instructions:
========================================================
//  0
0    :     LoadValue     : value = <I8, 0>
//  var sum = 0;
1    :     StoreGlobalVar: var = 0(sum)
2    :     LoadValue     : value = <null>
3    :     Return        
//  1
4    :     LoadValue     : value = <I8, 1>
//  var <for-begin>x : ::system::Int64 = 1;
5    :     StoreLocalVar : var = 0(<for-begin>x)
//  5
6    :     LoadValue     : value = <I8, 5>
//  var <for-end>x : ::system::Int64 = 5;
7    :     StoreLocalVar : var = 1(<for-end>x)
//  <for-begin>x
8    :     LoadLocalVar  : var = 0(<for-begin>x)
//  var x = <for-begin>x;
9    :     StoreLocalVar : var = 2(x)
//  x
10   :     LoadLocalVar  : var = 2(x)
//  <for-end>x
11   :     LoadLocalVar  : var = 1(<for-end>x)
//  (x <= <for-end>x)
12   :     CompareLiteral: type = I8
//  (x <= <for-end>x)
13   :     OpLE          
//  while ((x <= <for-end>x))
14   :     OpNot         : type = Bool
//  while ((x <= <for-end>x))
15   :     JumpIf        : label = 50
//  try
16   :     InstallTry    : label = 27
//  try
17   :     UninstallTry  : stackPatternCount = 0
//  sum
18   :     LoadGlobalVar : var = 0(sum)
//  1
19   :     LoadValue     : value = <I8, 1>
//  (sum + 1)
20   :     OpAdd         : type = I8
//  (sum = (sum + 1))
21   :     Duplicate     : stackPatternCount = 0
//  (sum = (sum + 1))
22   :     StoreGlobalVar: var = 0(sum)
//  (sum = (sum + 1));
23   :     Pop           
//  goto CONTINUE;
24   :     Jump          : label = 43
//  try
25   :     UninstallTry  : stackPatternCount = 0
//  try
26   :     Jump          : label = 37
//  try
27   :     LoadException 
//  try
28   :     StoreLocalVar : var = 3(<catch>)
//  sum
29   :     LoadGlobalVar : var = 0(sum)
//  1
30   :     LoadValue     : value = <I8, 1>
//  (sum + 1)
31   :     OpAdd         : type = I8
//  (sum = (sum + 1))
32   :     Duplicate     : stackPatternCount = 0
//  (sum = (sum + 1))
33   :     StoreGlobalVar: var = 0(sum)
//  (sum = (sum + 1));
34   :     Pop           
//  try
35   :     LoadLocalVar  : var = 3(<catch>)
//  try
36   :     RaiseException
//  sum
37   :     LoadGlobalVar : var = 0(sum)
//  1
38   :     LoadValue     : value = <I8, 1>
//  (sum + 1)
39   :     OpAdd         : type = I8
//  (sum = (sum + 1))
40   :     Duplicate     : stackPatternCount = 0
//  (sum = (sum + 1))
41   :     StoreGlobalVar: var = 0(sum)
//  (sum = (sum + 1));
42   :     Pop           
//  x
43   :     LoadLocalVar  : var = 2(x)
//  1
44   :     LoadValue     : value = <I8, 1>
//  (x + 1)
45   :     OpAdd         : type = I8
//  (x = (x + 1))
46   :     Duplicate     : stackPatternCount = 0
//  (x = (x + 1))
47   :     StoreLocalVar : var = 2(x)
//  (x = (x + 1));
48   :     Pop           
//  while ((x <= <for-end>x))
49   :     Jump          : label = 10
//  func test1() : (void)
50   :     LoadValue     : value = <null>
//  func test1() : (void)
51   :     Return        
//  1
52   :     LoadValue     : value = <I8, 1>
//  var <for-begin>x : ::system::Int64 = 1;
53   :     StoreLocalVar : var = 0(<for-begin>x)
//  5
54   :     LoadValue     : value = <I8, 5>
//  var <for-end>x : ::system::Int64 = 5;
55   :     StoreLocalVar : var = 1(<for-end>x)
//  <for-begin>x
56   :     LoadLocalVar  : var = 0(<for-begin>x)
//  var x = <for-begin>x;
57   :     StoreLocalVar : var = 2(x)
//  x
58   :     LoadLocalVar  : var = 2(x)
//  <for-end>x
59   :     LoadLocalVar  : var = 1(<for-end>x)
//  (x <= <for-end>x)
60   :     CompareLiteral: type = I8
//  (x <= <for-end>x)
61   :     OpLE          
//  while ((x <= <for-end>x))
62   :     OpNot         : type = Bool
//  while ((x <= <for-end>x))
63   :     JumpIf        : label = 98
//  try
64   :     InstallTry    : label = 75
//  try
65   :     UninstallTry  : stackPatternCount = 0
//  sum
66   :     LoadGlobalVar : var = 0(sum)
//  10
67   :     LoadValue     : value = <I8, 10>
//  (sum + 10)
68   :     OpAdd         : type = I8
//  (sum = (sum + 10))
69   :     Duplicate     : stackPatternCount = 0
//  (sum = (sum + 10))
70   :     StoreGlobalVar: var = 0(sum)
//  (sum = (sum + 10));
71   :     Pop           
//  goto BREAK;
72   :     Jump          : label = 98
//  try
73   :     UninstallTry  : stackPatternCount = 0
//  try
74   :     Jump          : label = 85
//  try
75   :     LoadException 
//  try
76   :     StoreLocalVar : var = 3(<catch>)
//  sum
77   :     LoadGlobalVar : var = 0(sum)
//  10
78   :     LoadValue     : value = <I8, 10>
//  (sum + 10)
79   :     OpAdd         : type = I8
//  (sum = (sum + 10))
80   :     Duplicate     : stackPatternCount = 0
//  (sum = (sum + 10))
81   :     StoreGlobalVar: var = 0(sum)
//  (sum = (sum + 10));
82   :     Pop           
//  try
83   :     LoadLocalVar  : var = 3(<catch>)
//  try
84   :     RaiseException
//  sum
85   :     LoadGlobalVar : var = 0(sum)
//  10
86   :     LoadValue     : value = <I8, 10>
//  (sum + 10)
87   :     OpAdd         : type = I8
//  (sum = (sum + 10))
88   :     Duplicate     : stackPatternCount = 0
//  (sum = (sum + 10))
89   :     StoreGlobalVar: var = 0(sum)
//  (sum = (sum + 10));
90   :     Pop           
//  x
91   :     LoadLocalVar  : var = 2(x)
//  1
92   :     LoadValue     : value = <I8, 1>
//  (x + 1)
93   :     OpAdd         : type = I8
//  (x = (x + 1))
94   :     Duplicate     : stackPatternCount = 0
//  (x = (x + 1))
95   :     StoreLocalVar : var = 2(x)
//  (x = (x + 1));
96   :     Pop           
//  while ((x <= <for-end>x))
97   :     Jump          : label = 58
//  func test2() : (void)
98   :     LoadValue     : value = <null>
//  func test2() : (void)
99   :     Return        
//  try
100  :     InstallTry    : label = 111
//  try
101  :     UninstallTry  : stackPatternCount = 0
//  sum
102  :     LoadGlobalVar : var = 0(sum)
//  100
103  :     LoadValue     : value = <I8, 100>
//  (sum + 100)
104  :     OpAdd         : type = I8
//  (sum = (sum + 100))
105  :     Duplicate     : stackPatternCount = 0
//  (sum = (sum + 100))
106  :     StoreGlobalVar: var = 0(sum)
//  (sum = (sum + 100));
107  :     Pop           
//  goto RETURN;
108  :     Jump          : label = 127
//  try
109  :     UninstallTry  : stackPatternCount = 0
//  try
110  :     Jump          : label = 121
//  try
111  :     LoadException 
//  try
112  :     StoreLocalVar : var = 0(<catch>)
//  sum
113  :     LoadGlobalVar : var = 0(sum)
//  100
114  :     LoadValue     : value = <I8, 100>
//  (sum + 100)
115  :     OpAdd         : type = I8
//  (sum = (sum + 100))
116  :     Duplicate     : stackPatternCount = 0
//  (sum = (sum + 100))
117  :     StoreGlobalVar: var = 0(sum)
//  (sum = (sum + 100));
118  :     Pop           
//  try
119  :     LoadLocalVar  : var = 0(<catch>)
//  try
120  :     RaiseException
//  sum
121  :     LoadGlobalVar : var = 0(sum)
//  100
122  :     LoadValue     : value = <I8, 100>
//  (sum + 100)
123  :     OpAdd         : type = I8
//  (sum = (sum + 100))
124  :     Duplicate     : stackPatternCount = 0
//  (sum = (sum + 100))
125  :     StoreGlobalVar: var = 0(sum)
//  (sum = (sum + 100));
126  :     Pop           
//  func test3() : (void)
127  :     LoadValue     : value = <null>
//  func test3() : (void)
128  :     Return        
//  try
129  :     InstallTry    : label = 192
//  try
130  :     InstallTry    : label = 174
//  try
131  :     InstallTry    : label = 156
//  try
132  :     UninstallTry  : stackPatternCount = 0
//  sum
133  :     LoadGlobalVar : var = 0(sum)
//  1000
134  :     LoadValue     : value = <I8, 1000>
//  (sum + 1000)
135  :     OpAdd         : type = I8
//  (sum = (sum + 1000))
136  :     Duplicate     : stackPatternCount = 0
//  (sum = (sum + 1000))
137  :     StoreGlobalVar: var = 0(sum)
//  (sum = (sum + 1000));
138  :     Pop           
//  try
139  :     UninstallTry  : stackPatternCount = 0
//  sum
140  :     LoadGlobalVar : var = 0(sum)
//  1000
141  :     LoadValue     : value = <I8, 1000>
//  (sum + 1000)
142  :     OpAdd         : type = I8
//  (sum = (sum + 1000))
143  :     Duplicate     : stackPatternCount = 0
//  (sum = (sum + 1000))
144  :     StoreGlobalVar: var = 0(sum)
//  (sum = (sum + 1000));
145  :     Pop           
//  try
146  :     UninstallTry  : stackPatternCount = 0
//  sum
147  :     LoadGlobalVar : var = 0(sum)
//  1000
148  :     LoadValue     : value = <I8, 1000>
//  (sum + 1000)
149  :     OpAdd         : type = I8
//  (sum = (sum + 1000))
150  :     Duplicate     : stackPatternCount = 0
//  (sum = (sum + 1000))
151  :     StoreGlobalVar: var = 0(sum)
//  (sum = (sum + 1000));
152  :     Pop           
//  goto RETURN;
153  :     Jump          : label = 208
//  try
154  :     UninstallTry  : stackPatternCount = 0
//  try
155  :     Jump          : label = 166
//  try
156  :     LoadException 
//  try
157  :     StoreLocalVar : var = 0(<catch>)
//  sum
158  :     LoadGlobalVar : var = 0(sum)
//  1000
159  :     LoadValue     : value = <I8, 1000>
//  (sum + 1000)
160  :     OpAdd         : type = I8
//  (sum = (sum + 1000))
161  :     Duplicate     : stackPatternCount = 0
//  (sum = (sum + 1000))
162  :     StoreGlobalVar: var = 0(sum)
//  (sum = (sum + 1000));
163  :     Pop           
//  try
164  :     LoadLocalVar  : var = 0(<catch>)
//  try
165  :     RaiseException
//  sum
166  :     LoadGlobalVar : var = 0(sum)
//  1000
167  :     LoadValue     : value = <I8, 1000>
//  (sum + 1000)
168  :     OpAdd         : type = I8
//  (sum = (sum + 1000))
169  :     Duplicate     : stackPatternCount = 0
//  (sum = (sum + 1000))
170  :     StoreGlobalVar: var = 0(sum)
//  (sum = (sum + 1000));
171  :     Pop           
//  try
172  :     UninstallTry  : stackPatternCount = 0
//  try
173  :     Jump          : label = 184
//  try
174  :     LoadException 
//  try
175  :     StoreLocalVar : var = 1(<catch>)
//  sum
176  :     LoadGlobalVar : var = 0(sum)
//  1000
177  :     LoadValue     : value = <I8, 1000>
//  (sum + 1000)
178  :     OpAdd         : type = I8
//  (sum = (sum + 1000))
179  :     Duplicate     : stackPatternCount = 0
//  (sum = (sum + 1000))
180  :     StoreGlobalVar: var = 0(sum)
//  (sum = (sum + 1000));
181  :     Pop           
//  try
182  :     LoadLocalVar  : var = 1(<catch>)
//  try
183  :     RaiseException
//  sum
184  :     LoadGlobalVar : var = 0(sum)
//  1000
185  :     LoadValue     : value = <I8, 1000>
//  (sum + 1000)
186  :     OpAdd         : type = I8
//  (sum = (sum + 1000))
187  :     Duplicate     : stackPatternCount = 0
//  (sum = (sum + 1000))
188  :     StoreGlobalVar: var = 0(sum)
//  (sum = (sum + 1000));
189  :     Pop           
//  try
190  :     UninstallTry  : stackPatternCount = 0
//  try
191  :     Jump          : label = 202
//  try
192  :     LoadException 
//  try
193  :     StoreLocalVar : var = 2(<catch>)
//  sum
194  :     LoadGlobalVar : var = 0(sum)
//  1000
195  :     LoadValue     : value = <I8, 1000>
//  (sum + 1000)
196  :     OpAdd         : type = I8
//  (sum = (sum + 1000))
197  :     Duplicate     : stackPatternCount = 0
//  (sum = (sum + 1000))
198  :     StoreGlobalVar: var = 0(sum)
//  (sum = (sum + 1000));
199  :     Pop           
//  try
200  :     LoadLocalVar  : var = 2(<catch>)
//  try
201  :     RaiseException
//  sum
202  :     LoadGlobalVar : var = 0(sum)
//  1000
203  :     LoadValue     : value = <I8, 1000>
//  (sum + 1000)
204  :     OpAdd         : type = I8
//  (sum = (sum + 1000))
205  :     Duplicate     : stackPatternCount = 0
//  (sum = (sum + 1000))
206  :     StoreGlobalVar: var = 0(sum)
//  (sum = (sum + 1000));
207  :     Pop           
//  func test4() : (void)
208  :     LoadValue     : value = <null>
//  func test4() : (void)
209  :     Return        
//  test1()
210  :     Invoke        : func = 0(test1), stackPatternCount = 0
//  test1();
211  :     Pop           
//  test2()
212  :     Invoke        : func = 1(test2), stackPatternCount = 0
//  test2();
213  :     Pop           
//  test3()
214  :     Invoke        : func = 2(test3), stackPatternCount = 0
//  test3();
215  :     Pop           
//  test4()
216  :     Invoke        : func = 3(test4), stackPatternCount = 0
//  test4();
217  :     Pop           
//  sum
218  :     LoadGlobalVar : var = 0(sum)
//  sum
219  :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  return sum;
220  :     Return        
//  func main() : (string)
221  :     LoadValue     : value = <null>
//  func main() : (string)
222  :     Return        
