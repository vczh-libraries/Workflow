========================================================
Global Variables:
========================================================

========================================================
Functions:
========================================================
calculator::Expression::Print (2 .. 7)
    Arguments:
    Captured Variables:
        <captured-this>0
    Local Variables:

calculator::Expression::Evaluate (8 .. 13)
    Arguments:
    Captured Variables:
        <captured-this>0
    Local Variables:

calculator::Expression::#ctor (14 .. 15)
    Arguments:
    Captured Variables:
        <captured-this>0
    Local Variables:

calculator::NumberExpression::GetValue (16 .. 20)
    Arguments:
    Captured Variables:
        <captured-this>0
    Local Variables:

calculator::NumberExpression::SetValue (21 .. 27)
    Arguments:
        <value>
    Captured Variables:
        <captured-this>0
    Local Variables:

calculator::NumberExpression::#ctor (28 .. 39)
    Arguments:
        _value
    Captured Variables:
        <captured-this>0
    Local Variables:

calculator::BinaryExpression::GetOperator (40 .. 44)
    Arguments:
    Captured Variables:
        <captured-this>0
    Local Variables:

calculator::BinaryExpression::SetOperator (45 .. 51)
    Arguments:
        <value>
    Captured Variables:
        <captured-this>0
    Local Variables:

calculator::BinaryExpression::GetLeft (52 .. 56)
    Arguments:
    Captured Variables:
        <captured-this>0
    Local Variables:

calculator::BinaryExpression::SetLeft (57 .. 63)
    Arguments:
        <value>
    Captured Variables:
        <captured-this>0
    Local Variables:

calculator::BinaryExpression::GetRight (64 .. 68)
    Arguments:
    Captured Variables:
        <captured-this>0
    Local Variables:

calculator::BinaryExpression::SetRight (69 .. 75)
    Arguments:
        <value>
    Captured Variables:
        <captured-this>0
    Local Variables:

calculator::BinaryExpression::#ctor (76 .. 101)
    Arguments:
        _left
        _op
        _right
    Captured Variables:
        <captured-this>0
    Local Variables:

Print (102 .. 192)
    Arguments:
        expr
    Captured Variables:
    Local Variables:
        <if>ne
        <if>be
        op
        <switch>0

Evaluate (193 .. 272)
    Arguments:
        expr
    Captured Variables:
    Local Variables:
        <if>ne
        <if>be
        left
        right
        <switch>1

main (273 .. 313)
    Arguments:
    Captured Variables:
    Local Variables:
        expr

<initialize> (0 .. 1)
    Arguments:
    Captured Variables:
    Local Variables:

========================================================
Instructions:
========================================================
0    :     LoadValue     : value = <null>
1    :     Return        
//  this
2    :     LoadCapturedVar: var = 0(<captured-this>0)
//  this
3    :     ConvertToType : flag = SharedPtr, typeDescriptor = calculator::Expression
//  ::Print((cast (Expression^) this))
4    :     Invoke        : func = 13(Print), stackPatternCount = 1
//  return ::Print((cast (Expression^) this));
5    :     Return        
//  func Print() : (string)
6    :     LoadValue     : value = <null>
//  func Print() : (string)
7    :     Return        
//  this
8    :     LoadCapturedVar: var = 0(<captured-this>0)
//  this
9    :     ConvertToType : flag = SharedPtr, typeDescriptor = calculator::Expression
//  ::Evaluate((cast (Expression^) this))
10   :     Invoke        : func = 14(Evaluate), stackPatternCount = 1
//  return ::Evaluate((cast (Expression^) this));
11   :     Return        
//  func Evaluate() : (int)
12   :     LoadValue     : value = <null>
//  func Evaluate() : (int)
13   :     Return        
//  new ()
14   :     LoadValue     : value = <null>
//  new ()
15   :     Return        
//  <prop>Value
16   :     LoadCapturedVar: var = 0(<captured-this>0)
//  <prop>Value
17   :     GetProperty   : propertyInfo = <prop>Value<calculator::NumberExpression>
//  return <prop>Value;
18   :     Return        
//  func GetValue() : (int)
19   :     LoadValue     : value = <null>
//  func GetValue() : (int)
20   :     Return        
//  <value>
21   :     LoadLocalVar  : var = 0(<value>)
//  (<prop>Value = <value>)
22   :     Duplicate     : stackPatternCount = 0
//  (<prop>Value = <value>)
23   :     LoadCapturedVar: var = 0(<captured-this>0)
//  (<prop>Value = <value>)
24   :     SetProperty   : propertyInfo = <prop>Value<calculator::NumberExpression>
//  (<prop>Value = <value>);
25   :     Pop           
//  func SetValue(<value> : int) : (void)
26   :     LoadValue     : value = <null>
//  func SetValue(<value> : int) : (void)
27   :     Return        
//  new (_value : int)
28   :     LoadCapturedVar: var = 0(<captured-this>0)
//  new (_value : int)
29   :     InvokeBaseCtor: methodInfo = <calculator::Expression>, stackPatternCount = 0
//  new (_value : int)
30   :     Pop           
//  0
31   :     LoadValue     : value = <I4, 0>
//  var <prop>Value : int = 0;
32   :     LoadCapturedVar: var = 0(<captured-this>0)
//  var <prop>Value : int = 0;
33   :     SetProperty   : propertyInfo = <prop>Value<calculator::NumberExpression>
//  _value
34   :     LoadLocalVar  : var = 0(_value)
//  SetValue(_value)
35   :     LoadCapturedVar: var = 0(<captured-this>0)
//  SetValue(_value)
36   :     InvokeMethod  : methodInfo = SetValue<calculator::NumberExpression>, stackPatternCount = 1
//  SetValue(_value);
37   :     Pop           
//  new (_value : int)
38   :     LoadValue     : value = <null>
//  new (_value : int)
39   :     Return        
//  <prop>Operator
40   :     LoadCapturedVar: var = 0(<captured-this>0)
//  <prop>Operator
41   :     GetProperty   : propertyInfo = <prop>Operator<calculator::BinaryExpression>
//  return <prop>Operator;
42   :     Return        
//  func GetOperator() : (BinaryOperator)
43   :     LoadValue     : value = <null>
//  func GetOperator() : (BinaryOperator)
44   :     Return        
//  <value>
45   :     LoadLocalVar  : var = 0(<value>)
//  (<prop>Operator = <value>)
46   :     Duplicate     : stackPatternCount = 0
//  (<prop>Operator = <value>)
47   :     LoadCapturedVar: var = 0(<captured-this>0)
//  (<prop>Operator = <value>)
48   :     SetProperty   : propertyInfo = <prop>Operator<calculator::BinaryExpression>
//  (<prop>Operator = <value>);
49   :     Pop           
//  func SetOperator(<value> : BinaryOperator) : (void)
50   :     LoadValue     : value = <null>
//  func SetOperator(<value> : BinaryOperator) : (void)
51   :     Return        
//  <prop>Left
52   :     LoadCapturedVar: var = 0(<captured-this>0)
//  <prop>Left
53   :     GetProperty   : propertyInfo = <prop>Left<calculator::BinaryExpression>
//  return <prop>Left;
54   :     Return        
//  func GetLeft() : (Expression^)
55   :     LoadValue     : value = <null>
//  func GetLeft() : (Expression^)
56   :     Return        
//  <value>
57   :     LoadLocalVar  : var = 0(<value>)
//  (<prop>Left = <value>)
58   :     Duplicate     : stackPatternCount = 0
//  (<prop>Left = <value>)
59   :     LoadCapturedVar: var = 0(<captured-this>0)
//  (<prop>Left = <value>)
60   :     SetProperty   : propertyInfo = <prop>Left<calculator::BinaryExpression>
//  (<prop>Left = <value>);
61   :     Pop           
//  func SetLeft(<value> : Expression^) : (void)
62   :     LoadValue     : value = <null>
//  func SetLeft(<value> : Expression^) : (void)
63   :     Return        
//  <prop>Right
64   :     LoadCapturedVar: var = 0(<captured-this>0)
//  <prop>Right
65   :     GetProperty   : propertyInfo = <prop>Right<calculator::BinaryExpression>
//  return <prop>Right;
66   :     Return        
//  func GetRight() : (Expression^)
67   :     LoadValue     : value = <null>
//  func GetRight() : (Expression^)
68   :     Return        
//  <value>
69   :     LoadLocalVar  : var = 0(<value>)
//  (<prop>Right = <value>)
70   :     Duplicate     : stackPatternCount = 0
//  (<prop>Right = <value>)
71   :     LoadCapturedVar: var = 0(<captured-this>0)
//  (<prop>Right = <value>)
72   :     SetProperty   : propertyInfo = <prop>Right<calculator::BinaryExpression>
//  (<prop>Right = <value>);
73   :     Pop           
//  func SetRight(<value> : Expression^) : (void)
74   :     LoadValue     : value = <null>
//  func SetRight(<value> : Expression^) : (void)
75   :     Return        
//  new (_left : Expression^, _op : BinaryOperator, _right : Expression^)
76   :     LoadCapturedVar: var = 0(<captured-this>0)
//  new (_left : Expression^, _op : BinaryOperator, _right : Expression^)
77   :     InvokeBaseCtor: methodInfo = <calculator::Expression>, stackPatternCount = 0
//  new (_left : Expression^, _op : BinaryOperator, _right : Expression^)
78   :     Pop           
//  Add
79   :     LoadValue     : value = <enum: 0>
//  var <prop>Operator : BinaryOperator = Add;
80   :     LoadCapturedVar: var = 0(<captured-this>0)
//  var <prop>Operator : BinaryOperator = Add;
81   :     SetProperty   : propertyInfo = <prop>Operator<calculator::BinaryExpression>
//  null
82   :     LoadValue     : value = <null>
//  var <prop>Left : Expression^ = null;
83   :     LoadCapturedVar: var = 0(<captured-this>0)
//  var <prop>Left : Expression^ = null;
84   :     SetProperty   : propertyInfo = <prop>Left<calculator::BinaryExpression>
//  null
85   :     LoadValue     : value = <null>
//  var <prop>Right : Expression^ = null;
86   :     LoadCapturedVar: var = 0(<captured-this>0)
//  var <prop>Right : Expression^ = null;
87   :     SetProperty   : propertyInfo = <prop>Right<calculator::BinaryExpression>
//  _left
88   :     LoadLocalVar  : var = 0(_left)
//  SetLeft(_left)
89   :     LoadCapturedVar: var = 0(<captured-this>0)
//  SetLeft(_left)
90   :     InvokeMethod  : methodInfo = SetLeft<calculator::BinaryExpression>, stackPatternCount = 1
//  SetLeft(_left);
91   :     Pop           
//  _op
92   :     LoadLocalVar  : var = 1(_op)
//  SetOperator(_op)
93   :     LoadCapturedVar: var = 0(<captured-this>0)
//  SetOperator(_op)
94   :     InvokeMethod  : methodInfo = SetOperator<calculator::BinaryExpression>, stackPatternCount = 1
//  SetOperator(_op);
95   :     Pop           
//  _right
96   :     LoadLocalVar  : var = 2(_right)
//  SetRight(_right)
97   :     LoadCapturedVar: var = 0(<captured-this>0)
//  SetRight(_right)
98   :     InvokeMethod  : methodInfo = SetRight<calculator::BinaryExpression>, stackPatternCount = 1
//  SetRight(_right);
99   :     Pop           
//  new (_left : Expression^, _op : BinaryOperator, _right : Expression^)
100  :     LoadValue     : value = <null>
//  new (_left : Expression^, _op : BinaryOperator, _right : Expression^)
101  :     Return        
//  expr
102  :     LoadLocalVar  : var = 0(expr)
//  expr
103  :     TryConvertToType: flag = SharedPtr, typeDescriptor = calculator::NumberExpression
//  if (var ne : NumberExpression^ = expr)
104  :     StoreLocalVar : var = 1(<if>ne)
//  if (var ne : NumberExpression^ = expr)
105  :     LoadLocalVar  : var = 1(<if>ne)
//  if (var ne : NumberExpression^ = expr)
106  :     LoadValue     : value = <null>
//  if (var ne : NumberExpression^ = expr)
107  :     CompareReference
//  if (var ne : NumberExpression^ = expr)
108  :     JumpIf        : label = 116
//  ne
109  :     LoadLocalVar  : var = 1(<if>ne)
//  ne.Value
110  :     InvokeMethod  : methodInfo = GetValue<calculator::NumberExpression>, stackPatternCount = 0
//  ne.Value
111  :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  return (cast (string) ne.Value);
112  :     Return        
//  if (var ne : NumberExpression^ = expr)
113  :     LoadValue     : value = <null>
//  if (var ne : NumberExpression^ = expr)
114  :     StoreLocalVar : var = 1(<if>ne)
//  if (var ne : NumberExpression^ = expr)
115  :     Jump          : label = 191
//  expr
116  :     LoadLocalVar  : var = 0(expr)
//  expr
117  :     TryConvertToType: flag = SharedPtr, typeDescriptor = calculator::BinaryExpression
//  if (var be : BinaryExpression^ = expr)
118  :     StoreLocalVar : var = 2(<if>be)
//  if (var be : BinaryExpression^ = expr)
119  :     LoadLocalVar  : var = 2(<if>be)
//  if (var be : BinaryExpression^ = expr)
120  :     LoadValue     : value = <null>
//  if (var be : BinaryExpression^ = expr)
121  :     CompareReference
//  if (var be : BinaryExpression^ = expr)
122  :     JumpIf        : label = 189
//  ""
123  :     LoadValue     : value = <String, >
//  var op = "";
124  :     StoreLocalVar : var = 3(op)
//  be
125  :     LoadLocalVar  : var = 2(<if>be)
//  be.Operator
126  :     InvokeMethod  : methodInfo = GetOperator<calculator::BinaryExpression>, stackPatternCount = 0
//  var <switch>0 : ::calculator::BinaryExpression::BinaryOperator = be.Operator;
127  :     StoreLocalVar : var = 4(<switch>0)
//  <switch>0
128  :     LoadLocalVar  : var = 4(<switch>0)
//  Add
129  :     LoadValue     : value = <enum: 0>
//  (<switch>0 == Add of (::calculator::BinaryExpression::BinaryOperator))
130  :     CompareValue  
//  if ((<switch>0 == Add of (::calculator::BinaryExpression::BinaryOperator)))
131  :     OpNot         : type = Bool
//  if ((<switch>0 == Add of (::calculator::BinaryExpression::BinaryOperator)))
132  :     JumpIf        : label = 138
//  "+"
133  :     LoadValue     : value = <String, +>
//  (op = "+")
134  :     Duplicate     : stackPatternCount = 0
//  (op = "+")
135  :     StoreLocalVar : var = 3(op)
//  (op = "+");
136  :     Pop           
//  if ((<switch>0 == Add of (::calculator::BinaryExpression::BinaryOperator)))
137  :     Jump          : label = 168
//  <switch>0
138  :     LoadLocalVar  : var = 4(<switch>0)
//  Sub
139  :     LoadValue     : value = <enum: 1>
//  (<switch>0 == Sub of (::calculator::BinaryExpression::BinaryOperator))
140  :     CompareValue  
//  if ((<switch>0 == Sub of (::calculator::BinaryExpression::BinaryOperator)))
141  :     OpNot         : type = Bool
//  if ((<switch>0 == Sub of (::calculator::BinaryExpression::BinaryOperator)))
142  :     JumpIf        : label = 148
//  "-"
143  :     LoadValue     : value = <String, ->
//  (op = "-")
144  :     Duplicate     : stackPatternCount = 0
//  (op = "-")
145  :     StoreLocalVar : var = 3(op)
//  (op = "-");
146  :     Pop           
//  if ((<switch>0 == Sub of (::calculator::BinaryExpression::BinaryOperator)))
147  :     Jump          : label = 168
//  <switch>0
148  :     LoadLocalVar  : var = 4(<switch>0)
//  Mul
149  :     LoadValue     : value = <enum: 2>
//  (<switch>0 == Mul of (::calculator::BinaryExpression::BinaryOperator))
150  :     CompareValue  
//  if ((<switch>0 == Mul of (::calculator::BinaryExpression::BinaryOperator)))
151  :     OpNot         : type = Bool
//  if ((<switch>0 == Mul of (::calculator::BinaryExpression::BinaryOperator)))
152  :     JumpIf        : label = 158
//  "*"
153  :     LoadValue     : value = <String, *>
//  (op = "*")
154  :     Duplicate     : stackPatternCount = 0
//  (op = "*")
155  :     StoreLocalVar : var = 3(op)
//  (op = "*");
156  :     Pop           
//  if ((<switch>0 == Mul of (::calculator::BinaryExpression::BinaryOperator)))
157  :     Jump          : label = 168
//  <switch>0
158  :     LoadLocalVar  : var = 4(<switch>0)
//  Div
159  :     LoadValue     : value = <enum: 3>
//  (<switch>0 == Div of (::calculator::BinaryExpression::BinaryOperator))
160  :     CompareValue  
//  if ((<switch>0 == Div of (::calculator::BinaryExpression::BinaryOperator)))
161  :     OpNot         : type = Bool
//  if ((<switch>0 == Div of (::calculator::BinaryExpression::BinaryOperator)))
162  :     JumpIf        : label = 168
//  "/"
163  :     LoadValue     : value = <String, />
//  (op = "/")
164  :     Duplicate     : stackPatternCount = 0
//  (op = "/")
165  :     StoreLocalVar : var = 3(op)
//  (op = "/");
166  :     Pop           
//  if ((<switch>0 == Div of (::calculator::BinaryExpression::BinaryOperator)))
167  :     Jump          : label = 168
//  "("
168  :     LoadValue     : value = <String, (>
//  be
169  :     LoadLocalVar  : var = 2(<if>be)
//  be.Left
170  :     InvokeMethod  : methodInfo = GetLeft<calculator::BinaryExpression>, stackPatternCount = 0
//  Print(be.Left)
171  :     Invoke        : func = 13(Print), stackPatternCount = 1
//  ("(" & Print(be.Left))
172  :     OpConcat      
//  " "
173  :     LoadValue     : value = <String,  >
//  (("(" & Print(be.Left)) & " ")
174  :     OpConcat      
//  op
175  :     LoadLocalVar  : var = 3(op)
//  ((("(" & Print(be.Left)) & " ") & op)
176  :     OpConcat      
//  " "
177  :     LoadValue     : value = <String,  >
//  (((("(" & Print(be.Left)) & " ") & op) & " ")
178  :     OpConcat      
//  be
179  :     LoadLocalVar  : var = 2(<if>be)
//  be.Right
180  :     InvokeMethod  : methodInfo = GetRight<calculator::BinaryExpression>, stackPatternCount = 0
//  Print(be.Right)
181  :     Invoke        : func = 13(Print), stackPatternCount = 1
//  ((((("(" & Print(be.Left)) & " ") & op) & " ") & Print(be.Right))
182  :     OpConcat      
//  ")"
183  :     LoadValue     : value = <String, )>
//  (((((("(" & Print(be.Left)) & " ") & op) & " ") & Print(be.Right)) & ")")
184  :     OpConcat      
//  return (((((("(" & Print(be.Left)) & " ") & op) & " ") & Print(be.Right)) & ")");
185  :     Return        
//  if (var be : BinaryExpression^ = expr)
186  :     LoadValue     : value = <null>
//  if (var be : BinaryExpression^ = expr)
187  :     StoreLocalVar : var = 2(<if>be)
//  if (var be : BinaryExpression^ = expr)
188  :     Jump          : label = 191
//  "Unrecognized expression type."
189  :     LoadValue     : value = <String, Unrecognized expression type.>
//  raise "Unrecognized expression type.";
190  :     RaiseException
//  func Print(expr : Expression^) : (string)
191  :     LoadValue     : value = <null>
//  func Print(expr : Expression^) : (string)
192  :     Return        
//  expr
193  :     LoadLocalVar  : var = 0(expr)
//  expr
194  :     TryConvertToType: flag = SharedPtr, typeDescriptor = calculator::NumberExpression
//  if (var ne : NumberExpression^ = expr)
195  :     StoreLocalVar : var = 1(<if>ne)
//  if (var ne : NumberExpression^ = expr)
196  :     LoadLocalVar  : var = 1(<if>ne)
//  if (var ne : NumberExpression^ = expr)
197  :     LoadValue     : value = <null>
//  if (var ne : NumberExpression^ = expr)
198  :     CompareReference
//  if (var ne : NumberExpression^ = expr)
199  :     JumpIf        : label = 206
//  ne
200  :     LoadLocalVar  : var = 1(<if>ne)
//  ne.Value
201  :     InvokeMethod  : methodInfo = GetValue<calculator::NumberExpression>, stackPatternCount = 0
//  return ne.Value;
202  :     Return        
//  if (var ne : NumberExpression^ = expr)
203  :     LoadValue     : value = <null>
//  if (var ne : NumberExpression^ = expr)
204  :     StoreLocalVar : var = 1(<if>ne)
//  if (var ne : NumberExpression^ = expr)
205  :     Jump          : label = 271
//  expr
206  :     LoadLocalVar  : var = 0(expr)
//  expr
207  :     TryConvertToType: flag = SharedPtr, typeDescriptor = calculator::BinaryExpression
//  if (var be : BinaryExpression^ = expr)
208  :     StoreLocalVar : var = 2(<if>be)
//  if (var be : BinaryExpression^ = expr)
209  :     LoadLocalVar  : var = 2(<if>be)
//  if (var be : BinaryExpression^ = expr)
210  :     LoadValue     : value = <null>
//  if (var be : BinaryExpression^ = expr)
211  :     CompareReference
//  if (var be : BinaryExpression^ = expr)
212  :     JumpIf        : label = 269
//  be
213  :     LoadLocalVar  : var = 2(<if>be)
//  be.Left
214  :     InvokeMethod  : methodInfo = GetLeft<calculator::BinaryExpression>, stackPatternCount = 0
//  Evaluate(be.Left)
215  :     Invoke        : func = 14(Evaluate), stackPatternCount = 1
//  var left = Evaluate(be.Left);
216  :     StoreLocalVar : var = 3(left)
//  be
217  :     LoadLocalVar  : var = 2(<if>be)
//  be.Right
218  :     InvokeMethod  : methodInfo = GetRight<calculator::BinaryExpression>, stackPatternCount = 0
//  Evaluate(be.Right)
219  :     Invoke        : func = 14(Evaluate), stackPatternCount = 1
//  var right = Evaluate(be.Right);
220  :     StoreLocalVar : var = 4(right)
//  be
221  :     LoadLocalVar  : var = 2(<if>be)
//  be.Operator
222  :     InvokeMethod  : methodInfo = GetOperator<calculator::BinaryExpression>, stackPatternCount = 0
//  var <switch>1 : ::calculator::BinaryExpression::BinaryOperator = be.Operator;
223  :     StoreLocalVar : var = 5(<switch>1)
//  <switch>1
224  :     LoadLocalVar  : var = 5(<switch>1)
//  Add
225  :     LoadValue     : value = <enum: 0>
//  (<switch>1 == Add of (::calculator::BinaryExpression::BinaryOperator))
226  :     CompareValue  
//  if ((<switch>1 == Add of (::calculator::BinaryExpression::BinaryOperator)))
227  :     OpNot         : type = Bool
//  if ((<switch>1 == Add of (::calculator::BinaryExpression::BinaryOperator)))
228  :     JumpIf        : label = 234
//  left
229  :     LoadLocalVar  : var = 3(left)
//  right
230  :     LoadLocalVar  : var = 4(right)
//  (left + right)
231  :     OpAdd         : type = I4
//  return (left + right);
232  :     Return        
//  if ((<switch>1 == Add of (::calculator::BinaryExpression::BinaryOperator)))
233  :     Jump          : label = 264
//  <switch>1
234  :     LoadLocalVar  : var = 5(<switch>1)
//  Sub
235  :     LoadValue     : value = <enum: 1>
//  (<switch>1 == Sub of (::calculator::BinaryExpression::BinaryOperator))
236  :     CompareValue  
//  if ((<switch>1 == Sub of (::calculator::BinaryExpression::BinaryOperator)))
237  :     OpNot         : type = Bool
//  if ((<switch>1 == Sub of (::calculator::BinaryExpression::BinaryOperator)))
238  :     JumpIf        : label = 244
//  left
239  :     LoadLocalVar  : var = 3(left)
//  right
240  :     LoadLocalVar  : var = 4(right)
//  (left - right)
241  :     OpSub         : type = I4
//  return (left - right);
242  :     Return        
//  if ((<switch>1 == Sub of (::calculator::BinaryExpression::BinaryOperator)))
243  :     Jump          : label = 264
//  <switch>1
244  :     LoadLocalVar  : var = 5(<switch>1)
//  Mul
245  :     LoadValue     : value = <enum: 2>
//  (<switch>1 == Mul of (::calculator::BinaryExpression::BinaryOperator))
246  :     CompareValue  
//  if ((<switch>1 == Mul of (::calculator::BinaryExpression::BinaryOperator)))
247  :     OpNot         : type = Bool
//  if ((<switch>1 == Mul of (::calculator::BinaryExpression::BinaryOperator)))
248  :     JumpIf        : label = 254
//  left
249  :     LoadLocalVar  : var = 3(left)
//  right
250  :     LoadLocalVar  : var = 4(right)
//  (left * right)
251  :     OpMul         : type = I4
//  return (left * right);
252  :     Return        
//  if ((<switch>1 == Mul of (::calculator::BinaryExpression::BinaryOperator)))
253  :     Jump          : label = 264
//  <switch>1
254  :     LoadLocalVar  : var = 5(<switch>1)
//  Div
255  :     LoadValue     : value = <enum: 3>
//  (<switch>1 == Div of (::calculator::BinaryExpression::BinaryOperator))
256  :     CompareValue  
//  if ((<switch>1 == Div of (::calculator::BinaryExpression::BinaryOperator)))
257  :     OpNot         : type = Bool
//  if ((<switch>1 == Div of (::calculator::BinaryExpression::BinaryOperator)))
258  :     JumpIf        : label = 264
//  left
259  :     LoadLocalVar  : var = 3(left)
//  right
260  :     LoadLocalVar  : var = 4(right)
//  (left / right)
261  :     OpDiv         : type = I4
//  return (left / right);
262  :     Return        
//  if ((<switch>1 == Div of (::calculator::BinaryExpression::BinaryOperator)))
263  :     Jump          : label = 264
//  "Unrecognized binary operator."
264  :     LoadValue     : value = <String, Unrecognized binary operator.>
//  raise "Unrecognized binary operator.";
265  :     RaiseException
//  if (var be : BinaryExpression^ = expr)
266  :     LoadValue     : value = <null>
//  if (var be : BinaryExpression^ = expr)
267  :     StoreLocalVar : var = 2(<if>be)
//  if (var be : BinaryExpression^ = expr)
268  :     Jump          : label = 271
//  "Unrecognized expression type."
269  :     LoadValue     : value = <String, Unrecognized expression type.>
//  raise "Unrecognized expression type.";
270  :     RaiseException
//  func Evaluate(expr : Expression^) : (int)
271  :     LoadValue     : value = <null>
//  func Evaluate(expr : Expression^) : (int)
272  :     Return        
//  1
273  :     LoadValue     : value = <I4, 1>
//  new (NumberExpression^)(1)
274  :     LoadValue     : value = <null>
//  new (NumberExpression^)(1)
275  :     InvokeMethod  : methodInfo = <calculator::NumberExpression>, stackPatternCount = 1
//  new (NumberExpression^)(1)
276  :     ConvertToType : flag = SharedPtr, typeDescriptor = calculator::Expression
//  Add
277  :     LoadValue     : value = <enum: 0>
//  2
278  :     LoadValue     : value = <I4, 2>
//  new (NumberExpression^)(2)
279  :     LoadValue     : value = <null>
//  new (NumberExpression^)(2)
280  :     InvokeMethod  : methodInfo = <calculator::NumberExpression>, stackPatternCount = 1
//  new (NumberExpression^)(2)
281  :     ConvertToType : flag = SharedPtr, typeDescriptor = calculator::Expression
//  new (BinaryExpression^)(new (NumberExpression^)(1), Add, new (NumberExpression^)(2))
282  :     LoadValue     : value = <null>
//  new (BinaryExpression^)(new (NumberExpression^)(1), Add, new (NumberExpression^)(2))
283  :     InvokeMethod  : methodInfo = <calculator::BinaryExpression>, stackPatternCount = 3
//  new (BinaryExpression^)(new (NumberExpression^)(1), Add, new (NumberExpression^)(2))
284  :     ConvertToType : flag = SharedPtr, typeDescriptor = calculator::Expression
//  Mul
285  :     LoadValue     : value = <enum: 2>
//  3
286  :     LoadValue     : value = <I4, 3>
//  new (NumberExpression^)(3)
287  :     LoadValue     : value = <null>
//  new (NumberExpression^)(3)
288  :     InvokeMethod  : methodInfo = <calculator::NumberExpression>, stackPatternCount = 1
//  new (NumberExpression^)(3)
289  :     ConvertToType : flag = SharedPtr, typeDescriptor = calculator::Expression
//  Add
290  :     LoadValue     : value = <enum: 0>
//  4
291  :     LoadValue     : value = <I4, 4>
//  new (NumberExpression^)(4)
292  :     LoadValue     : value = <null>
//  new (NumberExpression^)(4)
293  :     InvokeMethod  : methodInfo = <calculator::NumberExpression>, stackPatternCount = 1
//  new (NumberExpression^)(4)
294  :     ConvertToType : flag = SharedPtr, typeDescriptor = calculator::Expression
//  new (BinaryExpression^)(new (NumberExpression^)(3), Add, new (NumberExpression^)(4))
295  :     LoadValue     : value = <null>
//  new (BinaryExpression^)(new (NumberExpression^)(3), Add, new (NumberExpression^)(4))
296  :     InvokeMethod  : methodInfo = <calculator::BinaryExpression>, stackPatternCount = 3
//  new (BinaryExpression^)(new (NumberExpression^)(3), Add, new (NumberExpression^)(4))
297  :     ConvertToType : flag = SharedPtr, typeDescriptor = calculator::Expression
//  new (BinaryExpression^)(new (BinaryExpression^)(new (NumberExpression^)(1), Add, new (NumberExpression^)(2)), Mul, new (BinaryExpression^)(new (NumberExpression^)(3), Add, new (NumberExpression^)(4)))
298  :     LoadValue     : value = <null>
//  new (BinaryExpression^)(new (BinaryExpression^)(new (NumberExpression^)(1), Add, new (NumberExpression^)(2)), Mul, new (BinaryExpression^)(new (NumberExpression^)(3), Add, new (NumberExpression^)(4)))
299  :     InvokeMethod  : methodInfo = <calculator::BinaryExpression>, stackPatternCount = 3
//  var expr = new (BinaryExpression^)(new (BinaryExpression^)(new (NumberExpression^)(1), Add, new (NumberExpression^)(2)), Mul, new (BinaryExpression^)(new (NumberExpression^)(3), Add, new (NumberExpression^)(4)));
300  :     StoreLocalVar : var = 0(expr)
//  ""
301  :     LoadValue     : value = <String, >
//  expr
302  :     LoadLocalVar  : var = 0(expr)
//  expr.Print()
303  :     InvokeMethod  : methodInfo = Print<calculator::Expression>, stackPatternCount = 0
//  ("" & expr.Print())
304  :     OpConcat      
//  " = "
305  :     LoadValue     : value = <String,  = >
//  (("" & expr.Print()) & " = ")
306  :     OpConcat      
//  expr
307  :     LoadLocalVar  : var = 0(expr)
//  expr.Evaluate()
308  :     InvokeMethod  : methodInfo = Evaluate<calculator::Expression>, stackPatternCount = 0
//  expr.Evaluate()
309  :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  ((("" & expr.Print()) & " = ") & expr.Evaluate())
310  :     OpConcat      
//  return ((("" & expr.Print()) & " = ") & expr.Evaluate());
311  :     Return        
//  func main() : (string)
312  :     LoadValue     : value = <null>
//  func main() : (string)
313  :     Return        
