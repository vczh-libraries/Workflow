========================================================
Global Variables:
========================================================
s

========================================================
Functions:
========================================================
main (4 .. 60)
    Arguments:
    Captured Variables:
    Local Variables:
        coroutine
        i

<initialize> (0 .. 3)
    Arguments:
    Captured Variables:
    Local Variables:

<method:SetFailure<system::Coroutine>(2)> in main (61 .. 66)
    Arguments:
        <value>
    Captured Variables:
        <captured><co0-for-begin>i
        <captured><co1-for-end>i
        <captured><co2>i
        <captured><co3>ex
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured-this>0
    Local Variables:

<method:SetStatus<system::Coroutine>(3)> in main (67 .. 72)
    Arguments:
        <value>
    Captured Variables:
        <captured><co0-for-begin>i
        <captured><co1-for-end>i
        <captured><co2>i
        <captured><co3>ex
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured-this>0
    Local Variables:

<method:GetFailure<system::Coroutine>(6)> in main (73 .. 76)
    Arguments:
    Captured Variables:
        <captured><co0-for-begin>i
        <captured><co1-for-end>i
        <captured><co2>i
        <captured><co3>ex
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured-this>0
    Local Variables:

<method:GetStatus<system::Coroutine>(7)> in main (77 .. 80)
    Arguments:
    Captured Variables:
        <captured><co0-for-begin>i
        <captured><co1-for-end>i
        <captured><co2>i
        <captured><co3>ex
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured-this>0
    Local Variables:

<method:Resume<system::Coroutine>(8)> in main (81 .. 363)
    Arguments:
        <raise-exception>
        <coroutine-output>
    Captured Variables:
        <captured><co0-for-begin>i
        <captured><co1-for-end>i
        <captured><co2>i
        <captured><co3>ex
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured-this>0
    Local Variables:
        <anonymous-range-test>
        <catch><co-ex>
        <catch><co-ex>

========================================================
Instructions:
========================================================
//  ""
0    :     LoadValue     : value = <String, >
//  var s = "";
1    :     StoreGlobalVar: var = 0(s)
2    :     LoadValue     : value = <null>
3    :     Return        
//  0
4    :     LoadValue     : value = <I4, 0>
//  0
5    :     LoadValue     : value = <I4, 0>
//  0
6    :     LoadValue     : value = <I4, 0>
//  null
7    :     LoadValue     : value = <null>
//  0
8    :     LoadValue     : value = <I4, 0>
//  1
9    :     LoadValue     : value = <I4, 1>
//  (-1)
10   :     OpNegative    : type = I4
//  null
11   :     LoadValue     : value = <null>
//  Waiting
12   :     LoadValue     : value = <enum: 0>
//  new (::system::Coroutine^)
13   :     LoadValue     : value = <null>
//  new (::system::Coroutine^)
14   :     CreateClosureContext: stackPatternCount = 9
//  new (::system::Coroutine^)
15   :     LoadMethodInfo: methodInfo = GetFailure<system::Coroutine>
//  func GetFailure() : (::system::Exception^)
16   :     LoadFunction  : func = 4(<method:GetFailure<system::Coroutine>(6)> in main)
//  new (::system::Coroutine^)
17   :     LoadMethodInfo: methodInfo = GetStatus<system::Coroutine>
//  func GetStatus() : (::system::CoroutineStatus)
18   :     LoadFunction  : func = 5(<method:GetStatus<system::Coroutine>(7)> in main)
//  new (::system::Coroutine^)
19   :     LoadMethodInfo: methodInfo = Resume<system::Coroutine>
//  func Resume(<raise-exception> : ::system::Boolean, <coroutine-output> : ::system::CoroutineResult^) : (::system::Void)
20   :     LoadFunction  : func = 6(<method:Resume<system::Coroutine>(8)> in main)
//  new (::system::Coroutine^)
21   :     CreateInterface: methodInfo = <system::Coroutine>, stackPatternCount = 6
//  var coroutine = new (::system::Coroutine^)
22   :     StoreLocalVar : var = 0(coroutine)
//  0
23   :     LoadValue     : value = <I4, 0>
//  var i = 0;
24   :     StoreLocalVar : var = 1(i)
//  coroutine
25   :     LoadLocalVar  : var = 0(coroutine)
//  coroutine.Status
26   :     InvokeMethod  : methodInfo = GetStatus<system::Coroutine>, stackPatternCount = 0
//  CoroutineStatus::Stopped
27   :     LoadValue     : value = <enum: 2>
//  (coroutine.Status != CoroutineStatus::Stopped)
28   :     CompareValue  
//  (coroutine.Status != CoroutineStatus::Stopped)
29   :     OpNot         : type = Bool
//  while ((coroutine.Status != CoroutineStatus::Stopped))
30   :     OpNot         : type = Bool
//  while ((coroutine.Status != CoroutineStatus::Stopped))
31   :     JumpIf        : label = 57
//  true
32   :     LoadValue     : value = <Bool, true>
//  null
33   :     LoadValue     : value = <null>
//  coroutine
34   :     LoadLocalVar  : var = 0(coroutine)
//  coroutine.Resume(true, null)
35   :     InvokeMethod  : methodInfo = Resume<system::Coroutine>, stackPatternCount = 2
//  coroutine.Resume(true, null);
36   :     Pop           
//  ""
37   :     LoadValue     : value = <String, >
//  s
38   :     LoadGlobalVar : var = 0(s)
//  ("" & s)
39   :     OpConcat      
//  "[-"
40   :     LoadValue     : value = <String, [->
//  (("" & s) & "[-")
41   :     OpConcat      
//  i
42   :     LoadLocalVar  : var = 1(i)
//  i
43   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  ((("" & s) & "[-") & i)
44   :     OpConcat      
//  "]"
45   :     LoadValue     : value = <String, ]>
//  (((("" & s) & "[-") & i) & "]")
46   :     OpConcat      
//  (s = (((("" & s) & "[-") & i) & "]"))
47   :     Duplicate     : stackPatternCount = 0
//  (s = (((("" & s) & "[-") & i) & "]"))
48   :     StoreGlobalVar: var = 0(s)
//  (s = (((("" & s) & "[-") & i) & "]"));
49   :     Pop           
//  i
50   :     LoadLocalVar  : var = 1(i)
//  1
51   :     LoadValue     : value = <I4, 1>
//  (i + 1)
52   :     OpAdd         : type = I4
//  (i = (i + 1))
53   :     Duplicate     : stackPatternCount = 0
//  (i = (i + 1))
54   :     StoreLocalVar : var = 1(i)
//  (i = (i + 1));
55   :     Pop           
//  while ((coroutine.Status != CoroutineStatus::Stopped))
56   :     Jump          : label = 25
//  s
57   :     LoadGlobalVar : var = 0(s)
//  return s;
58   :     Return        
//  func main() : (string)
59   :     LoadValue     : value = <null>
//  func main() : (string)
60   :     Return        
//  <value>
61   :     LoadLocalVar  : var = 0(<value>)
//  (<prop>Failure = <value>)
62   :     Duplicate     : stackPatternCount = 0
//  (<prop>Failure = <value>)
63   :     StoreCapturedVar: var = 6
//  (<prop>Failure = <value>);
64   :     Pop           
//  func SetFailure(<value> : ::system::Exception^) : (void)
65   :     LoadValue     : value = <null>
//  func SetFailure(<value> : ::system::Exception^) : (void)
66   :     Return        
//  <value>
67   :     LoadLocalVar  : var = 0(<value>)
//  (<prop>Status = <value>)
68   :     Duplicate     : stackPatternCount = 0
//  (<prop>Status = <value>)
69   :     StoreCapturedVar: var = 7
//  (<prop>Status = <value>);
70   :     Pop           
//  func SetStatus(<value> : ::system::CoroutineStatus) : (void)
71   :     LoadValue     : value = <null>
//  func SetStatus(<value> : ::system::CoroutineStatus) : (void)
72   :     Return        
//  <prop>Failure
73   :     LoadCapturedVar: var = 6(<captured><prop>Failure)
//  return <prop>Failure;
74   :     Return        
//  func GetFailure() : (::system::Exception^)
75   :     LoadValue     : value = <null>
//  func GetFailure() : (::system::Exception^)
76   :     Return        
//  <prop>Status
77   :     LoadCapturedVar: var = 7(<captured><prop>Status)
//  return <prop>Status;
78   :     Return        
//  func GetStatus() : (::system::CoroutineStatus)
79   :     LoadValue     : value = <null>
//  func GetStatus() : (::system::CoroutineStatus)
80   :     Return        
//  Status
81   :     LoadCapturedVar: var = 8(<captured-this>0)
//  Status
82   :     InvokeMethod  : methodInfo = GetStatus<system::Coroutine>, stackPatternCount = 0
//  ::system::CoroutineStatus::Waiting
83   :     LoadValue     : value = <enum: 0>
//  (Status != ::system::CoroutineStatus::Waiting)
84   :     CompareValue  
//  (Status != ::system::CoroutineStatus::Waiting)
85   :     OpNot         : type = Bool
//  if ((Status != ::system::CoroutineStatus::Waiting))
86   :     OpNot         : type = Bool
//  if ((Status != ::system::CoroutineStatus::Waiting))
87   :     JumpIf        : label = 91
//  "Resume should be called only when the coroutine is in the waiting status."
88   :     LoadValue     : value = <String, Resume should be called only when the coroutine is in the waiting status.>
//  raise "Resume should be called only when the coroutine is in the waiting status.";
89   :     RaiseException
//  if ((Status != ::system::CoroutineStatus::Waiting))
90   :     Jump          : label = 91
//  Executing
91   :     LoadValue     : value = <enum: 1>
//  SetStatus(Executing)
92   :     InvokeWithContext: func = 3(<method:SetStatus<system::Coroutine>(3)> in main), stackPatternCount = 1
//  SetStatus(Executing);
93   :     Pop           
//  try
94   :     InstallTry    : label = 348
//  <co-state-before-pause>
95   :     LoadCapturedVar: var = 5(<captured><co-state-before-pause>)
//  1
96   :     LoadValue     : value = <I4, 1>
//  (-1)
97   :     OpNegative    : type = I4
//  (<co-state-before-pause> != (-1))
98   :     CompareValue  
//  (<co-state-before-pause> != (-1))
99   :     OpNot         : type = Bool
//  if ((<co-state-before-pause> != (-1)))
100  :     OpNot         : type = Bool
//  if ((<co-state-before-pause> != (-1)))
101  :     JumpIf        : label = 168
//  <coroutine-output>
102  :     LoadLocalVar  : var = 1(<coroutine-output>)
//  <coroutine-output> is null
103  :     LoadValue     : value = <null>
//  <coroutine-output> is null
104  :     CompareReference
//  if (<coroutine-output> is null)
105  :     OpNot         : type = Bool
//  if (<coroutine-output> is null)
106  :     JumpIf        : label = 113
//  1
107  :     LoadValue     : value = <I4, 1>
//  (-1)
108  :     OpNegative    : type = I4
//  (<co-state-before-pause> = (-1))
109  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = (-1))
110  :     StoreCapturedVar: var = 5
//  (<co-state-before-pause> = (-1));
111  :     Pop           
//  if (<coroutine-output> is null)
112  :     Jump          : label = 167
//  <coroutine-output>
113  :     LoadLocalVar  : var = 1(<coroutine-output>)
//  <coroutine-output>.Failure
114  :     InvokeMethod  : methodInfo = GetFailure<system::CoroutineResult>, stackPatternCount = 0
//  <coroutine-output>.Failure is null
115  :     LoadValue     : value = <null>
//  <coroutine-output>.Failure is null
116  :     CompareReference
//  if (<coroutine-output>.Failure is null)
117  :     OpNot         : type = Bool
//  if (<coroutine-output>.Failure is null)
118  :     JumpIf        : label = 125
//  1
119  :     LoadValue     : value = <I4, 1>
//  (-1)
120  :     OpNegative    : type = I4
//  (<co-state-before-pause> = (-1))
121  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = (-1))
122  :     StoreCapturedVar: var = 5
//  (<co-state-before-pause> = (-1));
123  :     Pop           
//  if (<coroutine-output>.Failure is null)
124  :     Jump          : label = 167
//  <co-state-before-pause>
125  :     LoadCapturedVar: var = 5(<captured><co-state-before-pause>)
//  0
126  :     LoadValue     : value = <I4, 0>
//  (<co-state-before-pause> == 0)
127  :     CompareValue  
//  <co-state-before-pause>
128  :     LoadCapturedVar: var = 5(<captured><co-state-before-pause>)
//  <co-state-before-pause> in range [3, 5]
129  :     StoreLocalVar : var = 2(<anonymous-range-test>)
//  <co-state-before-pause> in range [3, 5]
130  :     LoadLocalVar  : var = 2(<anonymous-range-test>)
//  3
131  :     LoadValue     : value = <I4, 3>
//  <co-state-before-pause> in range [3, 5]
132  :     CompareLiteral: type = I4
//  <co-state-before-pause> in range [3, 5]
133  :     OpGE          
//  <co-state-before-pause> in range [3, 5]
134  :     LoadLocalVar  : var = 2(<anonymous-range-test>)
//  5
135  :     LoadValue     : value = <I4, 5>
//  <co-state-before-pause> in range [3, 5]
136  :     CompareLiteral: type = I4
//  <co-state-before-pause> in range [3, 5]
137  :     OpLE          
//  <co-state-before-pause> in range [3, 5]
138  :     OpAnd         : type = Bool
//  <co-state-before-pause> in range [3, 5]
139  :     LoadValue     : value = <null>
//  <co-state-before-pause> in range [3, 5]
140  :     StoreLocalVar : var = 2(<anonymous-range-test>)
//  ((<co-state-before-pause> == 0) or <co-state-before-pause> in range [3, 5])
141  :     OpOr          : type = Bool
//  if (((<co-state-before-pause> == 0) or <co-state-before-pause> in range [3, 5]))
142  :     OpNot         : type = Bool
//  if (((<co-state-before-pause> == 0) or <co-state-before-pause> in range [3, 5]))
143  :     JumpIf        : label = 159
//  1
144  :     LoadValue     : value = <I4, 1>
//  (-1)
145  :     OpNegative    : type = I4
//  (<co-state-before-pause> = (-1))
146  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = (-1))
147  :     StoreCapturedVar: var = 5
//  (<co-state-before-pause> = (-1));
148  :     Pop           
//  <coroutine-output>
149  :     LoadLocalVar  : var = 1(<coroutine-output>)
//  <coroutine-output>.Failure
150  :     InvokeMethod  : methodInfo = GetFailure<system::CoroutineResult>, stackPatternCount = 0
//  (<co3>ex = <coroutine-output>.Failure)
151  :     Duplicate     : stackPatternCount = 0
//  (<co3>ex = <coroutine-output>.Failure)
152  :     StoreCapturedVar: var = 3
//  (<co3>ex = <coroutine-output>.Failure);
153  :     Pop           
//  2
154  :     LoadValue     : value = <I4, 2>
//  (<co-state> = 2)
155  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 2)
156  :     StoreCapturedVar: var = 4
//  (<co-state> = 2);
157  :     Pop           
//  if (((<co-state-before-pause> == 0) or <co-state-before-pause> in range [3, 5]))
158  :     Jump          : label = 167
//  1
159  :     LoadValue     : value = <I4, 1>
//  (-1)
160  :     OpNegative    : type = I4
//  (<co-state-before-pause> = (-1))
161  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = (-1))
162  :     StoreCapturedVar: var = 5
//  (<co-state-before-pause> = (-1));
163  :     Pop           
//  <coroutine-output>
164  :     LoadLocalVar  : var = 1(<coroutine-output>)
//  <coroutine-output>.Failure
165  :     InvokeMethod  : methodInfo = GetFailure<system::CoroutineResult>, stackPatternCount = 0
//  raise <coroutine-output>.Failure;
166  :     RaiseException
//  if ((<co-state-before-pause> != (-1)))
167  :     Jump          : label = 168
//  true
168  :     LoadValue     : value = <Bool, true>
//  while (true)
169  :     OpNot         : type = Bool
//  while (true)
170  :     JumpIf        : label = 346
//  <co-state>
171  :     LoadCapturedVar: var = 4(<captured><co-state>)
//  1
172  :     LoadValue     : value = <I4, 1>
//  (<co-state> == 1)
173  :     CompareValue  
//  if ((<co-state> == 1))
174  :     OpNot         : type = Bool
//  if ((<co-state> == 1))
175  :     JumpIf        : label = 183
//  Stopped
176  :     LoadValue     : value = <enum: 2>
//  SetStatus(Stopped)
177  :     InvokeWithContext: func = 3(<method:SetStatus<system::Coroutine>(3)> in main), stackPatternCount = 1
//  SetStatus(Stopped);
178  :     Pop           
//  try
179  :     UninstallTry  : stackPatternCount = 0
//  return;
180  :     LoadValue     : value = <null>
//  return;
181  :     Return        
//  if ((<co-state> == 1))
182  :     Jump          : label = 183
//  <co-state>
183  :     LoadCapturedVar: var = 4(<captured><co-state>)
//  2
184  :     LoadValue     : value = <I4, 2>
//  (<co-state> == 2)
185  :     CompareValue  
//  if ((<co-state> == 2))
186  :     OpNot         : type = Bool
//  if ((<co-state> == 2))
187  :     JumpIf        : label = 207
//  ""
188  :     LoadValue     : value = <String, >
//  s
189  :     LoadGlobalVar : var = 0(s)
//  ("" & s)
190  :     OpConcat      
//  "[+"
191  :     LoadValue     : value = <String, [+>
//  (("" & s) & "[+")
192  :     OpConcat      
//  <co3>ex
193  :     LoadCapturedVar: var = 3(<captured><co3>ex)
//  <co3>ex.Message
194  :     InvokeMethod  : methodInfo = GetMessage<system::Exception>, stackPatternCount = 0
//  ((("" & s) & "[+") & <co3>ex.Message)
195  :     OpConcat      
//  "]"
196  :     LoadValue     : value = <String, ]>
//  (((("" & s) & "[+") & <co3>ex.Message) & "]")
197  :     OpConcat      
//  (s = (((("" & s) & "[+") & <co3>ex.Message) & "]"))
198  :     Duplicate     : stackPatternCount = 0
//  (s = (((("" & s) & "[+") & <co3>ex.Message) & "]"))
199  :     StoreGlobalVar: var = 0(s)
//  (s = (((("" & s) & "[+") & <co3>ex.Message) & "]"));
200  :     Pop           
//  1
201  :     LoadValue     : value = <I4, 1>
//  (<co-state> = 1)
202  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 1)
203  :     StoreCapturedVar: var = 4
//  (<co-state> = 1);
204  :     Pop           
//  continue;
205  :     Jump          : label = 168
//  if ((<co-state> == 2))
206  :     Jump          : label = 207
//  try
207  :     InstallTry    : label = 334
//  <co-state>
208  :     LoadCapturedVar: var = 4(<captured><co-state>)
//  0
209  :     LoadValue     : value = <I4, 0>
//  (<co-state> == 0)
210  :     CompareValue  
//  if ((<co-state> == 0))
211  :     OpNot         : type = Bool
//  if ((<co-state> == 0))
212  :     JumpIf        : label = 247
//  0
213  :     LoadValue     : value = <I4, 0>
//  (<co0-for-begin>i = 0)
214  :     Duplicate     : stackPatternCount = 0
//  (<co0-for-begin>i = 0)
215  :     StoreCapturedVar: var = 0
//  (<co0-for-begin>i = 0);
216  :     Pop           
//  10
217  :     LoadValue     : value = <I4, 10>
//  1
218  :     LoadValue     : value = <I4, 1>
//  (10 - 1)
219  :     OpSub         : type = I4
//  (<co1-for-end>i = (10 - 1))
220  :     Duplicate     : stackPatternCount = 0
//  (<co1-for-end>i = (10 - 1))
221  :     StoreCapturedVar: var = 1
//  (<co1-for-end>i = (10 - 1));
222  :     Pop           
//  <co0-for-begin>i
223  :     LoadCapturedVar: var = 0(<captured><co0-for-begin>i)
//  (<co2>i = <co0-for-begin>i)
224  :     Duplicate     : stackPatternCount = 0
//  (<co2>i = <co0-for-begin>i)
225  :     StoreCapturedVar: var = 2
//  (<co2>i = <co0-for-begin>i);
226  :     Pop           
//  <co2>i
227  :     LoadCapturedVar: var = 2(<captured><co2>i)
//  <co1-for-end>i
228  :     LoadCapturedVar: var = 1(<captured><co1-for-end>i)
//  (<co2>i <= <co1-for-end>i)
229  :     CompareLiteral: type = I4
//  (<co2>i <= <co1-for-end>i)
230  :     OpLE          
//  if ((<co2>i <= <co1-for-end>i))
231  :     OpNot         : type = Bool
//  if ((<co2>i <= <co1-for-end>i))
232  :     JumpIf        : label = 240
//  4
233  :     LoadValue     : value = <I4, 4>
//  (<co-state> = 4)
234  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 4)
235  :     StoreCapturedVar: var = 4
//  (<co-state> = 4);
236  :     Pop           
//  try
237  :     UninstallTry  : stackPatternCount = 0
//  continue;
238  :     Jump          : label = 168
//  if ((<co2>i <= <co1-for-end>i))
239  :     Jump          : label = 240
//  1
240  :     LoadValue     : value = <I4, 1>
//  (<co-state> = 1)
241  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 1)
242  :     StoreCapturedVar: var = 4
//  (<co-state> = 1);
243  :     Pop           
//  try
244  :     UninstallTry  : stackPatternCount = 0
//  continue;
245  :     Jump          : label = 168
//  if ((<co-state> == 0))
246  :     Jump          : label = 247
//  <co-state>
247  :     LoadCapturedVar: var = 4(<captured><co-state>)
//  3
248  :     LoadValue     : value = <I4, 3>
//  (<co-state> == 3)
249  :     CompareValue  
//  if ((<co-state> == 3))
250  :     OpNot         : type = Bool
//  if ((<co-state> == 3))
251  :     JumpIf        : label = 286
//  <co2>i
252  :     LoadCapturedVar: var = 2(<captured><co2>i)
//  4
253  :     LoadValue     : value = <I4, 4>
//  (<co2>i == 4)
254  :     CompareValue  
//  if ((<co2>i == 4))
255  :     OpNot         : type = Bool
//  if ((<co2>i == 4))
256  :     JumpIf        : label = 260
//  "Enough!"
257  :     LoadValue     : value = <String, Enough!>
//  raise "Enough!";
258  :     RaiseException
//  if ((<co2>i == 4))
259  :     Jump          : label = 260
//  <co2>i
260  :     LoadCapturedVar: var = 2(<captured><co2>i)
//  1
261  :     LoadValue     : value = <I4, 1>
//  (<co2>i + 1)
262  :     OpAdd         : type = I4
//  (<co2>i = (<co2>i + 1))
263  :     Duplicate     : stackPatternCount = 0
//  (<co2>i = (<co2>i + 1))
264  :     StoreCapturedVar: var = 2
//  (<co2>i = (<co2>i + 1));
265  :     Pop           
//  <co2>i
266  :     LoadCapturedVar: var = 2(<captured><co2>i)
//  <co1-for-end>i
267  :     LoadCapturedVar: var = 1(<captured><co1-for-end>i)
//  (<co2>i <= <co1-for-end>i)
268  :     CompareLiteral: type = I4
//  (<co2>i <= <co1-for-end>i)
269  :     OpLE          
//  if ((<co2>i <= <co1-for-end>i))
270  :     OpNot         : type = Bool
//  if ((<co2>i <= <co1-for-end>i))
271  :     JumpIf        : label = 279
//  4
272  :     LoadValue     : value = <I4, 4>
//  (<co-state> = 4)
273  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 4)
274  :     StoreCapturedVar: var = 4
//  (<co-state> = 4);
275  :     Pop           
//  try
276  :     UninstallTry  : stackPatternCount = 0
//  continue;
277  :     Jump          : label = 168
//  if ((<co2>i <= <co1-for-end>i))
278  :     Jump          : label = 279
//  1
279  :     LoadValue     : value = <I4, 1>
//  (<co-state> = 1)
280  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 1)
281  :     StoreCapturedVar: var = 4
//  (<co-state> = 1);
282  :     Pop           
//  try
283  :     UninstallTry  : stackPatternCount = 0
//  continue;
284  :     Jump          : label = 168
//  if ((<co-state> == 3))
285  :     Jump          : label = 286
//  <co-state>
286  :     LoadCapturedVar: var = 4(<captured><co-state>)
//  4
287  :     LoadValue     : value = <I4, 4>
//  (<co-state> == 4)
288  :     CompareValue  
//  if ((<co-state> == 4))
289  :     OpNot         : type = Bool
//  if ((<co-state> == 4))
290  :     JumpIf        : label = 311
//  ""
291  :     LoadValue     : value = <String, >
//  s
292  :     LoadGlobalVar : var = 0(s)
//  ("" & s)
293  :     OpConcat      
//  "[+"
294  :     LoadValue     : value = <String, [+>
//  (("" & s) & "[+")
295  :     OpConcat      
//  <co2>i
296  :     LoadCapturedVar: var = 2(<captured><co2>i)
//  <co2>i
297  :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  ((("" & s) & "[+") & <co2>i)
298  :     OpConcat      
//  "]"
299  :     LoadValue     : value = <String, ]>
//  (((("" & s) & "[+") & <co2>i) & "]")
300  :     OpConcat      
//  (s = (((("" & s) & "[+") & <co2>i) & "]"))
301  :     Duplicate     : stackPatternCount = 0
//  (s = (((("" & s) & "[+") & <co2>i) & "]"))
302  :     StoreGlobalVar: var = 0(s)
//  (s = (((("" & s) & "[+") & <co2>i) & "]"));
303  :     Pop           
//  5
304  :     LoadValue     : value = <I4, 5>
//  (<co-state> = 5)
305  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 5)
306  :     StoreCapturedVar: var = 4
//  (<co-state> = 5);
307  :     Pop           
//  try
308  :     UninstallTry  : stackPatternCount = 0
//  continue;
309  :     Jump          : label = 168
//  if ((<co-state> == 4))
310  :     Jump          : label = 311
//  <co-state>
311  :     LoadCapturedVar: var = 4(<captured><co-state>)
//  5
312  :     LoadValue     : value = <I4, 5>
//  (<co-state> == 5)
313  :     CompareValue  
//  if ((<co-state> == 5))
314  :     OpNot         : type = Bool
//  if ((<co-state> == 5))
315  :     JumpIf        : label = 332
//  Waiting
316  :     LoadValue     : value = <enum: 0>
//  SetStatus(Waiting)
317  :     InvokeWithContext: func = 3(<method:SetStatus<system::Coroutine>(3)> in main), stackPatternCount = 1
//  SetStatus(Waiting);
318  :     Pop           
//  <co-state>
319  :     LoadCapturedVar: var = 4(<captured><co-state>)
//  (<co-state-before-pause> = <co-state>)
320  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = <co-state>)
321  :     StoreCapturedVar: var = 5
//  (<co-state-before-pause> = <co-state>);
322  :     Pop           
//  3
323  :     LoadValue     : value = <I4, 3>
//  (<co-state> = 3)
324  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 3)
325  :     StoreCapturedVar: var = 4
//  (<co-state> = 3);
326  :     Pop           
//  try
327  :     UninstallTry  : stackPatternCount = 0
//  try
328  :     UninstallTry  : stackPatternCount = 0
//  return;
329  :     LoadValue     : value = <null>
//  return;
330  :     Return        
//  if ((<co-state> == 5))
331  :     Jump          : label = 332
//  try
332  :     UninstallTry  : stackPatternCount = 0
//  try
333  :     Jump          : label = 345
//  try
334  :     LoadException 
//  try
335  :     StoreLocalVar : var = 3(<catch><co-ex>)
//  <co-ex>
336  :     LoadLocalVar  : var = 3(<catch><co-ex>)
//  (<co3>ex = <co-ex>)
337  :     Duplicate     : stackPatternCount = 0
//  (<co3>ex = <co-ex>)
338  :     StoreCapturedVar: var = 3
//  (<co3>ex = <co-ex>);
339  :     Pop           
//  2
340  :     LoadValue     : value = <I4, 2>
//  (<co-state> = 2)
341  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 2)
342  :     StoreCapturedVar: var = 4
//  (<co-state> = 2);
343  :     Pop           
//  continue;
344  :     Jump          : label = 168
//  while (true)
345  :     Jump          : label = 168
//  try
346  :     UninstallTry  : stackPatternCount = 0
//  try
347  :     Jump          : label = 362
//  try
348  :     LoadException 
//  try
349  :     StoreLocalVar : var = 4(<catch><co-ex>)
//  <co-ex>
350  :     LoadLocalVar  : var = 4(<catch><co-ex>)
//  SetFailure(<co-ex>)
351  :     InvokeWithContext: func = 2(<method:SetFailure<system::Coroutine>(2)> in main), stackPatternCount = 1
//  SetFailure(<co-ex>);
352  :     Pop           
//  Stopped
353  :     LoadValue     : value = <enum: 2>
//  SetStatus(Stopped)
354  :     InvokeWithContext: func = 3(<method:SetStatus<system::Coroutine>(3)> in main), stackPatternCount = 1
//  SetStatus(Stopped);
355  :     Pop           
//  <raise-exception>
356  :     LoadLocalVar  : var = 0(<raise-exception>)
//  if (<raise-exception>)
357  :     OpNot         : type = Bool
//  if (<raise-exception>)
358  :     JumpIf        : label = 362
//  raise;
359  :     LoadLocalVar  : var = 4(<catch><co-ex>)
//  raise;
360  :     RaiseException
//  if (<raise-exception>)
361  :     Jump          : label = 362
//  func Resume(<raise-exception> : ::system::Boolean, <coroutine-output> : ::system::CoroutineResult^) : (::system::Void)
362  :     LoadValue     : value = <null>
//  func Resume(<raise-exception> : ::system::Boolean, <coroutine-output> : ::system::CoroutineResult^) : (::system::Void)
363  :     Return        
