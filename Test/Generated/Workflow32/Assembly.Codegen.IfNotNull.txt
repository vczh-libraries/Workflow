========================================================
Global Variables:
========================================================

========================================================
Functions:
========================================================
main (2 .. 64)
    Arguments:
    Captured Variables:
    Local Variables:
        x
        y
        s
        <if>z
        <if>z

<initialize> (0 .. 1)
    Arguments:
    Captured Variables:
    Local Variables:

========================================================
Instructions:
========================================================
0    :     LoadValue     : value = <null>
1    :     Return        
//  1
2    :     LoadValue     : value = <I4, 1>
//  {1;}
3    :     NewList       : stackPatternCount = 1
//  var x : object = {1;};
4    :     StoreLocalVar : var = 0(x)
//  1
5    :     LoadValue     : value = <I4, 1>
//  2
6    :     LoadValue     : value = <I4, 2>
//  {1 : 2;}
7    :     NewDictionary : stackPatternCount = 2
//  var y : object = {1 : 2;};
8    :     StoreLocalVar : var = 1(y)
//  ""
9    :     LoadValue     : value = <String, >
//  var s = "";
10   :     StoreLocalVar : var = 2(s)
//  x
11   :     LoadLocalVar  : var = 0(x)
//  x
12   :     TryConvertToType: flag = SharedPtr, typeDescriptor = system::List
//  if (var z : int[] = x)
13   :     StoreLocalVar : var = 3(<if>z)
//  if (var z : int[] = x)
14   :     LoadLocalVar  : var = 3(<if>z)
//  if (var z : int[] = x)
15   :     LoadValue     : value = <null>
//  if (var z : int[] = x)
16   :     CompareReference
//  if (var z : int[] = x)
17   :     JumpIf        : label = 27
//  s
18   :     LoadLocalVar  : var = 2(s)
//  "{1} is a list"
19   :     LoadValue     : value = <String, {1} is a list>
//  (s & "{1} is a list")
20   :     OpConcat      
//  (s = (s & "{1} is a list"))
21   :     Duplicate     : stackPatternCount = 0
//  (s = (s & "{1} is a list"))
22   :     StoreLocalVar : var = 2(s)
//  (s = (s & "{1} is a list"));
23   :     Pop           
//  if (var z : int[] = x)
24   :     LoadValue     : value = <null>
//  if (var z : int[] = x)
25   :     StoreLocalVar : var = 3(<if>z)
//  if (var z : int[] = x)
26   :     Jump          : label = 33
//  s
27   :     LoadLocalVar  : var = 2(s)
//  "{1} is not a list"
28   :     LoadValue     : value = <String, {1} is not a list>
//  (s & "{1} is not a list")
29   :     OpConcat      
//  (s = (s & "{1} is not a list"))
30   :     Duplicate     : stackPatternCount = 0
//  (s = (s & "{1} is not a list"))
31   :     StoreLocalVar : var = 2(s)
//  (s = (s & "{1} is not a list"));
32   :     Pop           
//  s
33   :     LoadLocalVar  : var = 2(s)
//  ", "
34   :     LoadValue     : value = <String, , >
//  (s & ", ")
35   :     OpConcat      
//  (s = (s & ", "))
36   :     Duplicate     : stackPatternCount = 0
//  (s = (s & ", "))
37   :     StoreLocalVar : var = 2(s)
//  (s = (s & ", "));
38   :     Pop           
//  y
39   :     LoadLocalVar  : var = 1(y)
//  y
40   :     TryConvertToType: flag = SharedPtr, typeDescriptor = system::List
//  if (var z : int[] = y)
41   :     StoreLocalVar : var = 4(<if>z)
//  if (var z : int[] = y)
42   :     LoadLocalVar  : var = 4(<if>z)
//  if (var z : int[] = y)
43   :     LoadValue     : value = <null>
//  if (var z : int[] = y)
44   :     CompareReference
//  if (var z : int[] = y)
45   :     JumpIf        : label = 55
//  s
46   :     LoadLocalVar  : var = 2(s)
//  "{1:2} is a list"
47   :     LoadValue     : value = <String, {1:2} is a list>
//  (s & "{1:2} is a list")
48   :     OpConcat      
//  (s = (s & "{1:2} is a list"))
49   :     Duplicate     : stackPatternCount = 0
//  (s = (s & "{1:2} is a list"))
50   :     StoreLocalVar : var = 2(s)
//  (s = (s & "{1:2} is a list"));
51   :     Pop           
//  if (var z : int[] = y)
52   :     LoadValue     : value = <null>
//  if (var z : int[] = y)
53   :     StoreLocalVar : var = 4(<if>z)
//  if (var z : int[] = y)
54   :     Jump          : label = 61
//  s
55   :     LoadLocalVar  : var = 2(s)
//  "{1:2} is not a list"
56   :     LoadValue     : value = <String, {1:2} is not a list>
//  (s & "{1:2} is not a list")
57   :     OpConcat      
//  (s = (s & "{1:2} is not a list"))
58   :     Duplicate     : stackPatternCount = 0
//  (s = (s & "{1:2} is not a list"))
59   :     StoreLocalVar : var = 2(s)
//  (s = (s & "{1:2} is not a list"));
60   :     Pop           
//  s
61   :     LoadLocalVar  : var = 2(s)
//  return s;
62   :     Return        
//  func main() : (string)
63   :     LoadValue     : value = <null>
//  func main() : (string)
64   :     Return        
