========================================================
Global Variables:
========================================================
s

========================================================
Functions:
========================================================
SMSwitchP1::A (4 .. 31)
    Arguments:
    Captured Variables:
        <captured-this>0
    Local Variables:

SMSwitchP1::B (32 .. 59)
    Arguments:
    Captured Variables:
        <captured-this>0
    Local Variables:

SMSwitchP1::<state>CreateCoroutine (60 .. 92)
    Arguments:
        <state>startState
    Captured Variables:
        <captured-this>0
    Local Variables:
        <state>stateMachineObject
        <state>previousCoroutine

SMSwitchP1::#ctor (493 .. 497)
    Arguments:
    Captured Variables:
        <captured-this>0
    Local Variables:

main (498 .. 523)
    Arguments:
    Captured Variables:
    Local Variables:
        sm
        <catch>ex

<initialize> (0 .. 3)
    Arguments:
    Captured Variables:
    Local Variables:

<method:SetFailure<system::Coroutine>(6)> in SMSwitchP1::<state>CreateCoroutine (93 .. 98)
    Arguments:
        <value>
    Captured Variables:
        <captured><co-tempexvar0>ex
        <captured><co0-switch>2
        <captured><co1-state>currentState
        <captured><co2-state>state
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured><state>stateMachineObject
        <captured><state>previousCoroutine
        <captured><state>startState
        <captured-this>0
        <captured-this>1
    Local Variables:

<method:SetStatus<system::Coroutine>(7)> in SMSwitchP1::<state>CreateCoroutine (99 .. 104)
    Arguments:
        <value>
    Captured Variables:
        <captured><co-tempexvar0>ex
        <captured><co0-switch>2
        <captured><co1-state>currentState
        <captured><co2-state>state
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured><state>stateMachineObject
        <captured><state>previousCoroutine
        <captured><state>startState
        <captured-this>0
        <captured-this>1
    Local Variables:

<method:GetFailure<system::Coroutine>(10)> in SMSwitchP1::<state>CreateCoroutine (105 .. 108)
    Arguments:
    Captured Variables:
        <captured><co-tempexvar0>ex
        <captured><co0-switch>2
        <captured><co1-state>currentState
        <captured><co2-state>state
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured><state>stateMachineObject
        <captured><state>previousCoroutine
        <captured><state>startState
        <captured-this>0
        <captured-this>1
    Local Variables:

<method:GetStatus<system::Coroutine>(11)> in SMSwitchP1::<state>CreateCoroutine (109 .. 112)
    Arguments:
    Captured Variables:
        <captured><co-tempexvar0>ex
        <captured><co0-switch>2
        <captured><co1-state>currentState
        <captured><co2-state>state
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured><state>stateMachineObject
        <captured><state>previousCoroutine
        <captured><state>startState
        <captured-this>0
        <captured-this>1
    Local Variables:

<method:Resume<system::Coroutine>(12)> in SMSwitchP1::<state>CreateCoroutine (113 .. 492)
    Arguments:
        <raise-exception>
        <coroutine-output>
    Captured Variables:
        <captured><co-tempexvar0>ex
        <captured><co0-switch>2
        <captured><co1-state>currentState
        <captured><co2-state>state
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured><state>stateMachineObject
        <captured><state>previousCoroutine
        <captured><state>startState
        <captured-this>0
        <captured-this>1
    Local Variables:
        <anonymous-range-test>
        <switch>0
        <switch>1
        <catch><co-ex>
        <catch><co-ex>

========================================================
Instructions:
========================================================
//  ""
0    :     LoadValue     : value = <Bool, >
//  var s = "";
1    :     StoreGlobalVar: var = 0(s)
2    :     LoadValue     : value = <null>
3    :     Return        
//  this
4    :     LoadCapturedVar: var = 0(<captured-this>0)
//  this.stateMachineInitialized
5    :     GetProperty   : propertyInfo = stateMachineInitialized<system::StateMachine>
//  (!this.stateMachineInitialized)
6    :     OpNot         : type = Bool
//  if ((!this.stateMachineInitialized))
7    :     OpNot         : type = Bool
//  if ((!this.stateMachineInitialized))
8    :     JumpIf        : label = 22
//  true
9    :     LoadValue     : value = <Bool, true>
//  (this.stateMachineInitialized = true)
10   :     Duplicate     : stackPatternCount = 0
//  this
11   :     LoadCapturedVar: var = 0(<captured-this>0)
//  (this.stateMachineInitialized = true)
12   :     SetProperty   : propertyInfo = stateMachineInitialized<system::StateMachine>
//  (this.stateMachineInitialized = true);
13   :     Pop           
//  0
14   :     LoadValue     : value = <I4, 0>
//  this
15   :     LoadCapturedVar: var = 0(<captured-this>0)
//  this.<state>CreateCoroutine(0)
16   :     InvokeMethod  : methodInfo = <state>CreateCoroutine<SMSwitchP1>, stackPatternCount = 1
//  this.<state>CreateCoroutine(0);
17   :     Pop           
//  this
18   :     LoadCapturedVar: var = 0(<captured-this>0)
//  this.ResumeStateMachine()
19   :     InvokeMethod  : methodInfo = ResumeStateMachine<system::StateMachine>, stackPatternCount = 0
//  this.ResumeStateMachine();
20   :     Pop           
//  if ((!this.stateMachineInitialized))
21   :     Jump          : label = 22
//  0
22   :     LoadValue     : value = <I4, 0>
//  (this.stateMachineInput = 0)
23   :     Duplicate     : stackPatternCount = 0
//  this
24   :     LoadCapturedVar: var = 0(<captured-this>0)
//  (this.stateMachineInput = 0)
25   :     SetProperty   : propertyInfo = stateMachineInput<system::StateMachine>
//  (this.stateMachineInput = 0);
26   :     Pop           
//  this
27   :     LoadCapturedVar: var = 0(<captured-this>0)
//  this.ResumeStateMachine()
28   :     InvokeMethod  : methodInfo = ResumeStateMachine<system::StateMachine>, stackPatternCount = 0
//  this.ResumeStateMachine();
29   :     Pop           
//  func A() : (::system::Void)
30   :     LoadValue     : value = <null>
//  func A() : (::system::Void)
31   :     Return        
//  this
32   :     LoadCapturedVar: var = 0(<captured-this>0)
//  this.stateMachineInitialized
33   :     GetProperty   : propertyInfo = stateMachineInitialized<system::StateMachine>
//  (!this.stateMachineInitialized)
34   :     OpNot         : type = Bool
//  if ((!this.stateMachineInitialized))
35   :     OpNot         : type = Bool
//  if ((!this.stateMachineInitialized))
36   :     JumpIf        : label = 50
//  true
37   :     LoadValue     : value = <Bool, true>
//  (this.stateMachineInitialized = true)
38   :     Duplicate     : stackPatternCount = 0
//  this
39   :     LoadCapturedVar: var = 0(<captured-this>0)
//  (this.stateMachineInitialized = true)
40   :     SetProperty   : propertyInfo = stateMachineInitialized<system::StateMachine>
//  (this.stateMachineInitialized = true);
41   :     Pop           
//  0
42   :     LoadValue     : value = <I4, 0>
//  this
43   :     LoadCapturedVar: var = 0(<captured-this>0)
//  this.<state>CreateCoroutine(0)
44   :     InvokeMethod  : methodInfo = <state>CreateCoroutine<SMSwitchP1>, stackPatternCount = 1
//  this.<state>CreateCoroutine(0);
45   :     Pop           
//  this
46   :     LoadCapturedVar: var = 0(<captured-this>0)
//  this.ResumeStateMachine()
47   :     InvokeMethod  : methodInfo = ResumeStateMachine<system::StateMachine>, stackPatternCount = 0
//  this.ResumeStateMachine();
48   :     Pop           
//  if ((!this.stateMachineInitialized))
49   :     Jump          : label = 50
//  1
50   :     LoadValue     : value = <I4, 1>
//  (this.stateMachineInput = 1)
51   :     Duplicate     : stackPatternCount = 0
//  this
52   :     LoadCapturedVar: var = 0(<captured-this>0)
//  (this.stateMachineInput = 1)
53   :     SetProperty   : propertyInfo = stateMachineInput<system::StateMachine>
//  (this.stateMachineInput = 1);
54   :     Pop           
//  this
55   :     LoadCapturedVar: var = 0(<captured-this>0)
//  this.ResumeStateMachine()
56   :     InvokeMethod  : methodInfo = ResumeStateMachine<system::StateMachine>, stackPatternCount = 0
//  this.ResumeStateMachine();
57   :     Pop           
//  func B() : (::system::Void)
58   :     LoadValue     : value = <null>
//  func B() : (::system::Void)
59   :     Return        
//  this
60   :     LoadCapturedVar: var = 0(<captured-this>0)
//  var <state>stateMachineObject = this;
61   :     StoreLocalVar : var = 1(<state>stateMachineObject)
//  <state>stateMachineObject
62   :     LoadLocalVar  : var = 1(<state>stateMachineObject)
//  <state>stateMachineObject.stateMachineCoroutine
63   :     GetProperty   : propertyInfo = stateMachineCoroutine<system::StateMachine>
//  var <state>previousCoroutine = <state>stateMachineObject.stateMachineCoroutine;
64   :     StoreLocalVar : var = 2(<state>previousCoroutine)
//  null
65   :     LoadValue     : value = <null>
//  0
66   :     LoadValue     : value = <I4, 0>
//  0
67   :     LoadValue     : value = <I4, 0>
//  0
68   :     LoadValue     : value = <I4, 0>
//  0
69   :     LoadValue     : value = <I4, 0>
//  1
70   :     LoadValue     : value = <I4, 1>
//  (-1)
71   :     OpNegative    : type = I4
//  null
72   :     LoadValue     : value = <null>
//  Waiting
73   :     LoadValue     : value = <enum: 0>
//  new (::system::Coroutine^)
74   :     LoadLocalVar  : var = 1(<state>stateMachineObject)
//  new (::system::Coroutine^)
75   :     LoadLocalVar  : var = 2(<state>previousCoroutine)
//  new (::system::Coroutine^)
76   :     LoadLocalVar  : var = 0(<state>startState)
//  new (::system::Coroutine^)
77   :     LoadCapturedVar: var = 0(<captured-this>0)
//  new (::system::Coroutine^)
78   :     LoadValue     : value = <null>
//  new (::system::Coroutine^)
79   :     CreateClosureContext: stackPatternCount = 13
//  new (::system::Coroutine^)
80   :     LoadMethodInfo: methodInfo = GetFailure<system::Coroutine>
//  func GetFailure() : (::system::Exception^)
81   :     LoadFunction  : func = 8(<method:GetFailure<system::Coroutine>(10)> in SMSwitchP1::<state>CreateCoroutine)
//  new (::system::Coroutine^)
82   :     LoadMethodInfo: methodInfo = GetStatus<system::Coroutine>
//  func GetStatus() : (::system::CoroutineStatus)
83   :     LoadFunction  : func = 9(<method:GetStatus<system::Coroutine>(11)> in SMSwitchP1::<state>CreateCoroutine)
//  new (::system::Coroutine^)
84   :     LoadMethodInfo: methodInfo = Resume<system::Coroutine>
//  func Resume(<raise-exception> : ::system::Boolean, <coroutine-output> : ::system::CoroutineResult^) : (::system::Void)
85   :     LoadFunction  : func = 10(<method:Resume<system::Coroutine>(12)> in SMSwitchP1::<state>CreateCoroutine)
//  new (::system::Coroutine^)
86   :     CreateInterface: methodInfo = <system::Coroutine>, stackPatternCount = 6
//  (<state>stateMachineObject.stateMachineCoroutine = new (::system::Coroutine^)
87   :     Duplicate     : stackPatternCount = 0
//  <state>stateMachineObject
88   :     LoadLocalVar  : var = 1(<state>stateMachineObject)
//  (<state>stateMachineObject.stateMachineCoroutine = new (::system::Coroutine^)
89   :     SetProperty   : propertyInfo = stateMachineCoroutine<system::StateMachine>
//  (<state>stateMachineObject.stateMachineCoroutine = new (::system::Coroutine^)
90   :     Pop           
//  func <state>CreateCoroutine(<state>startState : ::system::Int32) : (::system::Void)
91   :     LoadValue     : value = <null>
//  func <state>CreateCoroutine(<state>startState : ::system::Int32) : (::system::Void)
92   :     Return        
//  <value>
93   :     LoadLocalVar  : var = 0(<value>)
//  (<prop>Failure = <value>)
94   :     Duplicate     : stackPatternCount = 0
//  (<prop>Failure = <value>)
95   :     StoreCapturedVar: var = 6
//  (<prop>Failure = <value>);
96   :     Pop           
//  func SetFailure(<value> : ::system::Exception^) : (void)
97   :     LoadValue     : value = <null>
//  func SetFailure(<value> : ::system::Exception^) : (void)
98   :     Return        
//  <value>
99   :     LoadLocalVar  : var = 0(<value>)
//  (<prop>Status = <value>)
100  :     Duplicate     : stackPatternCount = 0
//  (<prop>Status = <value>)
101  :     StoreCapturedVar: var = 7
//  (<prop>Status = <value>);
102  :     Pop           
//  func SetStatus(<value> : ::system::CoroutineStatus) : (void)
103  :     LoadValue     : value = <null>
//  func SetStatus(<value> : ::system::CoroutineStatus) : (void)
104  :     Return        
//  <prop>Failure
105  :     LoadCapturedVar: var = 6(<captured><prop>Failure)
//  return <prop>Failure;
106  :     Return        
//  func GetFailure() : (::system::Exception^)
107  :     LoadValue     : value = <null>
//  func GetFailure() : (::system::Exception^)
108  :     Return        
//  <prop>Status
109  :     LoadCapturedVar: var = 7(<captured><prop>Status)
//  return <prop>Status;
110  :     Return        
//  func GetStatus() : (::system::CoroutineStatus)
111  :     LoadValue     : value = <null>
//  func GetStatus() : (::system::CoroutineStatus)
112  :     Return        
//  Status
113  :     LoadCapturedVar: var = 12(<captured-this>1)
//  Status
114  :     InvokeMethod  : methodInfo = GetStatus<system::Coroutine>, stackPatternCount = 0
//  ::system::CoroutineStatus::Waiting
115  :     LoadValue     : value = <enum: 0>
//  (Status != ::system::CoroutineStatus::Waiting)
116  :     CompareValue  
//  (Status != ::system::CoroutineStatus::Waiting)
117  :     OpNot         : type = Bool
//  if ((Status != ::system::CoroutineStatus::Waiting))
118  :     OpNot         : type = Bool
//  if ((Status != ::system::CoroutineStatus::Waiting))
119  :     JumpIf        : label = 123
//  "Resume should be called only when the coroutine is in the waiting status."
120  :     LoadValue     : value = <Bool, Resume should be called only when the coroutine is in the waiting status.>
//  raise "Resume should be called only when the coroutine is in the waiting status.";
121  :     RaiseException
//  if ((Status != ::system::CoroutineStatus::Waiting))
122  :     Jump          : label = 123
//  Executing
123  :     LoadValue     : value = <enum: 1>
//  SetStatus(Executing)
124  :     InvokeWithContext: func = 7(<method:SetStatus<system::Coroutine>(7)> in SMSwitchP1::<state>CreateCoroutine), stackPatternCount = 1
//  SetStatus(Executing);
125  :     Pop           
//  try
126  :     InstallTry    : label = 477
//  <co-state-before-pause>
127  :     LoadCapturedVar: var = 5(<captured><co-state-before-pause>)
//  1
128  :     LoadValue     : value = <I4, 1>
//  (-1)
129  :     OpNegative    : type = I4
//  (<co-state-before-pause> != (-1))
130  :     CompareValue  
//  (<co-state-before-pause> != (-1))
131  :     OpNot         : type = Bool
//  if ((<co-state-before-pause> != (-1)))
132  :     OpNot         : type = Bool
//  if ((<co-state-before-pause> != (-1)))
133  :     JumpIf        : label = 200
//  <coroutine-output>
134  :     LoadLocalVar  : var = 1(<coroutine-output>)
//  <coroutine-output> is null
135  :     LoadValue     : value = <null>
//  <coroutine-output> is null
136  :     CompareReference
//  if (<coroutine-output> is null)
137  :     OpNot         : type = Bool
//  if (<coroutine-output> is null)
138  :     JumpIf        : label = 145
//  1
139  :     LoadValue     : value = <I4, 1>
//  (-1)
140  :     OpNegative    : type = I4
//  (<co-state-before-pause> = (-1))
141  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = (-1))
142  :     StoreCapturedVar: var = 5
//  (<co-state-before-pause> = (-1));
143  :     Pop           
//  if (<coroutine-output> is null)
144  :     Jump          : label = 199
//  <coroutine-output>
145  :     LoadLocalVar  : var = 1(<coroutine-output>)
//  <coroutine-output>.Failure
146  :     InvokeMethod  : methodInfo = GetFailure<system::CoroutineResult>, stackPatternCount = 0
//  <coroutine-output>.Failure is null
147  :     LoadValue     : value = <null>
//  <coroutine-output>.Failure is null
148  :     CompareReference
//  if (<coroutine-output>.Failure is null)
149  :     OpNot         : type = Bool
//  if (<coroutine-output>.Failure is null)
150  :     JumpIf        : label = 157
//  1
151  :     LoadValue     : value = <I4, 1>
//  (-1)
152  :     OpNegative    : type = I4
//  (<co-state-before-pause> = (-1))
153  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = (-1))
154  :     StoreCapturedVar: var = 5
//  (<co-state-before-pause> = (-1));
155  :     Pop           
//  if (<coroutine-output>.Failure is null)
156  :     Jump          : label = 199
//  <co-state-before-pause>
157  :     LoadCapturedVar: var = 5(<captured><co-state-before-pause>)
//  0
158  :     LoadValue     : value = <I4, 0>
//  (<co-state-before-pause> == 0)
159  :     CompareValue  
//  <co-state-before-pause>
160  :     LoadCapturedVar: var = 5(<captured><co-state-before-pause>)
//  <co-state-before-pause> in range [3, 6]
161  :     StoreLocalVar : var = 2(<anonymous-range-test>)
//  <co-state-before-pause> in range [3, 6]
162  :     LoadLocalVar  : var = 2(<anonymous-range-test>)
//  3
163  :     LoadValue     : value = <I4, 3>
//  <co-state-before-pause> in range [3, 6]
164  :     CompareLiteral: type = I4
//  <co-state-before-pause> in range [3, 6]
165  :     OpGE          
//  <co-state-before-pause> in range [3, 6]
166  :     LoadLocalVar  : var = 2(<anonymous-range-test>)
//  6
167  :     LoadValue     : value = <I4, 6>
//  <co-state-before-pause> in range [3, 6]
168  :     CompareLiteral: type = I4
//  <co-state-before-pause> in range [3, 6]
169  :     OpLE          
//  <co-state-before-pause> in range [3, 6]
170  :     OpAnd         : type = Bool
//  <co-state-before-pause> in range [3, 6]
171  :     LoadValue     : value = <null>
//  <co-state-before-pause> in range [3, 6]
172  :     StoreLocalVar : var = 2(<anonymous-range-test>)
//  ((<co-state-before-pause> == 0) or <co-state-before-pause> in range [3, 6])
173  :     OpOr          : type = Bool
//  if (((<co-state-before-pause> == 0) or <co-state-before-pause> in range [3, 6]))
174  :     OpNot         : type = Bool
//  if (((<co-state-before-pause> == 0) or <co-state-before-pause> in range [3, 6]))
175  :     JumpIf        : label = 191
//  1
176  :     LoadValue     : value = <I4, 1>
//  (-1)
177  :     OpNegative    : type = I4
//  (<co-state-before-pause> = (-1))
178  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = (-1))
179  :     StoreCapturedVar: var = 5
//  (<co-state-before-pause> = (-1));
180  :     Pop           
//  <coroutine-output>
181  :     LoadLocalVar  : var = 1(<coroutine-output>)
//  <coroutine-output>.Failure
182  :     InvokeMethod  : methodInfo = GetFailure<system::CoroutineResult>, stackPatternCount = 0
//  (<co-tempexvar0>ex = <coroutine-output>.Failure)
183  :     Duplicate     : stackPatternCount = 0
//  (<co-tempexvar0>ex = <coroutine-output>.Failure)
184  :     StoreCapturedVar: var = 0
//  (<co-tempexvar0>ex = <coroutine-output>.Failure);
185  :     Pop           
//  2
186  :     LoadValue     : value = <I4, 2>
//  (<co-state> = 2)
187  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 2)
188  :     StoreCapturedVar: var = 4
//  (<co-state> = 2);
189  :     Pop           
//  if (((<co-state-before-pause> == 0) or <co-state-before-pause> in range [3, 6]))
190  :     Jump          : label = 199
//  1
191  :     LoadValue     : value = <I4, 1>
//  (-1)
192  :     OpNegative    : type = I4
//  (<co-state-before-pause> = (-1))
193  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = (-1))
194  :     StoreCapturedVar: var = 5
//  (<co-state-before-pause> = (-1));
195  :     Pop           
//  <coroutine-output>
196  :     LoadLocalVar  : var = 1(<coroutine-output>)
//  <coroutine-output>.Failure
197  :     InvokeMethod  : methodInfo = GetFailure<system::CoroutineResult>, stackPatternCount = 0
//  raise <coroutine-output>.Failure;
198  :     RaiseException
//  if ((<co-state-before-pause> != (-1)))
199  :     Jump          : label = 200
//  true
200  :     LoadValue     : value = <Bool, true>
//  while (true)
201  :     OpNot         : type = Bool
//  while (true)
202  :     JumpIf        : label = 475
//  <co-state>
203  :     LoadCapturedVar: var = 4(<captured><co-state>)
//  1
204  :     LoadValue     : value = <I4, 1>
//  (<co-state> == 1)
205  :     CompareValue  
//  if ((<co-state> == 1))
206  :     OpNot         : type = Bool
//  if ((<co-state> == 1))
207  :     JumpIf        : label = 215
//  Stopped
208  :     LoadValue     : value = <enum: 2>
//  SetStatus(Stopped)
209  :     InvokeWithContext: func = 7(<method:SetStatus<system::Coroutine>(7)> in SMSwitchP1::<state>CreateCoroutine), stackPatternCount = 1
//  SetStatus(Stopped);
210  :     Pop           
//  try
211  :     UninstallTry  : stackPatternCount = 0
//  return;
212  :     LoadValue     : value = <null>
//  return;
213  :     Return        
//  if ((<co-state> == 1))
214  :     Jump          : label = 215
//  <co-state>
215  :     LoadCapturedVar: var = 4(<captured><co-state>)
//  2
216  :     LoadValue     : value = <I4, 2>
//  (<co-state> == 2)
217  :     CompareValue  
//  if ((<co-state> == 2))
218  :     OpNot         : type = Bool
//  if ((<co-state> == 2))
219  :     JumpIf        : label = 229
//  <state>previousCoroutine
220  :     LoadCapturedVar: var = 9(<captured><state>previousCoroutine)
//  (<state>stateMachineObject.stateMachineCoroutine = <state>previousCoroutine)
221  :     Duplicate     : stackPatternCount = 0
//  <state>stateMachineObject
222  :     LoadCapturedVar: var = 8(<captured><state>stateMachineObject)
//  (<state>stateMachineObject.stateMachineCoroutine = <state>previousCoroutine)
223  :     SetProperty   : propertyInfo = stateMachineCoroutine<system::StateMachine>
//  (<state>stateMachineObject.stateMachineCoroutine = <state>previousCoroutine);
224  :     Pop           
//  <co-tempexvar0>ex
225  :     LoadCapturedVar: var = 0(<captured><co-tempexvar0>ex)
//  <co-tempexvar0>ex.Message
226  :     InvokeMethod  : methodInfo = GetMessage<system::Exception>, stackPatternCount = 0
//  raise <co-tempexvar0>ex.Message;
227  :     RaiseException
//  if ((<co-state> == 2))
228  :     Jump          : label = 229
//  <co-state>
229  :     LoadCapturedVar: var = 4(<captured><co-state>)
//  7
230  :     LoadValue     : value = <I4, 7>
//  (<co-state> == 7)
231  :     CompareValue  
//  if ((<co-state> == 7))
232  :     OpNot         : type = Bool
//  if ((<co-state> == 7))
233  :     JumpIf        : label = 245
//  <state>previousCoroutine
234  :     LoadCapturedVar: var = 9(<captured><state>previousCoroutine)
//  (<state>stateMachineObject.stateMachineCoroutine = <state>previousCoroutine)
235  :     Duplicate     : stackPatternCount = 0
//  <state>stateMachineObject
236  :     LoadCapturedVar: var = 8(<captured><state>stateMachineObject)
//  (<state>stateMachineObject.stateMachineCoroutine = <state>previousCoroutine)
237  :     SetProperty   : propertyInfo = stateMachineCoroutine<system::StateMachine>
//  (<state>stateMachineObject.stateMachineCoroutine = <state>previousCoroutine);
238  :     Pop           
//  1
239  :     LoadValue     : value = <I4, 1>
//  (<co-state> = 1)
240  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 1)
241  :     StoreCapturedVar: var = 4
//  (<co-state> = 1);
242  :     Pop           
//  continue;
243  :     Jump          : label = 200
//  if ((<co-state> == 7))
244  :     Jump          : label = 245
//  try
245  :     InstallTry    : label = 463
//  <co-state>
246  :     LoadCapturedVar: var = 4(<captured><co-state>)
//  0
247  :     LoadValue     : value = <I4, 0>
//  (<co-state> == 0)
248  :     CompareValue  
//  if ((<co-state> == 0))
249  :     OpNot         : type = Bool
//  if ((<co-state> == 0))
250  :     JumpIf        : label = 272
//  <state>startState
251  :     LoadCapturedVar: var = 10(<captured><state>startState)
//  (<co2-state>state = <state>startState)
252  :     Duplicate     : stackPatternCount = 0
//  (<co2-state>state = <state>startState)
253  :     StoreCapturedVar: var = 3
//  (<co2-state>state = <state>startState);
254  :     Pop           
//  true
255  :     LoadValue     : value = <Bool, true>
//  if (true)
256  :     OpNot         : type = Bool
//  if (true)
257  :     JumpIf        : label = 265
//  4
258  :     LoadValue     : value = <I4, 4>
//  (<co-state> = 4)
259  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 4)
260  :     StoreCapturedVar: var = 4
//  (<co-state> = 4);
261  :     Pop           
//  try
262  :     UninstallTry  : stackPatternCount = 0
//  continue;
263  :     Jump          : label = 200
//  if (true)
264  :     Jump          : label = 265
//  7
265  :     LoadValue     : value = <I4, 7>
//  (<co-state> = 7)
266  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 7)
267  :     StoreCapturedVar: var = 4
//  (<co-state> = 7);
268  :     Pop           
//  try
269  :     UninstallTry  : stackPatternCount = 0
//  continue;
270  :     Jump          : label = 200
//  if ((<co-state> == 0))
271  :     Jump          : label = 272
//  <co-state>
272  :     LoadCapturedVar: var = 4(<captured><co-state>)
//  3
273  :     LoadValue     : value = <I4, 3>
//  (<co-state> == 3)
274  :     CompareValue  
//  if ((<co-state> == 3))
275  :     OpNot         : type = Bool
//  if ((<co-state> == 3))
276  :     JumpIf        : label = 294
//  true
277  :     LoadValue     : value = <Bool, true>
//  if (true)
278  :     OpNot         : type = Bool
//  if (true)
279  :     JumpIf        : label = 287
//  4
280  :     LoadValue     : value = <I4, 4>
//  (<co-state> = 4)
281  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 4)
282  :     StoreCapturedVar: var = 4
//  (<co-state> = 4);
283  :     Pop           
//  try
284  :     UninstallTry  : stackPatternCount = 0
//  continue;
285  :     Jump          : label = 200
//  if (true)
286  :     Jump          : label = 287
//  7
287  :     LoadValue     : value = <I4, 7>
//  (<co-state> = 7)
288  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 7)
289  :     StoreCapturedVar: var = 4
//  (<co-state> = 7);
290  :     Pop           
//  try
291  :     UninstallTry  : stackPatternCount = 0
//  continue;
292  :     Jump          : label = 200
//  if ((<co-state> == 3))
293  :     Jump          : label = 294
//  <co-state>
294  :     LoadCapturedVar: var = 4(<captured><co-state>)
//  4
295  :     LoadValue     : value = <I4, 4>
//  (<co-state> == 4)
296  :     CompareValue  
//  if ((<co-state> == 4))
297  :     OpNot         : type = Bool
//  if ((<co-state> == 4))
298  :     JumpIf        : label = 354
//  <co2-state>state
299  :     LoadCapturedVar: var = 3(<captured><co2-state>state)
//  (<co1-state>currentState = <co2-state>state)
300  :     Duplicate     : stackPatternCount = 0
//  (<co1-state>currentState = <co2-state>state)
301  :     StoreCapturedVar: var = 2
//  (<co1-state>currentState = <co2-state>state);
302  :     Pop           
//  1
303  :     LoadValue     : value = <I4, 1>
//  (-1)
304  :     OpNegative    : type = I4
//  (<co2-state>state = (-1))
305  :     Duplicate     : stackPatternCount = 0
//  (<co2-state>state = (-1))
306  :     StoreCapturedVar: var = 3
//  (<co2-state>state = (-1));
307  :     Pop           
//  <co1-state>currentState
308  :     LoadCapturedVar: var = 2(<captured><co1-state>currentState)
//  (<co0-switch>2 = <co1-state>currentState)
309  :     Duplicate     : stackPatternCount = 0
//  (<co0-switch>2 = <co1-state>currentState)
310  :     StoreCapturedVar: var = 1
//  (<co0-switch>2 = <co1-state>currentState);
311  :     Pop           
//  <co0-switch>2
312  :     LoadCapturedVar: var = 1(<captured><co0-switch>2)
//  0
313  :     LoadValue     : value = <I4, 0>
//  (<co0-switch>2 == 0 of (::system::Int32))
314  :     CompareValue  
//  if ((<co0-switch>2 == 0 of (::system::Int32)))
315  :     OpNot         : type = Bool
//  if ((<co0-switch>2 == 0 of (::system::Int32)))
316  :     JumpIf        : label = 347
//  <state>stateMachineObject
317  :     LoadCapturedVar: var = 8(<captured><state>stateMachineObject)
//  <state>stateMachineObject.stateMachineInput
318  :     GetProperty   : propertyInfo = stateMachineInput<system::StateMachine>
//  1
319  :     LoadValue     : value = <I4, 1>
//  (-1)
320  :     OpNegative    : type = I4
//  (<state>stateMachineObject.stateMachineInput == (-1))
321  :     CompareValue  
//  if ((<state>stateMachineObject.stateMachineInput == (-1)))
322  :     OpNot         : type = Bool
//  if ((<state>stateMachineObject.stateMachineInput == (-1)))
323  :     JumpIf        : label = 340
//  Waiting
324  :     LoadValue     : value = <enum: 0>
//  SetStatus(Waiting)
325  :     InvokeWithContext: func = 7(<method:SetStatus<system::Coroutine>(7)> in SMSwitchP1::<state>CreateCoroutine), stackPatternCount = 1
//  SetStatus(Waiting);
326  :     Pop           
//  <co-state>
327  :     LoadCapturedVar: var = 4(<captured><co-state>)
//  (<co-state-before-pause> = <co-state>)
328  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = <co-state>)
329  :     StoreCapturedVar: var = 5
//  (<co-state-before-pause> = <co-state>);
330  :     Pop           
//  5
331  :     LoadValue     : value = <I4, 5>
//  (<co-state> = 5)
332  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 5)
333  :     StoreCapturedVar: var = 4
//  (<co-state> = 5);
334  :     Pop           
//  try
335  :     UninstallTry  : stackPatternCount = 0
//  try
336  :     UninstallTry  : stackPatternCount = 0
//  return;
337  :     LoadValue     : value = <null>
//  return;
338  :     Return        
//  if ((<state>stateMachineObject.stateMachineInput == (-1)))
339  :     Jump          : label = 340
//  5
340  :     LoadValue     : value = <I4, 5>
//  (<co-state> = 5)
341  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 5)
342  :     StoreCapturedVar: var = 4
//  (<co-state> = 5);
343  :     Pop           
//  try
344  :     UninstallTry  : stackPatternCount = 0
//  continue;
345  :     Jump          : label = 200
//  if ((<co0-switch>2 == 0 of (::system::Int32)))
346  :     Jump          : label = 347
//  3
347  :     LoadValue     : value = <I4, 3>
//  (<co-state> = 3)
348  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 3)
349  :     StoreCapturedVar: var = 4
//  (<co-state> = 3);
350  :     Pop           
//  try
351  :     UninstallTry  : stackPatternCount = 0
//  continue;
352  :     Jump          : label = 200
//  if ((<co-state> == 4))
353  :     Jump          : label = 354
//  <co-state>
354  :     LoadCapturedVar: var = 4(<captured><co-state>)
//  5
355  :     LoadValue     : value = <I4, 5>
//  (<co-state> == 5)
356  :     CompareValue  
//  if ((<co-state> == 5))
357  :     OpNot         : type = Bool
//  if ((<co-state> == 5))
358  :     JumpIf        : label = 412
//  <state>stateMachineObject
359  :     LoadCapturedVar: var = 8(<captured><state>stateMachineObject)
//  <state>stateMachineObject.stateMachineInput
360  :     GetProperty   : propertyInfo = stateMachineInput<system::StateMachine>
//  var <switch>0 : ::system::Int32 = <state>stateMachineObject.stateMachineInput;
361  :     StoreLocalVar : var = 3(<switch>0)
//  <switch>0
362  :     LoadLocalVar  : var = 3(<switch>0)
//  0
363  :     LoadValue     : value = <I4, 0>
//  (<switch>0 == 0 of (::system::Int32))
364  :     CompareValue  
//  if ((<switch>0 == 0 of (::system::Int32)))
365  :     OpNot         : type = Bool
//  if ((<switch>0 == 0 of (::system::Int32)))
366  :     JumpIf        : label = 382
//  1
367  :     LoadValue     : value = <I4, 1>
//  (-1)
368  :     OpNegative    : type = I4
//  (<state>stateMachineObject.stateMachineInput = (-1))
369  :     Duplicate     : stackPatternCount = 0
//  <state>stateMachineObject
370  :     LoadCapturedVar: var = 8(<captured><state>stateMachineObject)
//  (<state>stateMachineObject.stateMachineInput = (-1))
371  :     SetProperty   : propertyInfo = stateMachineInput<system::StateMachine>
//  (<state>stateMachineObject.stateMachineInput = (-1));
372  :     Pop           
//  ""
373  :     LoadValue     : value = <Bool, >
//  s
374  :     LoadGlobalVar : var = 0(s)
//  ("" & s)
375  :     OpConcat      
//  "[A]"
376  :     LoadValue     : value = <Bool, [A]>
//  (("" & s) & "[A]")
377  :     OpConcat      
//  (s = (("" & s) & "[A]"))
378  :     Duplicate     : stackPatternCount = 0
//  (s = (("" & s) & "[A]"))
379  :     StoreGlobalVar: var = 0(s)
//  (s = (("" & s) & "[A]"));
380  :     Pop           
//  if ((<switch>0 == 0 of (::system::Int32)))
381  :     Jump          : label = 382
//  <state>stateMachineObject
382  :     LoadCapturedVar: var = 8(<captured><state>stateMachineObject)
//  <state>stateMachineObject.stateMachineInput
383  :     GetProperty   : propertyInfo = stateMachineInput<system::StateMachine>
//  1
384  :     LoadValue     : value = <I4, 1>
//  (-1)
385  :     OpNegative    : type = I4
//  (<state>stateMachineObject.stateMachineInput == (-1))
386  :     CompareValue  
//  if ((<state>stateMachineObject.stateMachineInput == (-1)))
387  :     OpNot         : type = Bool
//  if ((<state>stateMachineObject.stateMachineInput == (-1)))
388  :     JumpIf        : label = 405
//  Waiting
389  :     LoadValue     : value = <enum: 0>
//  SetStatus(Waiting)
390  :     InvokeWithContext: func = 7(<method:SetStatus<system::Coroutine>(7)> in SMSwitchP1::<state>CreateCoroutine), stackPatternCount = 1
//  SetStatus(Waiting);
391  :     Pop           
//  <co-state>
392  :     LoadCapturedVar: var = 4(<captured><co-state>)
//  (<co-state-before-pause> = <co-state>)
393  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = <co-state>)
394  :     StoreCapturedVar: var = 5
//  (<co-state-before-pause> = <co-state>);
395  :     Pop           
//  6
396  :     LoadValue     : value = <I4, 6>
//  (<co-state> = 6)
397  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 6)
398  :     StoreCapturedVar: var = 4
//  (<co-state> = 6);
399  :     Pop           
//  try
400  :     UninstallTry  : stackPatternCount = 0
//  try
401  :     UninstallTry  : stackPatternCount = 0
//  return;
402  :     LoadValue     : value = <null>
//  return;
403  :     Return        
//  if ((<state>stateMachineObject.stateMachineInput == (-1)))
404  :     Jump          : label = 405
//  6
405  :     LoadValue     : value = <I4, 6>
//  (<co-state> = 6)
406  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 6)
407  :     StoreCapturedVar: var = 4
//  (<co-state> = 6);
408  :     Pop           
//  try
409  :     UninstallTry  : stackPatternCount = 0
//  continue;
410  :     Jump          : label = 200
//  if ((<co-state> == 5))
411  :     Jump          : label = 412
//  <co-state>
412  :     LoadCapturedVar: var = 4(<captured><co-state>)
//  6
413  :     LoadValue     : value = <I4, 6>
//  (<co-state> == 6)
414  :     CompareValue  
//  if ((<co-state> == 6))
415  :     OpNot         : type = Bool
//  if ((<co-state> == 6))
416  :     JumpIf        : label = 461
//  <state>stateMachineObject
417  :     LoadCapturedVar: var = 8(<captured><state>stateMachineObject)
//  <state>stateMachineObject.stateMachineInput
418  :     GetProperty   : propertyInfo = stateMachineInput<system::StateMachine>
//  var <switch>1 : ::system::Int32 = <state>stateMachineObject.stateMachineInput;
419  :     StoreLocalVar : var = 4(<switch>1)
//  <switch>1
420  :     LoadLocalVar  : var = 4(<switch>1)
//  1
421  :     LoadValue     : value = <I4, 1>
//  (<switch>1 == 1 of (::system::Int32))
422  :     CompareValue  
//  if ((<switch>1 == 1 of (::system::Int32)))
423  :     OpNot         : type = Bool
//  if ((<switch>1 == 1 of (::system::Int32)))
424  :     JumpIf        : label = 440
//  1
425  :     LoadValue     : value = <I4, 1>
//  (-1)
426  :     OpNegative    : type = I4
//  (<state>stateMachineObject.stateMachineInput = (-1))
427  :     Duplicate     : stackPatternCount = 0
//  <state>stateMachineObject
428  :     LoadCapturedVar: var = 8(<captured><state>stateMachineObject)
//  (<state>stateMachineObject.stateMachineInput = (-1))
429  :     SetProperty   : propertyInfo = stateMachineInput<system::StateMachine>
//  (<state>stateMachineObject.stateMachineInput = (-1));
430  :     Pop           
//  ""
431  :     LoadValue     : value = <Bool, >
//  s
432  :     LoadGlobalVar : var = 0(s)
//  ("" & s)
433  :     OpConcat      
//  "[B]"
434  :     LoadValue     : value = <Bool, [B]>
//  (("" & s) & "[B]")
435  :     OpConcat      
//  (s = (("" & s) & "[B]"))
436  :     Duplicate     : stackPatternCount = 0
//  (s = (("" & s) & "[B]"))
437  :     StoreGlobalVar: var = 0(s)
//  (s = (("" & s) & "[B]"));
438  :     Pop           
//  if ((<switch>1 == 1 of (::system::Int32)))
439  :     Jump          : label = 440
//  ""
440  :     LoadValue     : value = <Bool, >
//  s
441  :     LoadGlobalVar : var = 0(s)
//  ("" & s)
442  :     OpConcat      
//  "."
443  :     LoadValue     : value = <Bool, .>
//  (("" & s) & ".")
444  :     OpConcat      
//  (s = (("" & s) & "."))
445  :     Duplicate     : stackPatternCount = 0
//  (s = (("" & s) & "."))
446  :     StoreGlobalVar: var = 0(s)
//  (s = (("" & s) & "."));
447  :     Pop           
//  7
448  :     LoadValue     : value = <I4, 7>
//  (<co-state> = 7)
449  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 7)
450  :     StoreCapturedVar: var = 4
//  (<co-state> = 7);
451  :     Pop           
//  try
452  :     UninstallTry  : stackPatternCount = 0
//  continue;
453  :     Jump          : label = 200
//  3
454  :     LoadValue     : value = <I4, 3>
//  (<co-state> = 3)
455  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 3)
456  :     StoreCapturedVar: var = 4
//  (<co-state> = 3);
457  :     Pop           
//  try
458  :     UninstallTry  : stackPatternCount = 0
//  continue;
459  :     Jump          : label = 200
//  if ((<co-state> == 6))
460  :     Jump          : label = 461
//  try
461  :     UninstallTry  : stackPatternCount = 0
//  try
462  :     Jump          : label = 474
//  try
463  :     LoadException 
//  try
464  :     StoreLocalVar : var = 5(<catch><co-ex>)
//  <co-ex>
465  :     LoadLocalVar  : var = 5(<catch><co-ex>)
//  (<co-tempexvar0>ex = <co-ex>)
466  :     Duplicate     : stackPatternCount = 0
//  (<co-tempexvar0>ex = <co-ex>)
467  :     StoreCapturedVar: var = 0
//  (<co-tempexvar0>ex = <co-ex>);
468  :     Pop           
//  2
469  :     LoadValue     : value = <I4, 2>
//  (<co-state> = 2)
470  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 2)
471  :     StoreCapturedVar: var = 4
//  (<co-state> = 2);
472  :     Pop           
//  continue;
473  :     Jump          : label = 200
//  while (true)
474  :     Jump          : label = 200
//  try
475  :     UninstallTry  : stackPatternCount = 0
//  try
476  :     Jump          : label = 491
//  try
477  :     LoadException 
//  try
478  :     StoreLocalVar : var = 6(<catch><co-ex>)
//  <co-ex>
479  :     LoadLocalVar  : var = 6(<catch><co-ex>)
//  SetFailure(<co-ex>)
480  :     InvokeWithContext: func = 6(<method:SetFailure<system::Coroutine>(6)> in SMSwitchP1::<state>CreateCoroutine), stackPatternCount = 1
//  SetFailure(<co-ex>);
481  :     Pop           
//  Stopped
482  :     LoadValue     : value = <enum: 2>
//  SetStatus(Stopped)
483  :     InvokeWithContext: func = 7(<method:SetStatus<system::Coroutine>(7)> in SMSwitchP1::<state>CreateCoroutine), stackPatternCount = 1
//  SetStatus(Stopped);
484  :     Pop           
//  <raise-exception>
485  :     LoadLocalVar  : var = 0(<raise-exception>)
//  if (<raise-exception>)
486  :     OpNot         : type = Bool
//  if (<raise-exception>)
487  :     JumpIf        : label = 491
//  raise;
488  :     LoadLocalVar  : var = 6(<catch><co-ex>)
//  raise;
489  :     RaiseException
//  if (<raise-exception>)
490  :     Jump          : label = 491
//  func Resume(<raise-exception> : ::system::Boolean, <coroutine-output> : ::system::CoroutineResult^) : (::system::Void)
491  :     LoadValue     : value = <null>
//  func Resume(<raise-exception> : ::system::Boolean, <coroutine-output> : ::system::CoroutineResult^) : (::system::Void)
492  :     Return        
//  new ()
493  :     LoadCapturedVar: var = 0(<captured-this>0)
//  new ()
494  :     InvokeBaseCtor: methodInfo = <system::StateMachine>, stackPatternCount = 0
//  new ()
495  :     Pop           
//  new ()
496  :     LoadValue     : value = <null>
//  new ()
497  :     Return        
//  new (SMSwitchP1^)()
498  :     LoadValue     : value = <null>
//  new (SMSwitchP1^)()
499  :     InvokeMethod  : methodInfo = <SMSwitchP1>, stackPatternCount = 0
//  var sm = new (SMSwitchP1^)();
500  :     StoreLocalVar : var = 0(sm)
//  try
501  :     InstallTry    : label = 510
//  sm
502  :     LoadLocalVar  : var = 0(sm)
//  sm.A()
503  :     InvokeMethod  : methodInfo = A<SMSwitchP1>, stackPatternCount = 0
//  sm.A();
504  :     Pop           
//  sm
505  :     LoadLocalVar  : var = 0(sm)
//  sm.B()
506  :     InvokeMethod  : methodInfo = B<SMSwitchP1>, stackPatternCount = 0
//  sm.B();
507  :     Pop           
//  try
508  :     UninstallTry  : stackPatternCount = 0
//  try
509  :     Jump          : label = 520
//  try
510  :     LoadException 
//  try
511  :     StoreLocalVar : var = 1(<catch>ex)
//  ""
512  :     LoadValue     : value = <Bool, >
//  s
513  :     LoadGlobalVar : var = 0(s)
//  ("" & s)
514  :     OpConcat      
//  "!"
515  :     LoadValue     : value = <Bool, !>
//  (("" & s) & "!")
516  :     OpConcat      
//  (s = (("" & s) & "!"))
517  :     Duplicate     : stackPatternCount = 0
//  (s = (("" & s) & "!"))
518  :     StoreGlobalVar: var = 0(s)
//  (s = (("" & s) & "!"));
519  :     Pop           
//  s
520  :     LoadGlobalVar : var = 0(s)
//  return s;
521  :     Return        
//  func main() : (string)
522  :     LoadValue     : value = <null>
//  func main() : (string)
523  :     Return        
