========================================================
Global Variables:
========================================================

========================================================
Functions:
========================================================
Fib (2 .. 20)
    Arguments:
        n
    Captured Variables:
    Local Variables:

main (21 .. 50)
    Arguments:
    Captured Variables:
    Local Variables:

<initialize> (0 .. 1)
    Arguments:
    Captured Variables:
    Local Variables:

========================================================
Instructions:
========================================================
0    :     LoadValue     : value = <null>
1    :     Return        
//  n
2    :     LoadLocalVar  : var = 0(n)
//  2
3    :     LoadValue     : value = <I4, 2>
//  (n <= 2)
4    :     CompareLiteral: type = I4
//  (n <= 2)
5    :     OpLE          
//  (n <= 2) ? 1 : (Fib((n - 1)) + Fib((n - 2)))
6    :     JumpIf        : label = 17
//  n
7    :     LoadLocalVar  : var = 0(n)
//  1
8    :     LoadValue     : value = <I4, 1>
//  (n - 1)
9    :     OpSub         : type = I4
//  Fib((n - 1))
10   :     Invoke        : func = 0(Fib), stackPatternCount = 1
//  n
11   :     LoadLocalVar  : var = 0(n)
//  2
12   :     LoadValue     : value = <I4, 2>
//  (n - 2)
13   :     OpSub         : type = I4
//  Fib((n - 2))
14   :     Invoke        : func = 0(Fib), stackPatternCount = 1
//  (Fib((n - 1)) + Fib((n - 2)))
15   :     OpAdd         : type = I4
//  (n <= 2) ? 1 : (Fib((n - 1)) + Fib((n - 2)))
16   :     Jump          : label = 18
//  1
17   :     LoadValue     : value = <I4, 1>
//  return (n <= 2) ? 1 : (Fib((n - 1)) + Fib((n - 2)));
18   :     Return        
//  func Fib(n : int) : (int)
19   :     LoadValue     : value = <null>
//  func Fib(n : int) : (int)
20   :     Return        
//  1
21   :     LoadValue     : value = <I4, 1>
//  Fib(1)
22   :     Invoke        : func = 0(Fib), stackPatternCount = 1
//  Fib(1)
23   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  ", "
24   :     LoadValue     : value = <String, , >
//  (Fib(1) & ", ")
25   :     OpConcat      
//  2
26   :     LoadValue     : value = <I4, 2>
//  Fib(2)
27   :     Invoke        : func = 0(Fib), stackPatternCount = 1
//  Fib(2)
28   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  ((Fib(1) & ", ") & Fib(2))
29   :     OpConcat      
//  ", "
30   :     LoadValue     : value = <String, , >
//  (((Fib(1) & ", ") & Fib(2)) & ", ")
31   :     OpConcat      
//  3
32   :     LoadValue     : value = <I4, 3>
//  Fib(3)
33   :     Invoke        : func = 0(Fib), stackPatternCount = 1
//  Fib(3)
34   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  ((((Fib(1) & ", ") & Fib(2)) & ", ") & Fib(3))
35   :     OpConcat      
//  ", "
36   :     LoadValue     : value = <String, , >
//  (((((Fib(1) & ", ") & Fib(2)) & ", ") & Fib(3)) & ", ")
37   :     OpConcat      
//  4
38   :     LoadValue     : value = <I4, 4>
//  Fib(4)
39   :     Invoke        : func = 0(Fib), stackPatternCount = 1
//  Fib(4)
40   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  ((((((Fib(1) & ", ") & Fib(2)) & ", ") & Fib(3)) & ", ") & Fib(4))
41   :     OpConcat      
//  ", "
42   :     LoadValue     : value = <String, , >
//  (((((((Fib(1) & ", ") & Fib(2)) & ", ") & Fib(3)) & ", ") & Fib(4)) & ", ")
43   :     OpConcat      
//  5
44   :     LoadValue     : value = <I4, 5>
//  Fib(5)
45   :     Invoke        : func = 0(Fib), stackPatternCount = 1
//  Fib(5)
46   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  ((((((((Fib(1) & ", ") & Fib(2)) & ", ") & Fib(3)) & ", ") & Fib(4)) & ", ") & Fib(5))
47   :     OpConcat      
//  return ((((((((Fib(1) & ", ") & Fib(2)) & ", ") & Fib(3)) & ", ") & Fib(4)) & ", ") & Fib(5));
48   :     Return        
//  func main() : (string)
49   :     LoadValue     : value = <null>
//  func main() : (string)
50   :     Return        
