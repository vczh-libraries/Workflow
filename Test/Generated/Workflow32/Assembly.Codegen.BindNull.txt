========================================================
Global Variables:
========================================================
s

========================================================
Functions:
========================================================
A::Getb (4 .. 8)
    Arguments:
    Captured Variables:
        <captured-this>0
    Local Variables:

A::Setb (9 .. 26)
    Arguments:
        <value>
    Captured Variables:
        <captured-this>0
    Local Variables:

A::#ctor (27 .. 31)
    Arguments:
    Captured Variables:
        <captured-this>0
    Local Variables:

B::Getc (32 .. 36)
    Arguments:
    Captured Variables:
        <captured-this>0
    Local Variables:

B::Setc (37 .. 54)
    Arguments:
        <value>
    Captured Variables:
        <captured-this>0
    Local Variables:

B::#ctor (55 .. 59)
    Arguments:
    Captured Variables:
        <captured-this>0
    Local Variables:

C::Getx (60 .. 64)
    Arguments:
    Captured Variables:
        <captured-this>0
    Local Variables:

C::Setx (65 .. 82)
    Arguments:
        <value>
    Captured Variables:
        <captured-this>0
    Local Variables:

C::#ctor (83 .. 87)
    Arguments:
    Captured Variables:
        <captured-this>0
    Local Variables:

main (88 .. 161)
    Arguments:
    Captured Variables:
    Local Variables:
        a
        subscription

<initialize> (0 .. 3)
    Arguments:
    Captured Variables:
    Local Variables:

<method:<bind-activator><system::Subscription>(11)> in main (162 .. 175)
    Arguments:
    Captured Variables:
        <captured><bind-cache>0
        <captured><bind-cache>1
        <captured><bind-cache>2
        <captured><bind-handler>0_0
        <captured><bind-handler>1_0
        <captured><bind-handler>2_0
        <captured><bind-opened>
        <captured><bind-closed>
        <captured>a
        <captured-this>0
    Local Variables:
        <bind-activator-result>

<method:<bind-callback>0_0<system::Subscription>(12)> in main (176 .. 251)
    Arguments:
    Captured Variables:
        <captured><bind-cache>0
        <captured><bind-cache>1
        <captured><bind-cache>2
        <captured><bind-handler>0_0
        <captured><bind-handler>1_0
        <captured><bind-handler>2_0
        <captured><bind-opened>
        <captured><bind-closed>
        <captured>a
        <captured-this>0
    Local Variables:

<method:<bind-callback>1_0<system::Subscription>(13)> in main (252 .. 291)
    Arguments:
    Captured Variables:
        <captured><bind-cache>0
        <captured><bind-cache>1
        <captured><bind-cache>2
        <captured><bind-handler>0_0
        <captured><bind-handler>1_0
        <captured><bind-handler>2_0
        <captured><bind-opened>
        <captured><bind-closed>
        <captured>a
        <captured-this>0
    Local Variables:

<method:<bind-callback>2_0<system::Subscription>(14)> in main (292 .. 295)
    Arguments:
    Captured Variables:
        <captured><bind-cache>0
        <captured><bind-cache>1
        <captured><bind-cache>2
        <captured><bind-handler>0_0
        <captured><bind-handler>1_0
        <captured><bind-handler>2_0
        <captured><bind-opened>
        <captured><bind-closed>
        <captured>a
        <captured-this>0
    Local Variables:

<method:Open<system::Subscription>(19)> in main (296 .. 372)
    Arguments:
    Captured Variables:
        <captured><bind-cache>0
        <captured><bind-cache>1
        <captured><bind-cache>2
        <captured><bind-handler>0_0
        <captured><bind-handler>1_0
        <captured><bind-handler>2_0
        <captured><bind-opened>
        <captured><bind-closed>
        <captured>a
        <captured-this>0
    Local Variables:

<method:Update<system::Subscription>(20)> in main (373 .. 387)
    Arguments:
    Captured Variables:
        <captured><bind-cache>0
        <captured><bind-cache>1
        <captured><bind-cache>2
        <captured><bind-handler>0_0
        <captured><bind-handler>1_0
        <captured><bind-handler>2_0
        <captured><bind-opened>
        <captured><bind-closed>
        <captured>a
        <captured-this>0
    Local Variables:

<method:Close<system::Subscription>(21)> in main (388 .. 471)
    Arguments:
    Captured Variables:
        <captured><bind-cache>0
        <captured><bind-cache>1
        <captured><bind-cache>2
        <captured><bind-handler>0_0
        <captured><bind-handler>1_0
        <captured><bind-handler>2_0
        <captured><bind-opened>
        <captured><bind-closed>
        <captured>a
        <captured-this>0
    Local Variables:

<lambda:(18)> in main (472 .. 484)
    Arguments:
        value
    Captured Variables:
    Local Variables:

========================================================
Instructions:
========================================================
//  ""
0    :     LoadValue     : value = <Bool, >
//  var s = "";
1    :     StoreGlobalVar: var = 0(s)
2    :     LoadValue     : value = <null>
3    :     Return        
//  <prop>b
4    :     LoadCapturedVar: var = 0(<captured-this>0)
//  <prop>b
5    :     GetProperty   : propertyInfo = <prop>b<A>
//  return <prop>b;
6    :     Return        
//  func Getb() : (B^)
7    :     LoadValue     : value = <null>
//  func Getb() : (B^)
8    :     Return        
//  <prop>b
9    :     LoadCapturedVar: var = 0(<captured-this>0)
//  <prop>b
10   :     GetProperty   : propertyInfo = <prop>b<A>
//  <value>
11   :     LoadLocalVar  : var = 0(<value>)
//  (<prop>b != <value>)
12   :     CompareReference
//  (<prop>b != <value>)
13   :     OpNot         : type = Bool
//  if ((<prop>b != <value>))
14   :     OpNot         : type = Bool
//  if ((<prop>b != <value>))
15   :     JumpIf        : label = 25
//  <value>
16   :     LoadLocalVar  : var = 0(<value>)
//  (<prop>b = <value>)
17   :     Duplicate     : stackPatternCount = 0
//  (<prop>b = <value>)
18   :     LoadCapturedVar: var = 0(<captured-this>0)
//  (<prop>b = <value>)
19   :     SetProperty   : propertyInfo = <prop>b<A>
//  (<prop>b = <value>);
20   :     Pop           
//  bChanged()
21   :     LoadCapturedVar: var = 0(<captured-this>0)
//  bChanged()
22   :     InvokeEvent   : eventInfo = bChanged<A>, stackPatternCount = 0
//  bChanged();
23   :     Pop           
//  if ((<prop>b != <value>))
24   :     Jump          : label = 25
//  func Setb(<value> : B^) : (void)
25   :     LoadValue     : value = <null>
//  func Setb(<value> : B^) : (void)
26   :     Return        
//  null
27   :     LoadValue     : value = <null>
//  var <prop>b : B^ = null;
28   :     LoadCapturedVar: var = 0(<captured-this>0)
//  var <prop>b : B^ = null;
29   :     SetProperty   : propertyInfo = <prop>b<A>
//  new ()
30   :     LoadValue     : value = <null>
//  new ()
31   :     Return        
//  <prop>c
32   :     LoadCapturedVar: var = 0(<captured-this>0)
//  <prop>c
33   :     GetProperty   : propertyInfo = <prop>c<B>
//  return <prop>c;
34   :     Return        
//  func Getc() : (C^)
35   :     LoadValue     : value = <null>
//  func Getc() : (C^)
36   :     Return        
//  <prop>c
37   :     LoadCapturedVar: var = 0(<captured-this>0)
//  <prop>c
38   :     GetProperty   : propertyInfo = <prop>c<B>
//  <value>
39   :     LoadLocalVar  : var = 0(<value>)
//  (<prop>c != <value>)
40   :     CompareReference
//  (<prop>c != <value>)
41   :     OpNot         : type = Bool
//  if ((<prop>c != <value>))
42   :     OpNot         : type = Bool
//  if ((<prop>c != <value>))
43   :     JumpIf        : label = 53
//  <value>
44   :     LoadLocalVar  : var = 0(<value>)
//  (<prop>c = <value>)
45   :     Duplicate     : stackPatternCount = 0
//  (<prop>c = <value>)
46   :     LoadCapturedVar: var = 0(<captured-this>0)
//  (<prop>c = <value>)
47   :     SetProperty   : propertyInfo = <prop>c<B>
//  (<prop>c = <value>);
48   :     Pop           
//  cChanged()
49   :     LoadCapturedVar: var = 0(<captured-this>0)
//  cChanged()
50   :     InvokeEvent   : eventInfo = cChanged<B>, stackPatternCount = 0
//  cChanged();
51   :     Pop           
//  if ((<prop>c != <value>))
52   :     Jump          : label = 53
//  func Setc(<value> : C^) : (void)
53   :     LoadValue     : value = <null>
//  func Setc(<value> : C^) : (void)
54   :     Return        
//  null
55   :     LoadValue     : value = <null>
//  var <prop>c : C^ = null;
56   :     LoadCapturedVar: var = 0(<captured-this>0)
//  var <prop>c : C^ = null;
57   :     SetProperty   : propertyInfo = <prop>c<B>
//  new ()
58   :     LoadValue     : value = <null>
//  new ()
59   :     Return        
//  <prop>x
60   :     LoadCapturedVar: var = 0(<captured-this>0)
//  <prop>x
61   :     GetProperty   : propertyInfo = <prop>x<C>
//  return <prop>x;
62   :     Return        
//  func Getx() : (int)
63   :     LoadValue     : value = <null>
//  func Getx() : (int)
64   :     Return        
//  <prop>x
65   :     LoadCapturedVar: var = 0(<captured-this>0)
//  <prop>x
66   :     GetProperty   : propertyInfo = <prop>x<C>
//  <value>
67   :     LoadLocalVar  : var = 0(<value>)
//  (<prop>x != <value>)
68   :     CompareValue  
//  (<prop>x != <value>)
69   :     OpNot         : type = Bool
//  if ((<prop>x != <value>))
70   :     OpNot         : type = Bool
//  if ((<prop>x != <value>))
71   :     JumpIf        : label = 81
//  <value>
72   :     LoadLocalVar  : var = 0(<value>)
//  (<prop>x = <value>)
73   :     Duplicate     : stackPatternCount = 0
//  (<prop>x = <value>)
74   :     LoadCapturedVar: var = 0(<captured-this>0)
//  (<prop>x = <value>)
75   :     SetProperty   : propertyInfo = <prop>x<C>
//  (<prop>x = <value>);
76   :     Pop           
//  xChanged()
77   :     LoadCapturedVar: var = 0(<captured-this>0)
//  xChanged()
78   :     InvokeEvent   : eventInfo = xChanged<C>, stackPatternCount = 0
//  xChanged();
79   :     Pop           
//  if ((<prop>x != <value>))
80   :     Jump          : label = 81
//  func Setx(<value> : int) : (void)
81   :     LoadValue     : value = <null>
//  func Setx(<value> : int) : (void)
82   :     Return        
//  0
83   :     LoadValue     : value = <I4, 0>
//  var <prop>x : int = 0;
84   :     LoadCapturedVar: var = 0(<captured-this>0)
//  var <prop>x : int = 0;
85   :     SetProperty   : propertyInfo = <prop>x<C>
//  new ()
86   :     LoadValue     : value = <null>
//  new ()
87   :     Return        
//  new (A^)()
88   :     LoadValue     : value = <null>
//  new (A^)()
89   :     InvokeMethod  : methodInfo = <A>, stackPatternCount = 0
//  var a = new (A^)();
90   :     StoreLocalVar : var = 0(a)
//  null
91   :     LoadValue     : value = <null>
//  null
92   :     LoadValue     : value = <null>
//  null
93   :     LoadValue     : value = <null>
//  null
94   :     LoadValue     : value = <null>
//  null
95   :     LoadValue     : value = <null>
//  null
96   :     LoadValue     : value = <null>
//  false
97   :     LoadValue     : value = <Bool, false>
//  false
98   :     LoadValue     : value = <Bool, false>
//  new (::system::Subscription^)
99   :     LoadLocalVar  : var = 0(a)
//  new (::system::Subscription^)
100  :     LoadValue     : value = <null>
//  new (::system::Subscription^)
101  :     CreateClosureContext: stackPatternCount = 10
//  new (::system::Subscription^)
102  :     LoadMethodInfo: methodInfo = Open<system::Subscription>
//  func Open() : (::system::Boolean)
103  :     LoadFunction  : func = 15(<method:Open<system::Subscription>(19)> in main)
//  new (::system::Subscription^)
104  :     LoadMethodInfo: methodInfo = Update<system::Subscription>
//  func Update() : (::system::Boolean)
105  :     LoadFunction  : func = 16(<method:Update<system::Subscription>(20)> in main)
//  new (::system::Subscription^)
106  :     LoadMethodInfo: methodInfo = Close<system::Subscription>
//  func Close() : (::system::Boolean)
107  :     LoadFunction  : func = 17(<method:Close<system::Subscription>(21)> in main)
//  new (::system::Subscription^)
108  :     CreateInterface: methodInfo = <system::Subscription>, stackPatternCount = 6
//  var subscription = new (::system::Subscription^)
109  :     StoreLocalVar : var = 1(subscription)
//  subscription
110  :     LoadLocalVar  : var = 1(subscription)
//  subscription.Open()
111  :     InvokeMethod  : methodInfo = Open<system::Subscription>, stackPatternCount = 0
//  subscription.Open();
112  :     Pop           
//  subscription
113  :     LoadLocalVar  : var = 1(subscription)
//  func (value : object) : (void)
114  :     CreateClosureContext: stackPatternCount = 0
//  func (value : object) : (void)
115  :     LoadFunction  : func = 18(<lambda:(18)> in main)
//  func (value : object) : (void)
116  :     CreateClosure 
//  attach(subscription.ValueChanged, func (value : object) : (void)
117  :     AttachEvent   : eventInfo = ValueChanged<system::Subscription>
//  attach(subscription.ValueChanged, func (value : object) : (void)
118  :     Pop           
//  new (B^)()
119  :     LoadValue     : value = <null>
//  new (B^)()
120  :     InvokeMethod  : methodInfo = <B>, stackPatternCount = 0
//  (a.b = new (B^)())
121  :     Duplicate     : stackPatternCount = 0
//  a
122  :     LoadLocalVar  : var = 0(a)
//  (a.b = new (B^)())
123  :     InvokeMethod  : methodInfo = Setb<A>, stackPatternCount = 1
//  (a.b = new (B^)())
124  :     Pop           
//  (a.b = new (B^)());
125  :     Pop           
//  new (C^)()
126  :     LoadValue     : value = <null>
//  new (C^)()
127  :     InvokeMethod  : methodInfo = <C>, stackPatternCount = 0
//  (a.b.c = new (C^)())
128  :     Duplicate     : stackPatternCount = 0
//  a
129  :     LoadLocalVar  : var = 0(a)
//  a.b
130  :     InvokeMethod  : methodInfo = Getb<A>, stackPatternCount = 0
//  (a.b.c = new (C^)())
131  :     InvokeMethod  : methodInfo = Setc<B>, stackPatternCount = 1
//  (a.b.c = new (C^)())
132  :     Pop           
//  (a.b.c = new (C^)());
133  :     Pop           
//  100
134  :     LoadValue     : value = <I4, 100>
//  (a.b.c.x = 100)
135  :     Duplicate     : stackPatternCount = 0
//  a
136  :     LoadLocalVar  : var = 0(a)
//  a.b
137  :     InvokeMethod  : methodInfo = Getb<A>, stackPatternCount = 0
//  a.b.c
138  :     InvokeMethod  : methodInfo = Getc<B>, stackPatternCount = 0
//  (a.b.c.x = 100)
139  :     InvokeMethod  : methodInfo = Setx<C>, stackPatternCount = 1
//  (a.b.c.x = 100)
140  :     Pop           
//  (a.b.c.x = 100);
141  :     Pop           
//  null
142  :     LoadValue     : value = <null>
//  (a.b.c = null)
143  :     Duplicate     : stackPatternCount = 0
//  a
144  :     LoadLocalVar  : var = 0(a)
//  a.b
145  :     InvokeMethod  : methodInfo = Getb<A>, stackPatternCount = 0
//  (a.b.c = null)
146  :     InvokeMethod  : methodInfo = Setc<B>, stackPatternCount = 1
//  (a.b.c = null)
147  :     Pop           
//  (a.b.c = null);
148  :     Pop           
//  null
149  :     LoadValue     : value = <null>
//  (a.b = null)
150  :     Duplicate     : stackPatternCount = 0
//  a
151  :     LoadLocalVar  : var = 0(a)
//  (a.b = null)
152  :     InvokeMethod  : methodInfo = Setb<A>, stackPatternCount = 1
//  (a.b = null)
153  :     Pop           
//  (a.b = null);
154  :     Pop           
//  subscription
155  :     LoadLocalVar  : var = 1(subscription)
//  subscription.Close()
156  :     InvokeMethod  : methodInfo = Close<system::Subscription>, stackPatternCount = 0
//  subscription.Close();
157  :     Pop           
//  s
158  :     LoadGlobalVar : var = 0(s)
//  return s;
159  :     Return        
//  func main() : (string)
160  :     LoadValue     : value = <null>
//  func main() : (string)
161  :     Return        
//  (<bind-cache>2.x ?? "*")
162  :     InstallTry    : label = 168
//  <bind-cache>2
163  :     LoadCapturedVar: var = 2(<captured><bind-cache>2)
//  <bind-cache>2.x
164  :     InvokeMethod  : methodInfo = Getx<C>, stackPatternCount = 0
//  <bind-cache>2.x
165  :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  (<bind-cache>2.x ?? "*")
166  :     UninstallTry  : stackPatternCount = 1
//  (<bind-cache>2.x ?? "*")
167  :     Jump          : label = 169
//  "*"
168  :     LoadValue     : value = <Bool, *>
//  var <bind-activator-result> = (<bind-cache>2.x ?? "*");
169  :     StoreLocalVar : var = 0(<bind-activator-result>)
//  <bind-activator-result>
170  :     LoadLocalVar  : var = 0(<bind-activator-result>)
//  ValueChanged(<bind-activator-result>)
171  :     LoadCapturedVar: var = 9(<captured-this>0)
//  ValueChanged(<bind-activator-result>)
172  :     InvokeEvent   : eventInfo = ValueChanged<system::Subscription>, stackPatternCount = 1
//  ValueChanged(<bind-activator-result>);
173  :     Pop           
//  func <bind-activator>() : (::system::Void)
174  :     LoadValue     : value = <null>
//  func <bind-activator>() : (::system::Void)
175  :     Return        
//  <bind-handler>2_0
176  :     LoadCapturedVar: var = 5(<captured><bind-handler>2_0)
//  <bind-handler>2_0 is not null
177  :     LoadValue     : value = <null>
//  <bind-handler>2_0 is not null
178  :     CompareReference
//  <bind-handler>2_0 is not null
179  :     OpNot         : type = Bool
//  if (<bind-handler>2_0 is not null)
180  :     OpNot         : type = Bool
//  if (<bind-handler>2_0 is not null)
181  :     JumpIf        : label = 191
//  <bind-cache>2
182  :     LoadCapturedVar: var = 2(<captured><bind-cache>2)
//  <bind-handler>2_0
183  :     LoadCapturedVar: var = 5(<captured><bind-handler>2_0)
//  detach(<bind-cache>2.xChanged, <bind-handler>2_0)
184  :     DetachEvent   : eventInfo = xChanged<C>
//  detach(<bind-cache>2.xChanged, <bind-handler>2_0);
185  :     Pop           
//  null
186  :     LoadValue     : value = <null>
//  (<bind-handler>2_0 = null)
187  :     Duplicate     : stackPatternCount = 0
//  (<bind-handler>2_0 = null)
188  :     StoreCapturedVar: var = 5
//  (<bind-handler>2_0 = null);
189  :     Pop           
//  if (<bind-handler>2_0 is not null)
190  :     Jump          : label = 191
//  <bind-handler>1_0
191  :     LoadCapturedVar: var = 4(<captured><bind-handler>1_0)
//  <bind-handler>1_0 is not null
192  :     LoadValue     : value = <null>
//  <bind-handler>1_0 is not null
193  :     CompareReference
//  <bind-handler>1_0 is not null
194  :     OpNot         : type = Bool
//  if (<bind-handler>1_0 is not null)
195  :     OpNot         : type = Bool
//  if (<bind-handler>1_0 is not null)
196  :     JumpIf        : label = 206
//  <bind-cache>1
197  :     LoadCapturedVar: var = 1(<captured><bind-cache>1)
//  <bind-handler>1_0
198  :     LoadCapturedVar: var = 4(<captured><bind-handler>1_0)
//  detach(<bind-cache>1.cChanged, <bind-handler>1_0)
199  :     DetachEvent   : eventInfo = cChanged<B>
//  detach(<bind-cache>1.cChanged, <bind-handler>1_0);
200  :     Pop           
//  null
201  :     LoadValue     : value = <null>
//  (<bind-handler>1_0 = null)
202  :     Duplicate     : stackPatternCount = 0
//  (<bind-handler>1_0 = null)
203  :     StoreCapturedVar: var = 4
//  (<bind-handler>1_0 = null);
204  :     Pop           
//  if (<bind-handler>1_0 is not null)
205  :     Jump          : label = 206
//  (<bind-cache>0.b ?? null of (::B^))
206  :     InstallTry    : label = 211
//  <bind-cache>0
207  :     LoadCapturedVar: var = 0(<captured><bind-cache>0)
//  <bind-cache>0.b
208  :     InvokeMethod  : methodInfo = Getb<A>, stackPatternCount = 0
//  (<bind-cache>0.b ?? null of (::B^))
209  :     UninstallTry  : stackPatternCount = 1
//  (<bind-cache>0.b ?? null of (::B^))
210  :     Jump          : label = 212
//  null
211  :     LoadValue     : value = <null>
//  (<bind-cache>1 = (<bind-cache>0.b ?? null of (::B^)))
212  :     Duplicate     : stackPatternCount = 0
//  (<bind-cache>1 = (<bind-cache>0.b ?? null of (::B^)))
213  :     StoreCapturedVar: var = 1
//  (<bind-cache>1 = (<bind-cache>0.b ?? null of (::B^)));
214  :     Pop           
//  (<bind-cache>1.c ?? null of (::C^))
215  :     InstallTry    : label = 220
//  <bind-cache>1
216  :     LoadCapturedVar: var = 1(<captured><bind-cache>1)
//  <bind-cache>1.c
217  :     InvokeMethod  : methodInfo = Getc<B>, stackPatternCount = 0
//  (<bind-cache>1.c ?? null of (::C^))
218  :     UninstallTry  : stackPatternCount = 1
//  (<bind-cache>1.c ?? null of (::C^))
219  :     Jump          : label = 221
//  null
220  :     LoadValue     : value = <null>
//  (<bind-cache>2 = (<bind-cache>1.c ?? null of (::C^)))
221  :     Duplicate     : stackPatternCount = 0
//  (<bind-cache>2 = (<bind-cache>1.c ?? null of (::C^)))
222  :     StoreCapturedVar: var = 2
//  (<bind-cache>2 = (<bind-cache>1.c ?? null of (::C^)));
223  :     Pop           
//  (attach(<bind-cache>1.cChanged, <bind-callback>1_0) ?? null)
224  :     InstallTry    : label = 232
//  <bind-cache>1
225  :     LoadCapturedVar: var = 1(<captured><bind-cache>1)
//  <bind-callback>1_0
226  :     LoadClosureContext
//  <bind-callback>1_0
227  :     LoadFunction  : func = 13(<method:<bind-callback>1_0<system::Subscription>(13)> in main)
//  <bind-callback>1_0
228  :     CreateClosure 
//  attach(<bind-cache>1.cChanged, <bind-callback>1_0)
229  :     AttachEvent   : eventInfo = cChanged<B>
//  (attach(<bind-cache>1.cChanged, <bind-callback>1_0) ?? null)
230  :     UninstallTry  : stackPatternCount = 1
//  (attach(<bind-cache>1.cChanged, <bind-callback>1_0) ?? null)
231  :     Jump          : label = 233
//  null
232  :     LoadValue     : value = <null>
//  (<bind-handler>1_0 = (attach(<bind-cache>1.cChanged, <bind-callback>1_0) ?? null))
233  :     Duplicate     : stackPatternCount = 0
//  (<bind-handler>1_0 = (attach(<bind-cache>1.cChanged, <bind-callback>1_0) ?? null))
234  :     StoreCapturedVar: var = 4
//  (<bind-handler>1_0 = (attach(<bind-cache>1.cChanged, <bind-callback>1_0) ?? null));
235  :     Pop           
//  (attach(<bind-cache>2.xChanged, <bind-callback>2_0) ?? null)
236  :     InstallTry    : label = 244
//  <bind-cache>2
237  :     LoadCapturedVar: var = 2(<captured><bind-cache>2)
//  <bind-callback>2_0
238  :     LoadClosureContext
//  <bind-callback>2_0
239  :     LoadFunction  : func = 14(<method:<bind-callback>2_0<system::Subscription>(14)> in main)
//  <bind-callback>2_0
240  :     CreateClosure 
//  attach(<bind-cache>2.xChanged, <bind-callback>2_0)
241  :     AttachEvent   : eventInfo = xChanged<C>
//  (attach(<bind-cache>2.xChanged, <bind-callback>2_0) ?? null)
242  :     UninstallTry  : stackPatternCount = 1
//  (attach(<bind-cache>2.xChanged, <bind-callback>2_0) ?? null)
243  :     Jump          : label = 245
//  null
244  :     LoadValue     : value = <null>
//  (<bind-handler>2_0 = (attach(<bind-cache>2.xChanged, <bind-callback>2_0) ?? null))
245  :     Duplicate     : stackPatternCount = 0
//  (<bind-handler>2_0 = (attach(<bind-cache>2.xChanged, <bind-callback>2_0) ?? null))
246  :     StoreCapturedVar: var = 5
//  (<bind-handler>2_0 = (attach(<bind-cache>2.xChanged, <bind-callback>2_0) ?? null));
247  :     Pop           
//  <bind-activator>()
248  :     InvokeWithContext: func = 11(<method:<bind-activator><system::Subscription>(11)> in main), stackPatternCount = 0
//  <bind-activator>();
249  :     Pop           
//  func <bind-callback>0_0() : (::system::Void)
250  :     LoadValue     : value = <null>
//  func <bind-callback>0_0() : (::system::Void)
251  :     Return        
//  <bind-handler>2_0
252  :     LoadCapturedVar: var = 5(<captured><bind-handler>2_0)
//  <bind-handler>2_0 is not null
253  :     LoadValue     : value = <null>
//  <bind-handler>2_0 is not null
254  :     CompareReference
//  <bind-handler>2_0 is not null
255  :     OpNot         : type = Bool
//  if (<bind-handler>2_0 is not null)
256  :     OpNot         : type = Bool
//  if (<bind-handler>2_0 is not null)
257  :     JumpIf        : label = 267
//  <bind-cache>2
258  :     LoadCapturedVar: var = 2(<captured><bind-cache>2)
//  <bind-handler>2_0
259  :     LoadCapturedVar: var = 5(<captured><bind-handler>2_0)
//  detach(<bind-cache>2.xChanged, <bind-handler>2_0)
260  :     DetachEvent   : eventInfo = xChanged<C>
//  detach(<bind-cache>2.xChanged, <bind-handler>2_0);
261  :     Pop           
//  null
262  :     LoadValue     : value = <null>
//  (<bind-handler>2_0 = null)
263  :     Duplicate     : stackPatternCount = 0
//  (<bind-handler>2_0 = null)
264  :     StoreCapturedVar: var = 5
//  (<bind-handler>2_0 = null);
265  :     Pop           
//  if (<bind-handler>2_0 is not null)
266  :     Jump          : label = 267
//  (<bind-cache>1.c ?? null of (::C^))
267  :     InstallTry    : label = 272
//  <bind-cache>1
268  :     LoadCapturedVar: var = 1(<captured><bind-cache>1)
//  <bind-cache>1.c
269  :     InvokeMethod  : methodInfo = Getc<B>, stackPatternCount = 0
//  (<bind-cache>1.c ?? null of (::C^))
270  :     UninstallTry  : stackPatternCount = 1
//  (<bind-cache>1.c ?? null of (::C^))
271  :     Jump          : label = 273
//  null
272  :     LoadValue     : value = <null>
//  (<bind-cache>2 = (<bind-cache>1.c ?? null of (::C^)))
273  :     Duplicate     : stackPatternCount = 0
//  (<bind-cache>2 = (<bind-cache>1.c ?? null of (::C^)))
274  :     StoreCapturedVar: var = 2
//  (<bind-cache>2 = (<bind-cache>1.c ?? null of (::C^)));
275  :     Pop           
//  (attach(<bind-cache>2.xChanged, <bind-callback>2_0) ?? null)
276  :     InstallTry    : label = 284
//  <bind-cache>2
277  :     LoadCapturedVar: var = 2(<captured><bind-cache>2)
//  <bind-callback>2_0
278  :     LoadClosureContext
//  <bind-callback>2_0
279  :     LoadFunction  : func = 14(<method:<bind-callback>2_0<system::Subscription>(14)> in main)
//  <bind-callback>2_0
280  :     CreateClosure 
//  attach(<bind-cache>2.xChanged, <bind-callback>2_0)
281  :     AttachEvent   : eventInfo = xChanged<C>
//  (attach(<bind-cache>2.xChanged, <bind-callback>2_0) ?? null)
282  :     UninstallTry  : stackPatternCount = 1
//  (attach(<bind-cache>2.xChanged, <bind-callback>2_0) ?? null)
283  :     Jump          : label = 285
//  null
284  :     LoadValue     : value = <null>
//  (<bind-handler>2_0 = (attach(<bind-cache>2.xChanged, <bind-callback>2_0) ?? null))
285  :     Duplicate     : stackPatternCount = 0
//  (<bind-handler>2_0 = (attach(<bind-cache>2.xChanged, <bind-callback>2_0) ?? null))
286  :     StoreCapturedVar: var = 5
//  (<bind-handler>2_0 = (attach(<bind-cache>2.xChanged, <bind-callback>2_0) ?? null));
287  :     Pop           
//  <bind-activator>()
288  :     InvokeWithContext: func = 11(<method:<bind-activator><system::Subscription>(11)> in main), stackPatternCount = 0
//  <bind-activator>();
289  :     Pop           
//  func <bind-callback>1_0() : (::system::Void)
290  :     LoadValue     : value = <null>
//  func <bind-callback>1_0() : (::system::Void)
291  :     Return        
//  <bind-activator>()
292  :     InvokeWithContext: func = 11(<method:<bind-activator><system::Subscription>(11)> in main), stackPatternCount = 0
//  <bind-activator>();
293  :     Pop           
//  func <bind-callback>2_0() : (::system::Void)
294  :     LoadValue     : value = <null>
//  func <bind-callback>2_0() : (::system::Void)
295  :     Return        
//  <bind-opened>
296  :     LoadCapturedVar: var = 6(<captured><bind-opened>)
//  (!<bind-opened>)
297  :     OpNot         : type = Bool
//  if ((!<bind-opened>))
298  :     OpNot         : type = Bool
//  if ((!<bind-opened>))
299  :     JumpIf        : label = 369
//  true
300  :     LoadValue     : value = <Bool, true>
//  (<bind-opened> = true)
301  :     Duplicate     : stackPatternCount = 0
//  (<bind-opened> = true)
302  :     StoreCapturedVar: var = 6
//  (<bind-opened> = true);
303  :     Pop           
//  (a ?? null of (::A^))
304  :     InstallTry    : label = 308
//  a
305  :     LoadCapturedVar: var = 8(<captured>a)
//  (a ?? null of (::A^))
306  :     UninstallTry  : stackPatternCount = 1
//  (a ?? null of (::A^))
307  :     Jump          : label = 309
//  null
308  :     LoadValue     : value = <null>
//  (<bind-cache>0 = (a ?? null of (::A^)))
309  :     Duplicate     : stackPatternCount = 0
//  (<bind-cache>0 = (a ?? null of (::A^)))
310  :     StoreCapturedVar: var = 0
//  (<bind-cache>0 = (a ?? null of (::A^)));
311  :     Pop           
//  (<bind-cache>0.b ?? null of (::B^))
312  :     InstallTry    : label = 317
//  <bind-cache>0
313  :     LoadCapturedVar: var = 0(<captured><bind-cache>0)
//  <bind-cache>0.b
314  :     InvokeMethod  : methodInfo = Getb<A>, stackPatternCount = 0
//  (<bind-cache>0.b ?? null of (::B^))
315  :     UninstallTry  : stackPatternCount = 1
//  (<bind-cache>0.b ?? null of (::B^))
316  :     Jump          : label = 318
//  null
317  :     LoadValue     : value = <null>
//  (<bind-cache>1 = (<bind-cache>0.b ?? null of (::B^)))
318  :     Duplicate     : stackPatternCount = 0
//  (<bind-cache>1 = (<bind-cache>0.b ?? null of (::B^)))
319  :     StoreCapturedVar: var = 1
//  (<bind-cache>1 = (<bind-cache>0.b ?? null of (::B^)));
320  :     Pop           
//  (<bind-cache>1.c ?? null of (::C^))
321  :     InstallTry    : label = 326
//  <bind-cache>1
322  :     LoadCapturedVar: var = 1(<captured><bind-cache>1)
//  <bind-cache>1.c
323  :     InvokeMethod  : methodInfo = Getc<B>, stackPatternCount = 0
//  (<bind-cache>1.c ?? null of (::C^))
324  :     UninstallTry  : stackPatternCount = 1
//  (<bind-cache>1.c ?? null of (::C^))
325  :     Jump          : label = 327
//  null
326  :     LoadValue     : value = <null>
//  (<bind-cache>2 = (<bind-cache>1.c ?? null of (::C^)))
327  :     Duplicate     : stackPatternCount = 0
//  (<bind-cache>2 = (<bind-cache>1.c ?? null of (::C^)))
328  :     StoreCapturedVar: var = 2
//  (<bind-cache>2 = (<bind-cache>1.c ?? null of (::C^)));
329  :     Pop           
//  (attach(<bind-cache>0.bChanged, <bind-callback>0_0) ?? null)
330  :     InstallTry    : label = 338
//  <bind-cache>0
331  :     LoadCapturedVar: var = 0(<captured><bind-cache>0)
//  <bind-callback>0_0
332  :     LoadClosureContext
//  <bind-callback>0_0
333  :     LoadFunction  : func = 12(<method:<bind-callback>0_0<system::Subscription>(12)> in main)
//  <bind-callback>0_0
334  :     CreateClosure 
//  attach(<bind-cache>0.bChanged, <bind-callback>0_0)
335  :     AttachEvent   : eventInfo = bChanged<A>
//  (attach(<bind-cache>0.bChanged, <bind-callback>0_0) ?? null)
336  :     UninstallTry  : stackPatternCount = 1
//  (attach(<bind-cache>0.bChanged, <bind-callback>0_0) ?? null)
337  :     Jump          : label = 339
//  null
338  :     LoadValue     : value = <null>
//  (<bind-handler>0_0 = (attach(<bind-cache>0.bChanged, <bind-callback>0_0) ?? null))
339  :     Duplicate     : stackPatternCount = 0
//  (<bind-handler>0_0 = (attach(<bind-cache>0.bChanged, <bind-callback>0_0) ?? null))
340  :     StoreCapturedVar: var = 3
//  (<bind-handler>0_0 = (attach(<bind-cache>0.bChanged, <bind-callback>0_0) ?? null));
341  :     Pop           
//  (attach(<bind-cache>1.cChanged, <bind-callback>1_0) ?? null)
342  :     InstallTry    : label = 350
//  <bind-cache>1
343  :     LoadCapturedVar: var = 1(<captured><bind-cache>1)
//  <bind-callback>1_0
344  :     LoadClosureContext
//  <bind-callback>1_0
345  :     LoadFunction  : func = 13(<method:<bind-callback>1_0<system::Subscription>(13)> in main)
//  <bind-callback>1_0
346  :     CreateClosure 
//  attach(<bind-cache>1.cChanged, <bind-callback>1_0)
347  :     AttachEvent   : eventInfo = cChanged<B>
//  (attach(<bind-cache>1.cChanged, <bind-callback>1_0) ?? null)
348  :     UninstallTry  : stackPatternCount = 1
//  (attach(<bind-cache>1.cChanged, <bind-callback>1_0) ?? null)
349  :     Jump          : label = 351
//  null
350  :     LoadValue     : value = <null>
//  (<bind-handler>1_0 = (attach(<bind-cache>1.cChanged, <bind-callback>1_0) ?? null))
351  :     Duplicate     : stackPatternCount = 0
//  (<bind-handler>1_0 = (attach(<bind-cache>1.cChanged, <bind-callback>1_0) ?? null))
352  :     StoreCapturedVar: var = 4
//  (<bind-handler>1_0 = (attach(<bind-cache>1.cChanged, <bind-callback>1_0) ?? null));
353  :     Pop           
//  (attach(<bind-cache>2.xChanged, <bind-callback>2_0) ?? null)
354  :     InstallTry    : label = 362
//  <bind-cache>2
355  :     LoadCapturedVar: var = 2(<captured><bind-cache>2)
//  <bind-callback>2_0
356  :     LoadClosureContext
//  <bind-callback>2_0
357  :     LoadFunction  : func = 14(<method:<bind-callback>2_0<system::Subscription>(14)> in main)
//  <bind-callback>2_0
358  :     CreateClosure 
//  attach(<bind-cache>2.xChanged, <bind-callback>2_0)
359  :     AttachEvent   : eventInfo = xChanged<C>
//  (attach(<bind-cache>2.xChanged, <bind-callback>2_0) ?? null)
360  :     UninstallTry  : stackPatternCount = 1
//  (attach(<bind-cache>2.xChanged, <bind-callback>2_0) ?? null)
361  :     Jump          : label = 363
//  null
362  :     LoadValue     : value = <null>
//  (<bind-handler>2_0 = (attach(<bind-cache>2.xChanged, <bind-callback>2_0) ?? null))
363  :     Duplicate     : stackPatternCount = 0
//  (<bind-handler>2_0 = (attach(<bind-cache>2.xChanged, <bind-callback>2_0) ?? null))
364  :     StoreCapturedVar: var = 5
//  (<bind-handler>2_0 = (attach(<bind-cache>2.xChanged, <bind-callback>2_0) ?? null));
365  :     Pop           
//  true
366  :     LoadValue     : value = <Bool, true>
//  return true;
367  :     Return        
//  if ((!<bind-opened>))
368  :     Jump          : label = 369
//  false
369  :     LoadValue     : value = <Bool, false>
//  return false;
370  :     Return        
//  func Open() : (::system::Boolean)
371  :     LoadValue     : value = <null>
//  func Open() : (::system::Boolean)
372  :     Return        
//  <bind-opened>
373  :     LoadCapturedVar: var = 6(<captured><bind-opened>)
//  <bind-closed>
374  :     LoadCapturedVar: var = 7(<captured><bind-closed>)
//  (!<bind-closed>)
375  :     OpNot         : type = Bool
//  (<bind-opened> and (!<bind-closed>))
376  :     OpAnd         : type = Bool
//  if ((<bind-opened> and (!<bind-closed>)))
377  :     OpNot         : type = Bool
//  if ((<bind-opened> and (!<bind-closed>)))
378  :     JumpIf        : label = 384
//  <bind-activator>()
379  :     InvokeWithContext: func = 11(<method:<bind-activator><system::Subscription>(11)> in main), stackPatternCount = 0
//  <bind-activator>();
380  :     Pop           
//  true
381  :     LoadValue     : value = <Bool, true>
//  return true;
382  :     Return        
//  if ((<bind-opened> and (!<bind-closed>)))
383  :     Jump          : label = 384
//  false
384  :     LoadValue     : value = <Bool, false>
//  return false;
385  :     Return        
//  func Update() : (::system::Boolean)
386  :     LoadValue     : value = <null>
//  func Update() : (::system::Boolean)
387  :     Return        
//  <bind-closed>
388  :     LoadCapturedVar: var = 7(<captured><bind-closed>)
//  (!<bind-closed>)
389  :     OpNot         : type = Bool
//  if ((!<bind-closed>))
390  :     OpNot         : type = Bool
//  if ((!<bind-closed>))
391  :     JumpIf        : label = 468
//  true
392  :     LoadValue     : value = <Bool, true>
//  (<bind-closed> = true)
393  :     Duplicate     : stackPatternCount = 0
//  (<bind-closed> = true)
394  :     StoreCapturedVar: var = 7
//  (<bind-closed> = true);
395  :     Pop           
//  <bind-handler>0_0
396  :     LoadCapturedVar: var = 3(<captured><bind-handler>0_0)
//  <bind-handler>0_0 is not null
397  :     LoadValue     : value = <null>
//  <bind-handler>0_0 is not null
398  :     CompareReference
//  <bind-handler>0_0 is not null
399  :     OpNot         : type = Bool
//  if (<bind-handler>0_0 is not null)
400  :     OpNot         : type = Bool
//  if (<bind-handler>0_0 is not null)
401  :     JumpIf        : label = 411
//  <bind-cache>0
402  :     LoadCapturedVar: var = 0(<captured><bind-cache>0)
//  <bind-handler>0_0
403  :     LoadCapturedVar: var = 3(<captured><bind-handler>0_0)
//  detach(<bind-cache>0.bChanged, <bind-handler>0_0)
404  :     DetachEvent   : eventInfo = bChanged<A>
//  detach(<bind-cache>0.bChanged, <bind-handler>0_0);
405  :     Pop           
//  null
406  :     LoadValue     : value = <null>
//  (<bind-handler>0_0 = null)
407  :     Duplicate     : stackPatternCount = 0
//  (<bind-handler>0_0 = null)
408  :     StoreCapturedVar: var = 3
//  (<bind-handler>0_0 = null);
409  :     Pop           
//  if (<bind-handler>0_0 is not null)
410  :     Jump          : label = 411
//  <bind-handler>1_0
411  :     LoadCapturedVar: var = 4(<captured><bind-handler>1_0)
//  <bind-handler>1_0 is not null
412  :     LoadValue     : value = <null>
//  <bind-handler>1_0 is not null
413  :     CompareReference
//  <bind-handler>1_0 is not null
414  :     OpNot         : type = Bool
//  if (<bind-handler>1_0 is not null)
415  :     OpNot         : type = Bool
//  if (<bind-handler>1_0 is not null)
416  :     JumpIf        : label = 426
//  <bind-cache>1
417  :     LoadCapturedVar: var = 1(<captured><bind-cache>1)
//  <bind-handler>1_0
418  :     LoadCapturedVar: var = 4(<captured><bind-handler>1_0)
//  detach(<bind-cache>1.cChanged, <bind-handler>1_0)
419  :     DetachEvent   : eventInfo = cChanged<B>
//  detach(<bind-cache>1.cChanged, <bind-handler>1_0);
420  :     Pop           
//  null
421  :     LoadValue     : value = <null>
//  (<bind-handler>1_0 = null)
422  :     Duplicate     : stackPatternCount = 0
//  (<bind-handler>1_0 = null)
423  :     StoreCapturedVar: var = 4
//  (<bind-handler>1_0 = null);
424  :     Pop           
//  if (<bind-handler>1_0 is not null)
425  :     Jump          : label = 426
//  <bind-handler>2_0
426  :     LoadCapturedVar: var = 5(<captured><bind-handler>2_0)
//  <bind-handler>2_0 is not null
427  :     LoadValue     : value = <null>
//  <bind-handler>2_0 is not null
428  :     CompareReference
//  <bind-handler>2_0 is not null
429  :     OpNot         : type = Bool
//  if (<bind-handler>2_0 is not null)
430  :     OpNot         : type = Bool
//  if (<bind-handler>2_0 is not null)
431  :     JumpIf        : label = 441
//  <bind-cache>2
432  :     LoadCapturedVar: var = 2(<captured><bind-cache>2)
//  <bind-handler>2_0
433  :     LoadCapturedVar: var = 5(<captured><bind-handler>2_0)
//  detach(<bind-cache>2.xChanged, <bind-handler>2_0)
434  :     DetachEvent   : eventInfo = xChanged<C>
//  detach(<bind-cache>2.xChanged, <bind-handler>2_0);
435  :     Pop           
//  null
436  :     LoadValue     : value = <null>
//  (<bind-handler>2_0 = null)
437  :     Duplicate     : stackPatternCount = 0
//  (<bind-handler>2_0 = null)
438  :     StoreCapturedVar: var = 5
//  (<bind-handler>2_0 = null);
439  :     Pop           
//  if (<bind-handler>2_0 is not null)
440  :     Jump          : label = 441
//  null
441  :     LoadValue     : value = <null>
//  (<bind-cache>0 = null of (::A^))
442  :     Duplicate     : stackPatternCount = 0
//  (<bind-cache>0 = null of (::A^))
443  :     StoreCapturedVar: var = 0
//  (<bind-cache>0 = null of (::A^));
444  :     Pop           
//  null
445  :     LoadValue     : value = <null>
//  (<bind-cache>1 = null of (::B^))
446  :     Duplicate     : stackPatternCount = 0
//  (<bind-cache>1 = null of (::B^))
447  :     StoreCapturedVar: var = 1
//  (<bind-cache>1 = null of (::B^));
448  :     Pop           
//  null
449  :     LoadValue     : value = <null>
//  (<bind-cache>2 = null of (::C^))
450  :     Duplicate     : stackPatternCount = 0
//  (<bind-cache>2 = null of (::C^))
451  :     StoreCapturedVar: var = 2
//  (<bind-cache>2 = null of (::C^));
452  :     Pop           
//  null
453  :     LoadValue     : value = <null>
//  (<bind-handler>0_0 = null of (::system::reflection::EventHandler^))
454  :     Duplicate     : stackPatternCount = 0
//  (<bind-handler>0_0 = null of (::system::reflection::EventHandler^))
455  :     StoreCapturedVar: var = 3
//  (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
456  :     Pop           
//  null
457  :     LoadValue     : value = <null>
//  (<bind-handler>1_0 = null of (::system::reflection::EventHandler^))
458  :     Duplicate     : stackPatternCount = 0
//  (<bind-handler>1_0 = null of (::system::reflection::EventHandler^))
459  :     StoreCapturedVar: var = 4
//  (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
460  :     Pop           
//  null
461  :     LoadValue     : value = <null>
//  (<bind-handler>2_0 = null of (::system::reflection::EventHandler^))
462  :     Duplicate     : stackPatternCount = 0
//  (<bind-handler>2_0 = null of (::system::reflection::EventHandler^))
463  :     StoreCapturedVar: var = 5
//  (<bind-handler>2_0 = null of (::system::reflection::EventHandler^));
464  :     Pop           
//  true
465  :     LoadValue     : value = <Bool, true>
//  return true;
466  :     Return        
//  if ((!<bind-closed>))
467  :     Jump          : label = 468
//  false
468  :     LoadValue     : value = <Bool, false>
//  return false;
469  :     Return        
//  func Close() : (::system::Boolean)
470  :     LoadValue     : value = <null>
//  func Close() : (::system::Boolean)
471  :     Return        
//  s
472  :     LoadGlobalVar : var = 0(s)
//  "["
473  :     LoadValue     : value = <Bool, [>
//  value
474  :     LoadLocalVar  : var = 0(value)
//  value
475  :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  ("[" & (cast (string) value))
476  :     OpConcat      
//  "]"
477  :     LoadValue     : value = <Bool, ]>
//  (("[" & (cast (string) value)) & "]")
478  :     OpConcat      
//  (s & (("[" & (cast (string) value)) & "]"))
479  :     OpConcat      
//  (s = (s & (("[" & (cast (string) value)) & "]")))
480  :     Duplicate     : stackPatternCount = 0
//  (s = (s & (("[" & (cast (string) value)) & "]")))
481  :     StoreGlobalVar: var = 0(s)
//  (s = (s & (("[" & (cast (string) value)) & "]")));
482  :     Pop           
//  func (value : object) : (void)
483  :     LoadValue     : value = <null>
//  func (value : object) : (void)
484  :     Return        
