========================================================
Global Variables:
========================================================
s

========================================================
Functions:
========================================================
main (4 .. 61)
    Arguments:
    Captured Variables:
    Local Variables:
        coroutine
        i

<initialize> (0 .. 3)
    Arguments:
    Captured Variables:
    Local Variables:

<method:SetFailure<system::Coroutine>(2)> in main (62 .. 67)
    Arguments:
        <value>
    Captured Variables:
        <captured><co0-switch>0
        <captured><co1-for-begin>i
        <captured><co2-for-end>i
        <captured><co3>i
        <captured><co4>ex
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured-this>0
    Local Variables:

<method:SetStatus<system::Coroutine>(3)> in main (68 .. 73)
    Arguments:
        <value>
    Captured Variables:
        <captured><co0-switch>0
        <captured><co1-for-begin>i
        <captured><co2-for-end>i
        <captured><co3>i
        <captured><co4>ex
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured-this>0
    Local Variables:

<method:GetFailure<system::Coroutine>(6)> in main (74 .. 77)
    Arguments:
    Captured Variables:
        <captured><co0-switch>0
        <captured><co1-for-begin>i
        <captured><co2-for-end>i
        <captured><co3>i
        <captured><co4>ex
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured-this>0
    Local Variables:

<method:GetStatus<system::Coroutine>(7)> in main (78 .. 81)
    Arguments:
    Captured Variables:
        <captured><co0-switch>0
        <captured><co1-for-begin>i
        <captured><co2-for-end>i
        <captured><co3>i
        <captured><co4>ex
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured-this>0
    Local Variables:

<method:Resume<system::Coroutine>(8)> in main (82 .. 451)
    Arguments:
        <raise-exception>
        <coroutine-output>
    Captured Variables:
        <captured><co0-switch>0
        <captured><co1-for-begin>i
        <captured><co2-for-end>i
        <captured><co3>i
        <captured><co4>ex
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured-this>0
    Local Variables:
        <anonymous-range-test>
        <catch><co-ex>
        <catch><co-ex>
        <catch><co-ex>

========================================================
Instructions:
========================================================
//  ""
0    :     LoadValue     : value = <String, >
//  var s = "";
1    :     StoreGlobalVar: var = 0(s)
2    :     LoadValue     : value = <null>
3    :     Return        
//  0
4    :     LoadValue     : value = <I4, 0>
//  0
5    :     LoadValue     : value = <I4, 0>
//  0
6    :     LoadValue     : value = <I4, 0>
//  0
7    :     LoadValue     : value = <I4, 0>
//  null
8    :     LoadValue     : value = <null>
//  0
9    :     LoadValue     : value = <I4, 0>
//  1
10   :     LoadValue     : value = <I4, 1>
//  (-1)
11   :     OpNegative    : type = I4
//  null
12   :     LoadValue     : value = <null>
//  Waiting
13   :     LoadValue     : value = <enum: 0>
//  new (::system::Coroutine^)
14   :     LoadValue     : value = <null>
//  new (::system::Coroutine^)
15   :     CreateClosureContext: stackPatternCount = 10
//  new (::system::Coroutine^)
16   :     LoadMethodInfo: methodInfo = GetFailure<system::Coroutine>
//  func GetFailure() : (::system::Exception^)
17   :     LoadFunction  : func = 4(<method:GetFailure<system::Coroutine>(6)> in main)
//  new (::system::Coroutine^)
18   :     LoadMethodInfo: methodInfo = GetStatus<system::Coroutine>
//  func GetStatus() : (::system::CoroutineStatus)
19   :     LoadFunction  : func = 5(<method:GetStatus<system::Coroutine>(7)> in main)
//  new (::system::Coroutine^)
20   :     LoadMethodInfo: methodInfo = Resume<system::Coroutine>
//  func Resume(<raise-exception> : ::system::Boolean, <coroutine-output> : ::system::CoroutineResult^) : (::system::Void)
21   :     LoadFunction  : func = 6(<method:Resume<system::Coroutine>(8)> in main)
//  new (::system::Coroutine^)
22   :     CreateInterface: methodInfo = <system::Coroutine>, stackPatternCount = 6
//  var coroutine = new (::system::Coroutine^)
23   :     StoreLocalVar : var = 0(coroutine)
//  0
24   :     LoadValue     : value = <I4, 0>
//  var i = 0;
25   :     StoreLocalVar : var = 1(i)
//  coroutine
26   :     LoadLocalVar  : var = 0(coroutine)
//  coroutine.Status
27   :     InvokeMethod  : methodInfo = GetStatus<system::Coroutine>, stackPatternCount = 0
//  CoroutineStatus::Stopped
28   :     LoadValue     : value = <enum: 2>
//  (coroutine.Status != CoroutineStatus::Stopped)
29   :     CompareValue  
//  (coroutine.Status != CoroutineStatus::Stopped)
30   :     OpNot         : type = Bool
//  while ((coroutine.Status != CoroutineStatus::Stopped))
31   :     OpNot         : type = Bool
//  while ((coroutine.Status != CoroutineStatus::Stopped))
32   :     JumpIf        : label = 58
//  true
33   :     LoadValue     : value = <Bool, true>
//  null
34   :     LoadValue     : value = <null>
//  coroutine
35   :     LoadLocalVar  : var = 0(coroutine)
//  coroutine.Resume(true, null)
36   :     InvokeMethod  : methodInfo = Resume<system::Coroutine>, stackPatternCount = 2
//  coroutine.Resume(true, null);
37   :     Pop           
//  ""
38   :     LoadValue     : value = <String, >
//  s
39   :     LoadGlobalVar : var = 0(s)
//  ("" & s)
40   :     OpConcat      
//  "[-"
41   :     LoadValue     : value = <String, [->
//  (("" & s) & "[-")
42   :     OpConcat      
//  i
43   :     LoadLocalVar  : var = 1(i)
//  i
44   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  ((("" & s) & "[-") & i)
45   :     OpConcat      
//  "]"
46   :     LoadValue     : value = <String, ]>
//  (((("" & s) & "[-") & i) & "]")
47   :     OpConcat      
//  (s = (((("" & s) & "[-") & i) & "]"))
48   :     Duplicate     : stackPatternCount = 0
//  (s = (((("" & s) & "[-") & i) & "]"))
49   :     StoreGlobalVar: var = 0(s)
//  (s = (((("" & s) & "[-") & i) & "]"));
50   :     Pop           
//  i
51   :     LoadLocalVar  : var = 1(i)
//  1
52   :     LoadValue     : value = <I4, 1>
//  (i + 1)
53   :     OpAdd         : type = I4
//  (i = (i + 1))
54   :     Duplicate     : stackPatternCount = 0
//  (i = (i + 1))
55   :     StoreLocalVar : var = 1(i)
//  (i = (i + 1));
56   :     Pop           
//  while ((coroutine.Status != CoroutineStatus::Stopped))
57   :     Jump          : label = 26
//  s
58   :     LoadGlobalVar : var = 0(s)
//  return s;
59   :     Return        
//  func main() : (string)
60   :     LoadValue     : value = <null>
//  func main() : (string)
61   :     Return        
//  <value>
62   :     LoadLocalVar  : var = 0(<value>)
//  (<prop>Failure = <value>)
63   :     Duplicate     : stackPatternCount = 0
//  (<prop>Failure = <value>)
64   :     StoreCapturedVar: var = 7
//  (<prop>Failure = <value>);
65   :     Pop           
//  func SetFailure(<value> : ::system::Exception^) : (void)
66   :     LoadValue     : value = <null>
//  func SetFailure(<value> : ::system::Exception^) : (void)
67   :     Return        
//  <value>
68   :     LoadLocalVar  : var = 0(<value>)
//  (<prop>Status = <value>)
69   :     Duplicate     : stackPatternCount = 0
//  (<prop>Status = <value>)
70   :     StoreCapturedVar: var = 8
//  (<prop>Status = <value>);
71   :     Pop           
//  func SetStatus(<value> : ::system::CoroutineStatus) : (void)
72   :     LoadValue     : value = <null>
//  func SetStatus(<value> : ::system::CoroutineStatus) : (void)
73   :     Return        
//  <prop>Failure
74   :     LoadCapturedVar: var = 7(<captured><prop>Failure)
//  return <prop>Failure;
75   :     Return        
//  func GetFailure() : (::system::Exception^)
76   :     LoadValue     : value = <null>
//  func GetFailure() : (::system::Exception^)
77   :     Return        
//  <prop>Status
78   :     LoadCapturedVar: var = 8(<captured><prop>Status)
//  return <prop>Status;
79   :     Return        
//  func GetStatus() : (::system::CoroutineStatus)
80   :     LoadValue     : value = <null>
//  func GetStatus() : (::system::CoroutineStatus)
81   :     Return        
//  Status
82   :     LoadCapturedVar: var = 9(<captured-this>0)
//  Status
83   :     InvokeMethod  : methodInfo = GetStatus<system::Coroutine>, stackPatternCount = 0
//  ::system::CoroutineStatus::Waiting
84   :     LoadValue     : value = <enum: 0>
//  (Status != ::system::CoroutineStatus::Waiting)
85   :     CompareValue  
//  (Status != ::system::CoroutineStatus::Waiting)
86   :     OpNot         : type = Bool
//  if ((Status != ::system::CoroutineStatus::Waiting))
87   :     OpNot         : type = Bool
//  if ((Status != ::system::CoroutineStatus::Waiting))
88   :     JumpIf        : label = 92
//  "Resume should be called only when the coroutine is in the waiting status."
89   :     LoadValue     : value = <String, Resume should be called only when the coroutine is in the waiting status.>
//  raise "Resume should be called only when the coroutine is in the waiting status.";
90   :     RaiseException
//  if ((Status != ::system::CoroutineStatus::Waiting))
91   :     Jump          : label = 92
//  Executing
92   :     LoadValue     : value = <enum: 1>
//  SetStatus(Executing)
93   :     InvokeWithContext: func = 3(<method:SetStatus<system::Coroutine>(3)> in main), stackPatternCount = 1
//  SetStatus(Executing);
94   :     Pop           
//  try
95   :     InstallTry    : label = 436
//  <co-state-before-pause>
96   :     LoadCapturedVar: var = 6(<captured><co-state-before-pause>)
//  1
97   :     LoadValue     : value = <I4, 1>
//  (-1)
98   :     OpNegative    : type = I4
//  (<co-state-before-pause> != (-1))
99   :     CompareValue  
//  (<co-state-before-pause> != (-1))
100  :     OpNot         : type = Bool
//  if ((<co-state-before-pause> != (-1)))
101  :     OpNot         : type = Bool
//  if ((<co-state-before-pause> != (-1)))
102  :     JumpIf        : label = 185
//  <coroutine-output>
103  :     LoadLocalVar  : var = 1(<coroutine-output>)
//  <coroutine-output> is null
104  :     LoadValue     : value = <null>
//  <coroutine-output> is null
105  :     CompareReference
//  if (<coroutine-output> is null)
106  :     OpNot         : type = Bool
//  if (<coroutine-output> is null)
107  :     JumpIf        : label = 114
//  1
108  :     LoadValue     : value = <I4, 1>
//  (-1)
109  :     OpNegative    : type = I4
//  (<co-state-before-pause> = (-1))
110  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = (-1))
111  :     StoreCapturedVar: var = 6
//  (<co-state-before-pause> = (-1));
112  :     Pop           
//  if (<coroutine-output> is null)
113  :     Jump          : label = 184
//  <coroutine-output>
114  :     LoadLocalVar  : var = 1(<coroutine-output>)
//  <coroutine-output>.Failure
115  :     InvokeMethod  : methodInfo = GetFailure<system::CoroutineResult>, stackPatternCount = 0
//  <coroutine-output>.Failure is null
116  :     LoadValue     : value = <null>
//  <coroutine-output>.Failure is null
117  :     CompareReference
//  if (<coroutine-output>.Failure is null)
118  :     OpNot         : type = Bool
//  if (<coroutine-output>.Failure is null)
119  :     JumpIf        : label = 126
//  1
120  :     LoadValue     : value = <I4, 1>
//  (-1)
121  :     OpNegative    : type = I4
//  (<co-state-before-pause> = (-1))
122  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = (-1))
123  :     StoreCapturedVar: var = 6
//  (<co-state-before-pause> = (-1));
124  :     Pop           
//  if (<coroutine-output>.Failure is null)
125  :     Jump          : label = 184
//  <co-state-before-pause>
126  :     LoadCapturedVar: var = 6(<captured><co-state-before-pause>)
//  4
127  :     LoadValue     : value = <I4, 4>
//  (<co-state-before-pause> == 4)
128  :     CompareValue  
//  if ((<co-state-before-pause> == 4))
129  :     OpNot         : type = Bool
//  if ((<co-state-before-pause> == 4))
130  :     JumpIf        : label = 146
//  1
131  :     LoadValue     : value = <I4, 1>
//  (-1)
132  :     OpNegative    : type = I4
//  (<co-state-before-pause> = (-1))
133  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = (-1))
134  :     StoreCapturedVar: var = 6
//  (<co-state-before-pause> = (-1));
135  :     Pop           
//  <coroutine-output>
136  :     LoadLocalVar  : var = 1(<coroutine-output>)
//  <coroutine-output>.Failure
137  :     InvokeMethod  : methodInfo = GetFailure<system::CoroutineResult>, stackPatternCount = 0
//  (<co4>ex = <coroutine-output>.Failure)
138  :     Duplicate     : stackPatternCount = 0
//  (<co4>ex = <coroutine-output>.Failure)
139  :     StoreCapturedVar: var = 4
//  (<co4>ex = <coroutine-output>.Failure);
140  :     Pop           
//  3
141  :     LoadValue     : value = <I4, 3>
//  (<co-state> = 3)
142  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 3)
143  :     StoreCapturedVar: var = 5
//  (<co-state> = 3);
144  :     Pop           
//  if ((<co-state-before-pause> == 4))
145  :     Jump          : label = 184
//  <co-state-before-pause>
146  :     LoadCapturedVar: var = 6(<captured><co-state-before-pause>)
//  <co-state-before-pause> in range [5, 6]
147  :     StoreLocalVar : var = 2(<anonymous-range-test>)
//  <co-state-before-pause> in range [5, 6]
148  :     LoadLocalVar  : var = 2(<anonymous-range-test>)
//  5
149  :     LoadValue     : value = <I4, 5>
//  <co-state-before-pause> in range [5, 6]
150  :     CompareLiteral: type = I4
//  <co-state-before-pause> in range [5, 6]
151  :     OpGE          
//  <co-state-before-pause> in range [5, 6]
152  :     LoadLocalVar  : var = 2(<anonymous-range-test>)
//  6
153  :     LoadValue     : value = <I4, 6>
//  <co-state-before-pause> in range [5, 6]
154  :     CompareLiteral: type = I4
//  <co-state-before-pause> in range [5, 6]
155  :     OpLE          
//  <co-state-before-pause> in range [5, 6]
156  :     OpAnd         : type = Bool
//  <co-state-before-pause> in range [5, 6]
157  :     LoadValue     : value = <null>
//  <co-state-before-pause> in range [5, 6]
158  :     StoreLocalVar : var = 2(<anonymous-range-test>)
//  if (<co-state-before-pause> in range [5, 6])
159  :     OpNot         : type = Bool
//  if (<co-state-before-pause> in range [5, 6])
160  :     JumpIf        : label = 176
//  1
161  :     LoadValue     : value = <I4, 1>
//  (-1)
162  :     OpNegative    : type = I4
//  (<co-state-before-pause> = (-1))
163  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = (-1))
164  :     StoreCapturedVar: var = 6
//  (<co-state-before-pause> = (-1));
165  :     Pop           
//  <coroutine-output>
166  :     LoadLocalVar  : var = 1(<coroutine-output>)
//  <coroutine-output>.Failure
167  :     InvokeMethod  : methodInfo = GetFailure<system::CoroutineResult>, stackPatternCount = 0
//  (<co4>ex = <coroutine-output>.Failure)
168  :     Duplicate     : stackPatternCount = 0
//  (<co4>ex = <coroutine-output>.Failure)
169  :     StoreCapturedVar: var = 4
//  (<co4>ex = <coroutine-output>.Failure);
170  :     Pop           
//  4
171  :     LoadValue     : value = <I4, 4>
//  (<co-state> = 4)
172  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 4)
173  :     StoreCapturedVar: var = 5
//  (<co-state> = 4);
174  :     Pop           
//  if (<co-state-before-pause> in range [5, 6])
175  :     Jump          : label = 184
//  1
176  :     LoadValue     : value = <I4, 1>
//  (-1)
177  :     OpNegative    : type = I4
//  (<co-state-before-pause> = (-1))
178  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = (-1))
179  :     StoreCapturedVar: var = 6
//  (<co-state-before-pause> = (-1));
180  :     Pop           
//  <coroutine-output>
181  :     LoadLocalVar  : var = 1(<coroutine-output>)
//  <coroutine-output>.Failure
182  :     InvokeMethod  : methodInfo = GetFailure<system::CoroutineResult>, stackPatternCount = 0
//  raise <coroutine-output>.Failure;
183  :     RaiseException
//  if ((<co-state-before-pause> != (-1)))
184  :     Jump          : label = 185
//  true
185  :     LoadValue     : value = <Bool, true>
//  while (true)
186  :     OpNot         : type = Bool
//  while (true)
187  :     JumpIf        : label = 434
//  <co-state>
188  :     LoadCapturedVar: var = 5(<captured><co-state>)
//  0
189  :     LoadValue     : value = <I4, 0>
//  (<co-state> == 0)
190  :     CompareValue  
//  if ((<co-state> == 0))
191  :     OpNot         : type = Bool
//  if ((<co-state> == 0))
192  :     JumpIf        : label = 225
//  0
193  :     LoadValue     : value = <I4, 0>
//  (<co1-for-begin>i = 0)
194  :     Duplicate     : stackPatternCount = 0
//  (<co1-for-begin>i = 0)
195  :     StoreCapturedVar: var = 1
//  (<co1-for-begin>i = 0);
196  :     Pop           
//  4
197  :     LoadValue     : value = <I4, 4>
//  1
198  :     LoadValue     : value = <I4, 1>
//  (4 - 1)
199  :     OpSub         : type = I4
//  (<co2-for-end>i = (4 - 1))
200  :     Duplicate     : stackPatternCount = 0
//  (<co2-for-end>i = (4 - 1))
201  :     StoreCapturedVar: var = 2
//  (<co2-for-end>i = (4 - 1));
202  :     Pop           
//  <co1-for-begin>i
203  :     LoadCapturedVar: var = 1(<captured><co1-for-begin>i)
//  (<co3>i = <co1-for-begin>i)
204  :     Duplicate     : stackPatternCount = 0
//  (<co3>i = <co1-for-begin>i)
205  :     StoreCapturedVar: var = 3
//  (<co3>i = <co1-for-begin>i);
206  :     Pop           
//  <co3>i
207  :     LoadCapturedVar: var = 3(<captured><co3>i)
//  <co2-for-end>i
208  :     LoadCapturedVar: var = 2(<captured><co2-for-end>i)
//  (<co3>i <= <co2-for-end>i)
209  :     CompareLiteral: type = I4
//  (<co3>i <= <co2-for-end>i)
210  :     OpLE          
//  if ((<co3>i <= <co2-for-end>i))
211  :     OpNot         : type = Bool
//  if ((<co3>i <= <co2-for-end>i))
212  :     JumpIf        : label = 219
//  5
213  :     LoadValue     : value = <I4, 5>
//  (<co-state> = 5)
214  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 5)
215  :     StoreCapturedVar: var = 5
//  (<co-state> = 5);
216  :     Pop           
//  continue;
217  :     Jump          : label = 185
//  if ((<co3>i <= <co2-for-end>i))
218  :     Jump          : label = 219
//  1
219  :     LoadValue     : value = <I4, 1>
//  (<co-state> = 1)
220  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 1)
221  :     StoreCapturedVar: var = 5
//  (<co-state> = 1);
222  :     Pop           
//  continue;
223  :     Jump          : label = 185
//  if ((<co-state> == 0))
224  :     Jump          : label = 225
//  <co-state>
225  :     LoadCapturedVar: var = 5(<captured><co-state>)
//  1
226  :     LoadValue     : value = <I4, 1>
//  (<co-state> == 1)
227  :     CompareValue  
//  if ((<co-state> == 1))
228  :     OpNot         : type = Bool
//  if ((<co-state> == 1))
229  :     JumpIf        : label = 237
//  Stopped
230  :     LoadValue     : value = <enum: 2>
//  SetStatus(Stopped)
231  :     InvokeWithContext: func = 3(<method:SetStatus<system::Coroutine>(3)> in main), stackPatternCount = 1
//  SetStatus(Stopped);
232  :     Pop           
//  try
233  :     UninstallTry  : stackPatternCount = 0
//  return;
234  :     LoadValue     : value = <null>
//  return;
235  :     Return        
//  if ((<co-state> == 1))
236  :     Jump          : label = 237
//  <co-state>
237  :     LoadCapturedVar: var = 5(<captured><co-state>)
//  2
238  :     LoadValue     : value = <I4, 2>
//  (<co-state> == 2)
239  :     CompareValue  
//  if ((<co-state> == 2))
240  :     OpNot         : type = Bool
//  if ((<co-state> == 2))
241  :     JumpIf        : label = 266
//  <co3>i
242  :     LoadCapturedVar: var = 3(<captured><co3>i)
//  1
243  :     LoadValue     : value = <I4, 1>
//  (<co3>i + 1)
244  :     OpAdd         : type = I4
//  (<co3>i = (<co3>i + 1))
245  :     Duplicate     : stackPatternCount = 0
//  (<co3>i = (<co3>i + 1))
246  :     StoreCapturedVar: var = 3
//  (<co3>i = (<co3>i + 1));
247  :     Pop           
//  <co3>i
248  :     LoadCapturedVar: var = 3(<captured><co3>i)
//  <co2-for-end>i
249  :     LoadCapturedVar: var = 2(<captured><co2-for-end>i)
//  (<co3>i <= <co2-for-end>i)
250  :     CompareLiteral: type = I4
//  (<co3>i <= <co2-for-end>i)
251  :     OpLE          
//  if ((<co3>i <= <co2-for-end>i))
252  :     OpNot         : type = Bool
//  if ((<co3>i <= <co2-for-end>i))
253  :     JumpIf        : label = 260
//  5
254  :     LoadValue     : value = <I4, 5>
//  (<co-state> = 5)
255  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 5)
256  :     StoreCapturedVar: var = 5
//  (<co-state> = 5);
257  :     Pop           
//  continue;
258  :     Jump          : label = 185
//  if ((<co3>i <= <co2-for-end>i))
259  :     Jump          : label = 260
//  1
260  :     LoadValue     : value = <I4, 1>
//  (<co-state> = 1)
261  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 1)
262  :     StoreCapturedVar: var = 5
//  (<co-state> = 1);
263  :     Pop           
//  continue;
264  :     Jump          : label = 185
//  if ((<co-state> == 2))
265  :     Jump          : label = 266
//  <co-state>
266  :     LoadCapturedVar: var = 5(<captured><co-state>)
//  3
267  :     LoadValue     : value = <I4, 3>
//  (<co-state> == 3)
268  :     CompareValue  
//  if ((<co-state> == 3))
269  :     OpNot         : type = Bool
//  if ((<co-state> == 3))
270  :     JumpIf        : label = 283
//  ""
271  :     LoadValue     : value = <String, >
//  s
272  :     LoadGlobalVar : var = 0(s)
//  ("" & s)
273  :     OpConcat      
//  "!"
274  :     LoadValue     : value = <String, !>
//  (("" & s) & "!")
275  :     OpConcat      
//  (s = (("" & s) & "!"))
276  :     Duplicate     : stackPatternCount = 0
//  (s = (("" & s) & "!"))
277  :     StoreGlobalVar: var = 0(s)
//  (s = (("" & s) & "!"));
278  :     Pop           
//  <co4>ex
279  :     LoadCapturedVar: var = 4(<captured><co4>ex)
//  <co4>ex.Message
280  :     InvokeMethod  : methodInfo = GetMessage<system::Exception>, stackPatternCount = 0
//  raise <co4>ex.Message;
281  :     RaiseException
//  if ((<co-state> == 3))
282  :     Jump          : label = 283
//  <co-state>
283  :     LoadCapturedVar: var = 5(<captured><co-state>)
//  7
284  :     LoadValue     : value = <I4, 7>
//  (<co-state> == 7)
285  :     CompareValue  
//  if ((<co-state> == 7))
286  :     OpNot         : type = Bool
//  if ((<co-state> == 7))
287  :     JumpIf        : label = 302
//  ""
288  :     LoadValue     : value = <String, >
//  s
289  :     LoadGlobalVar : var = 0(s)
//  ("" & s)
290  :     OpConcat      
//  "!"
291  :     LoadValue     : value = <String, !>
//  (("" & s) & "!")
292  :     OpConcat      
//  (s = (("" & s) & "!"))
293  :     Duplicate     : stackPatternCount = 0
//  (s = (("" & s) & "!"))
294  :     StoreGlobalVar: var = 0(s)
//  (s = (("" & s) & "!"));
295  :     Pop           
//  2
296  :     LoadValue     : value = <I4, 2>
//  (<co-state> = 2)
297  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 2)
298  :     StoreCapturedVar: var = 5
//  (<co-state> = 2);
299  :     Pop           
//  continue;
300  :     Jump          : label = 185
//  if ((<co-state> == 7))
301  :     Jump          : label = 302
//  try
302  :     InstallTry    : label = 330
//  <co-state>
303  :     LoadCapturedVar: var = 5(<captured><co-state>)
//  4
304  :     LoadValue     : value = <I4, 4>
//  (<co-state> == 4)
305  :     CompareValue  
//  if ((<co-state> == 4))
306  :     OpNot         : type = Bool
//  if ((<co-state> == 4))
307  :     JumpIf        : label = 328
//  ""
308  :     LoadValue     : value = <String, >
//  s
309  :     LoadGlobalVar : var = 0(s)
//  ("" & s)
310  :     OpConcat      
//  "["
311  :     LoadValue     : value = <String, [>
//  (("" & s) & "[")
312  :     OpConcat      
//  <co4>ex
313  :     LoadCapturedVar: var = 4(<captured><co4>ex)
//  <co4>ex.Message
314  :     InvokeMethod  : methodInfo = GetMessage<system::Exception>, stackPatternCount = 0
//  ((("" & s) & "[") & <co4>ex.Message)
315  :     OpConcat      
//  "]"
316  :     LoadValue     : value = <String, ]>
//  (((("" & s) & "[") & <co4>ex.Message) & "]")
317  :     OpConcat      
//  (s = (((("" & s) & "[") & <co4>ex.Message) & "]"))
318  :     Duplicate     : stackPatternCount = 0
//  (s = (((("" & s) & "[") & <co4>ex.Message) & "]"))
319  :     StoreGlobalVar: var = 0(s)
//  (s = (((("" & s) & "[") & <co4>ex.Message) & "]"));
320  :     Pop           
//  7
321  :     LoadValue     : value = <I4, 7>
//  (<co-state> = 7)
322  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 7)
323  :     StoreCapturedVar: var = 5
//  (<co-state> = 7);
324  :     Pop           
//  try
325  :     UninstallTry  : stackPatternCount = 0
//  continue;
326  :     Jump          : label = 185
//  if ((<co-state> == 4))
327  :     Jump          : label = 328
//  try
328  :     UninstallTry  : stackPatternCount = 0
//  try
329  :     Jump          : label = 341
//  try
330  :     LoadException 
//  try
331  :     StoreLocalVar : var = 3(<catch><co-ex>)
//  <co-ex>
332  :     LoadLocalVar  : var = 3(<catch><co-ex>)
//  (<co4>ex = <co-ex>)
333  :     Duplicate     : stackPatternCount = 0
//  (<co4>ex = <co-ex>)
334  :     StoreCapturedVar: var = 4
//  (<co4>ex = <co-ex>);
335  :     Pop           
//  3
336  :     LoadValue     : value = <I4, 3>
//  (<co-state> = 3)
337  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 3)
338  :     StoreCapturedVar: var = 5
//  (<co-state> = 3);
339  :     Pop           
//  continue;
340  :     Jump          : label = 185
//  try
341  :     InstallTry    : label = 422
//  <co-state>
342  :     LoadCapturedVar: var = 5(<captured><co-state>)
//  5
343  :     LoadValue     : value = <I4, 5>
//  (<co-state> == 5)
344  :     CompareValue  
//  if ((<co-state> == 5))
345  :     OpNot         : type = Bool
//  if ((<co-state> == 5))
346  :     JumpIf        : label = 399
//  <co3>i
347  :     LoadCapturedVar: var = 3(<captured><co3>i)
//  2
348  :     LoadValue     : value = <I4, 2>
//  (<co3>i % 2)
349  :     OpMod         : type = I4
//  (<co0-switch>0 = (<co3>i % 2))
350  :     Duplicate     : stackPatternCount = 0
//  (<co0-switch>0 = (<co3>i % 2))
351  :     StoreCapturedVar: var = 0
//  (<co0-switch>0 = (<co3>i % 2));
352  :     Pop           
//  <co0-switch>0
353  :     LoadCapturedVar: var = 0(<captured><co0-switch>0)
//  0
354  :     LoadValue     : value = <I4, 0>
//  (<co0-switch>0 == 0 of (::system::Int32))
355  :     CompareValue  
//  if ((<co0-switch>0 == 0 of (::system::Int32)))
356  :     OpNot         : type = Bool
//  if ((<co0-switch>0 == 0 of (::system::Int32)))
357  :     JumpIf        : label = 378
//  ""
358  :     LoadValue     : value = <String, >
//  s
359  :     LoadGlobalVar : var = 0(s)
//  ("" & s)
360  :     OpConcat      
//  "[+"
361  :     LoadValue     : value = <String, [+>
//  (("" & s) & "[+")
362  :     OpConcat      
//  <co3>i
363  :     LoadCapturedVar: var = 3(<captured><co3>i)
//  <co3>i
364  :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  ((("" & s) & "[+") & <co3>i)
365  :     OpConcat      
//  "]"
366  :     LoadValue     : value = <String, ]>
//  (((("" & s) & "[+") & <co3>i) & "]")
367  :     OpConcat      
//  (s = (((("" & s) & "[+") & <co3>i) & "]"))
368  :     Duplicate     : stackPatternCount = 0
//  (s = (((("" & s) & "[+") & <co3>i) & "]"))
369  :     StoreGlobalVar: var = 0(s)
//  (s = (((("" & s) & "[+") & <co3>i) & "]"));
370  :     Pop           
//  6
371  :     LoadValue     : value = <I4, 6>
//  (<co-state> = 6)
372  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 6)
373  :     StoreCapturedVar: var = 5
//  (<co-state> = 6);
374  :     Pop           
//  try
375  :     UninstallTry  : stackPatternCount = 0
//  continue;
376  :     Jump          : label = 185
//  if ((<co0-switch>0 == 0 of (::system::Int32)))
377  :     Jump          : label = 378
//  <co0-switch>0
378  :     LoadCapturedVar: var = 0(<captured><co0-switch>0)
//  1
379  :     LoadValue     : value = <I4, 1>
//  (<co0-switch>0 == 1 of (::system::Int32))
380  :     CompareValue  
//  if ((<co0-switch>0 == 1 of (::system::Int32)))
381  :     OpNot         : type = Bool
//  if ((<co0-switch>0 == 1 of (::system::Int32)))
382  :     JumpIf        : label = 392
//  "*"
383  :     LoadValue     : value = <String, *>
//  raise "*";
384  :     RaiseException
//  7
385  :     LoadValue     : value = <I4, 7>
//  (<co-state> = 7)
386  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 7)
387  :     StoreCapturedVar: var = 5
//  (<co-state> = 7);
388  :     Pop           
//  try
389  :     UninstallTry  : stackPatternCount = 0
//  continue;
390  :     Jump          : label = 185
//  if ((<co0-switch>0 == 1 of (::system::Int32)))
391  :     Jump          : label = 392
//  7
392  :     LoadValue     : value = <I4, 7>
//  (<co-state> = 7)
393  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 7)
394  :     StoreCapturedVar: var = 5
//  (<co-state> = 7);
395  :     Pop           
//  try
396  :     UninstallTry  : stackPatternCount = 0
//  continue;
397  :     Jump          : label = 185
//  if ((<co-state> == 5))
398  :     Jump          : label = 399
//  <co-state>
399  :     LoadCapturedVar: var = 5(<captured><co-state>)
//  6
400  :     LoadValue     : value = <I4, 6>
//  (<co-state> == 6)
401  :     CompareValue  
//  if ((<co-state> == 6))
402  :     OpNot         : type = Bool
//  if ((<co-state> == 6))
403  :     JumpIf        : label = 420
//  Waiting
404  :     LoadValue     : value = <enum: 0>
//  SetStatus(Waiting)
405  :     InvokeWithContext: func = 3(<method:SetStatus<system::Coroutine>(3)> in main), stackPatternCount = 1
//  SetStatus(Waiting);
406  :     Pop           
//  <co-state>
407  :     LoadCapturedVar: var = 5(<captured><co-state>)
//  (<co-state-before-pause> = <co-state>)
408  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = <co-state>)
409  :     StoreCapturedVar: var = 6
//  (<co-state-before-pause> = <co-state>);
410  :     Pop           
//  7
411  :     LoadValue     : value = <I4, 7>
//  (<co-state> = 7)
412  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 7)
413  :     StoreCapturedVar: var = 5
//  (<co-state> = 7);
414  :     Pop           
//  try
415  :     UninstallTry  : stackPatternCount = 0
//  try
416  :     UninstallTry  : stackPatternCount = 0
//  return;
417  :     LoadValue     : value = <null>
//  return;
418  :     Return        
//  if ((<co-state> == 6))
419  :     Jump          : label = 420
//  try
420  :     UninstallTry  : stackPatternCount = 0
//  try
421  :     Jump          : label = 433
//  try
422  :     LoadException 
//  try
423  :     StoreLocalVar : var = 4(<catch><co-ex>)
//  <co-ex>
424  :     LoadLocalVar  : var = 4(<catch><co-ex>)
//  (<co4>ex = <co-ex>)
425  :     Duplicate     : stackPatternCount = 0
//  (<co4>ex = <co-ex>)
426  :     StoreCapturedVar: var = 4
//  (<co4>ex = <co-ex>);
427  :     Pop           
//  4
428  :     LoadValue     : value = <I4, 4>
//  (<co-state> = 4)
429  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 4)
430  :     StoreCapturedVar: var = 5
//  (<co-state> = 4);
431  :     Pop           
//  continue;
432  :     Jump          : label = 185
//  while (true)
433  :     Jump          : label = 185
//  try
434  :     UninstallTry  : stackPatternCount = 0
//  try
435  :     Jump          : label = 450
//  try
436  :     LoadException 
//  try
437  :     StoreLocalVar : var = 5(<catch><co-ex>)
//  <co-ex>
438  :     LoadLocalVar  : var = 5(<catch><co-ex>)
//  SetFailure(<co-ex>)
439  :     InvokeWithContext: func = 2(<method:SetFailure<system::Coroutine>(2)> in main), stackPatternCount = 1
//  SetFailure(<co-ex>);
440  :     Pop           
//  Stopped
441  :     LoadValue     : value = <enum: 2>
//  SetStatus(Stopped)
442  :     InvokeWithContext: func = 3(<method:SetStatus<system::Coroutine>(3)> in main), stackPatternCount = 1
//  SetStatus(Stopped);
443  :     Pop           
//  <raise-exception>
444  :     LoadLocalVar  : var = 0(<raise-exception>)
//  if (<raise-exception>)
445  :     OpNot         : type = Bool
//  if (<raise-exception>)
446  :     JumpIf        : label = 450
//  raise;
447  :     LoadLocalVar  : var = 5(<catch><co-ex>)
//  raise;
448  :     RaiseException
//  if (<raise-exception>)
449  :     Jump          : label = 450
//  func Resume(<raise-exception> : ::system::Boolean, <coroutine-output> : ::system::CoroutineResult^) : (::system::Void)
450  :     LoadValue     : value = <null>
//  func Resume(<raise-exception> : ::system::Boolean, <coroutine-output> : ::system::CoroutineResult^) : (::system::Void)
451  :     Return        
