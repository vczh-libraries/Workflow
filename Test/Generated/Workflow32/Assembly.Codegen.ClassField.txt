========================================================
Global Variables:
========================================================

========================================================
Functions:
========================================================
main (2 .. 59)
    Arguments:
    Captured Variables:
    Local Variables:
        s
        a
        b

<initialize> (0 .. 1)
    Arguments:
    Captured Variables:
    Local Variables:

========================================================
Instructions:
========================================================
0    :     LoadValue     : value = <null>
1    :     Return        
//  ""
2    :     LoadValue     : value = <String, >
//  var s = "";
3    :     StoreLocalVar : var = 0(s)
//  new (PointClass^)()
4    :     LoadValue     : value = <null>
//  new (PointClass^)()
5    :     InvokeMethod  : methodInfo = <test::PointClass>, stackPatternCount = 0
//  var a = new (PointClass^)();
6    :     StoreLocalVar : var = 1(a)
//  new (PointClass^)()
7    :     LoadValue     : value = <null>
//  new (PointClass^)()
8    :     InvokeMethod  : methodInfo = <test::PointClass>, stackPatternCount = 0
//  var b = new (PointClass^)();
9    :     StoreLocalVar : var = 2(b)
//  1
10   :     LoadValue     : value = <I4, 1>
//  (b.x = 1)
11   :     Duplicate     : stackPatternCount = 0
//  b
12   :     LoadLocalVar  : var = 2(b)
//  (b.x = 1)
13   :     SetProperty   : propertyInfo = x<test::PointClass>
//  (b.x = 1);
14   :     Pop           
//  2
15   :     LoadValue     : value = <I4, 2>
//  (b.y = 2)
16   :     Duplicate     : stackPatternCount = 0
//  b
17   :     LoadLocalVar  : var = 2(b)
//  (b.y = 2)
18   :     SetProperty   : propertyInfo = y<test::PointClass>
//  (b.y = 2);
19   :     Pop           
//  ""
20   :     LoadValue     : value = <String, >
//  a
21   :     LoadLocalVar  : var = 1(a)
//  a.x
22   :     GetProperty   : propertyInfo = x<test::PointClass>
//  a.x
23   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  ("" & a.x)
24   :     OpConcat      
//  ", "
25   :     LoadValue     : value = <String, , >
//  (("" & a.x) & ", ")
26   :     OpConcat      
//  a
27   :     LoadLocalVar  : var = 1(a)
//  a.y
28   :     GetProperty   : propertyInfo = y<test::PointClass>
//  a.y
29   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  ((("" & a.x) & ", ") & a.y)
30   :     OpConcat      
//  ", "
31   :     LoadValue     : value = <String, , >
//  (((("" & a.x) & ", ") & a.y) & ", ")
32   :     OpConcat      
//  b
33   :     LoadLocalVar  : var = 2(b)
//  b.x
34   :     GetProperty   : propertyInfo = x<test::PointClass>
//  b.x
35   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  ((((("" & a.x) & ", ") & a.y) & ", ") & b.x)
36   :     OpConcat      
//  ", "
37   :     LoadValue     : value = <String, , >
//  (((((("" & a.x) & ", ") & a.y) & ", ") & b.x) & ", ")
38   :     OpConcat      
//  b
39   :     LoadLocalVar  : var = 2(b)
//  b.y
40   :     GetProperty   : propertyInfo = y<test::PointClass>
//  b.y
41   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  ((((((("" & a.x) & ", ") & a.y) & ", ") & b.x) & ", ") & b.y)
42   :     OpConcat      
//  ", "
43   :     LoadValue     : value = <String, , >
//  (((((((("" & a.x) & ", ") & a.y) & ", ") & b.x) & ", ") & b.y) & ", ")
44   :     OpConcat      
//  a
45   :     LoadLocalVar  : var = 1(a)
//  a
46   :     LoadLocalVar  : var = 1(a)
//  (a == a)
47   :     CompareReference
//  (a == a)
48   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  ((((((((("" & a.x) & ", ") & a.y) & ", ") & b.x) & ", ") & b.y) & ", ") & (a == a))
49   :     OpConcat      
//  ", "
50   :     LoadValue     : value = <String, , >
//  (((((((((("" & a.x) & ", ") & a.y) & ", ") & b.x) & ", ") & b.y) & ", ") & (a == a)) & ", ")
51   :     OpConcat      
//  a
52   :     LoadLocalVar  : var = 1(a)
//  b
53   :     LoadLocalVar  : var = 2(b)
//  (a == b)
54   :     CompareReference
//  (a == b)
55   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  ((((((((((("" & a.x) & ", ") & a.y) & ", ") & b.x) & ", ") & b.y) & ", ") & (a == a)) & ", ") & (a == b))
56   :     OpConcat      
//  return ((((((((((("" & a.x) & ", ") & a.y) & ", ") & b.x) & ", ") & b.y) & ", ") & (a == a)) & ", ") & (a == b));
57   :     Return        
//  func main() : (string)
58   :     LoadValue     : value = <null>
//  func main() : (string)
59   :     Return        
