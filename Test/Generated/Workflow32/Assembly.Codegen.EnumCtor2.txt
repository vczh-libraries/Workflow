========================================================
Global Variables:
========================================================

========================================================
Functions:
========================================================
Id (2 .. 5)
    Arguments:
        s
    Captured Variables:
    Local Variables:

main (6 .. 71)
    Arguments:
    Captured Variables:
    Local Variables:
        a
        b
        c
        d

<initialize> (0 .. 1)
    Arguments:
    Captured Variables:
    Local Variables:

========================================================
Instructions:
========================================================
0    :     LoadValue     : value = <null>
1    :     Return        
//  s
2    :     LoadLocalVar  : var = 0(s)
//  return s;
3    :     Return        
//  func Id(s : Seasons) : (Seasons)
4    :     LoadValue     : value = <null>
//  func Id(s : Seasons) : (Seasons)
5    :     Return        
//  Spring
6    :     LoadValue     : value = <enum: 1>
//  var a = Spring of (Seasons);
7    :     StoreLocalVar : var = 0(a)
//  Summer
8    :     LoadValue     : value = <enum: 2>
//  var b : Seasons = Summer;
9    :     StoreLocalVar : var = 1(b)
//  Autumn
10   :     LoadValue     : value = <enum: 4>
//  Id(Autumn)
11   :     Invoke        : func = 0(Id), stackPatternCount = 1
//  var c = Id(Autumn);
12   :     StoreLocalVar : var = 2(c)
//  Seasons::Winter
13   :     LoadValue     : value = <enum: 8>
//  var d = Seasons::Winter;
14   :     StoreLocalVar : var = 3(d)
//  a
15   :     LoadLocalVar  : var = 0(a)
//  a
16   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::UInt64
//  (cast (UInt64) a)
17   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  ", "
18   :     LoadValue     : value = <Bool, , >
//  ((cast (UInt64) a) & ", ")
19   :     OpConcat      
//  b
20   :     LoadLocalVar  : var = 1(b)
//  b
21   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::UInt64
//  (cast (UInt64) b)
22   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  (((cast (UInt64) a) & ", ") & (cast (UInt64) b))
23   :     OpConcat      
//  ", "
24   :     LoadValue     : value = <Bool, , >
//  ((((cast (UInt64) a) & ", ") & (cast (UInt64) b)) & ", ")
25   :     OpConcat      
//  c
26   :     LoadLocalVar  : var = 2(c)
//  c
27   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::UInt64
//  (cast (UInt64) c)
28   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  (((((cast (UInt64) a) & ", ") & (cast (UInt64) b)) & ", ") & (cast (UInt64) c))
29   :     OpConcat      
//  ", "
30   :     LoadValue     : value = <Bool, , >
//  ((((((cast (UInt64) a) & ", ") & (cast (UInt64) b)) & ", ") & (cast (UInt64) c)) & ", ")
31   :     OpConcat      
//  d
32   :     LoadLocalVar  : var = 3(d)
//  d
33   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::UInt64
//  (cast (UInt64) d)
34   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  (((((((cast (UInt64) a) & ", ") & (cast (UInt64) b)) & ", ") & (cast (UInt64) c)) & ", ") & (cast (UInt64) d))
35   :     OpConcat      
//  ", "
36   :     LoadValue     : value = <Bool, , >
//  ((((((((cast (UInt64) a) & ", ") & (cast (UInt64) b)) & ", ") & (cast (UInt64) c)) & ", ") & (cast (UInt64) d)) & ", ")
37   :     OpConcat      
//  a
38   :     LoadLocalVar  : var = 0(a)
//  (a | b)
39   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::UInt64
//  b
40   :     LoadLocalVar  : var = 1(b)
//  (a | b)
41   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::UInt64
//  (a | b)
42   :     OpOr          : type = U8
//  (a | b)
43   :     ConvertToType : flag = BoxedValue, typeDescriptor = Seasons
//  (a | b)
44   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::UInt64
//  (cast (UInt64) (a | b))
45   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  (((((((((cast (UInt64) a) & ", ") & (cast (UInt64) b)) & ", ") & (cast (UInt64) c)) & ", ") & (cast (UInt64) d)) & ", ") & (cast (UInt64) (a | b)))
46   :     OpConcat      
//  ", "
47   :     LoadValue     : value = <Bool, , >
//  ((((((((((cast (UInt64) a) & ", ") & (cast (UInt64) b)) & ", ") & (cast (UInt64) c)) & ", ") & (cast (UInt64) d)) & ", ") & (cast (UInt64) (a | b))) & ", ")
48   :     OpConcat      
//  a
49   :     LoadLocalVar  : var = 0(a)
//  (a & Good of (Seasons))
50   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::UInt64
//  Good
51   :     LoadValue     : value = <enum: 5>
//  (a & Good of (Seasons))
52   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::UInt64
//  (a & Good of (Seasons))
53   :     OpAnd         : type = U8
//  (a & Good of (Seasons))
54   :     ConvertToType : flag = BoxedValue, typeDescriptor = Seasons
//  (a & Good of (Seasons))
55   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::UInt64
//  (cast (UInt64) (a & Good of (Seasons)))
56   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  (((((((((((cast (UInt64) a) & ", ") & (cast (UInt64) b)) & ", ") & (cast (UInt64) c)) & ", ") & (cast (UInt64) d)) & ", ") & (cast (UInt64) (a | b))) & ", ") & (cast (UInt64) (a & Good of (Seasons))))
57   :     OpConcat      
//  ", "
58   :     LoadValue     : value = <Bool, , >
//  ((((((((((((cast (UInt64) a) & ", ") & (cast (UInt64) b)) & ", ") & (cast (UInt64) c)) & ", ") & (cast (UInt64) d)) & ", ") & (cast (UInt64) (a | b))) & ", ") & (cast (UInt64) (a & Good of (Seasons)))) & ", ")
59   :     OpConcat      
//  a
60   :     LoadLocalVar  : var = 0(a)
//  (a & Bad of (Seasons))
61   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::UInt64
//  Bad
62   :     LoadValue     : value = <enum: 10>
//  (a & Bad of (Seasons))
63   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::UInt64
//  (a & Bad of (Seasons))
64   :     OpAnd         : type = U8
//  (a & Bad of (Seasons))
65   :     ConvertToType : flag = BoxedValue, typeDescriptor = Seasons
//  (a & Bad of (Seasons))
66   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::UInt64
//  (cast (UInt64) (a & Bad of (Seasons)))
67   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  (((((((((((((cast (UInt64) a) & ", ") & (cast (UInt64) b)) & ", ") & (cast (UInt64) c)) & ", ") & (cast (UInt64) d)) & ", ") & (cast (UInt64) (a | b))) & ", ") & (cast (UInt64) (a & Good of (Seasons)))) & ", ") & (cast (UInt64) (a & Bad of (Seasons))))
68   :     OpConcat      
//  return (((((((((((((cast (UInt64) a) & ", ") & (cast (UInt64) b)) & ", ") & (cast (UInt64) c)) & ", ") & (cast (UInt64) d)) & ", ") & (cast (UInt64) (a | b))) & ", ") & (cast (UInt64) (a & Good of (Seasons)))) & ", ") & (cast (UInt64) (a & Bad of (Seasons))));
69   :     Return        
//  func main() : (string)
70   :     LoadValue     : value = <null>
//  func main() : (string)
71   :     Return        
