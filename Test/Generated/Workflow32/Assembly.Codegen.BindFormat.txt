========================================================
Global Variables:
========================================================
s

========================================================
Functions:
========================================================
Callback (4 .. 18)
    Arguments:
        value
    Captured Variables:
    Local Variables:

main (19 .. 70)
    Arguments:
    Captured Variables:
    Local Variables:
        x
        subscription

<initialize> (0 .. 3)
    Arguments:
    Captured Variables:
    Local Variables:

<method:<bind-activator><system::Subscription>(3)> in main (71 .. 82)
    Arguments:
    Captured Variables:
        <captured><bind-cache>0
        <captured><bind-handler>0_0
        <captured><bind-opened>
        <captured><bind-closed>
        <captured>x
        <captured-this>0
    Local Variables:
        <bind-activator-result>

<method:<bind-callback>0_0<system::Subscription>(4)> in main (83 .. 86)
    Arguments:
        <bind-callback-argument>0
        <bind-callback-argument>1
    Captured Variables:
        <captured><bind-cache>0
        <captured><bind-handler>0_0
        <captured><bind-opened>
        <captured><bind-closed>
        <captured>x
        <captured-this>0
    Local Variables:

<method:Open<system::Subscription>(7)> in main (87 .. 121)
    Arguments:
    Captured Variables:
        <captured><bind-cache>0
        <captured><bind-handler>0_0
        <captured><bind-opened>
        <captured><bind-closed>
        <captured>x
        <captured-this>0
    Local Variables:

<method:Update<system::Subscription>(8)> in main (122 .. 136)
    Arguments:
    Captured Variables:
        <captured><bind-cache>0
        <captured><bind-handler>0_0
        <captured><bind-opened>
        <captured><bind-closed>
        <captured>x
        <captured-this>0
    Local Variables:

<method:Close<system::Subscription>(9)> in main (137 .. 174)
    Arguments:
    Captured Variables:
        <captured><bind-cache>0
        <captured><bind-handler>0_0
        <captured><bind-opened>
        <captured><bind-closed>
        <captured>x
        <captured-this>0
    Local Variables:

========================================================
Instructions:
========================================================
//  ""
0    :     LoadValue     : value = <String, >
//  var s = "";
1    :     StoreGlobalVar: var = 0(s)
2    :     LoadValue     : value = <null>
3    :     Return        
//  ""
4    :     LoadValue     : value = <String, >
//  s
5    :     LoadGlobalVar : var = 0(s)
//  ("" & s)
6    :     OpConcat      
//  "["
7    :     LoadValue     : value = <String, [>
//  (("" & s) & "[")
8    :     OpConcat      
//  value
9    :     LoadLocalVar  : var = 0(value)
//  value
10   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  ((("" & s) & "[") & (cast (string) value))
11   :     OpConcat      
//  "]"
12   :     LoadValue     : value = <String, ]>
//  (((("" & s) & "[") & (cast (string) value)) & "]")
13   :     OpConcat      
//  (s = (((("" & s) & "[") & (cast (string) value)) & "]"))
14   :     Duplicate     : stackPatternCount = 0
//  (s = (((("" & s) & "[") & (cast (string) value)) & "]"))
15   :     StoreGlobalVar: var = 0(s)
//  (s = (((("" & s) & "[") & (cast (string) value)) & "]"));
16   :     Pop           
//  func Callback(value : object) : (void)
17   :     LoadValue     : value = <null>
//  func Callback(value : object) : (void)
18   :     Return        
//  new (ObservableValue^)()
19   :     LoadValue     : value = <null>
//  new (ObservableValue^)()
20   :     InvokeMethod  : methodInfo = <test::ObservableValue>, stackPatternCount = 0
//  var x = new (ObservableValue^)();
21   :     StoreLocalVar : var = 0(x)
//  null
22   :     LoadValue     : value = <null>
//  null
23   :     LoadValue     : value = <null>
//  false
24   :     LoadValue     : value = <Bool, false>
//  false
25   :     LoadValue     : value = <Bool, false>
//  new (::system::Subscription^)
26   :     LoadLocalVar  : var = 0(x)
//  new (::system::Subscription^)
27   :     LoadValue     : value = <null>
//  new (::system::Subscription^)
28   :     CreateClosureContext: stackPatternCount = 6
//  new (::system::Subscription^)
29   :     LoadMethodInfo: methodInfo = Open<system::Subscription>
//  func Open() : (::system::Boolean)
30   :     LoadFunction  : func = 5(<method:Open<system::Subscription>(7)> in main)
//  new (::system::Subscription^)
31   :     LoadMethodInfo: methodInfo = Update<system::Subscription>
//  func Update() : (::system::Boolean)
32   :     LoadFunction  : func = 6(<method:Update<system::Subscription>(8)> in main)
//  new (::system::Subscription^)
33   :     LoadMethodInfo: methodInfo = Close<system::Subscription>
//  func Close() : (::system::Boolean)
34   :     LoadFunction  : func = 7(<method:Close<system::Subscription>(9)> in main)
//  new (::system::Subscription^)
35   :     CreateInterface: methodInfo = <system::Subscription>, stackPatternCount = 6
//  var subscription = new (::system::Subscription^)
36   :     StoreLocalVar : var = 1(subscription)
//  subscription
37   :     LoadLocalVar  : var = 1(subscription)
//  subscription.Open()
38   :     InvokeMethod  : methodInfo = Open<system::Subscription>, stackPatternCount = 0
//  subscription.Open();
39   :     Pop           
//  subscription
40   :     LoadLocalVar  : var = 1(subscription)
//  Callback
41   :     CreateClosureContext: stackPatternCount = 0
//  Callback
42   :     LoadFunction  : func = 0(Callback)
//  Callback
43   :     CreateClosure 
//  attach(subscription.ValueChanged, Callback)
44   :     AttachEvent   : eventInfo = ValueChanged<system::Subscription>
//  attach(subscription.ValueChanged, Callback);
45   :     Pop           
//  10
46   :     LoadValue     : value = <I4, 10>
//  (x.Value = 10)
47   :     Duplicate     : stackPatternCount = 0
//  x
48   :     LoadLocalVar  : var = 0(x)
//  (x.Value = 10)
49   :     InvokeMethod  : methodInfo = SetValue<test::ObservableValue>, stackPatternCount = 1
//  (x.Value = 10)
50   :     Pop           
//  (x.Value = 10);
51   :     Pop           
//  20
52   :     LoadValue     : value = <I4, 20>
//  (x.Value = 20)
53   :     Duplicate     : stackPatternCount = 0
//  x
54   :     LoadLocalVar  : var = 0(x)
//  (x.Value = 20)
55   :     InvokeMethod  : methodInfo = SetValue<test::ObservableValue>, stackPatternCount = 1
//  (x.Value = 20)
56   :     Pop           
//  (x.Value = 20);
57   :     Pop           
//  30
58   :     LoadValue     : value = <I4, 30>
//  (x.Value = 30)
59   :     Duplicate     : stackPatternCount = 0
//  x
60   :     LoadLocalVar  : var = 0(x)
//  (x.Value = 30)
61   :     InvokeMethod  : methodInfo = SetValue<test::ObservableValue>, stackPatternCount = 1
//  (x.Value = 30)
62   :     Pop           
//  (x.Value = 30);
63   :     Pop           
//  subscription
64   :     LoadLocalVar  : var = 1(subscription)
//  subscription.Close()
65   :     InvokeMethod  : methodInfo = Close<system::Subscription>, stackPatternCount = 0
//  subscription.Close();
66   :     Pop           
//  s
67   :     LoadGlobalVar : var = 0(s)
//  return s;
68   :     Return        
//  func main() : (string)
69   :     LoadValue     : value = <null>
//  func main() : (string)
70   :     Return        
//  "The value has changed to "
71   :     LoadValue     : value = <String, The value has changed to >
//  <bind-cache>0
72   :     LoadCapturedVar: var = 0(<captured><bind-cache>0)
//  <bind-cache>0.Value
73   :     InvokeMethod  : methodInfo = GetValue<test::ObservableValue>, stackPatternCount = 0
//  <bind-cache>0.Value
74   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  ("The value has changed to " & <bind-cache>0.Value)
75   :     OpConcat      
//  var <bind-activator-result> = ("The value has changed to " & <bind-cache>0.Value);
76   :     StoreLocalVar : var = 0(<bind-activator-result>)
//  <bind-activator-result>
77   :     LoadLocalVar  : var = 0(<bind-activator-result>)
//  ValueChanged(<bind-activator-result>)
78   :     LoadCapturedVar: var = 5(<captured-this>0)
//  ValueChanged(<bind-activator-result>)
79   :     InvokeEvent   : eventInfo = ValueChanged<system::Subscription>, stackPatternCount = 1
//  ValueChanged(<bind-activator-result>);
80   :     Pop           
//  func <bind-activator>() : (::system::Void)
81   :     LoadValue     : value = <null>
//  func <bind-activator>() : (::system::Void)
82   :     Return        
//  <bind-activator>()
83   :     InvokeWithContext: func = 3(<method:<bind-activator><system::Subscription>(3)> in main), stackPatternCount = 0
//  <bind-activator>();
84   :     Pop           
//  func <bind-callback>0_0(<bind-callback-argument>0 : ::system::Int32, <bind-callback-argument>1 : ::system::Int32) : (::system::Void)
85   :     LoadValue     : value = <null>
//  func <bind-callback>0_0(<bind-callback-argument>0 : ::system::Int32, <bind-callback-argument>1 : ::system::Int32) : (::system::Void)
86   :     Return        
//  <bind-opened>
87   :     LoadCapturedVar: var = 2(<captured><bind-opened>)
//  (!<bind-opened>)
88   :     OpNot         : type = Bool
//  if ((!<bind-opened>))
89   :     OpNot         : type = Bool
//  if ((!<bind-opened>))
90   :     JumpIf        : label = 118
//  true
91   :     LoadValue     : value = <Bool, true>
//  (<bind-opened> = true)
92   :     Duplicate     : stackPatternCount = 0
//  (<bind-opened> = true)
93   :     StoreCapturedVar: var = 2
//  (<bind-opened> = true);
94   :     Pop           
//  (x ?? null of (::test::ObservableValue^))
95   :     InstallTry    : label = 99
//  x
96   :     LoadCapturedVar: var = 4(<captured>x)
//  (x ?? null of (::test::ObservableValue^))
97   :     UninstallTry  : stackPatternCount = 1
//  (x ?? null of (::test::ObservableValue^))
98   :     Jump          : label = 100
//  null
99   :     LoadValue     : value = <null>
//  (<bind-cache>0 = (x ?? null of (::test::ObservableValue^)))
100  :     Duplicate     : stackPatternCount = 0
//  (<bind-cache>0 = (x ?? null of (::test::ObservableValue^)))
101  :     StoreCapturedVar: var = 0
//  (<bind-cache>0 = (x ?? null of (::test::ObservableValue^)));
102  :     Pop           
//  (attach(<bind-cache>0.ValueChanged, <bind-callback>0_0) ?? null)
103  :     InstallTry    : label = 111
//  <bind-cache>0
104  :     LoadCapturedVar: var = 0(<captured><bind-cache>0)
//  <bind-callback>0_0
105  :     LoadClosureContext
//  <bind-callback>0_0
106  :     LoadFunction  : func = 4(<method:<bind-callback>0_0<system::Subscription>(4)> in main)
//  <bind-callback>0_0
107  :     CreateClosure 
//  attach(<bind-cache>0.ValueChanged, <bind-callback>0_0)
108  :     AttachEvent   : eventInfo = ValueChanged<test::ObservableValue>
//  (attach(<bind-cache>0.ValueChanged, <bind-callback>0_0) ?? null)
109  :     UninstallTry  : stackPatternCount = 1
//  (attach(<bind-cache>0.ValueChanged, <bind-callback>0_0) ?? null)
110  :     Jump          : label = 112
//  null
111  :     LoadValue     : value = <null>
//  (<bind-handler>0_0 = (attach(<bind-cache>0.ValueChanged, <bind-callback>0_0) ?? null))
112  :     Duplicate     : stackPatternCount = 0
//  (<bind-handler>0_0 = (attach(<bind-cache>0.ValueChanged, <bind-callback>0_0) ?? null))
113  :     StoreCapturedVar: var = 1
//  (<bind-handler>0_0 = (attach(<bind-cache>0.ValueChanged, <bind-callback>0_0) ?? null));
114  :     Pop           
//  true
115  :     LoadValue     : value = <Bool, true>
//  return true;
116  :     Return        
//  if ((!<bind-opened>))
117  :     Jump          : label = 118
//  false
118  :     LoadValue     : value = <Bool, false>
//  return false;
119  :     Return        
//  func Open() : (::system::Boolean)
120  :     LoadValue     : value = <null>
//  func Open() : (::system::Boolean)
121  :     Return        
//  <bind-opened>
122  :     LoadCapturedVar: var = 2(<captured><bind-opened>)
//  <bind-closed>
123  :     LoadCapturedVar: var = 3(<captured><bind-closed>)
//  (!<bind-closed>)
124  :     OpNot         : type = Bool
//  (<bind-opened> and (!<bind-closed>))
125  :     OpAnd         : type = Bool
//  if ((<bind-opened> and (!<bind-closed>)))
126  :     OpNot         : type = Bool
//  if ((<bind-opened> and (!<bind-closed>)))
127  :     JumpIf        : label = 133
//  <bind-activator>()
128  :     InvokeWithContext: func = 3(<method:<bind-activator><system::Subscription>(3)> in main), stackPatternCount = 0
//  <bind-activator>();
129  :     Pop           
//  true
130  :     LoadValue     : value = <Bool, true>
//  return true;
131  :     Return        
//  if ((<bind-opened> and (!<bind-closed>)))
132  :     Jump          : label = 133
//  false
133  :     LoadValue     : value = <Bool, false>
//  return false;
134  :     Return        
//  func Update() : (::system::Boolean)
135  :     LoadValue     : value = <null>
//  func Update() : (::system::Boolean)
136  :     Return        
//  <bind-closed>
137  :     LoadCapturedVar: var = 3(<captured><bind-closed>)
//  (!<bind-closed>)
138  :     OpNot         : type = Bool
//  if ((!<bind-closed>))
139  :     OpNot         : type = Bool
//  if ((!<bind-closed>))
140  :     JumpIf        : label = 171
//  true
141  :     LoadValue     : value = <Bool, true>
//  (<bind-closed> = true)
142  :     Duplicate     : stackPatternCount = 0
//  (<bind-closed> = true)
143  :     StoreCapturedVar: var = 3
//  (<bind-closed> = true);
144  :     Pop           
//  <bind-handler>0_0
145  :     LoadCapturedVar: var = 1(<captured><bind-handler>0_0)
//  <bind-handler>0_0 is not null
146  :     LoadValue     : value = <null>
//  <bind-handler>0_0 is not null
147  :     CompareReference
//  <bind-handler>0_0 is not null
148  :     OpNot         : type = Bool
//  if (<bind-handler>0_0 is not null)
149  :     OpNot         : type = Bool
//  if (<bind-handler>0_0 is not null)
150  :     JumpIf        : label = 160
//  <bind-cache>0
151  :     LoadCapturedVar: var = 0(<captured><bind-cache>0)
//  <bind-handler>0_0
152  :     LoadCapturedVar: var = 1(<captured><bind-handler>0_0)
//  detach(<bind-cache>0.ValueChanged, <bind-handler>0_0)
153  :     DetachEvent   : eventInfo = ValueChanged<test::ObservableValue>
//  detach(<bind-cache>0.ValueChanged, <bind-handler>0_0);
154  :     Pop           
//  null
155  :     LoadValue     : value = <null>
//  (<bind-handler>0_0 = null)
156  :     Duplicate     : stackPatternCount = 0
//  (<bind-handler>0_0 = null)
157  :     StoreCapturedVar: var = 1
//  (<bind-handler>0_0 = null);
158  :     Pop           
//  if (<bind-handler>0_0 is not null)
159  :     Jump          : label = 160
//  null
160  :     LoadValue     : value = <null>
//  (<bind-cache>0 = null of (::test::ObservableValue^))
161  :     Duplicate     : stackPatternCount = 0
//  (<bind-cache>0 = null of (::test::ObservableValue^))
162  :     StoreCapturedVar: var = 0
//  (<bind-cache>0 = null of (::test::ObservableValue^));
163  :     Pop           
//  null
164  :     LoadValue     : value = <null>
//  (<bind-handler>0_0 = null of (::system::reflection::EventHandler^))
165  :     Duplicate     : stackPatternCount = 0
//  (<bind-handler>0_0 = null of (::system::reflection::EventHandler^))
166  :     StoreCapturedVar: var = 1
//  (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
167  :     Pop           
//  true
168  :     LoadValue     : value = <Bool, true>
//  return true;
169  :     Return        
//  if ((!<bind-closed>))
170  :     Jump          : label = 171
//  false
171  :     LoadValue     : value = <Bool, false>
//  return false;
172  :     Return        
//  func Close() : (::system::Boolean)
173  :     LoadValue     : value = <null>
//  func Close() : (::system::Boolean)
174  :     Return        
