========================================================
Global Variables:
========================================================

========================================================
Functions:
========================================================
main (2 .. 167)
    Arguments:
    Captured Variables:
    Local Variables:
        b
        i8
        i16
        i32
        i64
        u8
        u16
        u32
        u64
        f32
        f64
        s
        e1
        e2
        e3
        e4

<initialize> (0 .. 1)
    Arguments:
    Captured Variables:
    Local Variables:

========================================================
Instructions:
========================================================
0    :     LoadValue     : value = <null>
1    :     Return        
//  false
2    :     LoadValue     : value = <Bool, false>
//  var b = false;
3    :     StoreLocalVar : var = 0(b)
//  1
4    :     LoadValue     : value = <I1, 1>
//  var i8 = 1 of (Int8);
5    :     StoreLocalVar : var = 1(i8)
//  2
6    :     LoadValue     : value = <I2, 2>
//  var i16 = 2 of (Int16);
7    :     StoreLocalVar : var = 2(i16)
//  4
8    :     LoadValue     : value = <I4, 4>
//  var i32 = 4 of (Int32);
9    :     StoreLocalVar : var = 3(i32)
//  8
10   :     LoadValue     : value = <I8, 8>
//  var i64 = 8 of (Int64);
11   :     StoreLocalVar : var = 4(i64)
//  1
12   :     LoadValue     : value = <U1, 1>
//  var u8 = 1 of (UInt8);
13   :     StoreLocalVar : var = 5(u8)
//  2
14   :     LoadValue     : value = <U2, 2>
//  var u16 = 2 of (UInt16);
15   :     StoreLocalVar : var = 6(u16)
//  4
16   :     LoadValue     : value = <U4, 4>
//  var u32 = 4 of (UInt32);
17   :     StoreLocalVar : var = 7(u32)
//  8
18   :     LoadValue     : value = <U8, 8>
//  var u64 = 8 of (UInt64);
19   :     StoreLocalVar : var = 8(u64)
//  1.5
20   :     LoadValue     : value = <F4, 1.5>
//  var f32 = 1.5 of (float);
21   :     StoreLocalVar : var = 9(f32)
//  3
22   :     LoadValue     : value = <F8, 3>
//  var f64 = 3 of (double);
23   :     StoreLocalVar : var = 10(f64)
//  "text"
24   :     LoadValue     : value = <Bool, text>
//  var s = "text" of (string);
25   :     StoreLocalVar : var = 11(s)
//  null
26   :     LoadValue     : value = <null>
//  var e1 : MyEnum? = null;
27   :     StoreLocalVar : var = 12(e1)
//  Item
28   :     LoadValue     : value = <enum: 0>
//  var e2 : MyEnum? = Item;
29   :     StoreLocalVar : var = 13(e2)
//  null
30   :     LoadValue     : value = <null>
//  var e3 : Seasons? = null;
31   :     StoreLocalVar : var = 14(e3)
//  None
32   :     LoadValue     : value = <enum: 0>
//  var e4 : Seasons? = None;
33   :     StoreLocalVar : var = 15(e4)
//  i8
34   :     LoadLocalVar  : var = 1(i8)
//  i8
35   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::Int16
//  i16
36   :     LoadLocalVar  : var = 2(i16)
//  (i8 < i16)
37   :     CompareLiteral: type = I2
//  (i8 < i16)
38   :     OpLT          
//  (i8 < i16)
39   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  ", "
40   :     LoadValue     : value = <Bool, , >
//  ((i8 < i16) & ", ")
41   :     OpConcat      
//  i16
42   :     LoadLocalVar  : var = 2(i16)
//  i16
43   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::Int32
//  i32
44   :     LoadLocalVar  : var = 3(i32)
//  (i16 > i32)
45   :     CompareLiteral: type = I4
//  (i16 > i32)
46   :     OpGT          
//  (i16 > i32)
47   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  (((i8 < i16) & ", ") & (i16 > i32))
48   :     OpConcat      
//  ", "
49   :     LoadValue     : value = <Bool, , >
//  ((((i8 < i16) & ", ") & (i16 > i32)) & ", ")
50   :     OpConcat      
//  i32
51   :     LoadLocalVar  : var = 3(i32)
//  i64
52   :     LoadLocalVar  : var = 4(i64)
//  (i32 == i64)
53   :     CompareValue  
//  (i32 == i64)
54   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  (((((i8 < i16) & ", ") & (i16 > i32)) & ", ") & (i32 == i64))
55   :     OpConcat      
//  ", "
56   :     LoadValue     : value = <Bool, , >
//  ((((((i8 < i16) & ", ") & (i16 > i32)) & ", ") & (i32 == i64)) & ", ")
57   :     OpConcat      
//  u8
58   :     LoadLocalVar  : var = 5(u8)
//  u8
59   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::UInt16
//  u16
60   :     LoadLocalVar  : var = 6(u16)
//  (u8 <= u16)
61   :     CompareLiteral: type = U2
//  (u8 <= u16)
62   :     OpLE          
//  (u8 <= u16)
63   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  ", "
64   :     LoadValue     : value = <Bool, , >
//  ((u8 <= u16) & ", ")
65   :     OpConcat      
//  u16
66   :     LoadLocalVar  : var = 6(u16)
//  u16
67   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::UInt32
//  u32
68   :     LoadLocalVar  : var = 7(u32)
//  (u16 >= u32)
69   :     CompareLiteral: type = U4
//  (u16 >= u32)
70   :     OpGE          
//  (u16 >= u32)
71   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  (((u8 <= u16) & ", ") & (u16 >= u32))
72   :     OpConcat      
//  ", "
73   :     LoadValue     : value = <Bool, , >
//  ((((u8 <= u16) & ", ") & (u16 >= u32)) & ", ")
74   :     OpConcat      
//  u32
75   :     LoadLocalVar  : var = 7(u32)
//  u64
76   :     LoadLocalVar  : var = 8(u64)
//  (u32 != u64)
77   :     CompareValue  
//  (u32 != u64)
78   :     OpNot         : type = Bool
//  (u32 != u64)
79   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  (((((u8 <= u16) & ", ") & (u16 >= u32)) & ", ") & (u32 != u64))
80   :     OpConcat      
//  (((((((i8 < i16) & ", ") & (i16 > i32)) & ", ") & (i32 == i64)) & ", ") & (((((u8 <= u16) & ", ") & (u16 >= u32)) & ", ") & (u32 != u64)))
81   :     OpConcat      
//  ", "
82   :     LoadValue     : value = <Bool, , >
//  ((((((((i8 < i16) & ", ") & (i16 > i32)) & ", ") & (i32 == i64)) & ", ") & (((((u8 <= u16) & ", ") & (u16 >= u32)) & ", ") & (u32 != u64))) & ", ")
83   :     OpConcat      
//  f32
84   :     LoadLocalVar  : var = 9(f32)
//  f32
85   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::Double
//  f64
86   :     LoadLocalVar  : var = 10(f64)
//  (f32 < f64)
87   :     CompareLiteral: type = F8
//  (f32 < f64)
88   :     OpLT          
//  (f32 < f64)
89   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  ", "
90   :     LoadValue     : value = <Bool, , >
//  ((f32 < f64) & ", ")
91   :     OpConcat      
//  f32
92   :     LoadLocalVar  : var = 9(f32)
//  f32
93   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::Double
//  f64
94   :     LoadLocalVar  : var = 10(f64)
//  (f32 > f64)
95   :     CompareLiteral: type = F8
//  (f32 > f64)
96   :     OpGT          
//  (f32 > f64)
97   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  (((f32 < f64) & ", ") & (f32 > f64))
98   :     OpConcat      
//  ", "
99   :     LoadValue     : value = <Bool, , >
//  ((((f32 < f64) & ", ") & (f32 > f64)) & ", ")
100  :     OpConcat      
//  f32
101  :     LoadLocalVar  : var = 9(f32)
//  f64
102  :     LoadLocalVar  : var = 10(f64)
//  (f32 == f64)
103  :     CompareValue  
//  (f32 == f64)
104  :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  (((((f32 < f64) & ", ") & (f32 > f64)) & ", ") & (f32 == f64))
105  :     OpConcat      
//  (((((((((i8 < i16) & ", ") & (i16 > i32)) & ", ") & (i32 == i64)) & ", ") & (((((u8 <= u16) & ", ") & (u16 >= u32)) & ", ") & (u32 != u64))) & ", ") & (((((f32 < f64) & ", ") & (f32 > f64)) & ", ") & (f32 == f64)))
106  :     OpConcat      
//  ", "
107  :     LoadValue     : value = <Bool, , >
//  ((((((((((i8 < i16) & ", ") & (i16 > i32)) & ", ") & (i32 == i64)) & ", ") & (((((u8 <= u16) & ", ") & (u16 >= u32)) & ", ") & (u32 != u64))) & ", ") & (((((f32 < f64) & ", ") & (f32 > f64)) & ", ") & (f32 == f64))) & ", ")
108  :     OpConcat      
//  b
109  :     LoadLocalVar  : var = 0(b)
//  true
110  :     LoadValue     : value = <Bool, true>
//  (b == true)
111  :     CompareValue  
//  (b == true)
112  :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  ", "
113  :     LoadValue     : value = <Bool, , >
//  ((b == true) & ", ")
114  :     OpConcat      
//  b
115  :     LoadLocalVar  : var = 0(b)
//  false
116  :     LoadValue     : value = <Bool, false>
//  (b != false)
117  :     CompareValue  
//  (b != false)
118  :     OpNot         : type = Bool
//  (b != false)
119  :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  (((b == true) & ", ") & (b != false))
120  :     OpConcat      
//  (((((((((((i8 < i16) & ", ") & (i16 > i32)) & ", ") & (i32 == i64)) & ", ") & (((((u8 <= u16) & ", ") & (u16 >= u32)) & ", ") & (u32 != u64))) & ", ") & (((((f32 < f64) & ", ") & (f32 > f64)) & ", ") & (f32 == f64))) & ", ") & (((b == true) & ", ") & (b != false)))
121  :     OpConcat      
//  ", "
122  :     LoadValue     : value = <Bool, , >
//  ((((((((((((i8 < i16) & ", ") & (i16 > i32)) & ", ") & (i32 == i64)) & ", ") & (((((u8 <= u16) & ", ") & (u16 >= u32)) & ", ") & (u32 != u64))) & ", ") & (((((f32 < f64) & ", ") & (f32 > f64)) & ", ") & (f32 == f64))) & ", ") & (((b == true) & ", ") & (b != false))) & ", ")
123  :     OpConcat      
//  s
124  :     LoadLocalVar  : var = 11(s)
//  "string"
125  :     LoadValue     : value = <Bool, string>
//  (s == "string")
126  :     CompareValue  
//  (s == "string")
127  :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  ", "
128  :     LoadValue     : value = <Bool, , >
//  ((s == "string") & ", ")
129  :     OpConcat      
//  s
130  :     LoadLocalVar  : var = 11(s)
//  "string"
131  :     LoadValue     : value = <Bool, string>
//  (s != "string")
132  :     CompareValue  
//  (s != "string")
133  :     OpNot         : type = Bool
//  (s != "string")
134  :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  (((s == "string") & ", ") & (s != "string"))
135  :     OpConcat      
//  (((((((((((((i8 < i16) & ", ") & (i16 > i32)) & ", ") & (i32 == i64)) & ", ") & (((((u8 <= u16) & ", ") & (u16 >= u32)) & ", ") & (u32 != u64))) & ", ") & (((((f32 < f64) & ", ") & (f32 > f64)) & ", ") & (f32 == f64))) & ", ") & (((b == true) & ", ") & (b != false))) & ", ") & (((s == "string") & ", ") & (s != "string")))
136  :     OpConcat      
//  ", "
137  :     LoadValue     : value = <Bool, , >
//  ((((((((((((((i8 < i16) & ", ") & (i16 > i32)) & ", ") & (i32 == i64)) & ", ") & (((((u8 <= u16) & ", ") & (u16 >= u32)) & ", ") & (u32 != u64))) & ", ") & (((((f32 < f64) & ", ") & (f32 > f64)) & ", ") & (f32 == f64))) & ", ") & (((b == true) & ", ") & (b != false))) & ", ") & (((s == "string") & ", ") & (s != "string"))) & ", ")
138  :     OpConcat      
//  e1
139  :     LoadLocalVar  : var = 12(e1)
//  MyEnum::Item
140  :     LoadValue     : value = <enum: 0>
//  (e1 == MyEnum::Item)
141  :     CompareValue  
//  (e1 == MyEnum::Item)
142  :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  ", "
143  :     LoadValue     : value = <Bool, , >
//  ((e1 == MyEnum::Item) & ", ")
144  :     OpConcat      
//  e2
145  :     LoadLocalVar  : var = 13(e2)
//  MyEnum::Item
146  :     LoadValue     : value = <enum: 0>
//  (e2 == MyEnum::Item)
147  :     CompareValue  
//  (e2 == MyEnum::Item)
148  :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  (((e1 == MyEnum::Item) & ", ") & (e2 == MyEnum::Item))
149  :     OpConcat      
//  (((((((((((((((i8 < i16) & ", ") & (i16 > i32)) & ", ") & (i32 == i64)) & ", ") & (((((u8 <= u16) & ", ") & (u16 >= u32)) & ", ") & (u32 != u64))) & ", ") & (((((f32 < f64) & ", ") & (f32 > f64)) & ", ") & (f32 == f64))) & ", ") & (((b == true) & ", ") & (b != false))) & ", ") & (((s == "string") & ", ") & (s != "string"))) & ", ") & (((e1 == MyEnum::Item) & ", ") & (e2 == MyEnum::Item)))
150  :     OpConcat      
//  ", "
151  :     LoadValue     : value = <Bool, , >
//  ((((((((((((((((i8 < i16) & ", ") & (i16 > i32)) & ", ") & (i32 == i64)) & ", ") & (((((u8 <= u16) & ", ") & (u16 >= u32)) & ", ") & (u32 != u64))) & ", ") & (((((f32 < f64) & ", ") & (f32 > f64)) & ", ") & (f32 == f64))) & ", ") & (((b == true) & ", ") & (b != false))) & ", ") & (((s == "string") & ", ") & (s != "string"))) & ", ") & (((e1 == MyEnum::Item) & ", ") & (e2 == MyEnum::Item))) & ", ")
152  :     OpConcat      
//  e3
153  :     LoadLocalVar  : var = 14(e3)
//  Seasons::None
154  :     LoadValue     : value = <enum: 0>
//  (e3 == Seasons::None)
155  :     CompareValue  
//  (e3 == Seasons::None)
156  :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  ", "
157  :     LoadValue     : value = <Bool, , >
//  ((e3 == Seasons::None) & ", ")
158  :     OpConcat      
//  e4
159  :     LoadLocalVar  : var = 15(e4)
//  Seasons::None
160  :     LoadValue     : value = <enum: 0>
//  (e4 == Seasons::None)
161  :     CompareValue  
//  (e4 == Seasons::None)
162  :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  (((e3 == Seasons::None) & ", ") & (e4 == Seasons::None))
163  :     OpConcat      
//  (((((((((((((((((i8 < i16) & ", ") & (i16 > i32)) & ", ") & (i32 == i64)) & ", ") & (((((u8 <= u16) & ", ") & (u16 >= u32)) & ", ") & (u32 != u64))) & ", ") & (((((f32 < f64) & ", ") & (f32 > f64)) & ", ") & (f32 == f64))) & ", ") & (((b == true) & ", ") & (b != false))) & ", ") & (((s == "string") & ", ") & (s != "string"))) & ", ") & (((e1 == MyEnum::Item) & ", ") & (e2 == MyEnum::Item))) & ", ") & (((e3 == Seasons::None) & ", ") & (e4 == Seasons::None)))
164  :     OpConcat      
//  return (((((((((((((((((i8 < i16) & ", ") & (i16 > i32)) & ", ") & (i32 == i64)) & ", ") & (((((u8 <= u16) & ", ") & (u16 >= u32)) & ", ") & (u32 != u64))) & ", ") & (((((f32 < f64) & ", ") & (f32 > f64)) & ", ") & (f32 == f64))) & ", ") & (((b == true) & ", ") & (b != false))) & ", ") & (((s == "string") & ", ") & (s != "string"))) & ", ") & (((e1 == MyEnum::Item) & ", ") & (e2 == MyEnum::Item))) & ", ") & (((e3 == Seasons::None) & ", ") & (e4 == Seasons::None)));
165  :     Return        
//  func main() : (string)
166  :     LoadValue     : value = <null>
//  func main() : (string)
167  :     Return        
