========================================================
Global Variables:
========================================================
s

========================================================
Functions:
========================================================
Callback (4 .. 19)
    Arguments:
        value
    Captured Variables:
    Local Variables:

main (20 .. 83)
    Arguments:
    Captured Variables:
    Local Variables:
        x
        y
        z
        subscription

<initialize> (0 .. 3)
    Arguments:
    Captured Variables:
    Local Variables:

<method:<bind-activator><system::Subscription>(3)> in main (84 .. 98)
    Arguments:
    Captured Variables:
        <captured><bind-cache>0
        <captured><bind-cache>1
        <captured><bind-cache>2
        <captured><bind-handler>0_0
        <captured><bind-handler>1_0
        <captured><bind-handler>2_0
        <captured><bind-opened>
        <captured><bind-closed>
        <captured>x
        <captured>y
        <captured>z
        <captured-this>0
    Local Variables:
        <bind-activator-result>

<method:<bind-callback>0_0<system::Subscription>(4)> in main (99 .. 102)
    Arguments:
        <bind-callback-argument>0
        <bind-callback-argument>1
    Captured Variables:
        <captured><bind-cache>0
        <captured><bind-cache>1
        <captured><bind-cache>2
        <captured><bind-handler>0_0
        <captured><bind-handler>1_0
        <captured><bind-handler>2_0
        <captured><bind-opened>
        <captured><bind-closed>
        <captured>x
        <captured>y
        <captured>z
        <captured-this>0
    Local Variables:

<method:<bind-callback>1_0<system::Subscription>(5)> in main (103 .. 106)
    Arguments:
        <bind-callback-argument>0
        <bind-callback-argument>1
    Captured Variables:
        <captured><bind-cache>0
        <captured><bind-cache>1
        <captured><bind-cache>2
        <captured><bind-handler>0_0
        <captured><bind-handler>1_0
        <captured><bind-handler>2_0
        <captured><bind-opened>
        <captured><bind-closed>
        <captured>x
        <captured>y
        <captured>z
        <captured-this>0
    Local Variables:

<method:<bind-callback>2_0<system::Subscription>(6)> in main (107 .. 110)
    Arguments:
        <bind-callback-argument>0
        <bind-callback-argument>1
    Captured Variables:
        <captured><bind-cache>0
        <captured><bind-cache>1
        <captured><bind-cache>2
        <captured><bind-handler>0_0
        <captured><bind-handler>1_0
        <captured><bind-handler>2_0
        <captured><bind-opened>
        <captured><bind-closed>
        <captured>x
        <captured>y
        <captured>z
        <captured-this>0
    Local Variables:

<method:Open<system::Subscription>(11)> in main (111 .. 185)
    Arguments:
    Captured Variables:
        <captured><bind-cache>0
        <captured><bind-cache>1
        <captured><bind-cache>2
        <captured><bind-handler>0_0
        <captured><bind-handler>1_0
        <captured><bind-handler>2_0
        <captured><bind-opened>
        <captured><bind-closed>
        <captured>x
        <captured>y
        <captured>z
        <captured-this>0
    Local Variables:

<method:Update<system::Subscription>(12)> in main (186 .. 200)
    Arguments:
    Captured Variables:
        <captured><bind-cache>0
        <captured><bind-cache>1
        <captured><bind-cache>2
        <captured><bind-handler>0_0
        <captured><bind-handler>1_0
        <captured><bind-handler>2_0
        <captured><bind-opened>
        <captured><bind-closed>
        <captured>x
        <captured>y
        <captured>z
        <captured-this>0
    Local Variables:

<method:Close<system::Subscription>(13)> in main (201 .. 284)
    Arguments:
    Captured Variables:
        <captured><bind-cache>0
        <captured><bind-cache>1
        <captured><bind-cache>2
        <captured><bind-handler>0_0
        <captured><bind-handler>1_0
        <captured><bind-handler>2_0
        <captured><bind-opened>
        <captured><bind-closed>
        <captured>x
        <captured>y
        <captured>z
        <captured-this>0
    Local Variables:

========================================================
Instructions:
========================================================
//  ""
0    :     LoadValue     : value = <Bool, >
//  var s = "";
1    :     StoreGlobalVar: var = 0(s)
2    :     LoadValue     : value = <null>
3    :     Return        
//  ""
4    :     LoadValue     : value = <Bool, >
//  s
5    :     LoadGlobalVar : var = 0(s)
//  ("" & s)
6    :     OpConcat      
//  "["
7    :     LoadValue     : value = <Bool, [>
//  (("" & s) & "[")
8    :     OpConcat      
//  value
9    :     LoadLocalVar  : var = 0(value)
//  value
10   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::Int32
//  (cast (int) value)
11   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  ((("" & s) & "[") & (cast (int) value))
12   :     OpConcat      
//  "]"
13   :     LoadValue     : value = <Bool, ]>
//  (((("" & s) & "[") & (cast (int) value)) & "]")
14   :     OpConcat      
//  (s = (((("" & s) & "[") & (cast (int) value)) & "]"))
15   :     Duplicate     : stackPatternCount = 0
//  (s = (((("" & s) & "[") & (cast (int) value)) & "]"))
16   :     StoreGlobalVar: var = 0(s)
//  (s = (((("" & s) & "[") & (cast (int) value)) & "]"));
17   :     Pop           
//  func Callback(value : object) : (void)
18   :     LoadValue     : value = <null>
//  func Callback(value : object) : (void)
19   :     Return        
//  new (ObservableValue^)()
20   :     LoadValue     : value = <null>
//  new (ObservableValue^)()
21   :     InvokeMethod  : methodInfo = <test::ObservableValue>, stackPatternCount = 0
//  var x = new (ObservableValue^)();
22   :     StoreLocalVar : var = 0(x)
//  new (ObservableValue^)()
23   :     LoadValue     : value = <null>
//  new (ObservableValue^)()
24   :     InvokeMethod  : methodInfo = <test::ObservableValue>, stackPatternCount = 0
//  var y = new (ObservableValue^)();
25   :     StoreLocalVar : var = 1(y)
//  new (ObservableValue^)()
26   :     LoadValue     : value = <null>
//  new (ObservableValue^)()
27   :     InvokeMethod  : methodInfo = <test::ObservableValue>, stackPatternCount = 0
//  var z = new (ObservableValue^)();
28   :     StoreLocalVar : var = 2(z)
//  null
29   :     LoadValue     : value = <null>
//  null
30   :     LoadValue     : value = <null>
//  null
31   :     LoadValue     : value = <null>
//  null
32   :     LoadValue     : value = <null>
//  null
33   :     LoadValue     : value = <null>
//  null
34   :     LoadValue     : value = <null>
//  false
35   :     LoadValue     : value = <Bool, false>
//  false
36   :     LoadValue     : value = <Bool, false>
//  new (::system::Subscription^)
37   :     LoadLocalVar  : var = 0(x)
//  new (::system::Subscription^)
38   :     LoadLocalVar  : var = 1(y)
//  new (::system::Subscription^)
39   :     LoadLocalVar  : var = 2(z)
//  new (::system::Subscription^)
40   :     LoadValue     : value = <null>
//  new (::system::Subscription^)
41   :     CreateClosureContext: stackPatternCount = 12
//  new (::system::Subscription^)
42   :     LoadMethodInfo: methodInfo = Open<system::Subscription>
//  func Open() : (::system::Boolean)
43   :     LoadFunction  : func = 7(<method:Open<system::Subscription>(11)> in main)
//  new (::system::Subscription^)
44   :     LoadMethodInfo: methodInfo = Update<system::Subscription>
//  func Update() : (::system::Boolean)
45   :     LoadFunction  : func = 8(<method:Update<system::Subscription>(12)> in main)
//  new (::system::Subscription^)
46   :     LoadMethodInfo: methodInfo = Close<system::Subscription>
//  func Close() : (::system::Boolean)
47   :     LoadFunction  : func = 9(<method:Close<system::Subscription>(13)> in main)
//  new (::system::Subscription^)
48   :     CreateInterface: methodInfo = <system::Subscription>, stackPatternCount = 6
//  var subscription = new (::system::Subscription^)
49   :     StoreLocalVar : var = 3(subscription)
//  subscription
50   :     LoadLocalVar  : var = 3(subscription)
//  subscription.Open()
51   :     InvokeMethod  : methodInfo = Open<system::Subscription>, stackPatternCount = 0
//  subscription.Open();
52   :     Pop           
//  subscription
53   :     LoadLocalVar  : var = 3(subscription)
//  Callback
54   :     CreateClosureContext: stackPatternCount = 0
//  Callback
55   :     LoadFunction  : func = 0(Callback)
//  Callback
56   :     CreateClosure 
//  attach(subscription.ValueChanged, Callback)
57   :     AttachEvent   : eventInfo = ValueChanged<system::Subscription>
//  attach(subscription.ValueChanged, Callback);
58   :     Pop           
//  10
59   :     LoadValue     : value = <I4, 10>
//  (x.Value = 10)
60   :     Duplicate     : stackPatternCount = 0
//  x
61   :     LoadLocalVar  : var = 0(x)
//  (x.Value = 10)
62   :     InvokeMethod  : methodInfo = SetValue<test::ObservableValue>, stackPatternCount = 1
//  (x.Value = 10)
63   :     Pop           
//  (x.Value = 10);
64   :     Pop           
//  20
65   :     LoadValue     : value = <I4, 20>
//  (y.Value = 20)
66   :     Duplicate     : stackPatternCount = 0
//  y
67   :     LoadLocalVar  : var = 1(y)
//  (y.Value = 20)
68   :     InvokeMethod  : methodInfo = SetValue<test::ObservableValue>, stackPatternCount = 1
//  (y.Value = 20)
69   :     Pop           
//  (y.Value = 20);
70   :     Pop           
//  30
71   :     LoadValue     : value = <I4, 30>
//  (z.Value = 30)
72   :     Duplicate     : stackPatternCount = 0
//  z
73   :     LoadLocalVar  : var = 2(z)
//  (z.Value = 30)
74   :     InvokeMethod  : methodInfo = SetValue<test::ObservableValue>, stackPatternCount = 1
//  (z.Value = 30)
75   :     Pop           
//  (z.Value = 30);
76   :     Pop           
//  subscription
77   :     LoadLocalVar  : var = 3(subscription)
//  subscription.Close()
78   :     InvokeMethod  : methodInfo = Close<system::Subscription>, stackPatternCount = 0
//  subscription.Close();
79   :     Pop           
//  s
80   :     LoadGlobalVar : var = 0(s)
//  return s;
81   :     Return        
//  func main() : (string)
82   :     LoadValue     : value = <null>
//  func main() : (string)
83   :     Return        
//  <bind-cache>0
84   :     LoadCapturedVar: var = 0(<captured><bind-cache>0)
//  <bind-cache>0.Value
85   :     InvokeMethod  : methodInfo = GetValue<test::ObservableValue>, stackPatternCount = 0
//  <bind-cache>1
86   :     LoadCapturedVar: var = 1(<captured><bind-cache>1)
//  <bind-cache>1.Value
87   :     InvokeMethod  : methodInfo = GetValue<test::ObservableValue>, stackPatternCount = 0
//  <bind-cache>2
88   :     LoadCapturedVar: var = 2(<captured><bind-cache>2)
//  <bind-cache>2.Value
89   :     InvokeMethod  : methodInfo = GetValue<test::ObservableValue>, stackPatternCount = 0
//  (<bind-cache>1.Value + <bind-cache>2.Value)
90   :     OpAdd         : type = I4
//  (<bind-cache>0.Value + (<bind-cache>1.Value + <bind-cache>2.Value))
91   :     OpAdd         : type = I4
//  var <bind-activator-result> = (<bind-cache>0.Value + (<bind-cache>1.Value + <bind-cache>2.Value));
92   :     StoreLocalVar : var = 0(<bind-activator-result>)
//  <bind-activator-result>
93   :     LoadLocalVar  : var = 0(<bind-activator-result>)
//  ValueChanged(<bind-activator-result>)
94   :     LoadCapturedVar: var = 11(<captured-this>0)
//  ValueChanged(<bind-activator-result>)
95   :     InvokeEvent   : eventInfo = ValueChanged<system::Subscription>, stackPatternCount = 1
//  ValueChanged(<bind-activator-result>);
96   :     Pop           
//  func <bind-activator>() : (::system::Void)
97   :     LoadValue     : value = <null>
//  func <bind-activator>() : (::system::Void)
98   :     Return        
//  <bind-activator>()
99   :     InvokeWithContext: func = 3(<method:<bind-activator><system::Subscription>(3)> in main), stackPatternCount = 0
//  <bind-activator>();
100  :     Pop           
//  func <bind-callback>0_0(<bind-callback-argument>0 : ::system::Int32, <bind-callback-argument>1 : ::system::Int32) : (::system::Void)
101  :     LoadValue     : value = <null>
//  func <bind-callback>0_0(<bind-callback-argument>0 : ::system::Int32, <bind-callback-argument>1 : ::system::Int32) : (::system::Void)
102  :     Return        
//  <bind-activator>()
103  :     InvokeWithContext: func = 3(<method:<bind-activator><system::Subscription>(3)> in main), stackPatternCount = 0
//  <bind-activator>();
104  :     Pop           
//  func <bind-callback>1_0(<bind-callback-argument>0 : ::system::Int32, <bind-callback-argument>1 : ::system::Int32) : (::system::Void)
105  :     LoadValue     : value = <null>
//  func <bind-callback>1_0(<bind-callback-argument>0 : ::system::Int32, <bind-callback-argument>1 : ::system::Int32) : (::system::Void)
106  :     Return        
//  <bind-activator>()
107  :     InvokeWithContext: func = 3(<method:<bind-activator><system::Subscription>(3)> in main), stackPatternCount = 0
//  <bind-activator>();
108  :     Pop           
//  func <bind-callback>2_0(<bind-callback-argument>0 : ::system::Int32, <bind-callback-argument>1 : ::system::Int32) : (::system::Void)
109  :     LoadValue     : value = <null>
//  func <bind-callback>2_0(<bind-callback-argument>0 : ::system::Int32, <bind-callback-argument>1 : ::system::Int32) : (::system::Void)
110  :     Return        
//  <bind-opened>
111  :     LoadCapturedVar: var = 6(<captured><bind-opened>)
//  (!<bind-opened>)
112  :     OpNot         : type = Bool
//  if ((!<bind-opened>))
113  :     OpNot         : type = Bool
//  if ((!<bind-opened>))
114  :     JumpIf        : label = 182
//  true
115  :     LoadValue     : value = <Bool, true>
//  (<bind-opened> = true)
116  :     Duplicate     : stackPatternCount = 0
//  (<bind-opened> = true)
117  :     StoreCapturedVar: var = 6
//  (<bind-opened> = true);
118  :     Pop           
//  (x ?? null of (::test::ObservableValue^))
119  :     InstallTry    : label = 123
//  x
120  :     LoadCapturedVar: var = 8(<captured>x)
//  (x ?? null of (::test::ObservableValue^))
121  :     UninstallTry  : stackPatternCount = 1
//  (x ?? null of (::test::ObservableValue^))
122  :     Jump          : label = 124
//  null
123  :     LoadValue     : value = <null>
//  (<bind-cache>0 = (x ?? null of (::test::ObservableValue^)))
124  :     Duplicate     : stackPatternCount = 0
//  (<bind-cache>0 = (x ?? null of (::test::ObservableValue^)))
125  :     StoreCapturedVar: var = 0
//  (<bind-cache>0 = (x ?? null of (::test::ObservableValue^)));
126  :     Pop           
//  (y ?? null of (::test::ObservableValue^))
127  :     InstallTry    : label = 131
//  y
128  :     LoadCapturedVar: var = 9(<captured>y)
//  (y ?? null of (::test::ObservableValue^))
129  :     UninstallTry  : stackPatternCount = 1
//  (y ?? null of (::test::ObservableValue^))
130  :     Jump          : label = 132
//  null
131  :     LoadValue     : value = <null>
//  (<bind-cache>1 = (y ?? null of (::test::ObservableValue^)))
132  :     Duplicate     : stackPatternCount = 0
//  (<bind-cache>1 = (y ?? null of (::test::ObservableValue^)))
133  :     StoreCapturedVar: var = 1
//  (<bind-cache>1 = (y ?? null of (::test::ObservableValue^)));
134  :     Pop           
//  (z ?? null of (::test::ObservableValue^))
135  :     InstallTry    : label = 139
//  z
136  :     LoadCapturedVar: var = 10(<captured>z)
//  (z ?? null of (::test::ObservableValue^))
137  :     UninstallTry  : stackPatternCount = 1
//  (z ?? null of (::test::ObservableValue^))
138  :     Jump          : label = 140
//  null
139  :     LoadValue     : value = <null>
//  (<bind-cache>2 = (z ?? null of (::test::ObservableValue^)))
140  :     Duplicate     : stackPatternCount = 0
//  (<bind-cache>2 = (z ?? null of (::test::ObservableValue^)))
141  :     StoreCapturedVar: var = 2
//  (<bind-cache>2 = (z ?? null of (::test::ObservableValue^)));
142  :     Pop           
//  (attach(<bind-cache>0.ValueChanged, <bind-callback>0_0) ?? null)
143  :     InstallTry    : label = 151
//  <bind-cache>0
144  :     LoadCapturedVar: var = 0(<captured><bind-cache>0)
//  <bind-callback>0_0
145  :     LoadClosureContext
//  <bind-callback>0_0
146  :     LoadFunction  : func = 4(<method:<bind-callback>0_0<system::Subscription>(4)> in main)
//  <bind-callback>0_0
147  :     CreateClosure 
//  attach(<bind-cache>0.ValueChanged, <bind-callback>0_0)
148  :     AttachEvent   : eventInfo = ValueChanged<test::ObservableValue>
//  (attach(<bind-cache>0.ValueChanged, <bind-callback>0_0) ?? null)
149  :     UninstallTry  : stackPatternCount = 1
//  (attach(<bind-cache>0.ValueChanged, <bind-callback>0_0) ?? null)
150  :     Jump          : label = 152
//  null
151  :     LoadValue     : value = <null>
//  (<bind-handler>0_0 = (attach(<bind-cache>0.ValueChanged, <bind-callback>0_0) ?? null))
152  :     Duplicate     : stackPatternCount = 0
//  (<bind-handler>0_0 = (attach(<bind-cache>0.ValueChanged, <bind-callback>0_0) ?? null))
153  :     StoreCapturedVar: var = 3
//  (<bind-handler>0_0 = (attach(<bind-cache>0.ValueChanged, <bind-callback>0_0) ?? null));
154  :     Pop           
//  (attach(<bind-cache>1.ValueChanged, <bind-callback>1_0) ?? null)
155  :     InstallTry    : label = 163
//  <bind-cache>1
156  :     LoadCapturedVar: var = 1(<captured><bind-cache>1)
//  <bind-callback>1_0
157  :     LoadClosureContext
//  <bind-callback>1_0
158  :     LoadFunction  : func = 5(<method:<bind-callback>1_0<system::Subscription>(5)> in main)
//  <bind-callback>1_0
159  :     CreateClosure 
//  attach(<bind-cache>1.ValueChanged, <bind-callback>1_0)
160  :     AttachEvent   : eventInfo = ValueChanged<test::ObservableValue>
//  (attach(<bind-cache>1.ValueChanged, <bind-callback>1_0) ?? null)
161  :     UninstallTry  : stackPatternCount = 1
//  (attach(<bind-cache>1.ValueChanged, <bind-callback>1_0) ?? null)
162  :     Jump          : label = 164
//  null
163  :     LoadValue     : value = <null>
//  (<bind-handler>1_0 = (attach(<bind-cache>1.ValueChanged, <bind-callback>1_0) ?? null))
164  :     Duplicate     : stackPatternCount = 0
//  (<bind-handler>1_0 = (attach(<bind-cache>1.ValueChanged, <bind-callback>1_0) ?? null))
165  :     StoreCapturedVar: var = 4
//  (<bind-handler>1_0 = (attach(<bind-cache>1.ValueChanged, <bind-callback>1_0) ?? null));
166  :     Pop           
//  (attach(<bind-cache>2.ValueChanged, <bind-callback>2_0) ?? null)
167  :     InstallTry    : label = 175
//  <bind-cache>2
168  :     LoadCapturedVar: var = 2(<captured><bind-cache>2)
//  <bind-callback>2_0
169  :     LoadClosureContext
//  <bind-callback>2_0
170  :     LoadFunction  : func = 6(<method:<bind-callback>2_0<system::Subscription>(6)> in main)
//  <bind-callback>2_0
171  :     CreateClosure 
//  attach(<bind-cache>2.ValueChanged, <bind-callback>2_0)
172  :     AttachEvent   : eventInfo = ValueChanged<test::ObservableValue>
//  (attach(<bind-cache>2.ValueChanged, <bind-callback>2_0) ?? null)
173  :     UninstallTry  : stackPatternCount = 1
//  (attach(<bind-cache>2.ValueChanged, <bind-callback>2_0) ?? null)
174  :     Jump          : label = 176
//  null
175  :     LoadValue     : value = <null>
//  (<bind-handler>2_0 = (attach(<bind-cache>2.ValueChanged, <bind-callback>2_0) ?? null))
176  :     Duplicate     : stackPatternCount = 0
//  (<bind-handler>2_0 = (attach(<bind-cache>2.ValueChanged, <bind-callback>2_0) ?? null))
177  :     StoreCapturedVar: var = 5
//  (<bind-handler>2_0 = (attach(<bind-cache>2.ValueChanged, <bind-callback>2_0) ?? null));
178  :     Pop           
//  true
179  :     LoadValue     : value = <Bool, true>
//  return true;
180  :     Return        
//  if ((!<bind-opened>))
181  :     Jump          : label = 182
//  false
182  :     LoadValue     : value = <Bool, false>
//  return false;
183  :     Return        
//  func Open() : (::system::Boolean)
184  :     LoadValue     : value = <null>
//  func Open() : (::system::Boolean)
185  :     Return        
//  <bind-opened>
186  :     LoadCapturedVar: var = 6(<captured><bind-opened>)
//  <bind-closed>
187  :     LoadCapturedVar: var = 7(<captured><bind-closed>)
//  (!<bind-closed>)
188  :     OpNot         : type = Bool
//  (<bind-opened> and (!<bind-closed>))
189  :     OpAnd         : type = Bool
//  if ((<bind-opened> and (!<bind-closed>)))
190  :     OpNot         : type = Bool
//  if ((<bind-opened> and (!<bind-closed>)))
191  :     JumpIf        : label = 197
//  <bind-activator>()
192  :     InvokeWithContext: func = 3(<method:<bind-activator><system::Subscription>(3)> in main), stackPatternCount = 0
//  <bind-activator>();
193  :     Pop           
//  true
194  :     LoadValue     : value = <Bool, true>
//  return true;
195  :     Return        
//  if ((<bind-opened> and (!<bind-closed>)))
196  :     Jump          : label = 197
//  false
197  :     LoadValue     : value = <Bool, false>
//  return false;
198  :     Return        
//  func Update() : (::system::Boolean)
199  :     LoadValue     : value = <null>
//  func Update() : (::system::Boolean)
200  :     Return        
//  <bind-closed>
201  :     LoadCapturedVar: var = 7(<captured><bind-closed>)
//  (!<bind-closed>)
202  :     OpNot         : type = Bool
//  if ((!<bind-closed>))
203  :     OpNot         : type = Bool
//  if ((!<bind-closed>))
204  :     JumpIf        : label = 281
//  true
205  :     LoadValue     : value = <Bool, true>
//  (<bind-closed> = true)
206  :     Duplicate     : stackPatternCount = 0
//  (<bind-closed> = true)
207  :     StoreCapturedVar: var = 7
//  (<bind-closed> = true);
208  :     Pop           
//  <bind-handler>0_0
209  :     LoadCapturedVar: var = 3(<captured><bind-handler>0_0)
//  <bind-handler>0_0 is not null
210  :     LoadValue     : value = <null>
//  <bind-handler>0_0 is not null
211  :     CompareReference
//  <bind-handler>0_0 is not null
212  :     OpNot         : type = Bool
//  if (<bind-handler>0_0 is not null)
213  :     OpNot         : type = Bool
//  if (<bind-handler>0_0 is not null)
214  :     JumpIf        : label = 224
//  <bind-cache>0
215  :     LoadCapturedVar: var = 0(<captured><bind-cache>0)
//  <bind-handler>0_0
216  :     LoadCapturedVar: var = 3(<captured><bind-handler>0_0)
//  detach(<bind-cache>0.ValueChanged, <bind-handler>0_0)
217  :     DetachEvent   : eventInfo = ValueChanged<test::ObservableValue>
//  detach(<bind-cache>0.ValueChanged, <bind-handler>0_0);
218  :     Pop           
//  null
219  :     LoadValue     : value = <null>
//  (<bind-handler>0_0 = null)
220  :     Duplicate     : stackPatternCount = 0
//  (<bind-handler>0_0 = null)
221  :     StoreCapturedVar: var = 3
//  (<bind-handler>0_0 = null);
222  :     Pop           
//  if (<bind-handler>0_0 is not null)
223  :     Jump          : label = 224
//  <bind-handler>1_0
224  :     LoadCapturedVar: var = 4(<captured><bind-handler>1_0)
//  <bind-handler>1_0 is not null
225  :     LoadValue     : value = <null>
//  <bind-handler>1_0 is not null
226  :     CompareReference
//  <bind-handler>1_0 is not null
227  :     OpNot         : type = Bool
//  if (<bind-handler>1_0 is not null)
228  :     OpNot         : type = Bool
//  if (<bind-handler>1_0 is not null)
229  :     JumpIf        : label = 239
//  <bind-cache>1
230  :     LoadCapturedVar: var = 1(<captured><bind-cache>1)
//  <bind-handler>1_0
231  :     LoadCapturedVar: var = 4(<captured><bind-handler>1_0)
//  detach(<bind-cache>1.ValueChanged, <bind-handler>1_0)
232  :     DetachEvent   : eventInfo = ValueChanged<test::ObservableValue>
//  detach(<bind-cache>1.ValueChanged, <bind-handler>1_0);
233  :     Pop           
//  null
234  :     LoadValue     : value = <null>
//  (<bind-handler>1_0 = null)
235  :     Duplicate     : stackPatternCount = 0
//  (<bind-handler>1_0 = null)
236  :     StoreCapturedVar: var = 4
//  (<bind-handler>1_0 = null);
237  :     Pop           
//  if (<bind-handler>1_0 is not null)
238  :     Jump          : label = 239
//  <bind-handler>2_0
239  :     LoadCapturedVar: var = 5(<captured><bind-handler>2_0)
//  <bind-handler>2_0 is not null
240  :     LoadValue     : value = <null>
//  <bind-handler>2_0 is not null
241  :     CompareReference
//  <bind-handler>2_0 is not null
242  :     OpNot         : type = Bool
//  if (<bind-handler>2_0 is not null)
243  :     OpNot         : type = Bool
//  if (<bind-handler>2_0 is not null)
244  :     JumpIf        : label = 254
//  <bind-cache>2
245  :     LoadCapturedVar: var = 2(<captured><bind-cache>2)
//  <bind-handler>2_0
246  :     LoadCapturedVar: var = 5(<captured><bind-handler>2_0)
//  detach(<bind-cache>2.ValueChanged, <bind-handler>2_0)
247  :     DetachEvent   : eventInfo = ValueChanged<test::ObservableValue>
//  detach(<bind-cache>2.ValueChanged, <bind-handler>2_0);
248  :     Pop           
//  null
249  :     LoadValue     : value = <null>
//  (<bind-handler>2_0 = null)
250  :     Duplicate     : stackPatternCount = 0
//  (<bind-handler>2_0 = null)
251  :     StoreCapturedVar: var = 5
//  (<bind-handler>2_0 = null);
252  :     Pop           
//  if (<bind-handler>2_0 is not null)
253  :     Jump          : label = 254
//  null
254  :     LoadValue     : value = <null>
//  (<bind-cache>0 = null of (::test::ObservableValue^))
255  :     Duplicate     : stackPatternCount = 0
//  (<bind-cache>0 = null of (::test::ObservableValue^))
256  :     StoreCapturedVar: var = 0
//  (<bind-cache>0 = null of (::test::ObservableValue^));
257  :     Pop           
//  null
258  :     LoadValue     : value = <null>
//  (<bind-cache>1 = null of (::test::ObservableValue^))
259  :     Duplicate     : stackPatternCount = 0
//  (<bind-cache>1 = null of (::test::ObservableValue^))
260  :     StoreCapturedVar: var = 1
//  (<bind-cache>1 = null of (::test::ObservableValue^));
261  :     Pop           
//  null
262  :     LoadValue     : value = <null>
//  (<bind-cache>2 = null of (::test::ObservableValue^))
263  :     Duplicate     : stackPatternCount = 0
//  (<bind-cache>2 = null of (::test::ObservableValue^))
264  :     StoreCapturedVar: var = 2
//  (<bind-cache>2 = null of (::test::ObservableValue^));
265  :     Pop           
//  null
266  :     LoadValue     : value = <null>
//  (<bind-handler>0_0 = null of (::system::reflection::EventHandler^))
267  :     Duplicate     : stackPatternCount = 0
//  (<bind-handler>0_0 = null of (::system::reflection::EventHandler^))
268  :     StoreCapturedVar: var = 3
//  (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
269  :     Pop           
//  null
270  :     LoadValue     : value = <null>
//  (<bind-handler>1_0 = null of (::system::reflection::EventHandler^))
271  :     Duplicate     : stackPatternCount = 0
//  (<bind-handler>1_0 = null of (::system::reflection::EventHandler^))
272  :     StoreCapturedVar: var = 4
//  (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
273  :     Pop           
//  null
274  :     LoadValue     : value = <null>
//  (<bind-handler>2_0 = null of (::system::reflection::EventHandler^))
275  :     Duplicate     : stackPatternCount = 0
//  (<bind-handler>2_0 = null of (::system::reflection::EventHandler^))
276  :     StoreCapturedVar: var = 5
//  (<bind-handler>2_0 = null of (::system::reflection::EventHandler^));
277  :     Pop           
//  true
278  :     LoadValue     : value = <Bool, true>
//  return true;
279  :     Return        
//  if ((!<bind-closed>))
280  :     Jump          : label = 281
//  false
281  :     LoadValue     : value = <Bool, false>
//  return false;
282  :     Return        
//  func Close() : (::system::Boolean)
283  :     LoadValue     : value = <null>
//  func Close() : (::system::Boolean)
284  :     Return        
