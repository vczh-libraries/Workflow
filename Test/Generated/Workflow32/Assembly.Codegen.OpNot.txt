========================================================
Global Variables:
========================================================

========================================================
Functions:
========================================================
main (2 .. 79)
    Arguments:
    Captured Variables:
    Local Variables:
        b
        i8
        i16
        i32
        i64
        u8
        u16
        u32
        u64
        f32
        f64
        s

<initialize> (0 .. 1)
    Arguments:
    Captured Variables:
    Local Variables:

========================================================
Instructions:
========================================================
0    :     LoadValue     : value = <null>
1    :     Return        
//  false
2    :     LoadValue     : value = <Bool, false>
//  var b = false;
3    :     StoreLocalVar : var = 0(b)
//  1
4    :     LoadValue     : value = <I1, 1>
//  var i8 = 1 of (Int8);
5    :     StoreLocalVar : var = 1(i8)
//  2
6    :     LoadValue     : value = <I2, 2>
//  var i16 = 2 of (Int16);
7    :     StoreLocalVar : var = 2(i16)
//  4
8    :     LoadValue     : value = <I4, 4>
//  var i32 = 4 of (Int32);
9    :     StoreLocalVar : var = 3(i32)
//  8
10   :     LoadValue     : value = <I8, 8>
//  var i64 = 8 of (Int64);
11   :     StoreLocalVar : var = 4(i64)
//  1
12   :     LoadValue     : value = <U1, 1>
//  var u8 = 1 of (UInt8);
13   :     StoreLocalVar : var = 5(u8)
//  2
14   :     LoadValue     : value = <U2, 2>
//  var u16 = 2 of (UInt16);
15   :     StoreLocalVar : var = 6(u16)
//  4
16   :     LoadValue     : value = <U4, 4>
//  var u32 = 4 of (UInt32);
17   :     StoreLocalVar : var = 7(u32)
//  8
18   :     LoadValue     : value = <U8, 8>
//  var u64 = 8 of (UInt64);
19   :     StoreLocalVar : var = 8(u64)
//  1.5
20   :     LoadValue     : value = <F4, 1.5>
//  var f32 = 1.5 of (float);
21   :     StoreLocalVar : var = 9(f32)
//  3
22   :     LoadValue     : value = <F8, 3>
//  var f64 = 3 of (double);
23   :     StoreLocalVar : var = 10(f64)
//  "text"
24   :     LoadValue     : value = <String, text>
//  var s = "text" of (string);
25   :     StoreLocalVar : var = 11(s)
//  b
26   :     LoadLocalVar  : var = 0(b)
//  (!b)
27   :     OpNot         : type = Bool
//  (!b)
28   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  ", "
29   :     LoadValue     : value = <String, , >
//  ((!b) & ", ")
30   :     OpConcat      
//  i8
31   :     LoadLocalVar  : var = 1(i8)
//  (!i8)
32   :     OpNot         : type = I1
//  (!i8)
33   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  (((!b) & ", ") & (!i8))
34   :     OpConcat      
//  ", "
35   :     LoadValue     : value = <String, , >
//  ((((!b) & ", ") & (!i8)) & ", ")
36   :     OpConcat      
//  i16
37   :     LoadLocalVar  : var = 2(i16)
//  (!i16)
38   :     OpNot         : type = I2
//  (!i16)
39   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  (((((!b) & ", ") & (!i8)) & ", ") & (!i16))
40   :     OpConcat      
//  ", "
41   :     LoadValue     : value = <String, , >
//  ((((((!b) & ", ") & (!i8)) & ", ") & (!i16)) & ", ")
42   :     OpConcat      
//  i32
43   :     LoadLocalVar  : var = 3(i32)
//  (!i32)
44   :     OpNot         : type = I4
//  (!i32)
45   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  (((((((!b) & ", ") & (!i8)) & ", ") & (!i16)) & ", ") & (!i32))
46   :     OpConcat      
//  ", "
47   :     LoadValue     : value = <String, , >
//  ((((((((!b) & ", ") & (!i8)) & ", ") & (!i16)) & ", ") & (!i32)) & ", ")
48   :     OpConcat      
//  i64
49   :     LoadLocalVar  : var = 4(i64)
//  (!i64)
50   :     OpNot         : type = I8
//  (!i64)
51   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  (((((((((!b) & ", ") & (!i8)) & ", ") & (!i16)) & ", ") & (!i32)) & ", ") & (!i64))
52   :     OpConcat      
//  ", "
53   :     LoadValue     : value = <String, , >
//  ((((((((((!b) & ", ") & (!i8)) & ", ") & (!i16)) & ", ") & (!i32)) & ", ") & (!i64)) & ", ")
54   :     OpConcat      
//  u8
55   :     LoadLocalVar  : var = 5(u8)
//  (!u8)
56   :     OpNot         : type = U1
//  (!u8)
57   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  (((((((((((!b) & ", ") & (!i8)) & ", ") & (!i16)) & ", ") & (!i32)) & ", ") & (!i64)) & ", ") & (!u8))
58   :     OpConcat      
//  ", "
59   :     LoadValue     : value = <String, , >
//  ((((((((((((!b) & ", ") & (!i8)) & ", ") & (!i16)) & ", ") & (!i32)) & ", ") & (!i64)) & ", ") & (!u8)) & ", ")
60   :     OpConcat      
//  u16
61   :     LoadLocalVar  : var = 6(u16)
//  (!u16)
62   :     OpNot         : type = U2
//  (!u16)
63   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  (((((((((((((!b) & ", ") & (!i8)) & ", ") & (!i16)) & ", ") & (!i32)) & ", ") & (!i64)) & ", ") & (!u8)) & ", ") & (!u16))
64   :     OpConcat      
//  ", "
65   :     LoadValue     : value = <String, , >
//  ((((((((((((((!b) & ", ") & (!i8)) & ", ") & (!i16)) & ", ") & (!i32)) & ", ") & (!i64)) & ", ") & (!u8)) & ", ") & (!u16)) & ", ")
66   :     OpConcat      
//  u32
67   :     LoadLocalVar  : var = 7(u32)
//  (!u32)
68   :     OpNot         : type = U4
//  (!u32)
69   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  (((((((((((((((!b) & ", ") & (!i8)) & ", ") & (!i16)) & ", ") & (!i32)) & ", ") & (!i64)) & ", ") & (!u8)) & ", ") & (!u16)) & ", ") & (!u32))
70   :     OpConcat      
//  ", "
71   :     LoadValue     : value = <String, , >
//  ((((((((((((((((!b) & ", ") & (!i8)) & ", ") & (!i16)) & ", ") & (!i32)) & ", ") & (!i64)) & ", ") & (!u8)) & ", ") & (!u16)) & ", ") & (!u32)) & ", ")
72   :     OpConcat      
//  u64
73   :     LoadLocalVar  : var = 8(u64)
//  (!u64)
74   :     OpNot         : type = U8
//  (!u64)
75   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  (((((((((((((((((!b) & ", ") & (!i8)) & ", ") & (!i16)) & ", ") & (!i32)) & ", ") & (!i64)) & ", ") & (!u8)) & ", ") & (!u16)) & ", ") & (!u32)) & ", ") & (!u64))
76   :     OpConcat      
//  return (((((((((((((((((!b) & ", ") & (!i8)) & ", ") & (!i16)) & ", ") & (!i32)) & ", ") & (!i64)) & ", ") & (!u8)) & ", ") & (!u16)) & ", ") & (!u32)) & ", ") & (!u64));
77   :     Return        
//  func main() : (string)
78   :     LoadValue     : value = <null>
//  func main() : (string)
79   :     Return        
