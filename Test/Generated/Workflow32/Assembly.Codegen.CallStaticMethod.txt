========================================================
Global Variables:
========================================================

========================================================
Functions:
========================================================
main (2 .. 9)
    Arguments:
    Captured Variables:
    Local Variables:

Calculator::Internal::Sum (10 .. 17)
    Arguments:
        begin
        end
    Captured Variables:
    Local Variables:

Calculator::Sum2 (18 .. 38)
    Arguments:
        begin
        end
        sum
    Captured Variables:
    Local Variables:

Calculator::#ctor (39 .. 40)
    Arguments:
    Captured Variables:
        <captured-this>0
    Local Variables:

<initialize> (0 .. 1)
    Arguments:
    Captured Variables:
    Local Variables:

========================================================
Instructions:
========================================================
0    :     LoadValue     : value = <null>
1    :     Return        
//  1
2    :     LoadValue     : value = <I4, 1>
//  10
3    :     LoadValue     : value = <I4, 10>
//  Calculator::Internal::Sum(1, 10)
4    :     LoadValue     : value = <null>
//  Calculator::Internal::Sum(1, 10)
5    :     InvokeMethod  : methodInfo = Sum<Calculator::Internal>, stackPatternCount = 2
//  Calculator::Internal::Sum(1, 10)
6    :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  return Calculator::Internal::Sum(1, 10);
7    :     Return        
//  func main() : (string)
8    :     LoadValue     : value = <null>
//  func main() : (string)
9    :     Return        
//  begin
10   :     LoadLocalVar  : var = 0(begin)
//  end
11   :     LoadLocalVar  : var = 1(end)
//  0
12   :     LoadValue     : value = <I4, 0>
//  Sum2(begin, end, 0)
13   :     LoadValue     : value = <null>
//  Sum2(begin, end, 0)
14   :     InvokeMethod  : methodInfo = Sum2<Calculator>, stackPatternCount = 3
//  return Sum2(begin, end, 0);
15   :     Return        
//  func Sum(begin : int, end : int) : (int)
16   :     LoadValue     : value = <null>
//  func Sum(begin : int, end : int) : (int)
17   :     Return        
//  begin
18   :     LoadLocalVar  : var = 0(begin)
//  end
19   :     LoadLocalVar  : var = 1(end)
//  (begin > end)
20   :     CompareLiteral: type = I4
//  (begin > end)
21   :     OpGT          
//  if ((begin > end))
22   :     OpNot         : type = Bool
//  if ((begin > end))
23   :     JumpIf        : label = 27
//  sum
24   :     LoadLocalVar  : var = 2(sum)
//  return sum;
25   :     Return        
//  if ((begin > end))
26   :     Jump          : label = 37
//  begin
27   :     LoadLocalVar  : var = 0(begin)
//  1
28   :     LoadValue     : value = <I4, 1>
//  (begin + 1)
29   :     OpAdd         : type = I4
//  end
30   :     LoadLocalVar  : var = 1(end)
//  sum
31   :     LoadLocalVar  : var = 2(sum)
//  begin
32   :     LoadLocalVar  : var = 0(begin)
//  (sum + begin)
33   :     OpAdd         : type = I4
//  Sum2((begin + 1), end, (sum + begin))
34   :     LoadValue     : value = <null>
//  Sum2((begin + 1), end, (sum + begin))
35   :     InvokeMethod  : methodInfo = Sum2<Calculator>, stackPatternCount = 3
//  return Sum2((begin + 1), end, (sum + begin));
36   :     Return        
//  func Sum2(begin : int, end : int, sum : int) : (int)
37   :     LoadValue     : value = <null>
//  func Sum2(begin : int, end : int, sum : int) : (int)
38   :     Return        
//  new ()
39   :     LoadValue     : value = <null>
//  new ()
40   :     Return        
