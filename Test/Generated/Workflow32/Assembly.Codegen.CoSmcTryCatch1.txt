========================================================
Global Variables:
========================================================
s

========================================================
Functions:
========================================================
SMTryCatch1::A (4 .. 31)
    Arguments:
    Captured Variables:
        <captured-this>0
    Local Variables:

SMTryCatch1::B (32 .. 59)
    Arguments:
    Captured Variables:
        <captured-this>0
    Local Variables:

SMTryCatch1::<state>CreateCoroutine (60 .. 94)
    Arguments:
        <state>startState
    Captured Variables:
        <captured-this>0
    Local Variables:
        <state>stateMachineObject
        <state>previousCoroutine

SMTryCatch1::#ctor (790 .. 794)
    Arguments:
    Captured Variables:
        <captured-this>0
    Local Variables:

main (795 .. 820)
    Arguments:
    Captured Variables:
    Local Variables:
        sm
        <catch>ex

<initialize> (0 .. 3)
    Arguments:
    Captured Variables:
    Local Variables:

<method:SetFailure<system::Coroutine>(6)> in SMTryCatch1::<state>CreateCoroutine (95 .. 100)
    Arguments:
        <value>
    Captured Variables:
        <captured><co-tempexvar0>ex
        <captured><co0-switch>2
        <captured><co1-state>currentState
        <captured><co2-state>state
        <captured><co3>ex
        <captured><co4>ex
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured><state>stateMachineObject
        <captured><state>previousCoroutine
        <captured><state>startState
        <captured-this>0
        <captured-this>1
    Local Variables:

<method:SetStatus<system::Coroutine>(7)> in SMTryCatch1::<state>CreateCoroutine (101 .. 106)
    Arguments:
        <value>
    Captured Variables:
        <captured><co-tempexvar0>ex
        <captured><co0-switch>2
        <captured><co1-state>currentState
        <captured><co2-state>state
        <captured><co3>ex
        <captured><co4>ex
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured><state>stateMachineObject
        <captured><state>previousCoroutine
        <captured><state>startState
        <captured-this>0
        <captured-this>1
    Local Variables:

<method:GetFailure<system::Coroutine>(10)> in SMTryCatch1::<state>CreateCoroutine (107 .. 110)
    Arguments:
    Captured Variables:
        <captured><co-tempexvar0>ex
        <captured><co0-switch>2
        <captured><co1-state>currentState
        <captured><co2-state>state
        <captured><co3>ex
        <captured><co4>ex
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured><state>stateMachineObject
        <captured><state>previousCoroutine
        <captured><state>startState
        <captured-this>0
        <captured-this>1
    Local Variables:

<method:GetStatus<system::Coroutine>(11)> in SMTryCatch1::<state>CreateCoroutine (111 .. 114)
    Arguments:
    Captured Variables:
        <captured><co-tempexvar0>ex
        <captured><co0-switch>2
        <captured><co1-state>currentState
        <captured><co2-state>state
        <captured><co3>ex
        <captured><co4>ex
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured><state>stateMachineObject
        <captured><state>previousCoroutine
        <captured><state>startState
        <captured-this>0
        <captured-this>1
    Local Variables:

<method:Resume<system::Coroutine>(12)> in SMTryCatch1::<state>CreateCoroutine (115 .. 789)
    Arguments:
        <raise-exception>
        <coroutine-output>
    Captured Variables:
        <captured><co-tempexvar0>ex
        <captured><co0-switch>2
        <captured><co1-state>currentState
        <captured><co2-state>state
        <captured><co3>ex
        <captured><co4>ex
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured><state>stateMachineObject
        <captured><state>previousCoroutine
        <captured><state>startState
        <captured-this>0
        <captured-this>1
    Local Variables:
        <anonymous-range-test>
        <anonymous-range-test>
        <catch><co-ex>
        <switch>0
        <switch>1
        <catch><co-ex>
        <catch><co-ex>
        <catch><co-ex>
        <catch><co-ex>

========================================================
Instructions:
========================================================
//  ""
0    :     LoadValue     : value = <Bool, >
//  var s = "";
1    :     StoreGlobalVar: var = 0(s)
2    :     LoadValue     : value = <null>
3    :     Return        
//  this
4    :     LoadCapturedVar: var = 0(<captured-this>0)
//  this.stateMachineInitialized
5    :     GetProperty   : propertyInfo = stateMachineInitialized<system::StateMachine>
//  (!this.stateMachineInitialized)
6    :     OpNot         : type = Bool
//  if ((!this.stateMachineInitialized))
7    :     OpNot         : type = Bool
//  if ((!this.stateMachineInitialized))
8    :     JumpIf        : label = 22
//  true
9    :     LoadValue     : value = <Bool, true>
//  (this.stateMachineInitialized = true)
10   :     Duplicate     : stackPatternCount = 0
//  this
11   :     LoadCapturedVar: var = 0(<captured-this>0)
//  (this.stateMachineInitialized = true)
12   :     SetProperty   : propertyInfo = stateMachineInitialized<system::StateMachine>
//  (this.stateMachineInitialized = true);
13   :     Pop           
//  0
14   :     LoadValue     : value = <I4, 0>
//  this
15   :     LoadCapturedVar: var = 0(<captured-this>0)
//  this.<state>CreateCoroutine(0)
16   :     InvokeMethod  : methodInfo = <state>CreateCoroutine<SMTryCatch1>, stackPatternCount = 1
//  this.<state>CreateCoroutine(0);
17   :     Pop           
//  this
18   :     LoadCapturedVar: var = 0(<captured-this>0)
//  this.ResumeStateMachine()
19   :     InvokeMethod  : methodInfo = ResumeStateMachine<system::StateMachine>, stackPatternCount = 0
//  this.ResumeStateMachine();
20   :     Pop           
//  if ((!this.stateMachineInitialized))
21   :     Jump          : label = 22
//  0
22   :     LoadValue     : value = <I4, 0>
//  (this.stateMachineInput = 0)
23   :     Duplicate     : stackPatternCount = 0
//  this
24   :     LoadCapturedVar: var = 0(<captured-this>0)
//  (this.stateMachineInput = 0)
25   :     SetProperty   : propertyInfo = stateMachineInput<system::StateMachine>
//  (this.stateMachineInput = 0);
26   :     Pop           
//  this
27   :     LoadCapturedVar: var = 0(<captured-this>0)
//  this.ResumeStateMachine()
28   :     InvokeMethod  : methodInfo = ResumeStateMachine<system::StateMachine>, stackPatternCount = 0
//  this.ResumeStateMachine();
29   :     Pop           
//  func A() : (::system::Void)
30   :     LoadValue     : value = <null>
//  func A() : (::system::Void)
31   :     Return        
//  this
32   :     LoadCapturedVar: var = 0(<captured-this>0)
//  this.stateMachineInitialized
33   :     GetProperty   : propertyInfo = stateMachineInitialized<system::StateMachine>
//  (!this.stateMachineInitialized)
34   :     OpNot         : type = Bool
//  if ((!this.stateMachineInitialized))
35   :     OpNot         : type = Bool
//  if ((!this.stateMachineInitialized))
36   :     JumpIf        : label = 50
//  true
37   :     LoadValue     : value = <Bool, true>
//  (this.stateMachineInitialized = true)
38   :     Duplicate     : stackPatternCount = 0
//  this
39   :     LoadCapturedVar: var = 0(<captured-this>0)
//  (this.stateMachineInitialized = true)
40   :     SetProperty   : propertyInfo = stateMachineInitialized<system::StateMachine>
//  (this.stateMachineInitialized = true);
41   :     Pop           
//  0
42   :     LoadValue     : value = <I4, 0>
//  this
43   :     LoadCapturedVar: var = 0(<captured-this>0)
//  this.<state>CreateCoroutine(0)
44   :     InvokeMethod  : methodInfo = <state>CreateCoroutine<SMTryCatch1>, stackPatternCount = 1
//  this.<state>CreateCoroutine(0);
45   :     Pop           
//  this
46   :     LoadCapturedVar: var = 0(<captured-this>0)
//  this.ResumeStateMachine()
47   :     InvokeMethod  : methodInfo = ResumeStateMachine<system::StateMachine>, stackPatternCount = 0
//  this.ResumeStateMachine();
48   :     Pop           
//  if ((!this.stateMachineInitialized))
49   :     Jump          : label = 50
//  1
50   :     LoadValue     : value = <I4, 1>
//  (this.stateMachineInput = 1)
51   :     Duplicate     : stackPatternCount = 0
//  this
52   :     LoadCapturedVar: var = 0(<captured-this>0)
//  (this.stateMachineInput = 1)
53   :     SetProperty   : propertyInfo = stateMachineInput<system::StateMachine>
//  (this.stateMachineInput = 1);
54   :     Pop           
//  this
55   :     LoadCapturedVar: var = 0(<captured-this>0)
//  this.ResumeStateMachine()
56   :     InvokeMethod  : methodInfo = ResumeStateMachine<system::StateMachine>, stackPatternCount = 0
//  this.ResumeStateMachine();
57   :     Pop           
//  func B() : (::system::Void)
58   :     LoadValue     : value = <null>
//  func B() : (::system::Void)
59   :     Return        
//  this
60   :     LoadCapturedVar: var = 0(<captured-this>0)
//  var <state>stateMachineObject = this;
61   :     StoreLocalVar : var = 1(<state>stateMachineObject)
//  <state>stateMachineObject
62   :     LoadLocalVar  : var = 1(<state>stateMachineObject)
//  <state>stateMachineObject.stateMachineCoroutine
63   :     GetProperty   : propertyInfo = stateMachineCoroutine<system::StateMachine>
//  var <state>previousCoroutine = <state>stateMachineObject.stateMachineCoroutine;
64   :     StoreLocalVar : var = 2(<state>previousCoroutine)
//  null
65   :     LoadValue     : value = <null>
//  0
66   :     LoadValue     : value = <I4, 0>
//  0
67   :     LoadValue     : value = <I4, 0>
//  0
68   :     LoadValue     : value = <I4, 0>
//  null
69   :     LoadValue     : value = <null>
//  null
70   :     LoadValue     : value = <null>
//  0
71   :     LoadValue     : value = <I4, 0>
//  1
72   :     LoadValue     : value = <I4, 1>
//  (-1)
73   :     OpNegative    : type = I4
//  null
74   :     LoadValue     : value = <null>
//  Waiting
75   :     LoadValue     : value = <enum: 0>
//  new (::system::Coroutine^)
76   :     LoadLocalVar  : var = 1(<state>stateMachineObject)
//  new (::system::Coroutine^)
77   :     LoadLocalVar  : var = 2(<state>previousCoroutine)
//  new (::system::Coroutine^)
78   :     LoadLocalVar  : var = 0(<state>startState)
//  new (::system::Coroutine^)
79   :     LoadCapturedVar: var = 0(<captured-this>0)
//  new (::system::Coroutine^)
80   :     LoadValue     : value = <null>
//  new (::system::Coroutine^)
81   :     CreateClosureContext: stackPatternCount = 15
//  new (::system::Coroutine^)
82   :     LoadMethodInfo: methodInfo = GetFailure<system::Coroutine>
//  func GetFailure() : (::system::Exception^)
83   :     LoadFunction  : func = 8(<method:GetFailure<system::Coroutine>(10)> in SMTryCatch1::<state>CreateCoroutine)
//  new (::system::Coroutine^)
84   :     LoadMethodInfo: methodInfo = GetStatus<system::Coroutine>
//  func GetStatus() : (::system::CoroutineStatus)
85   :     LoadFunction  : func = 9(<method:GetStatus<system::Coroutine>(11)> in SMTryCatch1::<state>CreateCoroutine)
//  new (::system::Coroutine^)
86   :     LoadMethodInfo: methodInfo = Resume<system::Coroutine>
//  func Resume(<raise-exception> : ::system::Boolean, <coroutine-output> : ::system::CoroutineResult^) : (::system::Void)
87   :     LoadFunction  : func = 10(<method:Resume<system::Coroutine>(12)> in SMTryCatch1::<state>CreateCoroutine)
//  new (::system::Coroutine^)
88   :     CreateInterface: methodInfo = <system::Coroutine>, stackPatternCount = 6
//  (<state>stateMachineObject.stateMachineCoroutine = new (::system::Coroutine^)
89   :     Duplicate     : stackPatternCount = 0
//  <state>stateMachineObject
90   :     LoadLocalVar  : var = 1(<state>stateMachineObject)
//  (<state>stateMachineObject.stateMachineCoroutine = new (::system::Coroutine^)
91   :     SetProperty   : propertyInfo = stateMachineCoroutine<system::StateMachine>
//  (<state>stateMachineObject.stateMachineCoroutine = new (::system::Coroutine^)
92   :     Pop           
//  func <state>CreateCoroutine(<state>startState : ::system::Int32) : (::system::Void)
93   :     LoadValue     : value = <null>
//  func <state>CreateCoroutine(<state>startState : ::system::Int32) : (::system::Void)
94   :     Return        
//  <value>
95   :     LoadLocalVar  : var = 0(<value>)
//  (<prop>Failure = <value>)
96   :     Duplicate     : stackPatternCount = 0
//  (<prop>Failure = <value>)
97   :     StoreCapturedVar: var = 8
//  (<prop>Failure = <value>);
98   :     Pop           
//  func SetFailure(<value> : ::system::Exception^) : (void)
99   :     LoadValue     : value = <null>
//  func SetFailure(<value> : ::system::Exception^) : (void)
100  :     Return        
//  <value>
101  :     LoadLocalVar  : var = 0(<value>)
//  (<prop>Status = <value>)
102  :     Duplicate     : stackPatternCount = 0
//  (<prop>Status = <value>)
103  :     StoreCapturedVar: var = 9
//  (<prop>Status = <value>);
104  :     Pop           
//  func SetStatus(<value> : ::system::CoroutineStatus) : (void)
105  :     LoadValue     : value = <null>
//  func SetStatus(<value> : ::system::CoroutineStatus) : (void)
106  :     Return        
//  <prop>Failure
107  :     LoadCapturedVar: var = 8(<captured><prop>Failure)
//  return <prop>Failure;
108  :     Return        
//  func GetFailure() : (::system::Exception^)
109  :     LoadValue     : value = <null>
//  func GetFailure() : (::system::Exception^)
110  :     Return        
//  <prop>Status
111  :     LoadCapturedVar: var = 9(<captured><prop>Status)
//  return <prop>Status;
112  :     Return        
//  func GetStatus() : (::system::CoroutineStatus)
113  :     LoadValue     : value = <null>
//  func GetStatus() : (::system::CoroutineStatus)
114  :     Return        
//  Status
115  :     LoadCapturedVar: var = 14(<captured-this>1)
//  Status
116  :     InvokeMethod  : methodInfo = GetStatus<system::Coroutine>, stackPatternCount = 0
//  ::system::CoroutineStatus::Waiting
117  :     LoadValue     : value = <enum: 0>
//  (Status != ::system::CoroutineStatus::Waiting)
118  :     CompareValue  
//  (Status != ::system::CoroutineStatus::Waiting)
119  :     OpNot         : type = Bool
//  if ((Status != ::system::CoroutineStatus::Waiting))
120  :     OpNot         : type = Bool
//  if ((Status != ::system::CoroutineStatus::Waiting))
121  :     JumpIf        : label = 125
//  "Resume should be called only when the coroutine is in the waiting status."
122  :     LoadValue     : value = <Bool, Resume should be called only when the coroutine is in the waiting status.>
//  raise "Resume should be called only when the coroutine is in the waiting status.";
123  :     RaiseException
//  if ((Status != ::system::CoroutineStatus::Waiting))
124  :     Jump          : label = 125
//  Executing
125  :     LoadValue     : value = <enum: 1>
//  SetStatus(Executing)
126  :     InvokeWithContext: func = 7(<method:SetStatus<system::Coroutine>(7)> in SMTryCatch1::<state>CreateCoroutine), stackPatternCount = 1
//  SetStatus(Executing);
127  :     Pop           
//  try
128  :     InstallTry    : label = 774
//  <co-state-before-pause>
129  :     LoadCapturedVar: var = 7(<captured><co-state-before-pause>)
//  1
130  :     LoadValue     : value = <I4, 1>
//  (-1)
131  :     OpNegative    : type = I4
//  (<co-state-before-pause> != (-1))
132  :     CompareValue  
//  (<co-state-before-pause> != (-1))
133  :     OpNot         : type = Bool
//  if ((<co-state-before-pause> != (-1)))
134  :     OpNot         : type = Bool
//  if ((<co-state-before-pause> != (-1)))
135  :     JumpIf        : label = 260
//  <coroutine-output>
136  :     LoadLocalVar  : var = 1(<coroutine-output>)
//  <coroutine-output> is null
137  :     LoadValue     : value = <null>
//  <coroutine-output> is null
138  :     CompareReference
//  if (<coroutine-output> is null)
139  :     OpNot         : type = Bool
//  if (<coroutine-output> is null)
140  :     JumpIf        : label = 147
//  1
141  :     LoadValue     : value = <I4, 1>
//  (-1)
142  :     OpNegative    : type = I4
//  (<co-state-before-pause> = (-1))
143  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = (-1))
144  :     StoreCapturedVar: var = 7
//  (<co-state-before-pause> = (-1));
145  :     Pop           
//  if (<coroutine-output> is null)
146  :     Jump          : label = 259
//  <coroutine-output>
147  :     LoadLocalVar  : var = 1(<coroutine-output>)
//  <coroutine-output>.Failure
148  :     InvokeMethod  : methodInfo = GetFailure<system::CoroutineResult>, stackPatternCount = 0
//  <coroutine-output>.Failure is null
149  :     LoadValue     : value = <null>
//  <coroutine-output>.Failure is null
150  :     CompareReference
//  if (<coroutine-output>.Failure is null)
151  :     OpNot         : type = Bool
//  if (<coroutine-output>.Failure is null)
152  :     JumpIf        : label = 159
//  1
153  :     LoadValue     : value = <I4, 1>
//  (-1)
154  :     OpNegative    : type = I4
//  (<co-state-before-pause> = (-1))
155  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = (-1))
156  :     StoreCapturedVar: var = 7
//  (<co-state-before-pause> = (-1));
157  :     Pop           
//  if (<coroutine-output>.Failure is null)
158  :     Jump          : label = 259
//  <co-state-before-pause>
159  :     LoadCapturedVar: var = 7(<captured><co-state-before-pause>)
//  0
160  :     LoadValue     : value = <I4, 0>
//  (<co-state-before-pause> == 0)
161  :     CompareValue  
//  <co-state-before-pause>
162  :     LoadCapturedVar: var = 7(<captured><co-state-before-pause>)
//  <co-state-before-pause> in range [3, 7]
163  :     StoreLocalVar : var = 2(<anonymous-range-test>)
//  <co-state-before-pause> in range [3, 7]
164  :     LoadLocalVar  : var = 2(<anonymous-range-test>)
//  3
165  :     LoadValue     : value = <I4, 3>
//  <co-state-before-pause> in range [3, 7]
166  :     CompareLiteral: type = I4
//  <co-state-before-pause> in range [3, 7]
167  :     OpGE          
//  <co-state-before-pause> in range [3, 7]
168  :     LoadLocalVar  : var = 2(<anonymous-range-test>)
//  7
169  :     LoadValue     : value = <I4, 7>
//  <co-state-before-pause> in range [3, 7]
170  :     CompareLiteral: type = I4
//  <co-state-before-pause> in range [3, 7]
171  :     OpLE          
//  <co-state-before-pause> in range [3, 7]
172  :     OpAnd         : type = Bool
//  <co-state-before-pause> in range [3, 7]
173  :     LoadValue     : value = <null>
//  <co-state-before-pause> in range [3, 7]
174  :     StoreLocalVar : var = 2(<anonymous-range-test>)
//  ((<co-state-before-pause> == 0) or <co-state-before-pause> in range [3, 7])
175  :     OpOr          : type = Bool
//  <co-state-before-pause>
176  :     LoadCapturedVar: var = 7(<captured><co-state-before-pause>)
//  9
177  :     LoadValue     : value = <I4, 9>
//  (<co-state-before-pause> == 9)
178  :     CompareValue  
//  (((<co-state-before-pause> == 0) or <co-state-before-pause> in range [3, 7]) or (<co-state-before-pause> == 9))
179  :     OpOr          : type = Bool
//  <co-state-before-pause>
180  :     LoadCapturedVar: var = 7(<captured><co-state-before-pause>)
//  12
181  :     LoadValue     : value = <I4, 12>
//  (<co-state-before-pause> == 12)
182  :     CompareValue  
//  ((((<co-state-before-pause> == 0) or <co-state-before-pause> in range [3, 7]) or (<co-state-before-pause> == 9)) or (<co-state-before-pause> == 12))
183  :     OpOr          : type = Bool
//  if (((((<co-state-before-pause> == 0) or <co-state-before-pause> in range [3, 7]) or (<co-state-before-pause> == 9)) or (<co-state-before-pause> == 12)))
184  :     OpNot         : type = Bool
//  if (((((<co-state-before-pause> == 0) or <co-state-before-pause> in range [3, 7]) or (<co-state-before-pause> == 9)) or (<co-state-before-pause> == 12)))
185  :     JumpIf        : label = 201
//  1
186  :     LoadValue     : value = <I4, 1>
//  (-1)
187  :     OpNegative    : type = I4
//  (<co-state-before-pause> = (-1))
188  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = (-1))
189  :     StoreCapturedVar: var = 7
//  (<co-state-before-pause> = (-1));
190  :     Pop           
//  <coroutine-output>
191  :     LoadLocalVar  : var = 1(<coroutine-output>)
//  <coroutine-output>.Failure
192  :     InvokeMethod  : methodInfo = GetFailure<system::CoroutineResult>, stackPatternCount = 0
//  (<co-tempexvar0>ex = <coroutine-output>.Failure)
193  :     Duplicate     : stackPatternCount = 0
//  (<co-tempexvar0>ex = <coroutine-output>.Failure)
194  :     StoreCapturedVar: var = 0
//  (<co-tempexvar0>ex = <coroutine-output>.Failure);
195  :     Pop           
//  2
196  :     LoadValue     : value = <I4, 2>
//  (<co-state> = 2)
197  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 2)
198  :     StoreCapturedVar: var = 6
//  (<co-state> = 2);
199  :     Pop           
//  if (((((<co-state-before-pause> == 0) or <co-state-before-pause> in range [3, 7]) or (<co-state-before-pause> == 9)) or (<co-state-before-pause> == 12)))
200  :     Jump          : label = 259
//  <co-state-before-pause>
201  :     LoadCapturedVar: var = 7(<captured><co-state-before-pause>)
//  8
202  :     LoadValue     : value = <I4, 8>
//  (<co-state-before-pause> == 8)
203  :     CompareValue  
//  if ((<co-state-before-pause> == 8))
204  :     OpNot         : type = Bool
//  if ((<co-state-before-pause> == 8))
205  :     JumpIf        : label = 221
//  1
206  :     LoadValue     : value = <I4, 1>
//  (-1)
207  :     OpNegative    : type = I4
//  (<co-state-before-pause> = (-1))
208  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = (-1))
209  :     StoreCapturedVar: var = 7
//  (<co-state-before-pause> = (-1));
210  :     Pop           
//  <coroutine-output>
211  :     LoadLocalVar  : var = 1(<coroutine-output>)
//  <coroutine-output>.Failure
212  :     InvokeMethod  : methodInfo = GetFailure<system::CoroutineResult>, stackPatternCount = 0
//  (<co3>ex = <coroutine-output>.Failure)
213  :     Duplicate     : stackPatternCount = 0
//  (<co3>ex = <coroutine-output>.Failure)
214  :     StoreCapturedVar: var = 4
//  (<co3>ex = <coroutine-output>.Failure);
215  :     Pop           
//  7
216  :     LoadValue     : value = <I4, 7>
//  (<co-state> = 7)
217  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 7)
218  :     StoreCapturedVar: var = 6
//  (<co-state> = 7);
219  :     Pop           
//  if ((<co-state-before-pause> == 8))
220  :     Jump          : label = 259
//  <co-state-before-pause>
221  :     LoadCapturedVar: var = 7(<captured><co-state-before-pause>)
//  <co-state-before-pause> in range [10, 11]
222  :     StoreLocalVar : var = 3(<anonymous-range-test>)
//  <co-state-before-pause> in range [10, 11]
223  :     LoadLocalVar  : var = 3(<anonymous-range-test>)
//  10
224  :     LoadValue     : value = <I4, 10>
//  <co-state-before-pause> in range [10, 11]
225  :     CompareLiteral: type = I4
//  <co-state-before-pause> in range [10, 11]
226  :     OpGE          
//  <co-state-before-pause> in range [10, 11]
227  :     LoadLocalVar  : var = 3(<anonymous-range-test>)
//  11
228  :     LoadValue     : value = <I4, 11>
//  <co-state-before-pause> in range [10, 11]
229  :     CompareLiteral: type = I4
//  <co-state-before-pause> in range [10, 11]
230  :     OpLE          
//  <co-state-before-pause> in range [10, 11]
231  :     OpAnd         : type = Bool
//  <co-state-before-pause> in range [10, 11]
232  :     LoadValue     : value = <null>
//  <co-state-before-pause> in range [10, 11]
233  :     StoreLocalVar : var = 3(<anonymous-range-test>)
//  if (<co-state-before-pause> in range [10, 11])
234  :     OpNot         : type = Bool
//  if (<co-state-before-pause> in range [10, 11])
235  :     JumpIf        : label = 251
//  1
236  :     LoadValue     : value = <I4, 1>
//  (-1)
237  :     OpNegative    : type = I4
//  (<co-state-before-pause> = (-1))
238  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = (-1))
239  :     StoreCapturedVar: var = 7
//  (<co-state-before-pause> = (-1));
240  :     Pop           
//  <coroutine-output>
241  :     LoadLocalVar  : var = 1(<coroutine-output>)
//  <coroutine-output>.Failure
242  :     InvokeMethod  : methodInfo = GetFailure<system::CoroutineResult>, stackPatternCount = 0
//  (<co4>ex = <coroutine-output>.Failure)
243  :     Duplicate     : stackPatternCount = 0
//  (<co4>ex = <coroutine-output>.Failure)
244  :     StoreCapturedVar: var = 5
//  (<co4>ex = <coroutine-output>.Failure);
245  :     Pop           
//  9
246  :     LoadValue     : value = <I4, 9>
//  (<co-state> = 9)
247  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 9)
248  :     StoreCapturedVar: var = 6
//  (<co-state> = 9);
249  :     Pop           
//  if (<co-state-before-pause> in range [10, 11])
250  :     Jump          : label = 259
//  1
251  :     LoadValue     : value = <I4, 1>
//  (-1)
252  :     OpNegative    : type = I4
//  (<co-state-before-pause> = (-1))
253  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = (-1))
254  :     StoreCapturedVar: var = 7
//  (<co-state-before-pause> = (-1));
255  :     Pop           
//  <coroutine-output>
256  :     LoadLocalVar  : var = 1(<coroutine-output>)
//  <coroutine-output>.Failure
257  :     InvokeMethod  : methodInfo = GetFailure<system::CoroutineResult>, stackPatternCount = 0
//  raise <coroutine-output>.Failure;
258  :     RaiseException
//  if ((<co-state-before-pause> != (-1)))
259  :     Jump          : label = 260
//  true
260  :     LoadValue     : value = <Bool, true>
//  while (true)
261  :     OpNot         : type = Bool
//  while (true)
262  :     JumpIf        : label = 772
//  <co-state>
263  :     LoadCapturedVar: var = 6(<captured><co-state>)
//  1
264  :     LoadValue     : value = <I4, 1>
//  (<co-state> == 1)
265  :     CompareValue  
//  if ((<co-state> == 1))
266  :     OpNot         : type = Bool
//  if ((<co-state> == 1))
267  :     JumpIf        : label = 275
//  Stopped
268  :     LoadValue     : value = <enum: 2>
//  SetStatus(Stopped)
269  :     InvokeWithContext: func = 7(<method:SetStatus<system::Coroutine>(7)> in SMTryCatch1::<state>CreateCoroutine), stackPatternCount = 1
//  SetStatus(Stopped);
270  :     Pop           
//  try
271  :     UninstallTry  : stackPatternCount = 0
//  return;
272  :     LoadValue     : value = <null>
//  return;
273  :     Return        
//  if ((<co-state> == 1))
274  :     Jump          : label = 275
//  <co-state>
275  :     LoadCapturedVar: var = 6(<captured><co-state>)
//  2
276  :     LoadValue     : value = <I4, 2>
//  (<co-state> == 2)
277  :     CompareValue  
//  if ((<co-state> == 2))
278  :     OpNot         : type = Bool
//  if ((<co-state> == 2))
279  :     JumpIf        : label = 289
//  <state>previousCoroutine
280  :     LoadCapturedVar: var = 11(<captured><state>previousCoroutine)
//  (<state>stateMachineObject.stateMachineCoroutine = <state>previousCoroutine)
281  :     Duplicate     : stackPatternCount = 0
//  <state>stateMachineObject
282  :     LoadCapturedVar: var = 10(<captured><state>stateMachineObject)
//  (<state>stateMachineObject.stateMachineCoroutine = <state>previousCoroutine)
283  :     SetProperty   : propertyInfo = stateMachineCoroutine<system::StateMachine>
//  (<state>stateMachineObject.stateMachineCoroutine = <state>previousCoroutine);
284  :     Pop           
//  <co-tempexvar0>ex
285  :     LoadCapturedVar: var = 0(<captured><co-tempexvar0>ex)
//  <co-tempexvar0>ex.Message
286  :     InvokeMethod  : methodInfo = GetMessage<system::Exception>, stackPatternCount = 0
//  raise <co-tempexvar0>ex.Message;
287  :     RaiseException
//  if ((<co-state> == 2))
288  :     Jump          : label = 289
//  <co-state>
289  :     LoadCapturedVar: var = 6(<captured><co-state>)
//  13
290  :     LoadValue     : value = <I4, 13>
//  (<co-state> == 13)
291  :     CompareValue  
//  if ((<co-state> == 13))
292  :     OpNot         : type = Bool
//  if ((<co-state> == 13))
293  :     JumpIf        : label = 305
//  <state>previousCoroutine
294  :     LoadCapturedVar: var = 11(<captured><state>previousCoroutine)
//  (<state>stateMachineObject.stateMachineCoroutine = <state>previousCoroutine)
295  :     Duplicate     : stackPatternCount = 0
//  <state>stateMachineObject
296  :     LoadCapturedVar: var = 10(<captured><state>stateMachineObject)
//  (<state>stateMachineObject.stateMachineCoroutine = <state>previousCoroutine)
297  :     SetProperty   : propertyInfo = stateMachineCoroutine<system::StateMachine>
//  (<state>stateMachineObject.stateMachineCoroutine = <state>previousCoroutine);
298  :     Pop           
//  1
299  :     LoadValue     : value = <I4, 1>
//  (<co-state> = 1)
300  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 1)
301  :     StoreCapturedVar: var = 6
//  (<co-state> = 1);
302  :     Pop           
//  continue;
303  :     Jump          : label = 260
//  if ((<co-state> == 13))
304  :     Jump          : label = 305
//  try
305  :     InstallTry    : label = 674
//  <co-state>
306  :     LoadCapturedVar: var = 6(<captured><co-state>)
//  0
307  :     LoadValue     : value = <I4, 0>
//  (<co-state> == 0)
308  :     CompareValue  
//  if ((<co-state> == 0))
309  :     OpNot         : type = Bool
//  if ((<co-state> == 0))
310  :     JumpIf        : label = 332
//  <state>startState
311  :     LoadCapturedVar: var = 12(<captured><state>startState)
//  (<co2-state>state = <state>startState)
312  :     Duplicate     : stackPatternCount = 0
//  (<co2-state>state = <state>startState)
313  :     StoreCapturedVar: var = 3
//  (<co2-state>state = <state>startState);
314  :     Pop           
//  true
315  :     LoadValue     : value = <Bool, true>
//  if (true)
316  :     OpNot         : type = Bool
//  if (true)
317  :     JumpIf        : label = 325
//  4
318  :     LoadValue     : value = <I4, 4>
//  (<co-state> = 4)
319  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 4)
320  :     StoreCapturedVar: var = 6
//  (<co-state> = 4);
321  :     Pop           
//  try
322  :     UninstallTry  : stackPatternCount = 0
//  continue;
323  :     Jump          : label = 260
//  if (true)
324  :     Jump          : label = 325
//  13
325  :     LoadValue     : value = <I4, 13>
//  (<co-state> = 13)
326  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 13)
327  :     StoreCapturedVar: var = 6
//  (<co-state> = 13);
328  :     Pop           
//  try
329  :     UninstallTry  : stackPatternCount = 0
//  continue;
330  :     Jump          : label = 260
//  if ((<co-state> == 0))
331  :     Jump          : label = 332
//  <co-state>
332  :     LoadCapturedVar: var = 6(<captured><co-state>)
//  3
333  :     LoadValue     : value = <I4, 3>
//  (<co-state> == 3)
334  :     CompareValue  
//  if ((<co-state> == 3))
335  :     OpNot         : type = Bool
//  if ((<co-state> == 3))
336  :     JumpIf        : label = 354
//  true
337  :     LoadValue     : value = <Bool, true>
//  if (true)
338  :     OpNot         : type = Bool
//  if (true)
339  :     JumpIf        : label = 347
//  4
340  :     LoadValue     : value = <I4, 4>
//  (<co-state> = 4)
341  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 4)
342  :     StoreCapturedVar: var = 6
//  (<co-state> = 4);
343  :     Pop           
//  try
344  :     UninstallTry  : stackPatternCount = 0
//  continue;
345  :     Jump          : label = 260
//  if (true)
346  :     Jump          : label = 347
//  13
347  :     LoadValue     : value = <I4, 13>
//  (<co-state> = 13)
348  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 13)
349  :     StoreCapturedVar: var = 6
//  (<co-state> = 13);
350  :     Pop           
//  try
351  :     UninstallTry  : stackPatternCount = 0
//  continue;
352  :     Jump          : label = 260
//  if ((<co-state> == 3))
353  :     Jump          : label = 354
//  <co-state>
354  :     LoadCapturedVar: var = 6(<captured><co-state>)
//  4
355  :     LoadValue     : value = <I4, 4>
//  (<co-state> == 4)
356  :     CompareValue  
//  if ((<co-state> == 4))
357  :     OpNot         : type = Bool
//  if ((<co-state> == 4))
358  :     JumpIf        : label = 480
//  <co2-state>state
359  :     LoadCapturedVar: var = 3(<captured><co2-state>state)
//  (<co1-state>currentState = <co2-state>state)
360  :     Duplicate     : stackPatternCount = 0
//  (<co1-state>currentState = <co2-state>state)
361  :     StoreCapturedVar: var = 2
//  (<co1-state>currentState = <co2-state>state);
362  :     Pop           
//  1
363  :     LoadValue     : value = <I4, 1>
//  (-1)
364  :     OpNegative    : type = I4
//  (<co2-state>state = (-1))
365  :     Duplicate     : stackPatternCount = 0
//  (<co2-state>state = (-1))
366  :     StoreCapturedVar: var = 3
//  (<co2-state>state = (-1));
367  :     Pop           
//  <co1-state>currentState
368  :     LoadCapturedVar: var = 2(<captured><co1-state>currentState)
//  (<co0-switch>2 = <co1-state>currentState)
369  :     Duplicate     : stackPatternCount = 0
//  (<co0-switch>2 = <co1-state>currentState)
370  :     StoreCapturedVar: var = 1
//  (<co0-switch>2 = <co1-state>currentState);
371  :     Pop           
//  <co0-switch>2
372  :     LoadCapturedVar: var = 1(<captured><co0-switch>2)
//  1
373  :     LoadValue     : value = <I4, 1>
//  (<co0-switch>2 == 1 of (::system::Int32))
374  :     CompareValue  
//  if ((<co0-switch>2 == 1 of (::system::Int32)))
375  :     OpNot         : type = Bool
//  if ((<co0-switch>2 == 1 of (::system::Int32)))
376  :     JumpIf        : label = 407
//  <state>stateMachineObject
377  :     LoadCapturedVar: var = 10(<captured><state>stateMachineObject)
//  <state>stateMachineObject.stateMachineInput
378  :     GetProperty   : propertyInfo = stateMachineInput<system::StateMachine>
//  1
379  :     LoadValue     : value = <I4, 1>
//  (-1)
380  :     OpNegative    : type = I4
//  (<state>stateMachineObject.stateMachineInput == (-1))
381  :     CompareValue  
//  if ((<state>stateMachineObject.stateMachineInput == (-1)))
382  :     OpNot         : type = Bool
//  if ((<state>stateMachineObject.stateMachineInput == (-1)))
383  :     JumpIf        : label = 400
//  Waiting
384  :     LoadValue     : value = <enum: 0>
//  SetStatus(Waiting)
385  :     InvokeWithContext: func = 7(<method:SetStatus<system::Coroutine>(7)> in SMTryCatch1::<state>CreateCoroutine), stackPatternCount = 1
//  SetStatus(Waiting);
386  :     Pop           
//  <co-state>
387  :     LoadCapturedVar: var = 6(<captured><co-state>)
//  (<co-state-before-pause> = <co-state>)
388  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = <co-state>)
389  :     StoreCapturedVar: var = 7
//  (<co-state-before-pause> = <co-state>);
390  :     Pop           
//  5
391  :     LoadValue     : value = <I4, 5>
//  (<co-state> = 5)
392  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 5)
393  :     StoreCapturedVar: var = 6
//  (<co-state> = 5);
394  :     Pop           
//  try
395  :     UninstallTry  : stackPatternCount = 0
//  try
396  :     UninstallTry  : stackPatternCount = 0
//  return;
397  :     LoadValue     : value = <null>
//  return;
398  :     Return        
//  if ((<state>stateMachineObject.stateMachineInput == (-1)))
399  :     Jump          : label = 400
//  5
400  :     LoadValue     : value = <I4, 5>
//  (<co-state> = 5)
401  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 5)
402  :     StoreCapturedVar: var = 6
//  (<co-state> = 5);
403  :     Pop           
//  try
404  :     UninstallTry  : stackPatternCount = 0
//  continue;
405  :     Jump          : label = 260
//  if ((<co0-switch>2 == 1 of (::system::Int32)))
406  :     Jump          : label = 407
//  <co0-switch>2
407  :     LoadCapturedVar: var = 1(<captured><co0-switch>2)
//  2
408  :     LoadValue     : value = <I4, 2>
//  (<co0-switch>2 == 2 of (::system::Int32))
409  :     CompareValue  
//  if ((<co0-switch>2 == 2 of (::system::Int32)))
410  :     OpNot         : type = Bool
//  if ((<co0-switch>2 == 2 of (::system::Int32)))
411  :     JumpIf        : label = 442
//  <state>stateMachineObject
412  :     LoadCapturedVar: var = 10(<captured><state>stateMachineObject)
//  <state>stateMachineObject.stateMachineInput
413  :     GetProperty   : propertyInfo = stateMachineInput<system::StateMachine>
//  1
414  :     LoadValue     : value = <I4, 1>
//  (-1)
415  :     OpNegative    : type = I4
//  (<state>stateMachineObject.stateMachineInput == (-1))
416  :     CompareValue  
//  if ((<state>stateMachineObject.stateMachineInput == (-1)))
417  :     OpNot         : type = Bool
//  if ((<state>stateMachineObject.stateMachineInput == (-1)))
418  :     JumpIf        : label = 435
//  Waiting
419  :     LoadValue     : value = <enum: 0>
//  SetStatus(Waiting)
420  :     InvokeWithContext: func = 7(<method:SetStatus<system::Coroutine>(7)> in SMTryCatch1::<state>CreateCoroutine), stackPatternCount = 1
//  SetStatus(Waiting);
421  :     Pop           
//  <co-state>
422  :     LoadCapturedVar: var = 6(<captured><co-state>)
//  (<co-state-before-pause> = <co-state>)
423  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = <co-state>)
424  :     StoreCapturedVar: var = 7
//  (<co-state-before-pause> = <co-state>);
425  :     Pop           
//  6
426  :     LoadValue     : value = <I4, 6>
//  (<co-state> = 6)
427  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 6)
428  :     StoreCapturedVar: var = 6
//  (<co-state> = 6);
429  :     Pop           
//  try
430  :     UninstallTry  : stackPatternCount = 0
//  try
431  :     UninstallTry  : stackPatternCount = 0
//  return;
432  :     LoadValue     : value = <null>
//  return;
433  :     Return        
//  if ((<state>stateMachineObject.stateMachineInput == (-1)))
434  :     Jump          : label = 435
//  6
435  :     LoadValue     : value = <I4, 6>
//  (<co-state> = 6)
436  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 6)
437  :     StoreCapturedVar: var = 6
//  (<co-state> = 6);
438  :     Pop           
//  try
439  :     UninstallTry  : stackPatternCount = 0
//  continue;
440  :     Jump          : label = 260
//  if ((<co0-switch>2 == 2 of (::system::Int32)))
441  :     Jump          : label = 442
//  <co0-switch>2
442  :     LoadCapturedVar: var = 1(<captured><co0-switch>2)
//  0
443  :     LoadValue     : value = <I4, 0>
//  (<co0-switch>2 == 0 of (::system::Int32))
444  :     CompareValue  
//  if ((<co0-switch>2 == 0 of (::system::Int32)))
445  :     OpNot         : type = Bool
//  if ((<co0-switch>2 == 0 of (::system::Int32)))
446  :     JumpIf        : label = 473
//  try
447  :     InstallTry    : label = 454
//  1
448  :     LoadValue     : value = <I4, 1>
//  <state>stateMachineObject
449  :     LoadCapturedVar: var = 10(<captured><state>stateMachineObject)
//  <state>stateMachineObject.<state>CreateCoroutine(1)
450  :     InvokeMethod  : methodInfo = <state>CreateCoroutine<SMTryCatch1>, stackPatternCount = 1
//  <state>stateMachineObject.<state>CreateCoroutine(1);
451  :     Pop           
//  try
452  :     UninstallTry  : stackPatternCount = 0
//  try
453  :     Jump          : label = 466
//  try
454  :     LoadException 
//  try
455  :     StoreLocalVar : var = 4(<catch><co-ex>)
//  <co-ex>
456  :     LoadLocalVar  : var = 4(<catch><co-ex>)
//  (<co3>ex = <co-ex>)
457  :     Duplicate     : stackPatternCount = 0
//  (<co3>ex = <co-ex>)
458  :     StoreCapturedVar: var = 4
//  (<co3>ex = <co-ex>);
459  :     Pop           
//  7
460  :     LoadValue     : value = <I4, 7>
//  (<co-state> = 7)
461  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 7)
462  :     StoreCapturedVar: var = 6
//  (<co-state> = 7);
463  :     Pop           
//  try
464  :     UninstallTry  : stackPatternCount = 0
//  continue;
465  :     Jump          : label = 260
//  8
466  :     LoadValue     : value = <I4, 8>
//  (<co-state> = 8)
467  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 8)
468  :     StoreCapturedVar: var = 6
//  (<co-state> = 8);
469  :     Pop           
//  try
470  :     UninstallTry  : stackPatternCount = 0
//  continue;
471  :     Jump          : label = 260
//  if ((<co0-switch>2 == 0 of (::system::Int32)))
472  :     Jump          : label = 473
//  3
473  :     LoadValue     : value = <I4, 3>
//  (<co-state> = 3)
474  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 3)
475  :     StoreCapturedVar: var = 6
//  (<co-state> = 3);
476  :     Pop           
//  try
477  :     UninstallTry  : stackPatternCount = 0
//  continue;
478  :     Jump          : label = 260
//  if ((<co-state> == 4))
479  :     Jump          : label = 480
//  <co-state>
480  :     LoadCapturedVar: var = 6(<captured><co-state>)
//  5
481  :     LoadValue     : value = <I4, 5>
//  (<co-state> == 5)
482  :     CompareValue  
//  if ((<co-state> == 5))
483  :     OpNot         : type = Bool
//  if ((<co-state> == 5))
484  :     JumpIf        : label = 543
//  <state>stateMachineObject
485  :     LoadCapturedVar: var = 10(<captured><state>stateMachineObject)
//  <state>stateMachineObject.stateMachineInput
486  :     GetProperty   : propertyInfo = stateMachineInput<system::StateMachine>
//  var <switch>0 : ::system::Int32 = <state>stateMachineObject.stateMachineInput;
487  :     StoreLocalVar : var = 5(<switch>0)
//  <switch>0
488  :     LoadLocalVar  : var = 5(<switch>0)
//  0
489  :     LoadValue     : value = <I4, 0>
//  (<switch>0 == 0 of (::system::Int32))
490  :     CompareValue  
//  if ((<switch>0 == 0 of (::system::Int32)))
491  :     OpNot         : type = Bool
//  if ((<switch>0 == 0 of (::system::Int32)))
492  :     JumpIf        : label = 508
//  1
493  :     LoadValue     : value = <I4, 1>
//  (-1)
494  :     OpNegative    : type = I4
//  (<state>stateMachineObject.stateMachineInput = (-1))
495  :     Duplicate     : stackPatternCount = 0
//  <state>stateMachineObject
496  :     LoadCapturedVar: var = 10(<captured><state>stateMachineObject)
//  (<state>stateMachineObject.stateMachineInput = (-1))
497  :     SetProperty   : propertyInfo = stateMachineInput<system::StateMachine>
//  (<state>stateMachineObject.stateMachineInput = (-1));
498  :     Pop           
//  ""
499  :     LoadValue     : value = <Bool, >
//  s
500  :     LoadGlobalVar : var = 0(s)
//  ("" & s)
501  :     OpConcat      
//  "[A]"
502  :     LoadValue     : value = <Bool, [A]>
//  (("" & s) & "[A]")
503  :     OpConcat      
//  (s = (("" & s) & "[A]"))
504  :     Duplicate     : stackPatternCount = 0
//  (s = (("" & s) & "[A]"))
505  :     StoreGlobalVar: var = 0(s)
//  (s = (("" & s) & "[A]"));
506  :     Pop           
//  if ((<switch>0 == 0 of (::system::Int32)))
507  :     Jump          : label = 522
//  <switch>0
508  :     LoadLocalVar  : var = 5(<switch>0)
//  1
509  :     LoadValue     : value = <I4, 1>
//  (<switch>0 == 1 of (::system::Int32))
510  :     CompareValue  
//  if ((<switch>0 == 1 of (::system::Int32)))
511  :     OpNot         : type = Bool
//  if ((<switch>0 == 1 of (::system::Int32)))
512  :     JumpIf        : label = 522
//  1
513  :     LoadValue     : value = <I4, 1>
//  (-1)
514  :     OpNegative    : type = I4
//  (<state>stateMachineObject.stateMachineInput = (-1))
515  :     Duplicate     : stackPatternCount = 0
//  <state>stateMachineObject
516  :     LoadCapturedVar: var = 10(<captured><state>stateMachineObject)
//  (<state>stateMachineObject.stateMachineInput = (-1))
517  :     SetProperty   : propertyInfo = stateMachineInput<system::StateMachine>
//  (<state>stateMachineObject.stateMachineInput = (-1));
518  :     Pop           
//  "Method \"B\" of class \"SMTryCatch1\" cannot be called at this moment."
519  :     LoadValue     : value = <Bool, Method "B" of class "SMTryCatch1" cannot be called at this moment.>
//  raise "Method \"B\" of class \"SMTryCatch1\" cannot be called at this moment.";
520  :     RaiseException
//  if ((<switch>0 == 1 of (::system::Int32)))
521  :     Jump          : label = 522
//  ""
522  :     LoadValue     : value = <Bool, >
//  s
523  :     LoadGlobalVar : var = 0(s)
//  ("" & s)
524  :     OpConcat      
//  ".A"
525  :     LoadValue     : value = <Bool, .A>
//  (("" & s) & ".A")
526  :     OpConcat      
//  (s = (("" & s) & ".A"))
527  :     Duplicate     : stackPatternCount = 0
//  (s = (("" & s) & ".A"))
528  :     StoreGlobalVar: var = 0(s)
//  (s = (("" & s) & ".A"));
529  :     Pop           
//  13
530  :     LoadValue     : value = <I4, 13>
//  (<co-state> = 13)
531  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 13)
532  :     StoreCapturedVar: var = 6
//  (<co-state> = 13);
533  :     Pop           
//  try
534  :     UninstallTry  : stackPatternCount = 0
//  continue;
535  :     Jump          : label = 260
//  3
536  :     LoadValue     : value = <I4, 3>
//  (<co-state> = 3)
537  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 3)
538  :     StoreCapturedVar: var = 6
//  (<co-state> = 3);
539  :     Pop           
//  try
540  :     UninstallTry  : stackPatternCount = 0
//  continue;
541  :     Jump          : label = 260
//  if ((<co-state> == 5))
542  :     Jump          : label = 543
//  <co-state>
543  :     LoadCapturedVar: var = 6(<captured><co-state>)
//  6
544  :     LoadValue     : value = <I4, 6>
//  (<co-state> == 6)
545  :     CompareValue  
//  if ((<co-state> == 6))
546  :     OpNot         : type = Bool
//  if ((<co-state> == 6))
547  :     JumpIf        : label = 606
//  <state>stateMachineObject
548  :     LoadCapturedVar: var = 10(<captured><state>stateMachineObject)
//  <state>stateMachineObject.stateMachineInput
549  :     GetProperty   : propertyInfo = stateMachineInput<system::StateMachine>
//  var <switch>1 : ::system::Int32 = <state>stateMachineObject.stateMachineInput;
550  :     StoreLocalVar : var = 6(<switch>1)
//  <switch>1
551  :     LoadLocalVar  : var = 6(<switch>1)
//  1
552  :     LoadValue     : value = <I4, 1>
//  (<switch>1 == 1 of (::system::Int32))
553  :     CompareValue  
//  if ((<switch>1 == 1 of (::system::Int32)))
554  :     OpNot         : type = Bool
//  if ((<switch>1 == 1 of (::system::Int32)))
555  :     JumpIf        : label = 571
//  1
556  :     LoadValue     : value = <I4, 1>
//  (-1)
557  :     OpNegative    : type = I4
//  (<state>stateMachineObject.stateMachineInput = (-1))
558  :     Duplicate     : stackPatternCount = 0
//  <state>stateMachineObject
559  :     LoadCapturedVar: var = 10(<captured><state>stateMachineObject)
//  (<state>stateMachineObject.stateMachineInput = (-1))
560  :     SetProperty   : propertyInfo = stateMachineInput<system::StateMachine>
//  (<state>stateMachineObject.stateMachineInput = (-1));
561  :     Pop           
//  ""
562  :     LoadValue     : value = <Bool, >
//  s
563  :     LoadGlobalVar : var = 0(s)
//  ("" & s)
564  :     OpConcat      
//  "[B]"
565  :     LoadValue     : value = <Bool, [B]>
//  (("" & s) & "[B]")
566  :     OpConcat      
//  (s = (("" & s) & "[B]"))
567  :     Duplicate     : stackPatternCount = 0
//  (s = (("" & s) & "[B]"))
568  :     StoreGlobalVar: var = 0(s)
//  (s = (("" & s) & "[B]"));
569  :     Pop           
//  if ((<switch>1 == 1 of (::system::Int32)))
570  :     Jump          : label = 585
//  <switch>1
571  :     LoadLocalVar  : var = 6(<switch>1)
//  0
572  :     LoadValue     : value = <I4, 0>
//  (<switch>1 == 0 of (::system::Int32))
573  :     CompareValue  
//  if ((<switch>1 == 0 of (::system::Int32)))
574  :     OpNot         : type = Bool
//  if ((<switch>1 == 0 of (::system::Int32)))
575  :     JumpIf        : label = 585
//  1
576  :     LoadValue     : value = <I4, 1>
//  (-1)
577  :     OpNegative    : type = I4
//  (<state>stateMachineObject.stateMachineInput = (-1))
578  :     Duplicate     : stackPatternCount = 0
//  <state>stateMachineObject
579  :     LoadCapturedVar: var = 10(<captured><state>stateMachineObject)
//  (<state>stateMachineObject.stateMachineInput = (-1))
580  :     SetProperty   : propertyInfo = stateMachineInput<system::StateMachine>
//  (<state>stateMachineObject.stateMachineInput = (-1));
581  :     Pop           
//  "Method \"A\" of class \"SMTryCatch1\" cannot be called at this moment."
582  :     LoadValue     : value = <Bool, Method "A" of class "SMTryCatch1" cannot be called at this moment.>
//  raise "Method \"A\" of class \"SMTryCatch1\" cannot be called at this moment.";
583  :     RaiseException
//  if ((<switch>1 == 0 of (::system::Int32)))
584  :     Jump          : label = 585
//  ""
585  :     LoadValue     : value = <Bool, >
//  s
586  :     LoadGlobalVar : var = 0(s)
//  ("" & s)
587  :     OpConcat      
//  ".B"
588  :     LoadValue     : value = <Bool, .B>
//  (("" & s) & ".B")
589  :     OpConcat      
//  (s = (("" & s) & ".B"))
590  :     Duplicate     : stackPatternCount = 0
//  (s = (("" & s) & ".B"))
591  :     StoreGlobalVar: var = 0(s)
//  (s = (("" & s) & ".B"));
592  :     Pop           
//  13
593  :     LoadValue     : value = <I4, 13>
//  (<co-state> = 13)
594  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 13)
595  :     StoreCapturedVar: var = 6
//  (<co-state> = 13);
596  :     Pop           
//  try
597  :     UninstallTry  : stackPatternCount = 0
//  continue;
598  :     Jump          : label = 260
//  3
599  :     LoadValue     : value = <I4, 3>
//  (<co-state> = 3)
600  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 3)
601  :     StoreCapturedVar: var = 6
//  (<co-state> = 3);
602  :     Pop           
//  try
603  :     UninstallTry  : stackPatternCount = 0
//  continue;
604  :     Jump          : label = 260
//  if ((<co-state> == 6))
605  :     Jump          : label = 606
//  <co-state>
606  :     LoadCapturedVar: var = 6(<captured><co-state>)
//  7
607  :     LoadValue     : value = <I4, 7>
//  (<co-state> == 7)
608  :     CompareValue  
//  if ((<co-state> == 7))
609  :     OpNot         : type = Bool
//  if ((<co-state> == 7))
610  :     JumpIf        : label = 626
//  ""
611  :     LoadValue     : value = <Bool, >
//  s
612  :     LoadGlobalVar : var = 0(s)
//  ("" & s)
613  :     OpConcat      
//  "!A"
614  :     LoadValue     : value = <Bool, !A>
//  (("" & s) & "!A")
615  :     OpConcat      
//  (s = (("" & s) & "!A"))
616  :     Duplicate     : stackPatternCount = 0
//  (s = (("" & s) & "!A"))
617  :     StoreGlobalVar: var = 0(s)
//  (s = (("" & s) & "!A"));
618  :     Pop           
//  10
619  :     LoadValue     : value = <I4, 10>
//  (<co-state> = 10)
620  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 10)
621  :     StoreCapturedVar: var = 6
//  (<co-state> = 10);
622  :     Pop           
//  try
623  :     UninstallTry  : stackPatternCount = 0
//  continue;
624  :     Jump          : label = 260
//  if ((<co-state> == 7))
625  :     Jump          : label = 626
//  <co-state>
626  :     LoadCapturedVar: var = 6(<captured><co-state>)
//  9
627  :     LoadValue     : value = <I4, 9>
//  (<co-state> == 9)
628  :     CompareValue  
//  if ((<co-state> == 9))
629  :     OpNot         : type = Bool
//  if ((<co-state> == 9))
630  :     JumpIf        : label = 646
//  ""
631  :     LoadValue     : value = <Bool, >
//  s
632  :     LoadGlobalVar : var = 0(s)
//  ("" & s)
633  :     OpConcat      
//  "!B"
634  :     LoadValue     : value = <Bool, !B>
//  (("" & s) & "!B")
635  :     OpConcat      
//  (s = (("" & s) & "!B"))
636  :     Duplicate     : stackPatternCount = 0
//  (s = (("" & s) & "!B"))
637  :     StoreGlobalVar: var = 0(s)
//  (s = (("" & s) & "!B"));
638  :     Pop           
//  12
639  :     LoadValue     : value = <I4, 12>
//  (<co-state> = 12)
640  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 12)
641  :     StoreCapturedVar: var = 6
//  (<co-state> = 12);
642  :     Pop           
//  try
643  :     UninstallTry  : stackPatternCount = 0
//  continue;
644  :     Jump          : label = 260
//  if ((<co-state> == 9))
645  :     Jump          : label = 646
//  <co-state>
646  :     LoadCapturedVar: var = 6(<captured><co-state>)
//  12
647  :     LoadValue     : value = <I4, 12>
//  (<co-state> == 12)
648  :     CompareValue  
//  if ((<co-state> == 12))
649  :     OpNot         : type = Bool
//  if ((<co-state> == 12))
650  :     JumpIf        : label = 672
//  ""
651  :     LoadValue     : value = <Bool, >
//  s
652  :     LoadGlobalVar : var = 0(s)
//  ("" & s)
653  :     OpConcat      
//  "."
654  :     LoadValue     : value = <Bool, .>
//  (("" & s) & ".")
655  :     OpConcat      
//  (s = (("" & s) & "."))
656  :     Duplicate     : stackPatternCount = 0
//  (s = (("" & s) & "."))
657  :     StoreGlobalVar: var = 0(s)
//  (s = (("" & s) & "."));
658  :     Pop           
//  13
659  :     LoadValue     : value = <I4, 13>
//  (<co-state> = 13)
660  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 13)
661  :     StoreCapturedVar: var = 6
//  (<co-state> = 13);
662  :     Pop           
//  try
663  :     UninstallTry  : stackPatternCount = 0
//  continue;
664  :     Jump          : label = 260
//  3
665  :     LoadValue     : value = <I4, 3>
//  (<co-state> = 3)
666  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 3)
667  :     StoreCapturedVar: var = 6
//  (<co-state> = 3);
668  :     Pop           
//  try
669  :     UninstallTry  : stackPatternCount = 0
//  continue;
670  :     Jump          : label = 260
//  if ((<co-state> == 12))
671  :     Jump          : label = 672
//  try
672  :     UninstallTry  : stackPatternCount = 0
//  try
673  :     Jump          : label = 685
//  try
674  :     LoadException 
//  try
675  :     StoreLocalVar : var = 7(<catch><co-ex>)
//  <co-ex>
676  :     LoadLocalVar  : var = 7(<catch><co-ex>)
//  (<co-tempexvar0>ex = <co-ex>)
677  :     Duplicate     : stackPatternCount = 0
//  (<co-tempexvar0>ex = <co-ex>)
678  :     StoreCapturedVar: var = 0
//  (<co-tempexvar0>ex = <co-ex>);
679  :     Pop           
//  2
680  :     LoadValue     : value = <I4, 2>
//  (<co-state> = 2)
681  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 2)
682  :     StoreCapturedVar: var = 6
//  (<co-state> = 2);
683  :     Pop           
//  continue;
684  :     Jump          : label = 260
//  try
685  :     InstallTry    : label = 709
//  <co-state>
686  :     LoadCapturedVar: var = 6(<captured><co-state>)
//  8
687  :     LoadValue     : value = <I4, 8>
//  (<co-state> == 8)
688  :     CompareValue  
//  if ((<co-state> == 8))
689  :     OpNot         : type = Bool
//  if ((<co-state> == 8))
690  :     JumpIf        : label = 707
//  Waiting
691  :     LoadValue     : value = <enum: 0>
//  SetStatus(Waiting)
692  :     InvokeWithContext: func = 7(<method:SetStatus<system::Coroutine>(7)> in SMTryCatch1::<state>CreateCoroutine), stackPatternCount = 1
//  SetStatus(Waiting);
693  :     Pop           
//  <co-state>
694  :     LoadCapturedVar: var = 6(<captured><co-state>)
//  (<co-state-before-pause> = <co-state>)
695  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = <co-state>)
696  :     StoreCapturedVar: var = 7
//  (<co-state-before-pause> = <co-state>);
697  :     Pop           
//  10
698  :     LoadValue     : value = <I4, 10>
//  (<co-state> = 10)
699  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 10)
700  :     StoreCapturedVar: var = 6
//  (<co-state> = 10);
701  :     Pop           
//  try
702  :     UninstallTry  : stackPatternCount = 0
//  try
703  :     UninstallTry  : stackPatternCount = 0
//  return;
704  :     LoadValue     : value = <null>
//  return;
705  :     Return        
//  if ((<co-state> == 8))
706  :     Jump          : label = 707
//  try
707  :     UninstallTry  : stackPatternCount = 0
//  try
708  :     Jump          : label = 720
//  try
709  :     LoadException 
//  try
710  :     StoreLocalVar : var = 8(<catch><co-ex>)
//  <co-ex>
711  :     LoadLocalVar  : var = 8(<catch><co-ex>)
//  (<co3>ex = <co-ex>)
712  :     Duplicate     : stackPatternCount = 0
//  (<co3>ex = <co-ex>)
713  :     StoreCapturedVar: var = 4
//  (<co3>ex = <co-ex>);
714  :     Pop           
//  7
715  :     LoadValue     : value = <I4, 7>
//  (<co-state> = 7)
716  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 7)
717  :     StoreCapturedVar: var = 6
//  (<co-state> = 7);
718  :     Pop           
//  continue;
719  :     Jump          : label = 260
//  try
720  :     InstallTry    : label = 760
//  <co-state>
721  :     LoadCapturedVar: var = 6(<captured><co-state>)
//  10
722  :     LoadValue     : value = <I4, 10>
//  (<co-state> == 10)
723  :     CompareValue  
//  if ((<co-state> == 10))
724  :     OpNot         : type = Bool
//  if ((<co-state> == 10))
725  :     JumpIf        : label = 737
//  2
726  :     LoadValue     : value = <I4, 2>
//  <state>stateMachineObject
727  :     LoadCapturedVar: var = 10(<captured><state>stateMachineObject)
//  <state>stateMachineObject.<state>CreateCoroutine(2)
728  :     InvokeMethod  : methodInfo = <state>CreateCoroutine<SMTryCatch1>, stackPatternCount = 1
//  <state>stateMachineObject.<state>CreateCoroutine(2);
729  :     Pop           
//  11
730  :     LoadValue     : value = <I4, 11>
//  (<co-state> = 11)
731  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 11)
732  :     StoreCapturedVar: var = 6
//  (<co-state> = 11);
733  :     Pop           
//  try
734  :     UninstallTry  : stackPatternCount = 0
//  continue;
735  :     Jump          : label = 260
//  if ((<co-state> == 10))
736  :     Jump          : label = 737
//  <co-state>
737  :     LoadCapturedVar: var = 6(<captured><co-state>)
//  11
738  :     LoadValue     : value = <I4, 11>
//  (<co-state> == 11)
739  :     CompareValue  
//  if ((<co-state> == 11))
740  :     OpNot         : type = Bool
//  if ((<co-state> == 11))
741  :     JumpIf        : label = 758
//  Waiting
742  :     LoadValue     : value = <enum: 0>
//  SetStatus(Waiting)
743  :     InvokeWithContext: func = 7(<method:SetStatus<system::Coroutine>(7)> in SMTryCatch1::<state>CreateCoroutine), stackPatternCount = 1
//  SetStatus(Waiting);
744  :     Pop           
//  <co-state>
745  :     LoadCapturedVar: var = 6(<captured><co-state>)
//  (<co-state-before-pause> = <co-state>)
746  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = <co-state>)
747  :     StoreCapturedVar: var = 7
//  (<co-state-before-pause> = <co-state>);
748  :     Pop           
//  12
749  :     LoadValue     : value = <I4, 12>
//  (<co-state> = 12)
750  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 12)
751  :     StoreCapturedVar: var = 6
//  (<co-state> = 12);
752  :     Pop           
//  try
753  :     UninstallTry  : stackPatternCount = 0
//  try
754  :     UninstallTry  : stackPatternCount = 0
//  return;
755  :     LoadValue     : value = <null>
//  return;
756  :     Return        
//  if ((<co-state> == 11))
757  :     Jump          : label = 758
//  try
758  :     UninstallTry  : stackPatternCount = 0
//  try
759  :     Jump          : label = 771
//  try
760  :     LoadException 
//  try
761  :     StoreLocalVar : var = 9(<catch><co-ex>)
//  <co-ex>
762  :     LoadLocalVar  : var = 9(<catch><co-ex>)
//  (<co4>ex = <co-ex>)
763  :     Duplicate     : stackPatternCount = 0
//  (<co4>ex = <co-ex>)
764  :     StoreCapturedVar: var = 5
//  (<co4>ex = <co-ex>);
765  :     Pop           
//  9
766  :     LoadValue     : value = <I4, 9>
//  (<co-state> = 9)
767  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 9)
768  :     StoreCapturedVar: var = 6
//  (<co-state> = 9);
769  :     Pop           
//  continue;
770  :     Jump          : label = 260
//  while (true)
771  :     Jump          : label = 260
//  try
772  :     UninstallTry  : stackPatternCount = 0
//  try
773  :     Jump          : label = 788
//  try
774  :     LoadException 
//  try
775  :     StoreLocalVar : var = 10(<catch><co-ex>)
//  <co-ex>
776  :     LoadLocalVar  : var = 10(<catch><co-ex>)
//  SetFailure(<co-ex>)
777  :     InvokeWithContext: func = 6(<method:SetFailure<system::Coroutine>(6)> in SMTryCatch1::<state>CreateCoroutine), stackPatternCount = 1
//  SetFailure(<co-ex>);
778  :     Pop           
//  Stopped
779  :     LoadValue     : value = <enum: 2>
//  SetStatus(Stopped)
780  :     InvokeWithContext: func = 7(<method:SetStatus<system::Coroutine>(7)> in SMTryCatch1::<state>CreateCoroutine), stackPatternCount = 1
//  SetStatus(Stopped);
781  :     Pop           
//  <raise-exception>
782  :     LoadLocalVar  : var = 0(<raise-exception>)
//  if (<raise-exception>)
783  :     OpNot         : type = Bool
//  if (<raise-exception>)
784  :     JumpIf        : label = 788
//  raise;
785  :     LoadLocalVar  : var = 10(<catch><co-ex>)
//  raise;
786  :     RaiseException
//  if (<raise-exception>)
787  :     Jump          : label = 788
//  func Resume(<raise-exception> : ::system::Boolean, <coroutine-output> : ::system::CoroutineResult^) : (::system::Void)
788  :     LoadValue     : value = <null>
//  func Resume(<raise-exception> : ::system::Boolean, <coroutine-output> : ::system::CoroutineResult^) : (::system::Void)
789  :     Return        
//  new ()
790  :     LoadCapturedVar: var = 0(<captured-this>0)
//  new ()
791  :     InvokeBaseCtor: methodInfo = <system::StateMachine>, stackPatternCount = 0
//  new ()
792  :     Pop           
//  new ()
793  :     LoadValue     : value = <null>
//  new ()
794  :     Return        
//  new (SMTryCatch1^)()
795  :     LoadValue     : value = <null>
//  new (SMTryCatch1^)()
796  :     InvokeMethod  : methodInfo = <SMTryCatch1>, stackPatternCount = 0
//  var sm = new (SMTryCatch1^)();
797  :     StoreLocalVar : var = 0(sm)
//  try
798  :     InstallTry    : label = 807
//  sm
799  :     LoadLocalVar  : var = 0(sm)
//  sm.A()
800  :     InvokeMethod  : methodInfo = A<SMTryCatch1>, stackPatternCount = 0
//  sm.A();
801  :     Pop           
//  sm
802  :     LoadLocalVar  : var = 0(sm)
//  sm.B()
803  :     InvokeMethod  : methodInfo = B<SMTryCatch1>, stackPatternCount = 0
//  sm.B();
804  :     Pop           
//  try
805  :     UninstallTry  : stackPatternCount = 0
//  try
806  :     Jump          : label = 817
//  try
807  :     LoadException 
//  try
808  :     StoreLocalVar : var = 1(<catch>ex)
//  ""
809  :     LoadValue     : value = <Bool, >
//  s
810  :     LoadGlobalVar : var = 0(s)
//  ("" & s)
811  :     OpConcat      
//  "!"
812  :     LoadValue     : value = <Bool, !>
//  (("" & s) & "!")
813  :     OpConcat      
//  (s = (("" & s) & "!"))
814  :     Duplicate     : stackPatternCount = 0
//  (s = (("" & s) & "!"))
815  :     StoreGlobalVar: var = 0(s)
//  (s = (("" & s) & "!"));
816  :     Pop           
//  s
817  :     LoadGlobalVar : var = 0(s)
//  return s;
818  :     Return        
//  func main() : (string)
819  :     LoadValue     : value = <null>
//  func main() : (string)
820  :     Return        
