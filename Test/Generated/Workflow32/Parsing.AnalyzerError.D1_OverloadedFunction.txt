========================================================
Original
========================================================
module test;

func Overloaded() : (void)
{
}

func Overloaded() : (void)
{
}

var Overloaded : string = null;

========================================================
Printed
========================================================
module test;

func Overloaded() : (void)
{
}

func Overloaded() : (void)
{
}

var Overloaded : string = null;

========================================================
Errors
========================================================
Line: 11, Column: 1, Message: D1: Duplicated declaration "Overloaded", it has already beed defined as a function.
========================================================
AST
========================================================
{
    "$ast": { "type": "Module", "codeRange": {"start": {"row": 0, "column": 0, "index": 0}, "end": {"row": 10, "column": 30, "index": 110}, "codeIndex": -1}},
    "declarations": [{
        "$ast": { "type": "FunctionDeclaration", "codeRange": {"start": {"row": 2, "column": 0, "index": 16}, "end": {"row": 4, "column": 0, "index": 43}, "codeIndex": -1}},
        "attributes": [],
        "name": { "value": "Overloaded", "codeRange": {"start": {"row": 2, "column": 5, "index": 21}, "end": {"row": 2, "column": 14, "index": 30}, "codeIndex": -1}},
        "anonymity": "Named",
        "arguments": [],
        "functionKind": "Normal",
        "returnType": {
            "$ast": { "type": "PredefinedType", "codeRange": {"start": {"row": 2, "column": 18, "index": 34}, "end": {"row": 2, "column": 21, "index": 37}, "codeIndex": -1}},
            "name": "Void"
        },
        "statement": {
            "$ast": { "type": "BlockStatement", "codeRange": {"start": {"row": 3, "column": 0, "index": 40}, "end": {"row": 4, "column": 0, "index": 43}, "codeIndex": -1}},
            "endLabel": { "value": "", "codeRange": {"start": {"row": -2, "column": -2, "index": -2}, "end": {"row": -2, "column": -2, "index": -2}, "codeIndex": -1}},
            "statements": []
        }
    }, {
        "$ast": { "type": "FunctionDeclaration", "codeRange": {"start": {"row": 6, "column": 0, "index": 48}, "end": {"row": 8, "column": 0, "index": 75}, "codeIndex": -1}},
        "attributes": [],
        "name": { "value": "Overloaded", "codeRange": {"start": {"row": 6, "column": 5, "index": 53}, "end": {"row": 6, "column": 14, "index": 62}, "codeIndex": -1}},
        "anonymity": "Named",
        "arguments": [],
        "functionKind": "Normal",
        "returnType": {
            "$ast": { "type": "PredefinedType", "codeRange": {"start": {"row": 6, "column": 18, "index": 66}, "end": {"row": 6, "column": 21, "index": 69}, "codeIndex": -1}},
            "name": "Void"
        },
        "statement": {
            "$ast": { "type": "BlockStatement", "codeRange": {"start": {"row": 7, "column": 0, "index": 72}, "end": {"row": 8, "column": 0, "index": 75}, "codeIndex": -1}},
            "endLabel": { "value": "", "codeRange": {"start": {"row": -2, "column": -2, "index": -2}, "end": {"row": -2, "column": -2, "index": -2}, "codeIndex": -1}},
            "statements": []
        }
    }, {
        "$ast": { "type": "VariableDeclaration", "codeRange": {"start": {"row": 10, "column": 0, "index": 80}, "end": {"row": 10, "column": 30, "index": 110}, "codeIndex": -1}},
        "attributes": [],
        "name": { "value": "Overloaded", "codeRange": {"start": {"row": 10, "column": 4, "index": 84}, "end": {"row": 10, "column": 13, "index": 93}, "codeIndex": -1}},
        "expression": {
            "$ast": { "type": "LiteralExpression", "codeRange": {"start": {"row": 10, "column": 26, "index": 106}, "end": {"row": 10, "column": 29, "index": 109}, "codeIndex": -1}},
            "value": "Null"
        },
        "type": {
            "$ast": { "type": "PredefinedType", "codeRange": {"start": {"row": 10, "column": 17, "index": 97}, "end": {"row": 10, "column": 22, "index": 102}, "codeIndex": -1}},
            "name": "String"
        }
    }],
    "moduleType": "Module",
    "name": { "value": "test", "codeRange": {"start": {"row": 0, "column": 7, "index": 7}, "end": {"row": 0, "column": 10, "index": 10}, "codeIndex": -1}},
    "paths": []
}