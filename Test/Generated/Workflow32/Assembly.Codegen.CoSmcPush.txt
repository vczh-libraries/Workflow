========================================================
Global Variables:
========================================================
s

========================================================
Functions:
========================================================
SMPush::A (4 .. 31)
    Arguments:
    Captured Variables:
        <captured-this>0
    Local Variables:

SMPush::B (32 .. 59)
    Arguments:
    Captured Variables:
        <captured-this>0
    Local Variables:

SMPush::<state>CreateCoroutine (60 .. 92)
    Arguments:
        <state>startState
    Captured Variables:
        <captured-this>0
    Local Variables:
        <state>stateMachineObject
        <state>previousCoroutine

SMPush::#ctor (631 .. 635)
    Arguments:
    Captured Variables:
        <captured-this>0
    Local Variables:

main (636 .. 661)
    Arguments:
    Captured Variables:
    Local Variables:
        sm
        <catch>ex

<initialize> (0 .. 3)
    Arguments:
    Captured Variables:
    Local Variables:

<method:SetFailure<system::Coroutine>(6)> in SMPush::<state>CreateCoroutine (93 .. 98)
    Arguments:
        <value>
    Captured Variables:
        <captured><co-tempexvar0>ex
        <captured><co0-switch>2
        <captured><co1-state>currentState
        <captured><co2-state>state
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured><state>stateMachineObject
        <captured><state>previousCoroutine
        <captured><state>startState
        <captured-this>0
        <captured-this>1
    Local Variables:

<method:SetStatus<system::Coroutine>(7)> in SMPush::<state>CreateCoroutine (99 .. 104)
    Arguments:
        <value>
    Captured Variables:
        <captured><co-tempexvar0>ex
        <captured><co0-switch>2
        <captured><co1-state>currentState
        <captured><co2-state>state
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured><state>stateMachineObject
        <captured><state>previousCoroutine
        <captured><state>startState
        <captured-this>0
        <captured-this>1
    Local Variables:

<method:GetFailure<system::Coroutine>(10)> in SMPush::<state>CreateCoroutine (105 .. 108)
    Arguments:
    Captured Variables:
        <captured><co-tempexvar0>ex
        <captured><co0-switch>2
        <captured><co1-state>currentState
        <captured><co2-state>state
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured><state>stateMachineObject
        <captured><state>previousCoroutine
        <captured><state>startState
        <captured-this>0
        <captured-this>1
    Local Variables:

<method:GetStatus<system::Coroutine>(11)> in SMPush::<state>CreateCoroutine (109 .. 112)
    Arguments:
    Captured Variables:
        <captured><co-tempexvar0>ex
        <captured><co0-switch>2
        <captured><co1-state>currentState
        <captured><co2-state>state
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured><state>stateMachineObject
        <captured><state>previousCoroutine
        <captured><state>startState
        <captured-this>0
        <captured-this>1
    Local Variables:

<method:Resume<system::Coroutine>(12)> in SMPush::<state>CreateCoroutine (113 .. 630)
    Arguments:
        <raise-exception>
        <coroutine-output>
    Captured Variables:
        <captured><co-tempexvar0>ex
        <captured><co0-switch>2
        <captured><co1-state>currentState
        <captured><co2-state>state
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured><state>stateMachineObject
        <captured><state>previousCoroutine
        <captured><state>startState
        <captured-this>0
        <captured-this>1
    Local Variables:
        <anonymous-range-test>
        <switch>0
        <switch>1
        <catch><co-ex>
        <catch><co-ex>

========================================================
Instructions:
========================================================
//  ""
0    :     LoadValue     : value = <String, >
//  var s = "";
1    :     StoreGlobalVar: var = 0(s)
2    :     LoadValue     : value = <null>
3    :     Return        
//  this
4    :     LoadCapturedVar: var = 0(<captured-this>0)
//  this.stateMachineInitialized
5    :     GetProperty   : propertyInfo = stateMachineInitialized<system::StateMachine>
//  (!this.stateMachineInitialized)
6    :     OpNot         : type = Bool
//  if ((!this.stateMachineInitialized))
7    :     OpNot         : type = Bool
//  if ((!this.stateMachineInitialized))
8    :     JumpIf        : label = 22
//  true
9    :     LoadValue     : value = <Bool, true>
//  (this.stateMachineInitialized = true)
10   :     Duplicate     : stackPatternCount = 0
//  this
11   :     LoadCapturedVar: var = 0(<captured-this>0)
//  (this.stateMachineInitialized = true)
12   :     SetProperty   : propertyInfo = stateMachineInitialized<system::StateMachine>
//  (this.stateMachineInitialized = true);
13   :     Pop           
//  0
14   :     LoadValue     : value = <I4, 0>
//  this
15   :     LoadCapturedVar: var = 0(<captured-this>0)
//  this.<state>CreateCoroutine(0)
16   :     InvokeMethod  : methodInfo = <state>CreateCoroutine<SMPush>, stackPatternCount = 1
//  this.<state>CreateCoroutine(0);
17   :     Pop           
//  this
18   :     LoadCapturedVar: var = 0(<captured-this>0)
//  this.ResumeStateMachine()
19   :     InvokeMethod  : methodInfo = ResumeStateMachine<system::StateMachine>, stackPatternCount = 0
//  this.ResumeStateMachine();
20   :     Pop           
//  if ((!this.stateMachineInitialized))
21   :     Jump          : label = 22
//  0
22   :     LoadValue     : value = <I4, 0>
//  (this.stateMachineInput = 0)
23   :     Duplicate     : stackPatternCount = 0
//  this
24   :     LoadCapturedVar: var = 0(<captured-this>0)
//  (this.stateMachineInput = 0)
25   :     SetProperty   : propertyInfo = stateMachineInput<system::StateMachine>
//  (this.stateMachineInput = 0);
26   :     Pop           
//  this
27   :     LoadCapturedVar: var = 0(<captured-this>0)
//  this.ResumeStateMachine()
28   :     InvokeMethod  : methodInfo = ResumeStateMachine<system::StateMachine>, stackPatternCount = 0
//  this.ResumeStateMachine();
29   :     Pop           
//  func A() : (::system::Void)
30   :     LoadValue     : value = <null>
//  func A() : (::system::Void)
31   :     Return        
//  this
32   :     LoadCapturedVar: var = 0(<captured-this>0)
//  this.stateMachineInitialized
33   :     GetProperty   : propertyInfo = stateMachineInitialized<system::StateMachine>
//  (!this.stateMachineInitialized)
34   :     OpNot         : type = Bool
//  if ((!this.stateMachineInitialized))
35   :     OpNot         : type = Bool
//  if ((!this.stateMachineInitialized))
36   :     JumpIf        : label = 50
//  true
37   :     LoadValue     : value = <Bool, true>
//  (this.stateMachineInitialized = true)
38   :     Duplicate     : stackPatternCount = 0
//  this
39   :     LoadCapturedVar: var = 0(<captured-this>0)
//  (this.stateMachineInitialized = true)
40   :     SetProperty   : propertyInfo = stateMachineInitialized<system::StateMachine>
//  (this.stateMachineInitialized = true);
41   :     Pop           
//  0
42   :     LoadValue     : value = <I4, 0>
//  this
43   :     LoadCapturedVar: var = 0(<captured-this>0)
//  this.<state>CreateCoroutine(0)
44   :     InvokeMethod  : methodInfo = <state>CreateCoroutine<SMPush>, stackPatternCount = 1
//  this.<state>CreateCoroutine(0);
45   :     Pop           
//  this
46   :     LoadCapturedVar: var = 0(<captured-this>0)
//  this.ResumeStateMachine()
47   :     InvokeMethod  : methodInfo = ResumeStateMachine<system::StateMachine>, stackPatternCount = 0
//  this.ResumeStateMachine();
48   :     Pop           
//  if ((!this.stateMachineInitialized))
49   :     Jump          : label = 50
//  1
50   :     LoadValue     : value = <I4, 1>
//  (this.stateMachineInput = 1)
51   :     Duplicate     : stackPatternCount = 0
//  this
52   :     LoadCapturedVar: var = 0(<captured-this>0)
//  (this.stateMachineInput = 1)
53   :     SetProperty   : propertyInfo = stateMachineInput<system::StateMachine>
//  (this.stateMachineInput = 1);
54   :     Pop           
//  this
55   :     LoadCapturedVar: var = 0(<captured-this>0)
//  this.ResumeStateMachine()
56   :     InvokeMethod  : methodInfo = ResumeStateMachine<system::StateMachine>, stackPatternCount = 0
//  this.ResumeStateMachine();
57   :     Pop           
//  func B() : (::system::Void)
58   :     LoadValue     : value = <null>
//  func B() : (::system::Void)
59   :     Return        
//  this
60   :     LoadCapturedVar: var = 0(<captured-this>0)
//  var <state>stateMachineObject = this;
61   :     StoreLocalVar : var = 1(<state>stateMachineObject)
//  <state>stateMachineObject
62   :     LoadLocalVar  : var = 1(<state>stateMachineObject)
//  <state>stateMachineObject.stateMachineCoroutine
63   :     GetProperty   : propertyInfo = stateMachineCoroutine<system::StateMachine>
//  var <state>previousCoroutine = <state>stateMachineObject.stateMachineCoroutine;
64   :     StoreLocalVar : var = 2(<state>previousCoroutine)
//  null
65   :     LoadValue     : value = <null>
//  0
66   :     LoadValue     : value = <I4, 0>
//  0
67   :     LoadValue     : value = <I4, 0>
//  0
68   :     LoadValue     : value = <I4, 0>
//  0
69   :     LoadValue     : value = <I4, 0>
//  1
70   :     LoadValue     : value = <I4, 1>
//  (-1)
71   :     OpNegative    : type = I4
//  null
72   :     LoadValue     : value = <null>
//  Waiting
73   :     LoadValue     : value = <enum: 0>
//  new (::system::Coroutine^)
74   :     LoadLocalVar  : var = 1(<state>stateMachineObject)
//  new (::system::Coroutine^)
75   :     LoadLocalVar  : var = 2(<state>previousCoroutine)
//  new (::system::Coroutine^)
76   :     LoadLocalVar  : var = 0(<state>startState)
//  new (::system::Coroutine^)
77   :     LoadCapturedVar: var = 0(<captured-this>0)
//  new (::system::Coroutine^)
78   :     LoadValue     : value = <null>
//  new (::system::Coroutine^)
79   :     CreateClosureContext: stackPatternCount = 13
//  new (::system::Coroutine^)
80   :     LoadMethodInfo: methodInfo = GetFailure<system::Coroutine>
//  func GetFailure() : (::system::Exception^)
81   :     LoadFunction  : func = 8(<method:GetFailure<system::Coroutine>(10)> in SMPush::<state>CreateCoroutine)
//  new (::system::Coroutine^)
82   :     LoadMethodInfo: methodInfo = GetStatus<system::Coroutine>
//  func GetStatus() : (::system::CoroutineStatus)
83   :     LoadFunction  : func = 9(<method:GetStatus<system::Coroutine>(11)> in SMPush::<state>CreateCoroutine)
//  new (::system::Coroutine^)
84   :     LoadMethodInfo: methodInfo = Resume<system::Coroutine>
//  func Resume(<raise-exception> : ::system::Boolean, <coroutine-output> : ::system::CoroutineResult^) : (::system::Void)
85   :     LoadFunction  : func = 10(<method:Resume<system::Coroutine>(12)> in SMPush::<state>CreateCoroutine)
//  new (::system::Coroutine^)
86   :     CreateInterface: methodInfo = <system::Coroutine>, stackPatternCount = 6
//  (<state>stateMachineObject.stateMachineCoroutine = new (::system::Coroutine^)
87   :     Duplicate     : stackPatternCount = 0
//  <state>stateMachineObject
88   :     LoadLocalVar  : var = 1(<state>stateMachineObject)
//  (<state>stateMachineObject.stateMachineCoroutine = new (::system::Coroutine^)
89   :     SetProperty   : propertyInfo = stateMachineCoroutine<system::StateMachine>
//  (<state>stateMachineObject.stateMachineCoroutine = new (::system::Coroutine^)
90   :     Pop           
//  func <state>CreateCoroutine(<state>startState : ::system::Int32) : (::system::Void)
91   :     LoadValue     : value = <null>
//  func <state>CreateCoroutine(<state>startState : ::system::Int32) : (::system::Void)
92   :     Return        
//  <value>
93   :     LoadLocalVar  : var = 0(<value>)
//  (<prop>Failure = <value>)
94   :     Duplicate     : stackPatternCount = 0
//  (<prop>Failure = <value>)
95   :     StoreCapturedVar: var = 6
//  (<prop>Failure = <value>);
96   :     Pop           
//  func SetFailure(<value> : ::system::Exception^) : (void)
97   :     LoadValue     : value = <null>
//  func SetFailure(<value> : ::system::Exception^) : (void)
98   :     Return        
//  <value>
99   :     LoadLocalVar  : var = 0(<value>)
//  (<prop>Status = <value>)
100  :     Duplicate     : stackPatternCount = 0
//  (<prop>Status = <value>)
101  :     StoreCapturedVar: var = 7
//  (<prop>Status = <value>);
102  :     Pop           
//  func SetStatus(<value> : ::system::CoroutineStatus) : (void)
103  :     LoadValue     : value = <null>
//  func SetStatus(<value> : ::system::CoroutineStatus) : (void)
104  :     Return        
//  <prop>Failure
105  :     LoadCapturedVar: var = 6(<captured><prop>Failure)
//  return <prop>Failure;
106  :     Return        
//  func GetFailure() : (::system::Exception^)
107  :     LoadValue     : value = <null>
//  func GetFailure() : (::system::Exception^)
108  :     Return        
//  <prop>Status
109  :     LoadCapturedVar: var = 7(<captured><prop>Status)
//  return <prop>Status;
110  :     Return        
//  func GetStatus() : (::system::CoroutineStatus)
111  :     LoadValue     : value = <null>
//  func GetStatus() : (::system::CoroutineStatus)
112  :     Return        
//  Status
113  :     LoadCapturedVar: var = 12(<captured-this>1)
//  Status
114  :     InvokeMethod  : methodInfo = GetStatus<system::Coroutine>, stackPatternCount = 0
//  ::system::CoroutineStatus::Waiting
115  :     LoadValue     : value = <enum: 0>
//  (Status != ::system::CoroutineStatus::Waiting)
116  :     CompareValue  
//  (Status != ::system::CoroutineStatus::Waiting)
117  :     OpNot         : type = Bool
//  if ((Status != ::system::CoroutineStatus::Waiting))
118  :     OpNot         : type = Bool
//  if ((Status != ::system::CoroutineStatus::Waiting))
119  :     JumpIf        : label = 123
//  "Resume should be called only when the coroutine is in the waiting status."
120  :     LoadValue     : value = <String, Resume should be called only when the coroutine is in the waiting status.>
//  raise "Resume should be called only when the coroutine is in the waiting status.";
121  :     RaiseException
//  if ((Status != ::system::CoroutineStatus::Waiting))
122  :     Jump          : label = 123
//  Executing
123  :     LoadValue     : value = <enum: 1>
//  SetStatus(Executing)
124  :     InvokeWithContext: func = 7(<method:SetStatus<system::Coroutine>(7)> in SMPush::<state>CreateCoroutine), stackPatternCount = 1
//  SetStatus(Executing);
125  :     Pop           
//  try
126  :     InstallTry    : label = 615
//  <co-state-before-pause>
127  :     LoadCapturedVar: var = 5(<captured><co-state-before-pause>)
//  1
128  :     LoadValue     : value = <I4, 1>
//  (-1)
129  :     OpNegative    : type = I4
//  (<co-state-before-pause> != (-1))
130  :     CompareValue  
//  (<co-state-before-pause> != (-1))
131  :     OpNot         : type = Bool
//  if ((<co-state-before-pause> != (-1)))
132  :     OpNot         : type = Bool
//  if ((<co-state-before-pause> != (-1)))
133  :     JumpIf        : label = 200
//  <coroutine-output>
134  :     LoadLocalVar  : var = 1(<coroutine-output>)
//  <coroutine-output> is null
135  :     LoadValue     : value = <null>
//  <coroutine-output> is null
136  :     CompareReference
//  if (<coroutine-output> is null)
137  :     OpNot         : type = Bool
//  if (<coroutine-output> is null)
138  :     JumpIf        : label = 145
//  1
139  :     LoadValue     : value = <I4, 1>
//  (-1)
140  :     OpNegative    : type = I4
//  (<co-state-before-pause> = (-1))
141  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = (-1))
142  :     StoreCapturedVar: var = 5
//  (<co-state-before-pause> = (-1));
143  :     Pop           
//  if (<coroutine-output> is null)
144  :     Jump          : label = 199
//  <coroutine-output>
145  :     LoadLocalVar  : var = 1(<coroutine-output>)
//  <coroutine-output>.Failure
146  :     InvokeMethod  : methodInfo = GetFailure<system::CoroutineResult>, stackPatternCount = 0
//  <coroutine-output>.Failure is null
147  :     LoadValue     : value = <null>
//  <coroutine-output>.Failure is null
148  :     CompareReference
//  if (<coroutine-output>.Failure is null)
149  :     OpNot         : type = Bool
//  if (<coroutine-output>.Failure is null)
150  :     JumpIf        : label = 157
//  1
151  :     LoadValue     : value = <I4, 1>
//  (-1)
152  :     OpNegative    : type = I4
//  (<co-state-before-pause> = (-1))
153  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = (-1))
154  :     StoreCapturedVar: var = 5
//  (<co-state-before-pause> = (-1));
155  :     Pop           
//  if (<coroutine-output>.Failure is null)
156  :     Jump          : label = 199
//  <co-state-before-pause>
157  :     LoadCapturedVar: var = 5(<captured><co-state-before-pause>)
//  0
158  :     LoadValue     : value = <I4, 0>
//  (<co-state-before-pause> == 0)
159  :     CompareValue  
//  <co-state-before-pause>
160  :     LoadCapturedVar: var = 5(<captured><co-state-before-pause>)
//  <co-state-before-pause> in range [3, 10]
161  :     StoreLocalVar : var = 2(<anonymous-range-test>)
//  <co-state-before-pause> in range [3, 10]
162  :     LoadLocalVar  : var = 2(<anonymous-range-test>)
//  3
163  :     LoadValue     : value = <I4, 3>
//  <co-state-before-pause> in range [3, 10]
164  :     CompareLiteral: type = I4
//  <co-state-before-pause> in range [3, 10]
165  :     OpGE          
//  <co-state-before-pause> in range [3, 10]
166  :     LoadLocalVar  : var = 2(<anonymous-range-test>)
//  10
167  :     LoadValue     : value = <I4, 10>
//  <co-state-before-pause> in range [3, 10]
168  :     CompareLiteral: type = I4
//  <co-state-before-pause> in range [3, 10]
169  :     OpLE          
//  <co-state-before-pause> in range [3, 10]
170  :     OpAnd         : type = Bool
//  <co-state-before-pause> in range [3, 10]
171  :     LoadValue     : value = <null>
//  <co-state-before-pause> in range [3, 10]
172  :     StoreLocalVar : var = 2(<anonymous-range-test>)
//  ((<co-state-before-pause> == 0) or <co-state-before-pause> in range [3, 10])
173  :     OpOr          : type = Bool
//  if (((<co-state-before-pause> == 0) or <co-state-before-pause> in range [3, 10]))
174  :     OpNot         : type = Bool
//  if (((<co-state-before-pause> == 0) or <co-state-before-pause> in range [3, 10]))
175  :     JumpIf        : label = 191
//  1
176  :     LoadValue     : value = <I4, 1>
//  (-1)
177  :     OpNegative    : type = I4
//  (<co-state-before-pause> = (-1))
178  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = (-1))
179  :     StoreCapturedVar: var = 5
//  (<co-state-before-pause> = (-1));
180  :     Pop           
//  <coroutine-output>
181  :     LoadLocalVar  : var = 1(<coroutine-output>)
//  <coroutine-output>.Failure
182  :     InvokeMethod  : methodInfo = GetFailure<system::CoroutineResult>, stackPatternCount = 0
//  (<co-tempexvar0>ex = <coroutine-output>.Failure)
183  :     Duplicate     : stackPatternCount = 0
//  (<co-tempexvar0>ex = <coroutine-output>.Failure)
184  :     StoreCapturedVar: var = 0
//  (<co-tempexvar0>ex = <coroutine-output>.Failure);
185  :     Pop           
//  2
186  :     LoadValue     : value = <I4, 2>
//  (<co-state> = 2)
187  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 2)
188  :     StoreCapturedVar: var = 4
//  (<co-state> = 2);
189  :     Pop           
//  if (((<co-state-before-pause> == 0) or <co-state-before-pause> in range [3, 10]))
190  :     Jump          : label = 199
//  1
191  :     LoadValue     : value = <I4, 1>
//  (-1)
192  :     OpNegative    : type = I4
//  (<co-state-before-pause> = (-1))
193  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = (-1))
194  :     StoreCapturedVar: var = 5
//  (<co-state-before-pause> = (-1));
195  :     Pop           
//  <coroutine-output>
196  :     LoadLocalVar  : var = 1(<coroutine-output>)
//  <coroutine-output>.Failure
197  :     InvokeMethod  : methodInfo = GetFailure<system::CoroutineResult>, stackPatternCount = 0
//  raise <coroutine-output>.Failure;
198  :     RaiseException
//  if ((<co-state-before-pause> != (-1)))
199  :     Jump          : label = 200
//  true
200  :     LoadValue     : value = <Bool, true>
//  while (true)
201  :     OpNot         : type = Bool
//  while (true)
202  :     JumpIf        : label = 613
//  <co-state>
203  :     LoadCapturedVar: var = 4(<captured><co-state>)
//  1
204  :     LoadValue     : value = <I4, 1>
//  (<co-state> == 1)
205  :     CompareValue  
//  if ((<co-state> == 1))
206  :     OpNot         : type = Bool
//  if ((<co-state> == 1))
207  :     JumpIf        : label = 215
//  Stopped
208  :     LoadValue     : value = <enum: 2>
//  SetStatus(Stopped)
209  :     InvokeWithContext: func = 7(<method:SetStatus<system::Coroutine>(7)> in SMPush::<state>CreateCoroutine), stackPatternCount = 1
//  SetStatus(Stopped);
210  :     Pop           
//  try
211  :     UninstallTry  : stackPatternCount = 0
//  return;
212  :     LoadValue     : value = <null>
//  return;
213  :     Return        
//  if ((<co-state> == 1))
214  :     Jump          : label = 215
//  <co-state>
215  :     LoadCapturedVar: var = 4(<captured><co-state>)
//  2
216  :     LoadValue     : value = <I4, 2>
//  (<co-state> == 2)
217  :     CompareValue  
//  if ((<co-state> == 2))
218  :     OpNot         : type = Bool
//  if ((<co-state> == 2))
219  :     JumpIf        : label = 229
//  <state>previousCoroutine
220  :     LoadCapturedVar: var = 9(<captured><state>previousCoroutine)
//  (<state>stateMachineObject.stateMachineCoroutine = <state>previousCoroutine)
221  :     Duplicate     : stackPatternCount = 0
//  <state>stateMachineObject
222  :     LoadCapturedVar: var = 8(<captured><state>stateMachineObject)
//  (<state>stateMachineObject.stateMachineCoroutine = <state>previousCoroutine)
223  :     SetProperty   : propertyInfo = stateMachineCoroutine<system::StateMachine>
//  (<state>stateMachineObject.stateMachineCoroutine = <state>previousCoroutine);
224  :     Pop           
//  <co-tempexvar0>ex
225  :     LoadCapturedVar: var = 0(<captured><co-tempexvar0>ex)
//  <co-tempexvar0>ex.Message
226  :     InvokeMethod  : methodInfo = GetMessage<system::Exception>, stackPatternCount = 0
//  raise <co-tempexvar0>ex.Message;
227  :     RaiseException
//  if ((<co-state> == 2))
228  :     Jump          : label = 229
//  <co-state>
229  :     LoadCapturedVar: var = 4(<captured><co-state>)
//  11
230  :     LoadValue     : value = <I4, 11>
//  (<co-state> == 11)
231  :     CompareValue  
//  if ((<co-state> == 11))
232  :     OpNot         : type = Bool
//  if ((<co-state> == 11))
233  :     JumpIf        : label = 245
//  <state>previousCoroutine
234  :     LoadCapturedVar: var = 9(<captured><state>previousCoroutine)
//  (<state>stateMachineObject.stateMachineCoroutine = <state>previousCoroutine)
235  :     Duplicate     : stackPatternCount = 0
//  <state>stateMachineObject
236  :     LoadCapturedVar: var = 8(<captured><state>stateMachineObject)
//  (<state>stateMachineObject.stateMachineCoroutine = <state>previousCoroutine)
237  :     SetProperty   : propertyInfo = stateMachineCoroutine<system::StateMachine>
//  (<state>stateMachineObject.stateMachineCoroutine = <state>previousCoroutine);
238  :     Pop           
//  1
239  :     LoadValue     : value = <I4, 1>
//  (<co-state> = 1)
240  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 1)
241  :     StoreCapturedVar: var = 4
//  (<co-state> = 1);
242  :     Pop           
//  continue;
243  :     Jump          : label = 200
//  if ((<co-state> == 11))
244  :     Jump          : label = 245
//  try
245  :     InstallTry    : label = 601
//  <co-state>
246  :     LoadCapturedVar: var = 4(<captured><co-state>)
//  0
247  :     LoadValue     : value = <I4, 0>
//  (<co-state> == 0)
248  :     CompareValue  
//  if ((<co-state> == 0))
249  :     OpNot         : type = Bool
//  if ((<co-state> == 0))
250  :     JumpIf        : label = 272
//  <state>startState
251  :     LoadCapturedVar: var = 10(<captured><state>startState)
//  (<co2-state>state = <state>startState)
252  :     Duplicate     : stackPatternCount = 0
//  (<co2-state>state = <state>startState)
253  :     StoreCapturedVar: var = 3
//  (<co2-state>state = <state>startState);
254  :     Pop           
//  true
255  :     LoadValue     : value = <Bool, true>
//  if (true)
256  :     OpNot         : type = Bool
//  if (true)
257  :     JumpIf        : label = 265
//  4
258  :     LoadValue     : value = <I4, 4>
//  (<co-state> = 4)
259  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 4)
260  :     StoreCapturedVar: var = 4
//  (<co-state> = 4);
261  :     Pop           
//  try
262  :     UninstallTry  : stackPatternCount = 0
//  continue;
263  :     Jump          : label = 200
//  if (true)
264  :     Jump          : label = 265
//  11
265  :     LoadValue     : value = <I4, 11>
//  (<co-state> = 11)
266  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 11)
267  :     StoreCapturedVar: var = 4
//  (<co-state> = 11);
268  :     Pop           
//  try
269  :     UninstallTry  : stackPatternCount = 0
//  continue;
270  :     Jump          : label = 200
//  if ((<co-state> == 0))
271  :     Jump          : label = 272
//  <co-state>
272  :     LoadCapturedVar: var = 4(<captured><co-state>)
//  3
273  :     LoadValue     : value = <I4, 3>
//  (<co-state> == 3)
274  :     CompareValue  
//  if ((<co-state> == 3))
275  :     OpNot         : type = Bool
//  if ((<co-state> == 3))
276  :     JumpIf        : label = 294
//  true
277  :     LoadValue     : value = <Bool, true>
//  if (true)
278  :     OpNot         : type = Bool
//  if (true)
279  :     JumpIf        : label = 287
//  4
280  :     LoadValue     : value = <I4, 4>
//  (<co-state> = 4)
281  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 4)
282  :     StoreCapturedVar: var = 4
//  (<co-state> = 4);
283  :     Pop           
//  try
284  :     UninstallTry  : stackPatternCount = 0
//  continue;
285  :     Jump          : label = 200
//  if (true)
286  :     Jump          : label = 287
//  11
287  :     LoadValue     : value = <I4, 11>
//  (<co-state> = 11)
288  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 11)
289  :     StoreCapturedVar: var = 4
//  (<co-state> = 11);
290  :     Pop           
//  try
291  :     UninstallTry  : stackPatternCount = 0
//  continue;
292  :     Jump          : label = 200
//  if ((<co-state> == 3))
293  :     Jump          : label = 294
//  <co-state>
294  :     LoadCapturedVar: var = 4(<captured><co-state>)
//  4
295  :     LoadValue     : value = <I4, 4>
//  (<co-state> == 4)
296  :     CompareValue  
//  if ((<co-state> == 4))
297  :     OpNot         : type = Bool
//  if ((<co-state> == 4))
298  :     JumpIf        : label = 405
//  <co2-state>state
299  :     LoadCapturedVar: var = 3(<captured><co2-state>state)
//  (<co1-state>currentState = <co2-state>state)
300  :     Duplicate     : stackPatternCount = 0
//  (<co1-state>currentState = <co2-state>state)
301  :     StoreCapturedVar: var = 2
//  (<co1-state>currentState = <co2-state>state);
302  :     Pop           
//  1
303  :     LoadValue     : value = <I4, 1>
//  (-1)
304  :     OpNegative    : type = I4
//  (<co2-state>state = (-1))
305  :     Duplicate     : stackPatternCount = 0
//  (<co2-state>state = (-1))
306  :     StoreCapturedVar: var = 3
//  (<co2-state>state = (-1));
307  :     Pop           
//  <co1-state>currentState
308  :     LoadCapturedVar: var = 2(<captured><co1-state>currentState)
//  (<co0-switch>2 = <co1-state>currentState)
309  :     Duplicate     : stackPatternCount = 0
//  (<co0-switch>2 = <co1-state>currentState)
310  :     StoreCapturedVar: var = 1
//  (<co0-switch>2 = <co1-state>currentState);
311  :     Pop           
//  <co0-switch>2
312  :     LoadCapturedVar: var = 1(<captured><co0-switch>2)
//  1
313  :     LoadValue     : value = <I4, 1>
//  (<co0-switch>2 == 1 of (::system::Int32))
314  :     CompareValue  
//  if ((<co0-switch>2 == 1 of (::system::Int32)))
315  :     OpNot         : type = Bool
//  if ((<co0-switch>2 == 1 of (::system::Int32)))
316  :     JumpIf        : label = 347
//  <state>stateMachineObject
317  :     LoadCapturedVar: var = 8(<captured><state>stateMachineObject)
//  <state>stateMachineObject.stateMachineInput
318  :     GetProperty   : propertyInfo = stateMachineInput<system::StateMachine>
//  1
319  :     LoadValue     : value = <I4, 1>
//  (-1)
320  :     OpNegative    : type = I4
//  (<state>stateMachineObject.stateMachineInput == (-1))
321  :     CompareValue  
//  if ((<state>stateMachineObject.stateMachineInput == (-1)))
322  :     OpNot         : type = Bool
//  if ((<state>stateMachineObject.stateMachineInput == (-1)))
323  :     JumpIf        : label = 340
//  Waiting
324  :     LoadValue     : value = <enum: 0>
//  SetStatus(Waiting)
325  :     InvokeWithContext: func = 7(<method:SetStatus<system::Coroutine>(7)> in SMPush::<state>CreateCoroutine), stackPatternCount = 1
//  SetStatus(Waiting);
326  :     Pop           
//  <co-state>
327  :     LoadCapturedVar: var = 4(<captured><co-state>)
//  (<co-state-before-pause> = <co-state>)
328  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = <co-state>)
329  :     StoreCapturedVar: var = 5
//  (<co-state-before-pause> = <co-state>);
330  :     Pop           
//  5
331  :     LoadValue     : value = <I4, 5>
//  (<co-state> = 5)
332  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 5)
333  :     StoreCapturedVar: var = 4
//  (<co-state> = 5);
334  :     Pop           
//  try
335  :     UninstallTry  : stackPatternCount = 0
//  try
336  :     UninstallTry  : stackPatternCount = 0
//  return;
337  :     LoadValue     : value = <null>
//  return;
338  :     Return        
//  if ((<state>stateMachineObject.stateMachineInput == (-1)))
339  :     Jump          : label = 340
//  5
340  :     LoadValue     : value = <I4, 5>
//  (<co-state> = 5)
341  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 5)
342  :     StoreCapturedVar: var = 4
//  (<co-state> = 5);
343  :     Pop           
//  try
344  :     UninstallTry  : stackPatternCount = 0
//  continue;
345  :     Jump          : label = 200
//  if ((<co0-switch>2 == 1 of (::system::Int32)))
346  :     Jump          : label = 347
//  <co0-switch>2
347  :     LoadCapturedVar: var = 1(<captured><co0-switch>2)
//  2
348  :     LoadValue     : value = <I4, 2>
//  (<co0-switch>2 == 2 of (::system::Int32))
349  :     CompareValue  
//  if ((<co0-switch>2 == 2 of (::system::Int32)))
350  :     OpNot         : type = Bool
//  if ((<co0-switch>2 == 2 of (::system::Int32)))
351  :     JumpIf        : label = 382
//  <state>stateMachineObject
352  :     LoadCapturedVar: var = 8(<captured><state>stateMachineObject)
//  <state>stateMachineObject.stateMachineInput
353  :     GetProperty   : propertyInfo = stateMachineInput<system::StateMachine>
//  1
354  :     LoadValue     : value = <I4, 1>
//  (-1)
355  :     OpNegative    : type = I4
//  (<state>stateMachineObject.stateMachineInput == (-1))
356  :     CompareValue  
//  if ((<state>stateMachineObject.stateMachineInput == (-1)))
357  :     OpNot         : type = Bool
//  if ((<state>stateMachineObject.stateMachineInput == (-1)))
358  :     JumpIf        : label = 375
//  Waiting
359  :     LoadValue     : value = <enum: 0>
//  SetStatus(Waiting)
360  :     InvokeWithContext: func = 7(<method:SetStatus<system::Coroutine>(7)> in SMPush::<state>CreateCoroutine), stackPatternCount = 1
//  SetStatus(Waiting);
361  :     Pop           
//  <co-state>
362  :     LoadCapturedVar: var = 4(<captured><co-state>)
//  (<co-state-before-pause> = <co-state>)
363  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = <co-state>)
364  :     StoreCapturedVar: var = 5
//  (<co-state-before-pause> = <co-state>);
365  :     Pop           
//  6
366  :     LoadValue     : value = <I4, 6>
//  (<co-state> = 6)
367  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 6)
368  :     StoreCapturedVar: var = 4
//  (<co-state> = 6);
369  :     Pop           
//  try
370  :     UninstallTry  : stackPatternCount = 0
//  try
371  :     UninstallTry  : stackPatternCount = 0
//  return;
372  :     LoadValue     : value = <null>
//  return;
373  :     Return        
//  if ((<state>stateMachineObject.stateMachineInput == (-1)))
374  :     Jump          : label = 375
//  6
375  :     LoadValue     : value = <I4, 6>
//  (<co-state> = 6)
376  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 6)
377  :     StoreCapturedVar: var = 4
//  (<co-state> = 6);
378  :     Pop           
//  try
379  :     UninstallTry  : stackPatternCount = 0
//  continue;
380  :     Jump          : label = 200
//  if ((<co0-switch>2 == 2 of (::system::Int32)))
381  :     Jump          : label = 382
//  <co0-switch>2
382  :     LoadCapturedVar: var = 1(<captured><co0-switch>2)
//  0
383  :     LoadValue     : value = <I4, 0>
//  (<co0-switch>2 == 0 of (::system::Int32))
384  :     CompareValue  
//  if ((<co0-switch>2 == 0 of (::system::Int32)))
385  :     OpNot         : type = Bool
//  if ((<co0-switch>2 == 0 of (::system::Int32)))
386  :     JumpIf        : label = 398
//  1
387  :     LoadValue     : value = <I4, 1>
//  <state>stateMachineObject
388  :     LoadCapturedVar: var = 8(<captured><state>stateMachineObject)
//  <state>stateMachineObject.<state>CreateCoroutine(1)
389  :     InvokeMethod  : methodInfo = <state>CreateCoroutine<SMPush>, stackPatternCount = 1
//  <state>stateMachineObject.<state>CreateCoroutine(1);
390  :     Pop           
//  7
391  :     LoadValue     : value = <I4, 7>
//  (<co-state> = 7)
392  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 7)
393  :     StoreCapturedVar: var = 4
//  (<co-state> = 7);
394  :     Pop           
//  try
395  :     UninstallTry  : stackPatternCount = 0
//  continue;
396  :     Jump          : label = 200
//  if ((<co0-switch>2 == 0 of (::system::Int32)))
397  :     Jump          : label = 398
//  3
398  :     LoadValue     : value = <I4, 3>
//  (<co-state> = 3)
399  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 3)
400  :     StoreCapturedVar: var = 4
//  (<co-state> = 3);
401  :     Pop           
//  try
402  :     UninstallTry  : stackPatternCount = 0
//  continue;
403  :     Jump          : label = 200
//  if ((<co-state> == 4))
404  :     Jump          : label = 405
//  <co-state>
405  :     LoadCapturedVar: var = 4(<captured><co-state>)
//  5
406  :     LoadValue     : value = <I4, 5>
//  (<co-state> == 5)
407  :     CompareValue  
//  if ((<co-state> == 5))
408  :     OpNot         : type = Bool
//  if ((<co-state> == 5))
409  :     JumpIf        : label = 460
//  <state>stateMachineObject
410  :     LoadCapturedVar: var = 8(<captured><state>stateMachineObject)
//  <state>stateMachineObject.stateMachineInput
411  :     GetProperty   : propertyInfo = stateMachineInput<system::StateMachine>
//  var <switch>0 : ::system::Int32 = <state>stateMachineObject.stateMachineInput;
412  :     StoreLocalVar : var = 3(<switch>0)
//  <switch>0
413  :     LoadLocalVar  : var = 3(<switch>0)
//  0
414  :     LoadValue     : value = <I4, 0>
//  (<switch>0 == 0 of (::system::Int32))
415  :     CompareValue  
//  if ((<switch>0 == 0 of (::system::Int32)))
416  :     OpNot         : type = Bool
//  if ((<switch>0 == 0 of (::system::Int32)))
417  :     JumpIf        : label = 433
//  1
418  :     LoadValue     : value = <I4, 1>
//  (-1)
419  :     OpNegative    : type = I4
//  (<state>stateMachineObject.stateMachineInput = (-1))
420  :     Duplicate     : stackPatternCount = 0
//  <state>stateMachineObject
421  :     LoadCapturedVar: var = 8(<captured><state>stateMachineObject)
//  (<state>stateMachineObject.stateMachineInput = (-1))
422  :     SetProperty   : propertyInfo = stateMachineInput<system::StateMachine>
//  (<state>stateMachineObject.stateMachineInput = (-1));
423  :     Pop           
//  ""
424  :     LoadValue     : value = <String, >
//  s
425  :     LoadGlobalVar : var = 0(s)
//  ("" & s)
426  :     OpConcat      
//  "[A]"
427  :     LoadValue     : value = <String, [A]>
//  (("" & s) & "[A]")
428  :     OpConcat      
//  (s = (("" & s) & "[A]"))
429  :     Duplicate     : stackPatternCount = 0
//  (s = (("" & s) & "[A]"))
430  :     StoreGlobalVar: var = 0(s)
//  (s = (("" & s) & "[A]"));
431  :     Pop           
//  if ((<switch>0 == 0 of (::system::Int32)))
432  :     Jump          : label = 439
//  1
433  :     LoadValue     : value = <I4, 1>
//  (-1)
434  :     OpNegative    : type = I4
//  (<state>stateMachineObject.stateMachineInput = (-1))
435  :     Duplicate     : stackPatternCount = 0
//  <state>stateMachineObject
436  :     LoadCapturedVar: var = 8(<captured><state>stateMachineObject)
//  (<state>stateMachineObject.stateMachineInput = (-1))
437  :     SetProperty   : propertyInfo = stateMachineInput<system::StateMachine>
//  (<state>stateMachineObject.stateMachineInput = (-1));
438  :     Pop           
//  ""
439  :     LoadValue     : value = <String, >
//  s
440  :     LoadGlobalVar : var = 0(s)
//  ("" & s)
441  :     OpConcat      
//  ".A"
442  :     LoadValue     : value = <String, .A>
//  (("" & s) & ".A")
443  :     OpConcat      
//  (s = (("" & s) & ".A"))
444  :     Duplicate     : stackPatternCount = 0
//  (s = (("" & s) & ".A"))
445  :     StoreGlobalVar: var = 0(s)
//  (s = (("" & s) & ".A"));
446  :     Pop           
//  11
447  :     LoadValue     : value = <I4, 11>
//  (<co-state> = 11)
448  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 11)
449  :     StoreCapturedVar: var = 4
//  (<co-state> = 11);
450  :     Pop           
//  try
451  :     UninstallTry  : stackPatternCount = 0
//  continue;
452  :     Jump          : label = 200
//  3
453  :     LoadValue     : value = <I4, 3>
//  (<co-state> = 3)
454  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 3)
455  :     StoreCapturedVar: var = 4
//  (<co-state> = 3);
456  :     Pop           
//  try
457  :     UninstallTry  : stackPatternCount = 0
//  continue;
458  :     Jump          : label = 200
//  if ((<co-state> == 5))
459  :     Jump          : label = 460
//  <co-state>
460  :     LoadCapturedVar: var = 4(<captured><co-state>)
//  6
461  :     LoadValue     : value = <I4, 6>
//  (<co-state> == 6)
462  :     CompareValue  
//  if ((<co-state> == 6))
463  :     OpNot         : type = Bool
//  if ((<co-state> == 6))
464  :     JumpIf        : label = 515
//  <state>stateMachineObject
465  :     LoadCapturedVar: var = 8(<captured><state>stateMachineObject)
//  <state>stateMachineObject.stateMachineInput
466  :     GetProperty   : propertyInfo = stateMachineInput<system::StateMachine>
//  var <switch>1 : ::system::Int32 = <state>stateMachineObject.stateMachineInput;
467  :     StoreLocalVar : var = 4(<switch>1)
//  <switch>1
468  :     LoadLocalVar  : var = 4(<switch>1)
//  1
469  :     LoadValue     : value = <I4, 1>
//  (<switch>1 == 1 of (::system::Int32))
470  :     CompareValue  
//  if ((<switch>1 == 1 of (::system::Int32)))
471  :     OpNot         : type = Bool
//  if ((<switch>1 == 1 of (::system::Int32)))
472  :     JumpIf        : label = 488
//  1
473  :     LoadValue     : value = <I4, 1>
//  (-1)
474  :     OpNegative    : type = I4
//  (<state>stateMachineObject.stateMachineInput = (-1))
475  :     Duplicate     : stackPatternCount = 0
//  <state>stateMachineObject
476  :     LoadCapturedVar: var = 8(<captured><state>stateMachineObject)
//  (<state>stateMachineObject.stateMachineInput = (-1))
477  :     SetProperty   : propertyInfo = stateMachineInput<system::StateMachine>
//  (<state>stateMachineObject.stateMachineInput = (-1));
478  :     Pop           
//  ""
479  :     LoadValue     : value = <String, >
//  s
480  :     LoadGlobalVar : var = 0(s)
//  ("" & s)
481  :     OpConcat      
//  "[B]"
482  :     LoadValue     : value = <String, [B]>
//  (("" & s) & "[B]")
483  :     OpConcat      
//  (s = (("" & s) & "[B]"))
484  :     Duplicate     : stackPatternCount = 0
//  (s = (("" & s) & "[B]"))
485  :     StoreGlobalVar: var = 0(s)
//  (s = (("" & s) & "[B]"));
486  :     Pop           
//  if ((<switch>1 == 1 of (::system::Int32)))
487  :     Jump          : label = 494
//  1
488  :     LoadValue     : value = <I4, 1>
//  (-1)
489  :     OpNegative    : type = I4
//  (<state>stateMachineObject.stateMachineInput = (-1))
490  :     Duplicate     : stackPatternCount = 0
//  <state>stateMachineObject
491  :     LoadCapturedVar: var = 8(<captured><state>stateMachineObject)
//  (<state>stateMachineObject.stateMachineInput = (-1))
492  :     SetProperty   : propertyInfo = stateMachineInput<system::StateMachine>
//  (<state>stateMachineObject.stateMachineInput = (-1));
493  :     Pop           
//  ""
494  :     LoadValue     : value = <String, >
//  s
495  :     LoadGlobalVar : var = 0(s)
//  ("" & s)
496  :     OpConcat      
//  ".B"
497  :     LoadValue     : value = <String, .B>
//  (("" & s) & ".B")
498  :     OpConcat      
//  (s = (("" & s) & ".B"))
499  :     Duplicate     : stackPatternCount = 0
//  (s = (("" & s) & ".B"))
500  :     StoreGlobalVar: var = 0(s)
//  (s = (("" & s) & ".B"));
501  :     Pop           
//  11
502  :     LoadValue     : value = <I4, 11>
//  (<co-state> = 11)
503  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 11)
504  :     StoreCapturedVar: var = 4
//  (<co-state> = 11);
505  :     Pop           
//  try
506  :     UninstallTry  : stackPatternCount = 0
//  continue;
507  :     Jump          : label = 200
//  3
508  :     LoadValue     : value = <I4, 3>
//  (<co-state> = 3)
509  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 3)
510  :     StoreCapturedVar: var = 4
//  (<co-state> = 3);
511  :     Pop           
//  try
512  :     UninstallTry  : stackPatternCount = 0
//  continue;
513  :     Jump          : label = 200
//  if ((<co-state> == 6))
514  :     Jump          : label = 515
//  <co-state>
515  :     LoadCapturedVar: var = 4(<captured><co-state>)
//  7
516  :     LoadValue     : value = <I4, 7>
//  (<co-state> == 7)
517  :     CompareValue  
//  if ((<co-state> == 7))
518  :     OpNot         : type = Bool
//  if ((<co-state> == 7))
519  :     JumpIf        : label = 536
//  Waiting
520  :     LoadValue     : value = <enum: 0>
//  SetStatus(Waiting)
521  :     InvokeWithContext: func = 7(<method:SetStatus<system::Coroutine>(7)> in SMPush::<state>CreateCoroutine), stackPatternCount = 1
//  SetStatus(Waiting);
522  :     Pop           
//  <co-state>
523  :     LoadCapturedVar: var = 4(<captured><co-state>)
//  (<co-state-before-pause> = <co-state>)
524  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = <co-state>)
525  :     StoreCapturedVar: var = 5
//  (<co-state-before-pause> = <co-state>);
526  :     Pop           
//  8
527  :     LoadValue     : value = <I4, 8>
//  (<co-state> = 8)
528  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 8)
529  :     StoreCapturedVar: var = 4
//  (<co-state> = 8);
530  :     Pop           
//  try
531  :     UninstallTry  : stackPatternCount = 0
//  try
532  :     UninstallTry  : stackPatternCount = 0
//  return;
533  :     LoadValue     : value = <null>
//  return;
534  :     Return        
//  if ((<co-state> == 7))
535  :     Jump          : label = 536
//  <co-state>
536  :     LoadCapturedVar: var = 4(<captured><co-state>)
//  8
537  :     LoadValue     : value = <I4, 8>
//  (<co-state> == 8)
538  :     CompareValue  
//  if ((<co-state> == 8))
539  :     OpNot         : type = Bool
//  if ((<co-state> == 8))
540  :     JumpIf        : label = 552
//  2
541  :     LoadValue     : value = <I4, 2>
//  <state>stateMachineObject
542  :     LoadCapturedVar: var = 8(<captured><state>stateMachineObject)
//  <state>stateMachineObject.<state>CreateCoroutine(2)
543  :     InvokeMethod  : methodInfo = <state>CreateCoroutine<SMPush>, stackPatternCount = 1
//  <state>stateMachineObject.<state>CreateCoroutine(2);
544  :     Pop           
//  9
545  :     LoadValue     : value = <I4, 9>
//  (<co-state> = 9)
546  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 9)
547  :     StoreCapturedVar: var = 4
//  (<co-state> = 9);
548  :     Pop           
//  try
549  :     UninstallTry  : stackPatternCount = 0
//  continue;
550  :     Jump          : label = 200
//  if ((<co-state> == 8))
551  :     Jump          : label = 552
//  <co-state>
552  :     LoadCapturedVar: var = 4(<captured><co-state>)
//  9
553  :     LoadValue     : value = <I4, 9>
//  (<co-state> == 9)
554  :     CompareValue  
//  if ((<co-state> == 9))
555  :     OpNot         : type = Bool
//  if ((<co-state> == 9))
556  :     JumpIf        : label = 573
//  Waiting
557  :     LoadValue     : value = <enum: 0>
//  SetStatus(Waiting)
558  :     InvokeWithContext: func = 7(<method:SetStatus<system::Coroutine>(7)> in SMPush::<state>CreateCoroutine), stackPatternCount = 1
//  SetStatus(Waiting);
559  :     Pop           
//  <co-state>
560  :     LoadCapturedVar: var = 4(<captured><co-state>)
//  (<co-state-before-pause> = <co-state>)
561  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = <co-state>)
562  :     StoreCapturedVar: var = 5
//  (<co-state-before-pause> = <co-state>);
563  :     Pop           
//  10
564  :     LoadValue     : value = <I4, 10>
//  (<co-state> = 10)
565  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 10)
566  :     StoreCapturedVar: var = 4
//  (<co-state> = 10);
567  :     Pop           
//  try
568  :     UninstallTry  : stackPatternCount = 0
//  try
569  :     UninstallTry  : stackPatternCount = 0
//  return;
570  :     LoadValue     : value = <null>
//  return;
571  :     Return        
//  if ((<co-state> == 9))
572  :     Jump          : label = 573
//  <co-state>
573  :     LoadCapturedVar: var = 4(<captured><co-state>)
//  10
574  :     LoadValue     : value = <I4, 10>
//  (<co-state> == 10)
575  :     CompareValue  
//  if ((<co-state> == 10))
576  :     OpNot         : type = Bool
//  if ((<co-state> == 10))
577  :     JumpIf        : label = 599
//  ""
578  :     LoadValue     : value = <String, >
//  s
579  :     LoadGlobalVar : var = 0(s)
//  ("" & s)
580  :     OpConcat      
//  "."
581  :     LoadValue     : value = <String, .>
//  (("" & s) & ".")
582  :     OpConcat      
//  (s = (("" & s) & "."))
583  :     Duplicate     : stackPatternCount = 0
//  (s = (("" & s) & "."))
584  :     StoreGlobalVar: var = 0(s)
//  (s = (("" & s) & "."));
585  :     Pop           
//  11
586  :     LoadValue     : value = <I4, 11>
//  (<co-state> = 11)
587  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 11)
588  :     StoreCapturedVar: var = 4
//  (<co-state> = 11);
589  :     Pop           
//  try
590  :     UninstallTry  : stackPatternCount = 0
//  continue;
591  :     Jump          : label = 200
//  3
592  :     LoadValue     : value = <I4, 3>
//  (<co-state> = 3)
593  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 3)
594  :     StoreCapturedVar: var = 4
//  (<co-state> = 3);
595  :     Pop           
//  try
596  :     UninstallTry  : stackPatternCount = 0
//  continue;
597  :     Jump          : label = 200
//  if ((<co-state> == 10))
598  :     Jump          : label = 599
//  try
599  :     UninstallTry  : stackPatternCount = 0
//  try
600  :     Jump          : label = 612
//  try
601  :     LoadException 
//  try
602  :     StoreLocalVar : var = 5(<catch><co-ex>)
//  <co-ex>
603  :     LoadLocalVar  : var = 5(<catch><co-ex>)
//  (<co-tempexvar0>ex = <co-ex>)
604  :     Duplicate     : stackPatternCount = 0
//  (<co-tempexvar0>ex = <co-ex>)
605  :     StoreCapturedVar: var = 0
//  (<co-tempexvar0>ex = <co-ex>);
606  :     Pop           
//  2
607  :     LoadValue     : value = <I4, 2>
//  (<co-state> = 2)
608  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 2)
609  :     StoreCapturedVar: var = 4
//  (<co-state> = 2);
610  :     Pop           
//  continue;
611  :     Jump          : label = 200
//  while (true)
612  :     Jump          : label = 200
//  try
613  :     UninstallTry  : stackPatternCount = 0
//  try
614  :     Jump          : label = 629
//  try
615  :     LoadException 
//  try
616  :     StoreLocalVar : var = 6(<catch><co-ex>)
//  <co-ex>
617  :     LoadLocalVar  : var = 6(<catch><co-ex>)
//  SetFailure(<co-ex>)
618  :     InvokeWithContext: func = 6(<method:SetFailure<system::Coroutine>(6)> in SMPush::<state>CreateCoroutine), stackPatternCount = 1
//  SetFailure(<co-ex>);
619  :     Pop           
//  Stopped
620  :     LoadValue     : value = <enum: 2>
//  SetStatus(Stopped)
621  :     InvokeWithContext: func = 7(<method:SetStatus<system::Coroutine>(7)> in SMPush::<state>CreateCoroutine), stackPatternCount = 1
//  SetStatus(Stopped);
622  :     Pop           
//  <raise-exception>
623  :     LoadLocalVar  : var = 0(<raise-exception>)
//  if (<raise-exception>)
624  :     OpNot         : type = Bool
//  if (<raise-exception>)
625  :     JumpIf        : label = 629
//  raise;
626  :     LoadLocalVar  : var = 6(<catch><co-ex>)
//  raise;
627  :     RaiseException
//  if (<raise-exception>)
628  :     Jump          : label = 629
//  func Resume(<raise-exception> : ::system::Boolean, <coroutine-output> : ::system::CoroutineResult^) : (::system::Void)
629  :     LoadValue     : value = <null>
//  func Resume(<raise-exception> : ::system::Boolean, <coroutine-output> : ::system::CoroutineResult^) : (::system::Void)
630  :     Return        
//  new ()
631  :     LoadCapturedVar: var = 0(<captured-this>0)
//  new ()
632  :     InvokeBaseCtor: methodInfo = <system::StateMachine>, stackPatternCount = 0
//  new ()
633  :     Pop           
//  new ()
634  :     LoadValue     : value = <null>
//  new ()
635  :     Return        
//  new (SMPush^)()
636  :     LoadValue     : value = <null>
//  new (SMPush^)()
637  :     InvokeMethod  : methodInfo = <SMPush>, stackPatternCount = 0
//  var sm = new (SMPush^)();
638  :     StoreLocalVar : var = 0(sm)
//  try
639  :     InstallTry    : label = 648
//  sm
640  :     LoadLocalVar  : var = 0(sm)
//  sm.A()
641  :     InvokeMethod  : methodInfo = A<SMPush>, stackPatternCount = 0
//  sm.A();
642  :     Pop           
//  sm
643  :     LoadLocalVar  : var = 0(sm)
//  sm.B()
644  :     InvokeMethod  : methodInfo = B<SMPush>, stackPatternCount = 0
//  sm.B();
645  :     Pop           
//  try
646  :     UninstallTry  : stackPatternCount = 0
//  try
647  :     Jump          : label = 658
//  try
648  :     LoadException 
//  try
649  :     StoreLocalVar : var = 1(<catch>ex)
//  ""
650  :     LoadValue     : value = <String, >
//  s
651  :     LoadGlobalVar : var = 0(s)
//  ("" & s)
652  :     OpConcat      
//  "!"
653  :     LoadValue     : value = <String, !>
//  (("" & s) & "!")
654  :     OpConcat      
//  (s = (("" & s) & "!"))
655  :     Duplicate     : stackPatternCount = 0
//  (s = (("" & s) & "!"))
656  :     StoreGlobalVar: var = 0(s)
//  (s = (("" & s) & "!"));
657  :     Pop           
//  s
658  :     LoadGlobalVar : var = 0(s)
//  return s;
659  :     Return        
//  func main() : (string)
660  :     LoadValue     : value = <null>
//  func main() : (string)
661  :     Return        
