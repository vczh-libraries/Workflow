========================================================
Global Variables:
========================================================
s

========================================================
Functions:
========================================================
SMSwitchPR1::A (4 .. 31)
    Arguments:
    Captured Variables:
        <captured-this>0
    Local Variables:

SMSwitchPR1::B (32 .. 59)
    Arguments:
    Captured Variables:
        <captured-this>0
    Local Variables:

SMSwitchPR1::<state>CreateCoroutine (60 .. 94)
    Arguments:
        <state>startState
    Captured Variables:
        <captured-this>0
    Local Variables:
        <state>stateMachineObject
        <state>previousCoroutine

SMSwitchPR1::#ctor (571 .. 575)
    Arguments:
    Captured Variables:
        <captured-this>0
    Local Variables:

main (576 .. 601)
    Arguments:
    Captured Variables:
    Local Variables:
        sm
        <catch>ex

<initialize> (0 .. 3)
    Arguments:
    Captured Variables:
    Local Variables:

<method:SetFailure<system::Coroutine>(6)> in SMSwitchPR1::<state>CreateCoroutine (95 .. 100)
    Arguments:
        <value>
    Captured Variables:
        <captured><co-tempexvar0>ex
        <captured><co0-switch>0
        <captured><co1-switch>1
        <captured><co2-switch>2
        <captured><co3-state>currentState
        <captured><co4-state>state
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured><state>stateMachineObject
        <captured><state>previousCoroutine
        <captured><state>startState
        <captured-this>0
        <captured-this>1
    Local Variables:

<method:SetStatus<system::Coroutine>(7)> in SMSwitchPR1::<state>CreateCoroutine (101 .. 106)
    Arguments:
        <value>
    Captured Variables:
        <captured><co-tempexvar0>ex
        <captured><co0-switch>0
        <captured><co1-switch>1
        <captured><co2-switch>2
        <captured><co3-state>currentState
        <captured><co4-state>state
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured><state>stateMachineObject
        <captured><state>previousCoroutine
        <captured><state>startState
        <captured-this>0
        <captured-this>1
    Local Variables:

<method:GetFailure<system::Coroutine>(10)> in SMSwitchPR1::<state>CreateCoroutine (107 .. 110)
    Arguments:
    Captured Variables:
        <captured><co-tempexvar0>ex
        <captured><co0-switch>0
        <captured><co1-switch>1
        <captured><co2-switch>2
        <captured><co3-state>currentState
        <captured><co4-state>state
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured><state>stateMachineObject
        <captured><state>previousCoroutine
        <captured><state>startState
        <captured-this>0
        <captured-this>1
    Local Variables:

<method:GetStatus<system::Coroutine>(11)> in SMSwitchPR1::<state>CreateCoroutine (111 .. 114)
    Arguments:
    Captured Variables:
        <captured><co-tempexvar0>ex
        <captured><co0-switch>0
        <captured><co1-switch>1
        <captured><co2-switch>2
        <captured><co3-state>currentState
        <captured><co4-state>state
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured><state>stateMachineObject
        <captured><state>previousCoroutine
        <captured><state>startState
        <captured-this>0
        <captured-this>1
    Local Variables:

<method:Resume<system::Coroutine>(12)> in SMSwitchPR1::<state>CreateCoroutine (115 .. 570)
    Arguments:
        <raise-exception>
        <coroutine-output>
    Captured Variables:
        <captured><co-tempexvar0>ex
        <captured><co0-switch>0
        <captured><co1-switch>1
        <captured><co2-switch>2
        <captured><co3-state>currentState
        <captured><co4-state>state
        <captured><co-state>
        <captured><co-state-before-pause>
        <captured><prop>Failure
        <captured><prop>Status
        <captured><state>stateMachineObject
        <captured><state>previousCoroutine
        <captured><state>startState
        <captured-this>0
        <captured-this>1
    Local Variables:
        <anonymous-range-test>
        <catch><co-ex>
        <catch><co-ex>

========================================================
Instructions:
========================================================
//  ""
0    :     LoadValue     : value = <Bool, >
//  var s = "";
1    :     StoreGlobalVar: var = 0(s)
2    :     LoadValue     : value = <null>
3    :     Return        
//  this
4    :     LoadCapturedVar: var = 0(<captured-this>0)
//  this.stateMachineInitialized
5    :     GetProperty   : propertyInfo = stateMachineInitialized<system::StateMachine>
//  (!this.stateMachineInitialized)
6    :     OpNot         : type = Bool
//  if ((!this.stateMachineInitialized))
7    :     OpNot         : type = Bool
//  if ((!this.stateMachineInitialized))
8    :     JumpIf        : label = 22
//  true
9    :     LoadValue     : value = <Bool, true>
//  (this.stateMachineInitialized = true)
10   :     Duplicate     : stackPatternCount = 0
//  this
11   :     LoadCapturedVar: var = 0(<captured-this>0)
//  (this.stateMachineInitialized = true)
12   :     SetProperty   : propertyInfo = stateMachineInitialized<system::StateMachine>
//  (this.stateMachineInitialized = true);
13   :     Pop           
//  0
14   :     LoadValue     : value = <I4, 0>
//  this
15   :     LoadCapturedVar: var = 0(<captured-this>0)
//  this.<state>CreateCoroutine(0)
16   :     InvokeMethod  : methodInfo = <state>CreateCoroutine<SMSwitchPR1>, stackPatternCount = 1
//  this.<state>CreateCoroutine(0);
17   :     Pop           
//  this
18   :     LoadCapturedVar: var = 0(<captured-this>0)
//  this.ResumeStateMachine()
19   :     InvokeMethod  : methodInfo = ResumeStateMachine<system::StateMachine>, stackPatternCount = 0
//  this.ResumeStateMachine();
20   :     Pop           
//  if ((!this.stateMachineInitialized))
21   :     Jump          : label = 22
//  0
22   :     LoadValue     : value = <I4, 0>
//  (this.stateMachineInput = 0)
23   :     Duplicate     : stackPatternCount = 0
//  this
24   :     LoadCapturedVar: var = 0(<captured-this>0)
//  (this.stateMachineInput = 0)
25   :     SetProperty   : propertyInfo = stateMachineInput<system::StateMachine>
//  (this.stateMachineInput = 0);
26   :     Pop           
//  this
27   :     LoadCapturedVar: var = 0(<captured-this>0)
//  this.ResumeStateMachine()
28   :     InvokeMethod  : methodInfo = ResumeStateMachine<system::StateMachine>, stackPatternCount = 0
//  this.ResumeStateMachine();
29   :     Pop           
//  func A() : (::system::Void)
30   :     LoadValue     : value = <null>
//  func A() : (::system::Void)
31   :     Return        
//  this
32   :     LoadCapturedVar: var = 0(<captured-this>0)
//  this.stateMachineInitialized
33   :     GetProperty   : propertyInfo = stateMachineInitialized<system::StateMachine>
//  (!this.stateMachineInitialized)
34   :     OpNot         : type = Bool
//  if ((!this.stateMachineInitialized))
35   :     OpNot         : type = Bool
//  if ((!this.stateMachineInitialized))
36   :     JumpIf        : label = 50
//  true
37   :     LoadValue     : value = <Bool, true>
//  (this.stateMachineInitialized = true)
38   :     Duplicate     : stackPatternCount = 0
//  this
39   :     LoadCapturedVar: var = 0(<captured-this>0)
//  (this.stateMachineInitialized = true)
40   :     SetProperty   : propertyInfo = stateMachineInitialized<system::StateMachine>
//  (this.stateMachineInitialized = true);
41   :     Pop           
//  0
42   :     LoadValue     : value = <I4, 0>
//  this
43   :     LoadCapturedVar: var = 0(<captured-this>0)
//  this.<state>CreateCoroutine(0)
44   :     InvokeMethod  : methodInfo = <state>CreateCoroutine<SMSwitchPR1>, stackPatternCount = 1
//  this.<state>CreateCoroutine(0);
45   :     Pop           
//  this
46   :     LoadCapturedVar: var = 0(<captured-this>0)
//  this.ResumeStateMachine()
47   :     InvokeMethod  : methodInfo = ResumeStateMachine<system::StateMachine>, stackPatternCount = 0
//  this.ResumeStateMachine();
48   :     Pop           
//  if ((!this.stateMachineInitialized))
49   :     Jump          : label = 50
//  1
50   :     LoadValue     : value = <I4, 1>
//  (this.stateMachineInput = 1)
51   :     Duplicate     : stackPatternCount = 0
//  this
52   :     LoadCapturedVar: var = 0(<captured-this>0)
//  (this.stateMachineInput = 1)
53   :     SetProperty   : propertyInfo = stateMachineInput<system::StateMachine>
//  (this.stateMachineInput = 1);
54   :     Pop           
//  this
55   :     LoadCapturedVar: var = 0(<captured-this>0)
//  this.ResumeStateMachine()
56   :     InvokeMethod  : methodInfo = ResumeStateMachine<system::StateMachine>, stackPatternCount = 0
//  this.ResumeStateMachine();
57   :     Pop           
//  func B() : (::system::Void)
58   :     LoadValue     : value = <null>
//  func B() : (::system::Void)
59   :     Return        
//  this
60   :     LoadCapturedVar: var = 0(<captured-this>0)
//  var <state>stateMachineObject = this;
61   :     StoreLocalVar : var = 1(<state>stateMachineObject)
//  <state>stateMachineObject
62   :     LoadLocalVar  : var = 1(<state>stateMachineObject)
//  <state>stateMachineObject.stateMachineCoroutine
63   :     GetProperty   : propertyInfo = stateMachineCoroutine<system::StateMachine>
//  var <state>previousCoroutine = <state>stateMachineObject.stateMachineCoroutine;
64   :     StoreLocalVar : var = 2(<state>previousCoroutine)
//  null
65   :     LoadValue     : value = <null>
//  0
66   :     LoadValue     : value = <I4, 0>
//  0
67   :     LoadValue     : value = <I4, 0>
//  0
68   :     LoadValue     : value = <I4, 0>
//  0
69   :     LoadValue     : value = <I4, 0>
//  0
70   :     LoadValue     : value = <I4, 0>
//  0
71   :     LoadValue     : value = <I4, 0>
//  1
72   :     LoadValue     : value = <I4, 1>
//  (-1)
73   :     OpNegative    : type = I4
//  null
74   :     LoadValue     : value = <null>
//  Waiting
75   :     LoadValue     : value = <enum: 0>
//  new (::system::Coroutine^)
76   :     LoadLocalVar  : var = 1(<state>stateMachineObject)
//  new (::system::Coroutine^)
77   :     LoadLocalVar  : var = 2(<state>previousCoroutine)
//  new (::system::Coroutine^)
78   :     LoadLocalVar  : var = 0(<state>startState)
//  new (::system::Coroutine^)
79   :     LoadCapturedVar: var = 0(<captured-this>0)
//  new (::system::Coroutine^)
80   :     LoadValue     : value = <null>
//  new (::system::Coroutine^)
81   :     CreateClosureContext: stackPatternCount = 15
//  new (::system::Coroutine^)
82   :     LoadMethodInfo: methodInfo = GetFailure<system::Coroutine>
//  func GetFailure() : (::system::Exception^)
83   :     LoadFunction  : func = 8(<method:GetFailure<system::Coroutine>(10)> in SMSwitchPR1::<state>CreateCoroutine)
//  new (::system::Coroutine^)
84   :     LoadMethodInfo: methodInfo = GetStatus<system::Coroutine>
//  func GetStatus() : (::system::CoroutineStatus)
85   :     LoadFunction  : func = 9(<method:GetStatus<system::Coroutine>(11)> in SMSwitchPR1::<state>CreateCoroutine)
//  new (::system::Coroutine^)
86   :     LoadMethodInfo: methodInfo = Resume<system::Coroutine>
//  func Resume(<raise-exception> : ::system::Boolean, <coroutine-output> : ::system::CoroutineResult^) : (::system::Void)
87   :     LoadFunction  : func = 10(<method:Resume<system::Coroutine>(12)> in SMSwitchPR1::<state>CreateCoroutine)
//  new (::system::Coroutine^)
88   :     CreateInterface: methodInfo = <system::Coroutine>, stackPatternCount = 6
//  (<state>stateMachineObject.stateMachineCoroutine = new (::system::Coroutine^)
89   :     Duplicate     : stackPatternCount = 0
//  <state>stateMachineObject
90   :     LoadLocalVar  : var = 1(<state>stateMachineObject)
//  (<state>stateMachineObject.stateMachineCoroutine = new (::system::Coroutine^)
91   :     SetProperty   : propertyInfo = stateMachineCoroutine<system::StateMachine>
//  (<state>stateMachineObject.stateMachineCoroutine = new (::system::Coroutine^)
92   :     Pop           
//  func <state>CreateCoroutine(<state>startState : ::system::Int32) : (::system::Void)
93   :     LoadValue     : value = <null>
//  func <state>CreateCoroutine(<state>startState : ::system::Int32) : (::system::Void)
94   :     Return        
//  <value>
95   :     LoadLocalVar  : var = 0(<value>)
//  (<prop>Failure = <value>)
96   :     Duplicate     : stackPatternCount = 0
//  (<prop>Failure = <value>)
97   :     StoreCapturedVar: var = 8
//  (<prop>Failure = <value>);
98   :     Pop           
//  func SetFailure(<value> : ::system::Exception^) : (void)
99   :     LoadValue     : value = <null>
//  func SetFailure(<value> : ::system::Exception^) : (void)
100  :     Return        
//  <value>
101  :     LoadLocalVar  : var = 0(<value>)
//  (<prop>Status = <value>)
102  :     Duplicate     : stackPatternCount = 0
//  (<prop>Status = <value>)
103  :     StoreCapturedVar: var = 9
//  (<prop>Status = <value>);
104  :     Pop           
//  func SetStatus(<value> : ::system::CoroutineStatus) : (void)
105  :     LoadValue     : value = <null>
//  func SetStatus(<value> : ::system::CoroutineStatus) : (void)
106  :     Return        
//  <prop>Failure
107  :     LoadCapturedVar: var = 8(<captured><prop>Failure)
//  return <prop>Failure;
108  :     Return        
//  func GetFailure() : (::system::Exception^)
109  :     LoadValue     : value = <null>
//  func GetFailure() : (::system::Exception^)
110  :     Return        
//  <prop>Status
111  :     LoadCapturedVar: var = 9(<captured><prop>Status)
//  return <prop>Status;
112  :     Return        
//  func GetStatus() : (::system::CoroutineStatus)
113  :     LoadValue     : value = <null>
//  func GetStatus() : (::system::CoroutineStatus)
114  :     Return        
//  Status
115  :     LoadCapturedVar: var = 14(<captured-this>1)
//  Status
116  :     InvokeMethod  : methodInfo = GetStatus<system::Coroutine>, stackPatternCount = 0
//  ::system::CoroutineStatus::Waiting
117  :     LoadValue     : value = <enum: 0>
//  (Status != ::system::CoroutineStatus::Waiting)
118  :     CompareValue  
//  (Status != ::system::CoroutineStatus::Waiting)
119  :     OpNot         : type = Bool
//  if ((Status != ::system::CoroutineStatus::Waiting))
120  :     OpNot         : type = Bool
//  if ((Status != ::system::CoroutineStatus::Waiting))
121  :     JumpIf        : label = 125
//  "Resume should be called only when the coroutine is in the waiting status."
122  :     LoadValue     : value = <Bool, Resume should be called only when the coroutine is in the waiting status.>
//  raise "Resume should be called only when the coroutine is in the waiting status.";
123  :     RaiseException
//  if ((Status != ::system::CoroutineStatus::Waiting))
124  :     Jump          : label = 125
//  Executing
125  :     LoadValue     : value = <enum: 1>
//  SetStatus(Executing)
126  :     InvokeWithContext: func = 7(<method:SetStatus<system::Coroutine>(7)> in SMSwitchPR1::<state>CreateCoroutine), stackPatternCount = 1
//  SetStatus(Executing);
127  :     Pop           
//  try
128  :     InstallTry    : label = 555
//  <co-state-before-pause>
129  :     LoadCapturedVar: var = 7(<captured><co-state-before-pause>)
//  1
130  :     LoadValue     : value = <I4, 1>
//  (-1)
131  :     OpNegative    : type = I4
//  (<co-state-before-pause> != (-1))
132  :     CompareValue  
//  (<co-state-before-pause> != (-1))
133  :     OpNot         : type = Bool
//  if ((<co-state-before-pause> != (-1)))
134  :     OpNot         : type = Bool
//  if ((<co-state-before-pause> != (-1)))
135  :     JumpIf        : label = 202
//  <coroutine-output>
136  :     LoadLocalVar  : var = 1(<coroutine-output>)
//  <coroutine-output> is null
137  :     LoadValue     : value = <null>
//  <coroutine-output> is null
138  :     CompareReference
//  if (<coroutine-output> is null)
139  :     OpNot         : type = Bool
//  if (<coroutine-output> is null)
140  :     JumpIf        : label = 147
//  1
141  :     LoadValue     : value = <I4, 1>
//  (-1)
142  :     OpNegative    : type = I4
//  (<co-state-before-pause> = (-1))
143  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = (-1))
144  :     StoreCapturedVar: var = 7
//  (<co-state-before-pause> = (-1));
145  :     Pop           
//  if (<coroutine-output> is null)
146  :     Jump          : label = 201
//  <coroutine-output>
147  :     LoadLocalVar  : var = 1(<coroutine-output>)
//  <coroutine-output>.Failure
148  :     InvokeMethod  : methodInfo = GetFailure<system::CoroutineResult>, stackPatternCount = 0
//  <coroutine-output>.Failure is null
149  :     LoadValue     : value = <null>
//  <coroutine-output>.Failure is null
150  :     CompareReference
//  if (<coroutine-output>.Failure is null)
151  :     OpNot         : type = Bool
//  if (<coroutine-output>.Failure is null)
152  :     JumpIf        : label = 159
//  1
153  :     LoadValue     : value = <I4, 1>
//  (-1)
154  :     OpNegative    : type = I4
//  (<co-state-before-pause> = (-1))
155  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = (-1))
156  :     StoreCapturedVar: var = 7
//  (<co-state-before-pause> = (-1));
157  :     Pop           
//  if (<coroutine-output>.Failure is null)
158  :     Jump          : label = 201
//  <co-state-before-pause>
159  :     LoadCapturedVar: var = 7(<captured><co-state-before-pause>)
//  0
160  :     LoadValue     : value = <I4, 0>
//  (<co-state-before-pause> == 0)
161  :     CompareValue  
//  <co-state-before-pause>
162  :     LoadCapturedVar: var = 7(<captured><co-state-before-pause>)
//  <co-state-before-pause> in range [3, 10]
163  :     StoreLocalVar : var = 2(<anonymous-range-test>)
//  <co-state-before-pause> in range [3, 10]
164  :     LoadLocalVar  : var = 2(<anonymous-range-test>)
//  3
165  :     LoadValue     : value = <I4, 3>
//  <co-state-before-pause> in range [3, 10]
166  :     CompareLiteral: type = I4
//  <co-state-before-pause> in range [3, 10]
167  :     OpGE          
//  <co-state-before-pause> in range [3, 10]
168  :     LoadLocalVar  : var = 2(<anonymous-range-test>)
//  10
169  :     LoadValue     : value = <I4, 10>
//  <co-state-before-pause> in range [3, 10]
170  :     CompareLiteral: type = I4
//  <co-state-before-pause> in range [3, 10]
171  :     OpLE          
//  <co-state-before-pause> in range [3, 10]
172  :     OpAnd         : type = Bool
//  <co-state-before-pause> in range [3, 10]
173  :     LoadValue     : value = <null>
//  <co-state-before-pause> in range [3, 10]
174  :     StoreLocalVar : var = 2(<anonymous-range-test>)
//  ((<co-state-before-pause> == 0) or <co-state-before-pause> in range [3, 10])
175  :     OpOr          : type = Bool
//  if (((<co-state-before-pause> == 0) or <co-state-before-pause> in range [3, 10]))
176  :     OpNot         : type = Bool
//  if (((<co-state-before-pause> == 0) or <co-state-before-pause> in range [3, 10]))
177  :     JumpIf        : label = 193
//  1
178  :     LoadValue     : value = <I4, 1>
//  (-1)
179  :     OpNegative    : type = I4
//  (<co-state-before-pause> = (-1))
180  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = (-1))
181  :     StoreCapturedVar: var = 7
//  (<co-state-before-pause> = (-1));
182  :     Pop           
//  <coroutine-output>
183  :     LoadLocalVar  : var = 1(<coroutine-output>)
//  <coroutine-output>.Failure
184  :     InvokeMethod  : methodInfo = GetFailure<system::CoroutineResult>, stackPatternCount = 0
//  (<co-tempexvar0>ex = <coroutine-output>.Failure)
185  :     Duplicate     : stackPatternCount = 0
//  (<co-tempexvar0>ex = <coroutine-output>.Failure)
186  :     StoreCapturedVar: var = 0
//  (<co-tempexvar0>ex = <coroutine-output>.Failure);
187  :     Pop           
//  2
188  :     LoadValue     : value = <I4, 2>
//  (<co-state> = 2)
189  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 2)
190  :     StoreCapturedVar: var = 6
//  (<co-state> = 2);
191  :     Pop           
//  if (((<co-state-before-pause> == 0) or <co-state-before-pause> in range [3, 10]))
192  :     Jump          : label = 201
//  1
193  :     LoadValue     : value = <I4, 1>
//  (-1)
194  :     OpNegative    : type = I4
//  (<co-state-before-pause> = (-1))
195  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = (-1))
196  :     StoreCapturedVar: var = 7
//  (<co-state-before-pause> = (-1));
197  :     Pop           
//  <coroutine-output>
198  :     LoadLocalVar  : var = 1(<coroutine-output>)
//  <coroutine-output>.Failure
199  :     InvokeMethod  : methodInfo = GetFailure<system::CoroutineResult>, stackPatternCount = 0
//  raise <coroutine-output>.Failure;
200  :     RaiseException
//  if ((<co-state-before-pause> != (-1)))
201  :     Jump          : label = 202
//  true
202  :     LoadValue     : value = <Bool, true>
//  while (true)
203  :     OpNot         : type = Bool
//  while (true)
204  :     JumpIf        : label = 553
//  <co-state>
205  :     LoadCapturedVar: var = 6(<captured><co-state>)
//  1
206  :     LoadValue     : value = <I4, 1>
//  (<co-state> == 1)
207  :     CompareValue  
//  if ((<co-state> == 1))
208  :     OpNot         : type = Bool
//  if ((<co-state> == 1))
209  :     JumpIf        : label = 217
//  Stopped
210  :     LoadValue     : value = <enum: 2>
//  SetStatus(Stopped)
211  :     InvokeWithContext: func = 7(<method:SetStatus<system::Coroutine>(7)> in SMSwitchPR1::<state>CreateCoroutine), stackPatternCount = 1
//  SetStatus(Stopped);
212  :     Pop           
//  try
213  :     UninstallTry  : stackPatternCount = 0
//  return;
214  :     LoadValue     : value = <null>
//  return;
215  :     Return        
//  if ((<co-state> == 1))
216  :     Jump          : label = 217
//  <co-state>
217  :     LoadCapturedVar: var = 6(<captured><co-state>)
//  2
218  :     LoadValue     : value = <I4, 2>
//  (<co-state> == 2)
219  :     CompareValue  
//  if ((<co-state> == 2))
220  :     OpNot         : type = Bool
//  if ((<co-state> == 2))
221  :     JumpIf        : label = 231
//  <state>previousCoroutine
222  :     LoadCapturedVar: var = 11(<captured><state>previousCoroutine)
//  (<state>stateMachineObject.stateMachineCoroutine = <state>previousCoroutine)
223  :     Duplicate     : stackPatternCount = 0
//  <state>stateMachineObject
224  :     LoadCapturedVar: var = 10(<captured><state>stateMachineObject)
//  (<state>stateMachineObject.stateMachineCoroutine = <state>previousCoroutine)
225  :     SetProperty   : propertyInfo = stateMachineCoroutine<system::StateMachine>
//  (<state>stateMachineObject.stateMachineCoroutine = <state>previousCoroutine);
226  :     Pop           
//  <co-tempexvar0>ex
227  :     LoadCapturedVar: var = 0(<captured><co-tempexvar0>ex)
//  <co-tempexvar0>ex.Message
228  :     InvokeMethod  : methodInfo = GetMessage<system::Exception>, stackPatternCount = 0
//  raise <co-tempexvar0>ex.Message;
229  :     RaiseException
//  if ((<co-state> == 2))
230  :     Jump          : label = 231
//  <co-state>
231  :     LoadCapturedVar: var = 6(<captured><co-state>)
//  11
232  :     LoadValue     : value = <I4, 11>
//  (<co-state> == 11)
233  :     CompareValue  
//  if ((<co-state> == 11))
234  :     OpNot         : type = Bool
//  if ((<co-state> == 11))
235  :     JumpIf        : label = 247
//  <state>previousCoroutine
236  :     LoadCapturedVar: var = 11(<captured><state>previousCoroutine)
//  (<state>stateMachineObject.stateMachineCoroutine = <state>previousCoroutine)
237  :     Duplicate     : stackPatternCount = 0
//  <state>stateMachineObject
238  :     LoadCapturedVar: var = 10(<captured><state>stateMachineObject)
//  (<state>stateMachineObject.stateMachineCoroutine = <state>previousCoroutine)
239  :     SetProperty   : propertyInfo = stateMachineCoroutine<system::StateMachine>
//  (<state>stateMachineObject.stateMachineCoroutine = <state>previousCoroutine);
240  :     Pop           
//  1
241  :     LoadValue     : value = <I4, 1>
//  (<co-state> = 1)
242  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 1)
243  :     StoreCapturedVar: var = 6
//  (<co-state> = 1);
244  :     Pop           
//  continue;
245  :     Jump          : label = 202
//  if ((<co-state> == 11))
246  :     Jump          : label = 247
//  try
247  :     InstallTry    : label = 541
//  <co-state>
248  :     LoadCapturedVar: var = 6(<captured><co-state>)
//  0
249  :     LoadValue     : value = <I4, 0>
//  (<co-state> == 0)
250  :     CompareValue  
//  if ((<co-state> == 0))
251  :     OpNot         : type = Bool
//  if ((<co-state> == 0))
252  :     JumpIf        : label = 274
//  <state>startState
253  :     LoadCapturedVar: var = 12(<captured><state>startState)
//  (<co4-state>state = <state>startState)
254  :     Duplicate     : stackPatternCount = 0
//  (<co4-state>state = <state>startState)
255  :     StoreCapturedVar: var = 5
//  (<co4-state>state = <state>startState);
256  :     Pop           
//  true
257  :     LoadValue     : value = <Bool, true>
//  if (true)
258  :     OpNot         : type = Bool
//  if (true)
259  :     JumpIf        : label = 267
//  4
260  :     LoadValue     : value = <I4, 4>
//  (<co-state> = 4)
261  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 4)
262  :     StoreCapturedVar: var = 6
//  (<co-state> = 4);
263  :     Pop           
//  try
264  :     UninstallTry  : stackPatternCount = 0
//  continue;
265  :     Jump          : label = 202
//  if (true)
266  :     Jump          : label = 267
//  11
267  :     LoadValue     : value = <I4, 11>
//  (<co-state> = 11)
268  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 11)
269  :     StoreCapturedVar: var = 6
//  (<co-state> = 11);
270  :     Pop           
//  try
271  :     UninstallTry  : stackPatternCount = 0
//  continue;
272  :     Jump          : label = 202
//  if ((<co-state> == 0))
273  :     Jump          : label = 274
//  <co-state>
274  :     LoadCapturedVar: var = 6(<captured><co-state>)
//  3
275  :     LoadValue     : value = <I4, 3>
//  (<co-state> == 3)
276  :     CompareValue  
//  if ((<co-state> == 3))
277  :     OpNot         : type = Bool
//  if ((<co-state> == 3))
278  :     JumpIf        : label = 296
//  true
279  :     LoadValue     : value = <Bool, true>
//  if (true)
280  :     OpNot         : type = Bool
//  if (true)
281  :     JumpIf        : label = 289
//  4
282  :     LoadValue     : value = <I4, 4>
//  (<co-state> = 4)
283  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 4)
284  :     StoreCapturedVar: var = 6
//  (<co-state> = 4);
285  :     Pop           
//  try
286  :     UninstallTry  : stackPatternCount = 0
//  continue;
287  :     Jump          : label = 202
//  if (true)
288  :     Jump          : label = 289
//  11
289  :     LoadValue     : value = <I4, 11>
//  (<co-state> = 11)
290  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 11)
291  :     StoreCapturedVar: var = 6
//  (<co-state> = 11);
292  :     Pop           
//  try
293  :     UninstallTry  : stackPatternCount = 0
//  continue;
294  :     Jump          : label = 202
//  if ((<co-state> == 3))
295  :     Jump          : label = 296
//  <co-state>
296  :     LoadCapturedVar: var = 6(<captured><co-state>)
//  4
297  :     LoadValue     : value = <I4, 4>
//  (<co-state> == 4)
298  :     CompareValue  
//  if ((<co-state> == 4))
299  :     OpNot         : type = Bool
//  if ((<co-state> == 4))
300  :     JumpIf        : label = 356
//  <co4-state>state
301  :     LoadCapturedVar: var = 5(<captured><co4-state>state)
//  (<co3-state>currentState = <co4-state>state)
302  :     Duplicate     : stackPatternCount = 0
//  (<co3-state>currentState = <co4-state>state)
303  :     StoreCapturedVar: var = 4
//  (<co3-state>currentState = <co4-state>state);
304  :     Pop           
//  1
305  :     LoadValue     : value = <I4, 1>
//  (-1)
306  :     OpNegative    : type = I4
//  (<co4-state>state = (-1))
307  :     Duplicate     : stackPatternCount = 0
//  (<co4-state>state = (-1))
308  :     StoreCapturedVar: var = 5
//  (<co4-state>state = (-1));
309  :     Pop           
//  <co3-state>currentState
310  :     LoadCapturedVar: var = 4(<captured><co3-state>currentState)
//  (<co2-switch>2 = <co3-state>currentState)
311  :     Duplicate     : stackPatternCount = 0
//  (<co2-switch>2 = <co3-state>currentState)
312  :     StoreCapturedVar: var = 3
//  (<co2-switch>2 = <co3-state>currentState);
313  :     Pop           
//  <co2-switch>2
314  :     LoadCapturedVar: var = 3(<captured><co2-switch>2)
//  0
315  :     LoadValue     : value = <I4, 0>
//  (<co2-switch>2 == 0 of (::system::Int32))
316  :     CompareValue  
//  if ((<co2-switch>2 == 0 of (::system::Int32)))
317  :     OpNot         : type = Bool
//  if ((<co2-switch>2 == 0 of (::system::Int32)))
318  :     JumpIf        : label = 349
//  <state>stateMachineObject
319  :     LoadCapturedVar: var = 10(<captured><state>stateMachineObject)
//  <state>stateMachineObject.stateMachineInput
320  :     GetProperty   : propertyInfo = stateMachineInput<system::StateMachine>
//  1
321  :     LoadValue     : value = <I4, 1>
//  (-1)
322  :     OpNegative    : type = I4
//  (<state>stateMachineObject.stateMachineInput == (-1))
323  :     CompareValue  
//  if ((<state>stateMachineObject.stateMachineInput == (-1)))
324  :     OpNot         : type = Bool
//  if ((<state>stateMachineObject.stateMachineInput == (-1)))
325  :     JumpIf        : label = 342
//  Waiting
326  :     LoadValue     : value = <enum: 0>
//  SetStatus(Waiting)
327  :     InvokeWithContext: func = 7(<method:SetStatus<system::Coroutine>(7)> in SMSwitchPR1::<state>CreateCoroutine), stackPatternCount = 1
//  SetStatus(Waiting);
328  :     Pop           
//  <co-state>
329  :     LoadCapturedVar: var = 6(<captured><co-state>)
//  (<co-state-before-pause> = <co-state>)
330  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = <co-state>)
331  :     StoreCapturedVar: var = 7
//  (<co-state-before-pause> = <co-state>);
332  :     Pop           
//  5
333  :     LoadValue     : value = <I4, 5>
//  (<co-state> = 5)
334  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 5)
335  :     StoreCapturedVar: var = 6
//  (<co-state> = 5);
336  :     Pop           
//  try
337  :     UninstallTry  : stackPatternCount = 0
//  try
338  :     UninstallTry  : stackPatternCount = 0
//  return;
339  :     LoadValue     : value = <null>
//  return;
340  :     Return        
//  if ((<state>stateMachineObject.stateMachineInput == (-1)))
341  :     Jump          : label = 342
//  5
342  :     LoadValue     : value = <I4, 5>
//  (<co-state> = 5)
343  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 5)
344  :     StoreCapturedVar: var = 6
//  (<co-state> = 5);
345  :     Pop           
//  try
346  :     UninstallTry  : stackPatternCount = 0
//  continue;
347  :     Jump          : label = 202
//  if ((<co2-switch>2 == 0 of (::system::Int32)))
348  :     Jump          : label = 349
//  3
349  :     LoadValue     : value = <I4, 3>
//  (<co-state> = 3)
350  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 3)
351  :     StoreCapturedVar: var = 6
//  (<co-state> = 3);
352  :     Pop           
//  try
353  :     UninstallTry  : stackPatternCount = 0
//  continue;
354  :     Jump          : label = 202
//  if ((<co-state> == 4))
355  :     Jump          : label = 356
//  <co-state>
356  :     LoadCapturedVar: var = 6(<captured><co-state>)
//  5
357  :     LoadValue     : value = <I4, 5>
//  (<co-state> == 5)
358  :     CompareValue  
//  if ((<co-state> == 5))
359  :     OpNot         : type = Bool
//  if ((<co-state> == 5))
360  :     JumpIf        : label = 399
//  <state>stateMachineObject
361  :     LoadCapturedVar: var = 10(<captured><state>stateMachineObject)
//  <state>stateMachineObject.stateMachineInput
362  :     GetProperty   : propertyInfo = stateMachineInput<system::StateMachine>
//  (<co0-switch>0 = <state>stateMachineObject.stateMachineInput)
363  :     Duplicate     : stackPatternCount = 0
//  (<co0-switch>0 = <state>stateMachineObject.stateMachineInput)
364  :     StoreCapturedVar: var = 1
//  (<co0-switch>0 = <state>stateMachineObject.stateMachineInput);
365  :     Pop           
//  <co0-switch>0
366  :     LoadCapturedVar: var = 1(<captured><co0-switch>0)
//  0
367  :     LoadValue     : value = <I4, 0>
//  (<co0-switch>0 == 0 of (::system::Int32))
368  :     CompareValue  
//  if ((<co0-switch>0 == 0 of (::system::Int32)))
369  :     OpNot         : type = Bool
//  if ((<co0-switch>0 == 0 of (::system::Int32)))
370  :     JumpIf        : label = 392
//  1
371  :     LoadValue     : value = <I4, 1>
//  (-1)
372  :     OpNegative    : type = I4
//  (<state>stateMachineObject.stateMachineInput = (-1))
373  :     Duplicate     : stackPatternCount = 0
//  <state>stateMachineObject
374  :     LoadCapturedVar: var = 10(<captured><state>stateMachineObject)
//  (<state>stateMachineObject.stateMachineInput = (-1))
375  :     SetProperty   : propertyInfo = stateMachineInput<system::StateMachine>
//  (<state>stateMachineObject.stateMachineInput = (-1));
376  :     Pop           
//  ""
377  :     LoadValue     : value = <Bool, >
//  s
378  :     LoadGlobalVar : var = 0(s)
//  ("" & s)
379  :     OpConcat      
//  "[A]"
380  :     LoadValue     : value = <Bool, [A]>
//  (("" & s) & "[A]")
381  :     OpConcat      
//  (s = (("" & s) & "[A]"))
382  :     Duplicate     : stackPatternCount = 0
//  (s = (("" & s) & "[A]"))
383  :     StoreGlobalVar: var = 0(s)
//  (s = (("" & s) & "[A]"));
384  :     Pop           
//  6
385  :     LoadValue     : value = <I4, 6>
//  (<co-state> = 6)
386  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 6)
387  :     StoreCapturedVar: var = 6
//  (<co-state> = 6);
388  :     Pop           
//  try
389  :     UninstallTry  : stackPatternCount = 0
//  continue;
390  :     Jump          : label = 202
//  if ((<co0-switch>0 == 0 of (::system::Int32)))
391  :     Jump          : label = 392
//  7
392  :     LoadValue     : value = <I4, 7>
//  (<co-state> = 7)
393  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 7)
394  :     StoreCapturedVar: var = 6
//  (<co-state> = 7);
395  :     Pop           
//  try
396  :     UninstallTry  : stackPatternCount = 0
//  continue;
397  :     Jump          : label = 202
//  if ((<co-state> == 5))
398  :     Jump          : label = 399
//  <co-state>
399  :     LoadCapturedVar: var = 6(<captured><co-state>)
//  6
400  :     LoadValue     : value = <I4, 6>
//  (<co-state> == 6)
401  :     CompareValue  
//  if ((<co-state> == 6))
402  :     OpNot         : type = Bool
//  if ((<co-state> == 6))
403  :     JumpIf        : label = 434
//  <state>stateMachineObject
404  :     LoadCapturedVar: var = 10(<captured><state>stateMachineObject)
//  <state>stateMachineObject.stateMachineInput
405  :     GetProperty   : propertyInfo = stateMachineInput<system::StateMachine>
//  1
406  :     LoadValue     : value = <I4, 1>
//  (-1)
407  :     OpNegative    : type = I4
//  (<state>stateMachineObject.stateMachineInput == (-1))
408  :     CompareValue  
//  if ((<state>stateMachineObject.stateMachineInput == (-1)))
409  :     OpNot         : type = Bool
//  if ((<state>stateMachineObject.stateMachineInput == (-1)))
410  :     JumpIf        : label = 427
//  Waiting
411  :     LoadValue     : value = <enum: 0>
//  SetStatus(Waiting)
412  :     InvokeWithContext: func = 7(<method:SetStatus<system::Coroutine>(7)> in SMSwitchPR1::<state>CreateCoroutine), stackPatternCount = 1
//  SetStatus(Waiting);
413  :     Pop           
//  <co-state>
414  :     LoadCapturedVar: var = 6(<captured><co-state>)
//  (<co-state-before-pause> = <co-state>)
415  :     Duplicate     : stackPatternCount = 0
//  (<co-state-before-pause> = <co-state>)
416  :     StoreCapturedVar: var = 7
//  (<co-state-before-pause> = <co-state>);
417  :     Pop           
//  8
418  :     LoadValue     : value = <I4, 8>
//  (<co-state> = 8)
419  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 8)
420  :     StoreCapturedVar: var = 6
//  (<co-state> = 8);
421  :     Pop           
//  try
422  :     UninstallTry  : stackPatternCount = 0
//  try
423  :     UninstallTry  : stackPatternCount = 0
//  return;
424  :     LoadValue     : value = <null>
//  return;
425  :     Return        
//  if ((<state>stateMachineObject.stateMachineInput == (-1)))
426  :     Jump          : label = 427
//  8
427  :     LoadValue     : value = <I4, 8>
//  (<co-state> = 8)
428  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 8)
429  :     StoreCapturedVar: var = 6
//  (<co-state> = 8);
430  :     Pop           
//  try
431  :     UninstallTry  : stackPatternCount = 0
//  continue;
432  :     Jump          : label = 202
//  if ((<co-state> == 6))
433  :     Jump          : label = 434
//  <co-state>
434  :     LoadCapturedVar: var = 6(<captured><co-state>)
//  7
435  :     LoadValue     : value = <I4, 7>
//  (<co-state> == 7)
436  :     CompareValue  
//  if ((<co-state> == 7))
437  :     OpNot         : type = Bool
//  if ((<co-state> == 7))
438  :     JumpIf        : label = 452
//  11
439  :     LoadValue     : value = <I4, 11>
//  (<co-state> = 11)
440  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 11)
441  :     StoreCapturedVar: var = 6
//  (<co-state> = 11);
442  :     Pop           
//  try
443  :     UninstallTry  : stackPatternCount = 0
//  continue;
444  :     Jump          : label = 202
//  6
445  :     LoadValue     : value = <I4, 6>
//  (<co-state> = 6)
446  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 6)
447  :     StoreCapturedVar: var = 6
//  (<co-state> = 6);
448  :     Pop           
//  try
449  :     UninstallTry  : stackPatternCount = 0
//  continue;
450  :     Jump          : label = 202
//  if ((<co-state> == 7))
451  :     Jump          : label = 452
//  <co-state>
452  :     LoadCapturedVar: var = 6(<captured><co-state>)
//  8
453  :     LoadValue     : value = <I4, 8>
//  (<co-state> == 8)
454  :     CompareValue  
//  if ((<co-state> == 8))
455  :     OpNot         : type = Bool
//  if ((<co-state> == 8))
456  :     JumpIf        : label = 495
//  <state>stateMachineObject
457  :     LoadCapturedVar: var = 10(<captured><state>stateMachineObject)
//  <state>stateMachineObject.stateMachineInput
458  :     GetProperty   : propertyInfo = stateMachineInput<system::StateMachine>
//  (<co1-switch>1 = <state>stateMachineObject.stateMachineInput)
459  :     Duplicate     : stackPatternCount = 0
//  (<co1-switch>1 = <state>stateMachineObject.stateMachineInput)
460  :     StoreCapturedVar: var = 2
//  (<co1-switch>1 = <state>stateMachineObject.stateMachineInput);
461  :     Pop           
//  <co1-switch>1
462  :     LoadCapturedVar: var = 2(<captured><co1-switch>1)
//  1
463  :     LoadValue     : value = <I4, 1>
//  (<co1-switch>1 == 1 of (::system::Int32))
464  :     CompareValue  
//  if ((<co1-switch>1 == 1 of (::system::Int32)))
465  :     OpNot         : type = Bool
//  if ((<co1-switch>1 == 1 of (::system::Int32)))
466  :     JumpIf        : label = 488
//  1
467  :     LoadValue     : value = <I4, 1>
//  (-1)
468  :     OpNegative    : type = I4
//  (<state>stateMachineObject.stateMachineInput = (-1))
469  :     Duplicate     : stackPatternCount = 0
//  <state>stateMachineObject
470  :     LoadCapturedVar: var = 10(<captured><state>stateMachineObject)
//  (<state>stateMachineObject.stateMachineInput = (-1))
471  :     SetProperty   : propertyInfo = stateMachineInput<system::StateMachine>
//  (<state>stateMachineObject.stateMachineInput = (-1));
472  :     Pop           
//  ""
473  :     LoadValue     : value = <Bool, >
//  s
474  :     LoadGlobalVar : var = 0(s)
//  ("" & s)
475  :     OpConcat      
//  "[B]"
476  :     LoadValue     : value = <Bool, [B]>
//  (("" & s) & "[B]")
477  :     OpConcat      
//  (s = (("" & s) & "[B]"))
478  :     Duplicate     : stackPatternCount = 0
//  (s = (("" & s) & "[B]"))
479  :     StoreGlobalVar: var = 0(s)
//  (s = (("" & s) & "[B]"));
480  :     Pop           
//  9
481  :     LoadValue     : value = <I4, 9>
//  (<co-state> = 9)
482  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 9)
483  :     StoreCapturedVar: var = 6
//  (<co-state> = 9);
484  :     Pop           
//  try
485  :     UninstallTry  : stackPatternCount = 0
//  continue;
486  :     Jump          : label = 202
//  if ((<co1-switch>1 == 1 of (::system::Int32)))
487  :     Jump          : label = 488
//  10
488  :     LoadValue     : value = <I4, 10>
//  (<co-state> = 10)
489  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 10)
490  :     StoreCapturedVar: var = 6
//  (<co-state> = 10);
491  :     Pop           
//  try
492  :     UninstallTry  : stackPatternCount = 0
//  continue;
493  :     Jump          : label = 202
//  if ((<co-state> == 8))
494  :     Jump          : label = 495
//  <co-state>
495  :     LoadCapturedVar: var = 6(<captured><co-state>)
//  9
496  :     LoadValue     : value = <I4, 9>
//  (<co-state> == 9)
497  :     CompareValue  
//  if ((<co-state> == 9))
498  :     OpNot         : type = Bool
//  if ((<co-state> == 9))
499  :     JumpIf        : label = 521
//  ""
500  :     LoadValue     : value = <Bool, >
//  s
501  :     LoadGlobalVar : var = 0(s)
//  ("" & s)
502  :     OpConcat      
//  "."
503  :     LoadValue     : value = <Bool, .>
//  (("" & s) & ".")
504  :     OpConcat      
//  (s = (("" & s) & "."))
505  :     Duplicate     : stackPatternCount = 0
//  (s = (("" & s) & "."))
506  :     StoreGlobalVar: var = 0(s)
//  (s = (("" & s) & "."));
507  :     Pop           
//  11
508  :     LoadValue     : value = <I4, 11>
//  (<co-state> = 11)
509  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 11)
510  :     StoreCapturedVar: var = 6
//  (<co-state> = 11);
511  :     Pop           
//  try
512  :     UninstallTry  : stackPatternCount = 0
//  continue;
513  :     Jump          : label = 202
//  3
514  :     LoadValue     : value = <I4, 3>
//  (<co-state> = 3)
515  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 3)
516  :     StoreCapturedVar: var = 6
//  (<co-state> = 3);
517  :     Pop           
//  try
518  :     UninstallTry  : stackPatternCount = 0
//  continue;
519  :     Jump          : label = 202
//  if ((<co-state> == 9))
520  :     Jump          : label = 521
//  <co-state>
521  :     LoadCapturedVar: var = 6(<captured><co-state>)
//  10
522  :     LoadValue     : value = <I4, 10>
//  (<co-state> == 10)
523  :     CompareValue  
//  if ((<co-state> == 10))
524  :     OpNot         : type = Bool
//  if ((<co-state> == 10))
525  :     JumpIf        : label = 539
//  11
526  :     LoadValue     : value = <I4, 11>
//  (<co-state> = 11)
527  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 11)
528  :     StoreCapturedVar: var = 6
//  (<co-state> = 11);
529  :     Pop           
//  try
530  :     UninstallTry  : stackPatternCount = 0
//  continue;
531  :     Jump          : label = 202
//  9
532  :     LoadValue     : value = <I4, 9>
//  (<co-state> = 9)
533  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 9)
534  :     StoreCapturedVar: var = 6
//  (<co-state> = 9);
535  :     Pop           
//  try
536  :     UninstallTry  : stackPatternCount = 0
//  continue;
537  :     Jump          : label = 202
//  if ((<co-state> == 10))
538  :     Jump          : label = 539
//  try
539  :     UninstallTry  : stackPatternCount = 0
//  try
540  :     Jump          : label = 552
//  try
541  :     LoadException 
//  try
542  :     StoreLocalVar : var = 3(<catch><co-ex>)
//  <co-ex>
543  :     LoadLocalVar  : var = 3(<catch><co-ex>)
//  (<co-tempexvar0>ex = <co-ex>)
544  :     Duplicate     : stackPatternCount = 0
//  (<co-tempexvar0>ex = <co-ex>)
545  :     StoreCapturedVar: var = 0
//  (<co-tempexvar0>ex = <co-ex>);
546  :     Pop           
//  2
547  :     LoadValue     : value = <I4, 2>
//  (<co-state> = 2)
548  :     Duplicate     : stackPatternCount = 0
//  (<co-state> = 2)
549  :     StoreCapturedVar: var = 6
//  (<co-state> = 2);
550  :     Pop           
//  continue;
551  :     Jump          : label = 202
//  while (true)
552  :     Jump          : label = 202
//  try
553  :     UninstallTry  : stackPatternCount = 0
//  try
554  :     Jump          : label = 569
//  try
555  :     LoadException 
//  try
556  :     StoreLocalVar : var = 4(<catch><co-ex>)
//  <co-ex>
557  :     LoadLocalVar  : var = 4(<catch><co-ex>)
//  SetFailure(<co-ex>)
558  :     InvokeWithContext: func = 6(<method:SetFailure<system::Coroutine>(6)> in SMSwitchPR1::<state>CreateCoroutine), stackPatternCount = 1
//  SetFailure(<co-ex>);
559  :     Pop           
//  Stopped
560  :     LoadValue     : value = <enum: 2>
//  SetStatus(Stopped)
561  :     InvokeWithContext: func = 7(<method:SetStatus<system::Coroutine>(7)> in SMSwitchPR1::<state>CreateCoroutine), stackPatternCount = 1
//  SetStatus(Stopped);
562  :     Pop           
//  <raise-exception>
563  :     LoadLocalVar  : var = 0(<raise-exception>)
//  if (<raise-exception>)
564  :     OpNot         : type = Bool
//  if (<raise-exception>)
565  :     JumpIf        : label = 569
//  raise;
566  :     LoadLocalVar  : var = 4(<catch><co-ex>)
//  raise;
567  :     RaiseException
//  if (<raise-exception>)
568  :     Jump          : label = 569
//  func Resume(<raise-exception> : ::system::Boolean, <coroutine-output> : ::system::CoroutineResult^) : (::system::Void)
569  :     LoadValue     : value = <null>
//  func Resume(<raise-exception> : ::system::Boolean, <coroutine-output> : ::system::CoroutineResult^) : (::system::Void)
570  :     Return        
//  new ()
571  :     LoadCapturedVar: var = 0(<captured-this>0)
//  new ()
572  :     InvokeBaseCtor: methodInfo = <system::StateMachine>, stackPatternCount = 0
//  new ()
573  :     Pop           
//  new ()
574  :     LoadValue     : value = <null>
//  new ()
575  :     Return        
//  new (SMSwitchPR1^)()
576  :     LoadValue     : value = <null>
//  new (SMSwitchPR1^)()
577  :     InvokeMethod  : methodInfo = <SMSwitchPR1>, stackPatternCount = 0
//  var sm = new (SMSwitchPR1^)();
578  :     StoreLocalVar : var = 0(sm)
//  try
579  :     InstallTry    : label = 588
//  sm
580  :     LoadLocalVar  : var = 0(sm)
//  sm.A()
581  :     InvokeMethod  : methodInfo = A<SMSwitchPR1>, stackPatternCount = 0
//  sm.A();
582  :     Pop           
//  sm
583  :     LoadLocalVar  : var = 0(sm)
//  sm.B()
584  :     InvokeMethod  : methodInfo = B<SMSwitchPR1>, stackPatternCount = 0
//  sm.B();
585  :     Pop           
//  try
586  :     UninstallTry  : stackPatternCount = 0
//  try
587  :     Jump          : label = 598
//  try
588  :     LoadException 
//  try
589  :     StoreLocalVar : var = 1(<catch>ex)
//  ""
590  :     LoadValue     : value = <Bool, >
//  s
591  :     LoadGlobalVar : var = 0(s)
//  ("" & s)
592  :     OpConcat      
//  "!"
593  :     LoadValue     : value = <Bool, !>
//  (("" & s) & "!")
594  :     OpConcat      
//  (s = (("" & s) & "!"))
595  :     Duplicate     : stackPatternCount = 0
//  (s = (("" & s) & "!"))
596  :     StoreGlobalVar: var = 0(s)
//  (s = (("" & s) & "!"));
597  :     Pop           
//  s
598  :     LoadGlobalVar : var = 0(s)
//  return s;
599  :     Return        
//  func main() : (string)
600  :     LoadValue     : value = <null>
//  func main() : (string)
601  :     Return        
