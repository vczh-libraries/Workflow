========================================================
Global Variables:
========================================================
s

========================================================
Functions:
========================================================
Base::#ctor (4 .. 8)
    Arguments:
    Captured Variables:
        <captured-this>0
    Local Variables:

Base::#ctor (9 .. 29)
    Arguments:
        _x
    Captured Variables:
        <captured-this>0
    Local Variables:

Base::GetX (30 .. 45)
    Arguments:
    Captured Variables:
        <captured-this>0
    Local Variables:

Base::SetX (46 .. 63)
    Arguments:
        _x
    Captured Variables:
        <captured-this>0
    Local Variables:

Ctor::#ctor (64 .. 71)
    Arguments:
    Captured Variables:
        <captured-this>0
    Local Variables:

Ctor::#ctor (72 .. 80)
    Arguments:
        y
        b
    Captured Variables:
        <captured-this>0
    Local Variables:

Ctor::#ctor (81 .. 97)
    Arguments:
        b
        value
    Captured Variables:
        <captured-this>0
    Local Variables:

Ctor::#ctor (98 .. 107)
    Arguments:
        y
        value
    Captured Variables:
        <captured-this>0
    Local Variables:

main (108 .. 201)
    Arguments:
    Captured Variables:
    Local Variables:
        a
        a
        a
        a

<initialize> (0 .. 3)
    Arguments:
    Captured Variables:
    Local Variables:

========================================================
Instructions:
========================================================
//  ""
0    :     LoadValue     : value = <String, >
//  var s = "";
1    :     StoreGlobalVar: var = 0(s)
2    :     LoadValue     : value = <null>
3    :     Return        
//  0
4    :     LoadValue     : value = <I4, 0>
//  var x : int = 0;
5    :     LoadCapturedVar: var = 0(<captured-this>0)
//  var x : int = 0;
6    :     SetProperty   : propertyInfo = x<Base>
//  new ()
7    :     LoadValue     : value = <null>
//  new ()
8    :     Return        
//  0
9    :     LoadValue     : value = <I4, 0>
//  var x : int = 0;
10   :     LoadCapturedVar: var = 0(<captured-this>0)
//  var x : int = 0;
11   :     SetProperty   : propertyInfo = x<Base>
//  _x
12   :     LoadLocalVar  : var = 0(_x)
//  (x = _x)
13   :     Duplicate     : stackPatternCount = 0
//  (x = _x)
14   :     LoadCapturedVar: var = 0(<captured-this>0)
//  (x = _x)
15   :     SetProperty   : propertyInfo = x<Base>
//  (x = _x);
16   :     Pop           
//  this
17   :     LoadCapturedVar: var = 0(<captured-this>0)
//  this.x
18   :     GetProperty   : propertyInfo = x<Base>
//  x
19   :     LoadCapturedVar: var = 0(<captured-this>0)
//  x
20   :     GetProperty   : propertyInfo = x<Base>
//  (this.x != x)
21   :     CompareValue  
//  (this.x != x)
22   :     OpNot         : type = Bool
//  if ((this.x != x))
23   :     OpNot         : type = Bool
//  if ((this.x != x))
24   :     JumpIf        : label = 28
//  "The \"this\" expression is not correctly implemented."
25   :     LoadValue     : value = <String, The "this" expression is not correctly implemented.>
//  raise "The \"this\" expression is not correctly implemented.";
26   :     RaiseException
//  if ((this.x != x))
27   :     Jump          : label = 28
//  new (_x : int)
28   :     LoadValue     : value = <null>
//  new (_x : int)
29   :     Return        
//  this
30   :     LoadCapturedVar: var = 0(<captured-this>0)
//  this.x
31   :     GetProperty   : propertyInfo = x<Base>
//  x
32   :     LoadCapturedVar: var = 0(<captured-this>0)
//  x
33   :     GetProperty   : propertyInfo = x<Base>
//  (this.x != x)
34   :     CompareValue  
//  (this.x != x)
35   :     OpNot         : type = Bool
//  if ((this.x != x))
36   :     OpNot         : type = Bool
//  if ((this.x != x))
37   :     JumpIf        : label = 41
//  "The \"this\" expression is not correctly implemented."
38   :     LoadValue     : value = <String, The "this" expression is not correctly implemented.>
//  raise "The \"this\" expression is not correctly implemented.";
39   :     RaiseException
//  if ((this.x != x))
40   :     Jump          : label = 41
//  x
41   :     LoadCapturedVar: var = 0(<captured-this>0)
//  x
42   :     GetProperty   : propertyInfo = x<Base>
//  return x;
43   :     Return        
//  func GetX() : (int)
44   :     LoadValue     : value = <null>
//  func GetX() : (int)
45   :     Return        
//  x
46   :     LoadCapturedVar: var = 0(<captured-this>0)
//  x
47   :     GetProperty   : propertyInfo = x<Base>
//  _x
48   :     LoadLocalVar  : var = 0(_x)
//  (x != _x)
49   :     CompareValue  
//  (x != _x)
50   :     OpNot         : type = Bool
//  if ((x != _x))
51   :     OpNot         : type = Bool
//  if ((x != _x))
52   :     JumpIf        : label = 62
//  _x
53   :     LoadLocalVar  : var = 0(_x)
//  (x = _x)
54   :     Duplicate     : stackPatternCount = 0
//  (x = _x)
55   :     LoadCapturedVar: var = 0(<captured-this>0)
//  (x = _x)
56   :     SetProperty   : propertyInfo = x<Base>
//  (x = _x);
57   :     Pop           
//  XChanged()
58   :     LoadCapturedVar: var = 0(<captured-this>0)
//  XChanged()
59   :     InvokeEvent   : eventInfo = XChanged<Base>, stackPatternCount = 0
//  XChanged();
60   :     Pop           
//  if ((x != _x))
61   :     Jump          : label = 62
//  func SetX(_x : int) : (void)
62   :     LoadValue     : value = <null>
//  func SetX(_x : int) : (void)
63   :     Return        
//  new ()
64   :     LoadCapturedVar: var = 0(<captured-this>0)
//  new ()
65   :     InvokeBaseCtor: methodInfo = <Base>, stackPatternCount = 0
//  new ()
66   :     Pop           
//  new ()
67   :     LoadCapturedVar: var = 0(<captured-this>0)
//  new ()
68   :     InvokeBaseCtor: methodInfo = <test::ObservableValue>, stackPatternCount = 0
//  new ()
69   :     Pop           
//  new ()
70   :     LoadValue     : value = <null>
//  new ()
71   :     Return        
//  y
72   :     LoadLocalVar  : var = 0(y)
//  new (y : int, b : bool)
73   :     LoadCapturedVar: var = 0(<captured-this>0)
//  new (y : int, b : bool)
74   :     InvokeBaseCtor: methodInfo = <Base>, stackPatternCount = 1
//  new (y : int, b : bool)
75   :     Pop           
//  new (y : int, b : bool)
76   :     LoadCapturedVar: var = 0(<captured-this>0)
//  new (y : int, b : bool)
77   :     InvokeBaseCtor: methodInfo = <test::ObservableValue>, stackPatternCount = 0
//  new (y : int, b : bool)
78   :     Pop           
//  new (y : int, b : bool)
79   :     LoadValue     : value = <null>
//  new (y : int, b : bool)
80   :     Return        
//  new (b : bool, value : int)
81   :     LoadCapturedVar: var = 0(<captured-this>0)
//  new (b : bool, value : int)
82   :     InvokeBaseCtor: methodInfo = <Base>, stackPatternCount = 0
//  new (b : bool, value : int)
83   :     Pop           
//  value
84   :     LoadLocalVar  : var = 1(value)
//  b
85   :     LoadLocalVar  : var = 0(b)
//  b
86   :     Duplicate     : stackPatternCount = 0
//  b
87   :     LoadValue     : value = <null>
//  b
88   :     CompareReference
//  b
89   :     JumpIf        : label = 92
//  b
90   :     ConvertToType : flag = BoxedValue, typeDescriptor = system::Boolean
//  b
91   :     Jump          : label = 93
//  b
92   :     LoadValue     : value = <null>
//  new (b : bool, value : int)
93   :     LoadCapturedVar: var = 0(<captured-this>0)
//  new (b : bool, value : int)
94   :     InvokeBaseCtor: methodInfo = <test::ObservableValue>, stackPatternCount = 2
//  new (b : bool, value : int)
95   :     Pop           
//  new (b : bool, value : int)
96   :     LoadValue     : value = <null>
//  new (b : bool, value : int)
97   :     Return        
//  y
98   :     LoadLocalVar  : var = 0(y)
//  new (y : int, value : int)
99   :     LoadCapturedVar: var = 0(<captured-this>0)
//  new (y : int, value : int)
100  :     InvokeBaseCtor: methodInfo = <Base>, stackPatternCount = 1
//  new (y : int, value : int)
101  :     Pop           
//  value
102  :     LoadLocalVar  : var = 1(value)
//  new (y : int, value : int)
103  :     LoadCapturedVar: var = 0(<captured-this>0)
//  new (y : int, value : int)
104  :     InvokeBaseCtor: methodInfo = <test::ObservableValue>, stackPatternCount = 1
//  new (y : int, value : int)
105  :     Pop           
//  new (y : int, value : int)
106  :     LoadValue     : value = <null>
//  new (y : int, value : int)
107  :     Return        
//  new (Ctor^)()
108  :     LoadValue     : value = <null>
//  new (Ctor^)()
109  :     InvokeMethod  : methodInfo = <Ctor>, stackPatternCount = 0
//  var a = new (Ctor^)();
110  :     StoreLocalVar : var = 0(a)
//  s
111  :     LoadGlobalVar : var = 0(s)
//  "["
112  :     LoadValue     : value = <String, [>
//  a
113  :     LoadLocalVar  : var = 0(a)
//  a.X
114  :     InvokeMethod  : methodInfo = GetX<Base>, stackPatternCount = 0
//  a.X
115  :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  ("[" & a.X)
116  :     OpConcat      
//  "]["
117  :     LoadValue     : value = <String, ][>
//  (("[" & a.X) & "][")
118  :     OpConcat      
//  a
119  :     LoadLocalVar  : var = 0(a)
//  a.Value
120  :     InvokeMethod  : methodInfo = GetValue<test::ObservableValue>, stackPatternCount = 0
//  a.Value
121  :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  ((("[" & a.X) & "][") & a.Value)
122  :     OpConcat      
//  "]"
123  :     LoadValue     : value = <String, ]>
//  (((("[" & a.X) & "][") & a.Value) & "]")
124  :     OpConcat      
//  (s & (((("[" & a.X) & "][") & a.Value) & "]"))
125  :     OpConcat      
//  (s = (s & (((("[" & a.X) & "][") & a.Value) & "]")))
126  :     Duplicate     : stackPatternCount = 0
//  (s = (s & (((("[" & a.X) & "][") & a.Value) & "]")))
127  :     StoreGlobalVar: var = 0(s)
//  (s = (s & (((("[" & a.X) & "][") & a.Value) & "]")));
128  :     Pop           
//  1
129  :     LoadValue     : value = <I4, 1>
//  true
130  :     LoadValue     : value = <Bool, true>
//  new (Ctor^)(1, true)
131  :     LoadValue     : value = <null>
//  new (Ctor^)(1, true)
132  :     InvokeMethod  : methodInfo = <Ctor>, stackPatternCount = 2
//  var a = new (Ctor^)(1, true);
133  :     StoreLocalVar : var = 1(a)
//  s
134  :     LoadGlobalVar : var = 0(s)
//  "["
135  :     LoadValue     : value = <String, [>
//  a
136  :     LoadLocalVar  : var = 1(a)
//  a.X
137  :     InvokeMethod  : methodInfo = GetX<Base>, stackPatternCount = 0
//  a.X
138  :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  ("[" & a.X)
139  :     OpConcat      
//  "]["
140  :     LoadValue     : value = <String, ][>
//  (("[" & a.X) & "][")
141  :     OpConcat      
//  a
142  :     LoadLocalVar  : var = 1(a)
//  a.Value
143  :     InvokeMethod  : methodInfo = GetValue<test::ObservableValue>, stackPatternCount = 0
//  a.Value
144  :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  ((("[" & a.X) & "][") & a.Value)
145  :     OpConcat      
//  "]"
146  :     LoadValue     : value = <String, ]>
//  (((("[" & a.X) & "][") & a.Value) & "]")
147  :     OpConcat      
//  (s & (((("[" & a.X) & "][") & a.Value) & "]"))
148  :     OpConcat      
//  (s = (s & (((("[" & a.X) & "][") & a.Value) & "]")))
149  :     Duplicate     : stackPatternCount = 0
//  (s = (s & (((("[" & a.X) & "][") & a.Value) & "]")))
150  :     StoreGlobalVar: var = 0(s)
//  (s = (s & (((("[" & a.X) & "][") & a.Value) & "]")));
151  :     Pop           
//  true
152  :     LoadValue     : value = <Bool, true>
//  2
153  :     LoadValue     : value = <I4, 2>
//  new (Ctor^)(true, 2)
154  :     LoadValue     : value = <null>
//  new (Ctor^)(true, 2)
155  :     InvokeMethod  : methodInfo = <Ctor>, stackPatternCount = 2
//  var a = new (Ctor^)(true, 2);
156  :     StoreLocalVar : var = 2(a)
//  s
157  :     LoadGlobalVar : var = 0(s)
//  "["
158  :     LoadValue     : value = <String, [>
//  a
159  :     LoadLocalVar  : var = 2(a)
//  a.X
160  :     InvokeMethod  : methodInfo = GetX<Base>, stackPatternCount = 0
//  a.X
161  :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  ("[" & a.X)
162  :     OpConcat      
//  "]["
163  :     LoadValue     : value = <String, ][>
//  (("[" & a.X) & "][")
164  :     OpConcat      
//  a
165  :     LoadLocalVar  : var = 2(a)
//  a.Value
166  :     InvokeMethod  : methodInfo = GetValue<test::ObservableValue>, stackPatternCount = 0
//  a.Value
167  :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  ((("[" & a.X) & "][") & a.Value)
168  :     OpConcat      
//  "]"
169  :     LoadValue     : value = <String, ]>
//  (((("[" & a.X) & "][") & a.Value) & "]")
170  :     OpConcat      
//  (s & (((("[" & a.X) & "][") & a.Value) & "]"))
171  :     OpConcat      
//  (s = (s & (((("[" & a.X) & "][") & a.Value) & "]")))
172  :     Duplicate     : stackPatternCount = 0
//  (s = (s & (((("[" & a.X) & "][") & a.Value) & "]")))
173  :     StoreGlobalVar: var = 0(s)
//  (s = (s & (((("[" & a.X) & "][") & a.Value) & "]")));
174  :     Pop           
//  1
175  :     LoadValue     : value = <I4, 1>
//  2
176  :     LoadValue     : value = <I4, 2>
//  new (Ctor^)(1, 2)
177  :     LoadValue     : value = <null>
//  new (Ctor^)(1, 2)
178  :     InvokeMethod  : methodInfo = <Ctor>, stackPatternCount = 2
//  var a = new (Ctor^)(1, 2);
179  :     StoreLocalVar : var = 3(a)
//  s
180  :     LoadGlobalVar : var = 0(s)
//  "["
181  :     LoadValue     : value = <String, [>
//  a
182  :     LoadLocalVar  : var = 3(a)
//  a.X
183  :     InvokeMethod  : methodInfo = GetX<Base>, stackPatternCount = 0
//  a.X
184  :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  ("[" & a.X)
185  :     OpConcat      
//  "]["
186  :     LoadValue     : value = <String, ][>
//  (("[" & a.X) & "][")
187  :     OpConcat      
//  a
188  :     LoadLocalVar  : var = 3(a)
//  a.Value
189  :     InvokeMethod  : methodInfo = GetValue<test::ObservableValue>, stackPatternCount = 0
//  a.Value
190  :     ConvertToType : flag = BoxedValue, typeDescriptor = system::String
//  ((("[" & a.X) & "][") & a.Value)
191  :     OpConcat      
//  "]"
192  :     LoadValue     : value = <String, ]>
//  (((("[" & a.X) & "][") & a.Value) & "]")
193  :     OpConcat      
//  (s & (((("[" & a.X) & "][") & a.Value) & "]"))
194  :     OpConcat      
//  (s = (s & (((("[" & a.X) & "][") & a.Value) & "]")))
195  :     Duplicate     : stackPatternCount = 0
//  (s = (s & (((("[" & a.X) & "][") & a.Value) & "]")))
196  :     StoreGlobalVar: var = 0(s)
//  (s = (s & (((("[" & a.X) & "][") & a.Value) & "]")));
197  :     Pop           
//  s
198  :     LoadGlobalVar : var = 0(s)
//  return s;
199  :     Return        
//  func main() : (string)
200  :     LoadValue     : value = <null>
//  func main() : (string)
201  :     Return        
