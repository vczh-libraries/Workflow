/***********************************************************************
!!!!!! DO NOT MODIFY !!!!!!

Source: ../Resources/Codegen/WorkflowMultiFiles.txt

This file is generated by Workflow compiler
https://github.com/vczh-libraries
***********************************************************************/

#include "WorkflowMultiFilesReflection.h"

#if defined( _MSC_VER)
#pragma warning(push)
#pragma warning(disable:4250)
#elif defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wparentheses-equality"
#elif defined(__GNUC__)
#pragma GCC diagnostic push
#endif

/***********************************************************************
Reflection
***********************************************************************/

namespace vl
{
	namespace reflection
	{
		namespace description
		{
#ifndef VCZH_DEBUG_NO_REFLECTION
			IMPL_CPP_TYPE_INFO(multifiles::Animal)
			IMPL_CPP_TYPE_INFO(multifiles::BadDog)
			IMPL_CPP_TYPE_INFO(multifiles::Bird)
			IMPL_CPP_TYPE_INFO(multifiles::C1)
			IMPL_CPP_TYPE_INFO(multifiles::C2)
			IMPL_CPP_TYPE_INFO(multifiles::C3)
			IMPL_CPP_TYPE_INFO(multifiles::C4)
			IMPL_CPP_TYPE_INFO(multifiles::Cat)
			IMPL_CPP_TYPE_INFO(multifiles::Dog)
			IMPL_CPP_TYPE_INFO(multifiles::FlyingObject)
			IMPL_CPP_TYPE_INFO(multifiles::GoodDog)
			IMPL_CPP_TYPE_INFO(multifiles::HuntingObject)
			IMPL_CPP_TYPE_INFO(multifiles::HuntingObject::Inside)
			IMPL_CPP_TYPE_INFO(multifiles::Leopard)
			IMPL_CPP_TYPE_INFO(multifiles::Lion)
			IMPL_CPP_TYPE_INFO(multifiles::Tiger)

#ifdef VCZH_DESCRIPTABLEOBJECT_WITH_METADATA
#define _ ,
			BEGIN_CLASS_MEMBER(::multifiles::Animal)
				CLASS_MEMBER_BASE(::vl::reflection::DescriptableObject)
				CLASS_MEMBER_CONSTRUCTOR(::vl::Ptr<::multifiles::Animal>(), NO_PARAMETER)
			END_CLASS_MEMBER(::multifiles::Animal)

			BEGIN_CLASS_MEMBER(::multifiles::BadDog)
				CLASS_MEMBER_BASE(::multifiles::Dog)
				CLASS_MEMBER_CONSTRUCTOR(::vl::Ptr<::multifiles::BadDog>(), NO_PARAMETER)
			END_CLASS_MEMBER(::multifiles::BadDog)

			BEGIN_CLASS_MEMBER(::multifiles::Bird)
				CLASS_MEMBER_BASE(::multifiles::Animal)
				CLASS_MEMBER_BASE(::multifiles::FlyingObject)
				CLASS_MEMBER_CONSTRUCTOR(::vl::Ptr<::multifiles::Bird>(), NO_PARAMETER)
			END_CLASS_MEMBER(::multifiles::Bird)

			BEGIN_CLASS_MEMBER(::multifiles::C1)
				CLASS_MEMBER_BASE(::vl::reflection::DescriptableObject)
				CLASS_MEMBER_CONSTRUCTOR(::vl::Ptr<::multifiles::C1>(), NO_PARAMETER)
			END_CLASS_MEMBER(::multifiles::C1)

			BEGIN_CLASS_MEMBER(::multifiles::C2)
				CLASS_MEMBER_BASE(::vl::reflection::DescriptableObject)
				CLASS_MEMBER_CONSTRUCTOR(::vl::Ptr<::multifiles::C2>(), NO_PARAMETER)
			END_CLASS_MEMBER(::multifiles::C2)

			BEGIN_CLASS_MEMBER(::multifiles::C3)
				CLASS_MEMBER_BASE(::multifiles::C1)
				CLASS_MEMBER_BASE(::multifiles::C2)
				CLASS_MEMBER_CONSTRUCTOR(::vl::Ptr<::multifiles::C3>(), NO_PARAMETER)
			END_CLASS_MEMBER(::multifiles::C3)

			BEGIN_CLASS_MEMBER(::multifiles::C4)
				CLASS_MEMBER_BASE(::vl::reflection::DescriptableObject)
				CLASS_MEMBER_CONSTRUCTOR(::vl::Ptr<::multifiles::C4>(), NO_PARAMETER)
			END_CLASS_MEMBER(::multifiles::C4)

			BEGIN_CLASS_MEMBER(::multifiles::Cat)
				CLASS_MEMBER_BASE(::multifiles::Animal)
				CLASS_MEMBER_CONSTRUCTOR(::vl::Ptr<::multifiles::Cat>(), NO_PARAMETER)
			END_CLASS_MEMBER(::multifiles::Cat)

			BEGIN_CLASS_MEMBER(::multifiles::Dog)
				CLASS_MEMBER_BASE(::multifiles::Animal)
				CLASS_MEMBER_CONSTRUCTOR(::vl::Ptr<::multifiles::Dog>(), NO_PARAMETER)
			END_CLASS_MEMBER(::multifiles::Dog)

			BEGIN_CLASS_MEMBER(::multifiles::FlyingObject)
				CLASS_MEMBER_BASE(::vl::reflection::DescriptableObject)
				CLASS_MEMBER_CONSTRUCTOR(::vl::Ptr<::multifiles::FlyingObject>(), NO_PARAMETER)
			END_CLASS_MEMBER(::multifiles::FlyingObject)

			BEGIN_CLASS_MEMBER(::multifiles::GoodDog)
				CLASS_MEMBER_BASE(::multifiles::Dog)
				CLASS_MEMBER_CONSTRUCTOR(::vl::Ptr<::multifiles::GoodDog>(), NO_PARAMETER)
			END_CLASS_MEMBER(::multifiles::GoodDog)

			BEGIN_CLASS_MEMBER(::multifiles::HuntingObject)
				CLASS_MEMBER_BASE(::vl::reflection::DescriptableObject)
				CLASS_MEMBER_CONSTRUCTOR(::vl::Ptr<::multifiles::HuntingObject>(), NO_PARAMETER)
			END_CLASS_MEMBER(::multifiles::HuntingObject)

			BEGIN_CLASS_MEMBER(::multifiles::HuntingObject::Inside)
				CLASS_MEMBER_BASE(::multifiles::Bird)
				CLASS_MEMBER_CONSTRUCTOR(::vl::Ptr<::multifiles::HuntingObject::Inside>(), NO_PARAMETER)
			END_CLASS_MEMBER(::multifiles::HuntingObject::Inside)

			BEGIN_CLASS_MEMBER(::multifiles::Leopard)
				CLASS_MEMBER_BASE(::multifiles::Cat)
				CLASS_MEMBER_BASE(::multifiles::HuntingObject)
				CLASS_MEMBER_CONSTRUCTOR(::vl::Ptr<::multifiles::Leopard>(), NO_PARAMETER)
			END_CLASS_MEMBER(::multifiles::Leopard)

			BEGIN_CLASS_MEMBER(::multifiles::Lion)
				CLASS_MEMBER_BASE(::multifiles::Cat)
				CLASS_MEMBER_BASE(::multifiles::HuntingObject)
				CLASS_MEMBER_CONSTRUCTOR(::vl::Ptr<::multifiles::Lion>(), NO_PARAMETER)
			END_CLASS_MEMBER(::multifiles::Lion)

			BEGIN_CLASS_MEMBER(::multifiles::Tiger)
				CLASS_MEMBER_BASE(::multifiles::Cat)
				CLASS_MEMBER_BASE(::multifiles::HuntingObject)
				CLASS_MEMBER_CONSTRUCTOR(::vl::Ptr<::multifiles::Tiger>(), NO_PARAMETER)
			END_CLASS_MEMBER(::multifiles::Tiger)

#undef _
			class WorkflowMultiFilesTypeLoader : public Object, public ITypeLoader
			{
			public:
				void Load(ITypeManager* manager)
				{
					ADD_TYPE_INFO(::multifiles::Animal)
					ADD_TYPE_INFO(::multifiles::BadDog)
					ADD_TYPE_INFO(::multifiles::Bird)
					ADD_TYPE_INFO(::multifiles::C1)
					ADD_TYPE_INFO(::multifiles::C2)
					ADD_TYPE_INFO(::multifiles::C3)
					ADD_TYPE_INFO(::multifiles::C4)
					ADD_TYPE_INFO(::multifiles::Cat)
					ADD_TYPE_INFO(::multifiles::Dog)
					ADD_TYPE_INFO(::multifiles::FlyingObject)
					ADD_TYPE_INFO(::multifiles::GoodDog)
					ADD_TYPE_INFO(::multifiles::HuntingObject)
					ADD_TYPE_INFO(::multifiles::HuntingObject::Inside)
					ADD_TYPE_INFO(::multifiles::Leopard)
					ADD_TYPE_INFO(::multifiles::Lion)
					ADD_TYPE_INFO(::multifiles::Tiger)
				}

				void Unload(ITypeManager* manager)
				{
				}
			};
#endif
#endif

			bool LoadWorkflowMultiFilesTypes()
			{
#ifdef VCZH_DESCRIPTABLEOBJECT_WITH_METADATA
				if (auto manager = GetGlobalTypeManager())
				{
					return manager->AddTypeLoader(Ptr(new WorkflowMultiFilesTypeLoader));
				}
#endif
				return false;
			}
		}
	}
}

#if defined( _MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif
