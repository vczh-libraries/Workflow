/***********************************************************************
!!!!!! DO NOT MODIFY !!!!!!

Source: ../Resources/Codegen/Event.txt

This file is generated by Workflow compiler
https://github.com/vczh-libraries
***********************************************************************/

#include "Event.h"

#if defined( _MSC_VER)
#pragma warning(push)
#pragma warning(disable:4250)
#elif defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wparentheses-equality"
#elif defined(__GNUC__)
#pragma GCC diagnostic push
#endif

#define GLOBAL_SYMBOL ::vl_workflow_global::Event::
#define GLOBAL_NAME ::vl_workflow_global::Event::Instance().
#define GLOBAL_OBJ &::vl_workflow_global::Event::Instance()

/***********************************************************************
Global Variables
***********************************************************************/

BEGIN_GLOBAL_STORAGE_CLASS(vl_workflow_global_Event)
	vl_workflow_global::Event instance;
	INITIALIZE_GLOBAL_STORAGE_CLASS

		instance.olds = ::vl::reflection::description::IValueList::Create();
		instance.news = ::vl::reflection::description::IValueList::Create();
	FINALIZE_GLOBAL_STORAGE_CLASS

		instance.olds = nullptr;
		instance.news = nullptr;
END_GLOBAL_STORAGE_CLASS(vl_workflow_global_Event)

namespace vl_workflow_global
{
/***********************************************************************
Global Functions
***********************************************************************/

	void Event::EventHandler(::vl::vint64_t oldValue, ::vl::vint64_t newValue)
	{
		::vl::__vwsn::This(GLOBAL_NAME olds.Obj())->Add(::vl::__vwsn::Box(oldValue));
		::vl::__vwsn::This(GLOBAL_NAME news.Obj())->Add(::vl::__vwsn::Box(newValue));
	}

	::vl::WString Event::main()
	{
		auto o = ::vl::Ptr<::test::ObservableValue>(new ::test::ObservableValue(static_cast<::vl::vint64_t>(10L)));
		auto handler = ::vl::__vwsn::EventAttach(::vl::__vwsn::This(o.Obj())->ValueChanged, ::vl::Func<void(::vl::vint64_t, ::vl::vint64_t)>(GLOBAL_OBJ, &GLOBAL_SYMBOL EventHandler));
		::vl::__vwsn::This(o.Obj())->SetValue(static_cast<::vl::vint64_t>(20L));
		::vl::__vwsn::This(o.Obj())->SetValue(static_cast<::vl::vint64_t>(30L));
		auto b1 = ::vl::__vwsn::EventDetach(::vl::__vwsn::This(o.Obj())->ValueChanged, handler);
		::vl::__vwsn::This(o.Obj())->SetValue(static_cast<::vl::vint64_t>(40L));
		auto b2 = ::vl::__vwsn::EventDetach(::vl::__vwsn::This(o.Obj())->ValueChanged, handler);
		return ((((((((((((((::vl::__vwsn::ToString(::vl::__vwsn::This(GLOBAL_NAME olds.Obj())->GetCount()) + ::vl::WString::Unmanaged(L", ")) + ::vl::__vwsn::ToString(::vl::__vwsn::Unbox<::vl::vint64_t>(::vl::__vwsn::This(GLOBAL_NAME olds.Obj())->Get(static_cast<::vl::vint64_t>(0L))))) + ::vl::WString::Unmanaged(L", ")) + ::vl::__vwsn::ToString(::vl::__vwsn::Unbox<::vl::vint64_t>(::vl::__vwsn::This(GLOBAL_NAME olds.Obj())->Get(static_cast<::vl::vint64_t>(1L))))) + ::vl::WString::Unmanaged(L", ")) + ::vl::__vwsn::ToString(::vl::__vwsn::This(GLOBAL_NAME news.Obj())->GetCount())) + ::vl::WString::Unmanaged(L", ")) + ::vl::__vwsn::ToString(::vl::__vwsn::Unbox<::vl::vint64_t>(::vl::__vwsn::This(GLOBAL_NAME news.Obj())->Get(static_cast<::vl::vint64_t>(0L))))) + ::vl::WString::Unmanaged(L", ")) + ::vl::__vwsn::ToString(::vl::__vwsn::Unbox<::vl::vint64_t>(::vl::__vwsn::This(GLOBAL_NAME news.Obj())->Get(static_cast<::vl::vint64_t>(1L))))) + ::vl::WString::Unmanaged(L", ")) + ::vl::__vwsn::ToString(b1)) + ::vl::WString::Unmanaged(L", ")) + ::vl::__vwsn::ToString(b2));
	}

	Event& Event::Instance()
	{
		return Getvl_workflow_global_Event().instance;
	}
}

#undef GLOBAL_SYMBOL
#undef GLOBAL_NAME
#undef GLOBAL_OBJ

#if defined( _MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif
