/***********************************************************************
!!!!!! DO NOT MODIFY !!!!!!

Source: ../Resources/Codegen/AnonymousLambda.txt

This file is generated by Workflow compiler
https://github.com/vczh-libraries
***********************************************************************/

#include "AnonymousLambda.h"

#if defined( _MSC_VER)
#pragma warning(push)
#pragma warning(disable:4250)
#elif defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wparentheses-equality"
#elif defined(__GNUC__)
#pragma GCC diagnostic push
#endif

#define GLOBAL_SYMBOL ::vl_workflow_global::AnonymousLambda::
#define GLOBAL_NAME ::vl_workflow_global::AnonymousLambda::Instance().
#define GLOBAL_OBJ &::vl_workflow_global::AnonymousLambda::Instance()

/***********************************************************************
Global Variables
***********************************************************************/

BEGIN_GLOBAL_STORAGE_CLASS(vl_workflow_global_AnonymousLambda)
	vl_workflow_global::AnonymousLambda instance;
	INITIALIZE_GLOBAL_STORAGE_CLASS
	FINALIZE_GLOBAL_STORAGE_CLASS
END_GLOBAL_STORAGE_CLASS(vl_workflow_global_AnonymousLambda)

namespace vl_workflow_global
{
/***********************************************************************
Global Functions
***********************************************************************/

	::vl::Func<::vl::Func<::vl::vint64_t()>(::vl::vint64_t)> AnonymousLambda::Adder(::vl::vint64_t x)
	{
		return vl::Func(::vl_workflow_global::__vwsnf1_AnonymousLambda_Adder_(x));
	}

	::vl::WString AnonymousLambda::main()
	{
		auto f = GLOBAL_NAME Adder(static_cast<::vl::vint64_t>(1L));
		auto g = GLOBAL_NAME Adder(static_cast<::vl::vint64_t>(2L));
		return ((((((::vl::__vwsn::ToString(f(static_cast<::vl::vint64_t>(1L))()) + ::vl::WString::Unmanaged(L", ")) + ::vl::__vwsn::ToString(f(static_cast<::vl::vint64_t>(2L))())) + ::vl::WString::Unmanaged(L", ")) + ::vl::__vwsn::ToString(g(static_cast<::vl::vint64_t>(1L))())) + ::vl::WString::Unmanaged(L", ")) + ::vl::__vwsn::ToString(g(static_cast<::vl::vint64_t>(2L))()));
	}

	AnonymousLambda& AnonymousLambda::Instance()
	{
		return Getvl_workflow_global_AnonymousLambda().instance;
	}

/***********************************************************************
Closures
***********************************************************************/

	//-------------------------------------------------------------------

	__vwsnf1_AnonymousLambda_Adder_::__vwsnf1_AnonymousLambda_Adder_(::vl::vint64_t __vwsnctor_x)
		:x(__vwsnctor_x)
	{
	}

	::vl::Func<::vl::vint64_t()> __vwsnf1_AnonymousLambda_Adder_::operator()(::vl::vint64_t y) const
	{
		return vl::Func(::vl_workflow_global::__vwsnf2_AnonymousLambda_Adder__(x, y));
	}

	//-------------------------------------------------------------------

	__vwsnf2_AnonymousLambda_Adder__::__vwsnf2_AnonymousLambda_Adder__(::vl::vint64_t __vwsnctor_x, ::vl::vint64_t __vwsnctor_y)
		:x(__vwsnctor_x)
		, y(__vwsnctor_y)
	{
	}

	::vl::vint64_t __vwsnf2_AnonymousLambda_Adder__::operator()() const
	{
		return (x + y);
	}
}

#undef GLOBAL_SYMBOL
#undef GLOBAL_NAME
#undef GLOBAL_OBJ

#if defined( _MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif
