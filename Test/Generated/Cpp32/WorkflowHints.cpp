/***********************************************************************
!!!!!! DO NOT MODIFY !!!!!!

Source: ../Resources/Codegen/WorkflowHints.txt

This file is generated by Workflow compiler
https://github.com/vczh-libraries
***********************************************************************/

#include "WorkflowHints.h"
/* CodePack:BeginIgnore() */
#ifndef VCZH_DEBUG_NO_REFLECTION
/* CodePack:ConditionOff(VCZH_DEBUG_NO_REFLECTION, WorkflowHintsReflection.h) */
#include "WorkflowHintsReflection.h"
#endif
/* CodePack:EndIgnore() */

#if defined( _MSC_VER)
#pragma warning(push)
#pragma warning(disable:4250)
#elif defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wparentheses-equality"
#elif defined(__GNUC__)
#pragma GCC diagnostic push
#endif

#define GLOBAL_SYMBOL ::vl_workflow_global::WorkflowHints::
#define GLOBAL_NAME ::vl_workflow_global::WorkflowHints::Instance().
#define GLOBAL_OBJ &::vl_workflow_global::WorkflowHints::Instance()

/***********************************************************************
Global Variables
***********************************************************************/

BEGIN_GLOBAL_STORAGE_CLASS(vl_workflow_global_WorkflowHints)
	vl_workflow_global::WorkflowHints instance;
	INITIALIZE_GLOBAL_STORAGE_CLASS
	FINALIZE_GLOBAL_STORAGE_CLASS
END_GLOBAL_STORAGE_CLASS(vl_workflow_global_WorkflowHints)

namespace vl_workflow_global
{
/***********************************************************************
Global Functions
***********************************************************************/

	void WorkflowHints::Ensure(bool condition)
	{
		if ((! condition))
		{
			throw ::vl::Exception(::vl::WString::Unmanaged(L"Wrong!"));
		}
	}

	void WorkflowHints::Ensure(bool a, bool b)
	{
		GLOBAL_NAME Ensure((a == b));
	}

	void WorkflowHints::Ensure(::vl::vint32_t a, ::vl::vint32_t b)
	{
		GLOBAL_NAME Ensure((a == b));
	}

	void WorkflowHints::ExtraTests()
	{
		GLOBAL_NAME Ensure((::vl::__vwsn::ToString(static_cast<::vl::vint32_t>(123)) == ::vl::WString::Unmanaged(L"123")));
		GLOBAL_NAME Ensure((::vl::__vwsn::Parse<::vl::vint32_t>(::vl::WString::Unmanaged(L"123")) == static_cast<::vl::vint32_t>(123)));
		GLOBAL_NAME Ensure(::vl::__vwsn::Parse<bool>(::vl::WString::Unmanaged(L"true")), true);
		GLOBAL_NAME Ensure(::vl::__vwsn::Parse<::vl::vint32_t>(::vl::WString::Unmanaged(L"123")), static_cast<::vl::vint32_t>(123));
		{
			auto v = ::vl::__vwsn::ToString(static_cast<::vl::vint32_t>(123));
			GLOBAL_NAME Ensure((v == ::vl::WString::Unmanaged(L"123")));
		}
		{
			auto v = ::vl::__vwsn::Parse<::vl::vint32_t>(::vl::WString::Unmanaged(L"123"));
			GLOBAL_NAME Ensure((v == static_cast<::vl::vint32_t>(123)));
		}
		auto sBase = ::vl::Ptr<::workflow::hints::Base>(new ::workflow::hints::Base());
		auto rBase = new ::workflow::hints::Base(static_cast<::vl::vint32_t>(0));
		auto sDerived = ::vl::Ptr<::workflow::hints::Derived>(new ::workflow::hints::Derived());
		auto rDerived = new ::workflow::hints::Derived(static_cast<::vl::vint32_t>(0));
		auto srBase = ::vl::__vwsn::Ensure(::vl::Ptr<::workflow::hints::Base>(rBase));
		auto srDerived = ::vl::__vwsn::Ensure(::vl::Ptr<::workflow::hints::Derived>(rDerived));
		GLOBAL_NAME Ensure((::vl::__vwsn::Ensure(static_cast<::workflow::hints::Base*>(sDerived.Obj())) != nullptr));
		GLOBAL_NAME Ensure(static_cast<bool>(::vl::__vwsn::Ensure(::vl::Ptr<::workflow::hints::Base>(sDerived))));
		GLOBAL_NAME Ensure((::vl::__vwsn::Ensure(static_cast<::workflow::hints::Base*>(rDerived)) != nullptr));
		GLOBAL_NAME Ensure(static_cast<bool>(::vl::__vwsn::Ensure(::vl::Ptr<::workflow::hints::Base>(rDerived))));
		GLOBAL_NAME Ensure((::vl::__vwsn::RawPtrCast<::workflow::hints::Derived>(sBase.Obj()) == nullptr));
		GLOBAL_NAME Ensure((! static_cast<bool>(::vl::__vwsn::SharedPtrCast<::workflow::hints::Derived>(sBase.Obj()))));
		GLOBAL_NAME Ensure((::vl::__vwsn::RawPtrCast<::workflow::hints::Derived>(rBase) == nullptr));
		GLOBAL_NAME Ensure((! static_cast<bool>(::vl::__vwsn::SharedPtrCast<::workflow::hints::Derived>(rBase))));
		GLOBAL_NAME Ensure(true);
		GLOBAL_NAME Ensure((::vl::__vwsn::RawPtrCast<::workflow::hints::Base>(sBase.Obj()) != nullptr));
		GLOBAL_NAME Ensure(true);
		GLOBAL_NAME Ensure((::vl::__vwsn::RawPtrCast<::workflow::hints::Derived>(sBase.Obj()) == nullptr));
		GLOBAL_NAME Ensure((::vl::__vwsn::RawPtrCast<::workflow::hints::Base>(rBase) != nullptr));
		GLOBAL_NAME Ensure(true);
		GLOBAL_NAME Ensure((::vl::__vwsn::RawPtrCast<::workflow::hints::Derived>(rBase) == nullptr));
		GLOBAL_NAME Ensure(true);
		GLOBAL_NAME Ensure(true);
		GLOBAL_NAME Ensure((::vl::__vwsn::RawPtrCast<::workflow::hints::Base>(sDerived.Obj()) != nullptr));
		GLOBAL_NAME Ensure(true);
		GLOBAL_NAME Ensure((! (::vl::__vwsn::RawPtrCast<::workflow::hints::Derived>(sDerived.Obj()) == nullptr)));
		GLOBAL_NAME Ensure((::vl::__vwsn::RawPtrCast<::workflow::hints::Base>(rDerived) != nullptr));
		GLOBAL_NAME Ensure(true);
		GLOBAL_NAME Ensure((! (::vl::__vwsn::RawPtrCast<::workflow::hints::Derived>(rDerived) == nullptr)));
		GLOBAL_NAME Ensure(true);
		auto iNull = ::vl::Nullable<::vl::vint32_t>();
		auto iValue = ::vl::Nullable<::vl::vint32_t>(static_cast<::vl::vint32_t>(1));
		auto sNull = ::vl::Nullable<::vl::WString>();
		auto sValue = ::vl::Nullable<::vl::WString>(::vl::WString::Unmanaged(L"2"));
		GLOBAL_NAME Ensure((! static_cast<bool>(iNull)));
		GLOBAL_NAME Ensure(static_cast<bool>(iValue));
		GLOBAL_NAME Ensure((! static_cast<bool>(sNull)));
		GLOBAL_NAME Ensure(static_cast<bool>(sValue));
		GLOBAL_NAME Ensure((! static_cast<bool>(::vl::__vwsn::NullableCast<::vl::WString>(iNull))));
		GLOBAL_NAME Ensure((::vl::__vwsn::NullableCast<::vl::WString>(iValue) == ::vl::Nullable<::vl::WString>(::vl::WString::Unmanaged(L"1"))));
		GLOBAL_NAME Ensure((::vl::__vwsn::ToString(iValue.Value()) == ::vl::WString::Unmanaged(L"1")));
		GLOBAL_NAME Ensure((! static_cast<bool>(::vl::__vwsn::NullableCast<::vl::vint32_t>(sNull))));
		GLOBAL_NAME Ensure((::vl::__vwsn::NullableCast<::vl::vint32_t>(sValue) == ::vl::Nullable<::vl::vint32_t>(static_cast<::vl::vint32_t>(2))));
		GLOBAL_NAME Ensure((::vl::__vwsn::Parse<::vl::vint32_t>(sValue.Value()) == static_cast<::vl::vint32_t>(2)));
		GLOBAL_NAME Ensure((! static_cast<bool>(iNull)));
		GLOBAL_NAME Ensure(static_cast<bool>(iValue));
		GLOBAL_NAME Ensure((! static_cast<bool>(sNull)));
		GLOBAL_NAME Ensure(static_cast<bool>(sValue));
		auto x = ::vl::reflection::description::Value();
		auto y = ::vl::__vwsn::Box(static_cast<::vl::vint32_t>(2));
		GLOBAL_NAME Ensure(x.IsNull());
		GLOBAL_NAME Ensure((! y.IsNull()));
		GLOBAL_NAME Ensure((dynamic_cast<::vl::reflection::description::IValueType::TypedBox<::vl::vint32_t>*>(x.GetBoxedValue().Obj()) == nullptr));
		GLOBAL_NAME Ensure((dynamic_cast<::vl::reflection::description::IValueType::TypedBox<::vl::vint32_t>*>(y.GetBoxedValue().Obj()) != nullptr));
		auto z = ::vl::__vwsn::Box(rBase);
		GLOBAL_NAME Ensure((! z.IsNull()));
		GLOBAL_NAME Ensure([&](){ auto __vwsn_temp__ = z; return !__vwsn_temp__.GetSharedPtr() && ::vl::__vwsn::RawPtrCast<::workflow::hints::Base>(__vwsn_temp__.GetRawPtr()) != nullptr; }());
		GLOBAL_NAME Ensure([&](){ auto __vwsn_temp__ = z; return !__vwsn_temp__.GetSharedPtr() || ::vl::__vwsn::RawPtrCast<::workflow::hints::Base>(__vwsn_temp__.GetRawPtr()) == nullptr; }());
		GLOBAL_NAME Ensure([&](){ auto __vwsn_temp__ = z; return __vwsn_temp__.GetSharedPtr() || ::vl::__vwsn::RawPtrCast<::workflow::hints::Derived>(__vwsn_temp__.GetRawPtr()) == nullptr; }());
		GLOBAL_NAME Ensure([&](){ auto __vwsn_temp__ = z; return !__vwsn_temp__.GetSharedPtr() || ::vl::__vwsn::RawPtrCast<::workflow::hints::Derived>(__vwsn_temp__.GetRawPtr()) == nullptr; }());
	}

	::vl::WString WorkflowHints::main()
	{
		GLOBAL_NAME ExtraTests();
		auto hinters = ::vl::Ptr<::test::Hinters>(::test::CreateHinter());
		{
			auto hinters2 = ::test::CreateHinter(static_cast<::vl::vint32_t>(0));
			::vl::__vwsn::This(hinters2)->Dispose(true);
		}
		auto a = ::vl::__vwsn::This(hinters.Obj())->GetList(::vl::reflection::description::UnboxParameter<::vl::collections::List<::vl::vint32_t>>(::vl::__vwsn::Box((::vl::__vwsn::CreateList().Add(static_cast<::vl::vint32_t>(1)).Add(static_cast<::vl::vint32_t>(2)).Add(static_cast<::vl::vint32_t>(3))).list)).Ref(), static_cast<::vl::vint32_t>(4))[static_cast<::vl::vint32_t>(0)];
		auto b = ::vl::__vwsn::This(hinters.Obj())->GetReadonlyList(::vl::reflection::description::UnboxParameter<::vl::collections::List<::vl::vint32_t>>(::vl::__vwsn::Box(::vl::Ptr<::vl::reflection::description::IValueReadonlyList>((::vl::__vwsn::CreateList().Add(static_cast<::vl::vint32_t>(10)).Add(static_cast<::vl::vint32_t>(20)).Add(static_cast<::vl::vint32_t>(30))).list))).Ref())[static_cast<::vl::vint32_t>(0)];
		auto c = ::vl::__vwsn::Unbox<::vl::vint32_t>(::vl::__vwsn::This(::vl::__vwsn::UnboxCollection<::vl::reflection::description::IValueReadonlyList>(::vl::__vwsn::This(hinters.Obj())->GetReadonlyArray(::vl::reflection::description::UnboxParameter<::vl::collections::Array<::vl::vint32_t>>(::vl::__vwsn::Box(::vl::Ptr<::vl::reflection::description::IValueReadonlyList>((::vl::__vwsn::CreateArray().Resize(3).Set(0, static_cast<::vl::vint32_t>(100)).Set(1, static_cast<::vl::vint32_t>(200)).Set(2, static_cast<::vl::vint32_t>(300))).list))).Ref())).Obj())->Get(static_cast<::vl::vint32_t>(0)));
		auto d = ::vl::__vwsn::Unbox<::vl::vint32_t>(::vl::__vwsn::This(::vl::__vwsn::UnboxCollection<::vl::reflection::description::IValueReadonlyList>(::vl::__vwsn::This(hinters.Obj())->GetReadonlySL(::vl::reflection::description::UnboxParameter<::vl::collections::SortedList<::vl::vint32_t>>(::vl::__vwsn::Box(::vl::Ptr<::vl::reflection::description::IValueReadonlyList>((::vl::__vwsn::CreateList().Add(static_cast<::vl::vint32_t>(1000)).Add(static_cast<::vl::vint32_t>(2000)).Add(static_cast<::vl::vint32_t>(3000))).list))).Ref())).Obj())->Get(static_cast<::vl::vint32_t>(0)));
		auto e = ::test::GetDictionaryFromHinter(::vl::__vwsn::This(hinters.Obj()), ::vl::reflection::description::UnboxParameter<::vl::collections::Dictionary<::vl::vint32_t, ::vl::vint32_t>>(::vl::__vwsn::Box((::vl::__vwsn::CreateDictionary().Add(static_cast<::vl::vint32_t>(1), static_cast<::vl::vint32_t>(2)).Add(static_cast<::vl::vint32_t>(3), static_cast<::vl::vint32_t>(4))).dictionary)).Ref())[static_cast<::vl::vint32_t>(1)];
		auto f = ::test::GetReadonlyDictionaryFromHinter(::vl::__vwsn::This(hinters.Obj()), ::vl::reflection::description::UnboxParameter<::vl::collections::Dictionary<::vl::vint32_t, ::vl::vint32_t>>(::vl::__vwsn::Box(::vl::Ptr<::vl::reflection::description::IValueReadonlyDictionary>((::vl::__vwsn::CreateDictionary().Add(static_cast<::vl::vint32_t>(10), static_cast<::vl::vint32_t>(20)).Add(static_cast<::vl::vint32_t>(30), static_cast<::vl::vint32_t>(40))).dictionary))).Ref())[static_cast<::vl::vint32_t>(10)];
		::vl::__vwsn::This(hinters.Obj())->SetStorage(::vl::reflection::description::UnboxParameter<::vl::collections::List<::vl::vint32_t>>(::vl::__vwsn::Box((::vl::__vwsn::CreateList().Add(static_cast<::vl::vint32_t>(1)).Add(static_cast<::vl::vint32_t>(2)).Add(static_cast<::vl::vint32_t>(3)).Add(static_cast<::vl::vint32_t>(4)).Add(static_cast<::vl::vint32_t>(5))).list)).Ref());
		auto g1 = ::vl::__vwsn::Unbox<::vl::vint32_t>(::vl::__vwsn::This(::vl::__vwsn::UnboxCollection<::vl::reflection::description::IValueList>(::vl::__vwsn::This(hinters.Obj())->GetStorage()).Obj())->Get(static_cast<::vl::vint32_t>(0)));
		auto xs = (::vl::__vwsn::CreateList().Add(static_cast<::vl::vint32_t>(1)).Add(static_cast<::vl::vint32_t>(2)).Add(static_cast<::vl::vint32_t>(3)).Add(static_cast<::vl::vint32_t>(4)).Add(static_cast<::vl::vint32_t>(5))).list;
		::vl::__vwsn::This(hinters.Obj())->SetStorage(::vl::reflection::description::UnboxParameter<::vl::collections::List<::vl::vint32_t>>(::vl::__vwsn::Box(xs)).Ref());
		::vl::__vwsn::This(hinters.Obj())->GetStorage().Set(static_cast<::vl::vint32_t>(4), static_cast<::vl::vint32_t>(100));
		auto g2 = ::vl::__vwsn::This(hinters.Obj())->GetStorage()[static_cast<::vl::vint32_t>(4)];
		auto ct1 = ::vl::__vwsn::This(hinters.Obj())->CountList(::vl::reflection::description::UnboxParameter<::vl::collections::List<::vl::vint32_t>>(::vl::__vwsn::Box((::vl::__vwsn::CreateList().Add(static_cast<::vl::vint32_t>(1)).Add(static_cast<::vl::vint32_t>(2)).Add(static_cast<::vl::vint32_t>(3)).Add(static_cast<::vl::vint32_t>(4)).Add(static_cast<::vl::vint32_t>(5))).list)).Ref());
		auto ct2 = ::vl::__vwsn::This(hinters.Obj())->CountArray(::vl::reflection::description::UnboxParameter<::vl::collections::Array<::vl::vint32_t>>(::vl::__vwsn::Box((::vl::__vwsn::CreateArray().Resize(5).Set(0, static_cast<::vl::vint32_t>(1)).Set(1, static_cast<::vl::vint32_t>(2)).Set(2, static_cast<::vl::vint32_t>(3)).Set(3, static_cast<::vl::vint32_t>(4)).Set(4, static_cast<::vl::vint32_t>(5))).list)).Ref());
		auto ct3 = ::vl::__vwsn::This(hinters.Obj())->CountSortedList(::vl::reflection::description::UnboxParameter<::vl::collections::SortedList<::vl::vint32_t>>(::vl::__vwsn::Box(::vl::Ptr<::vl::reflection::description::IValueReadonlyList>((::vl::__vwsn::CreateList().Add(static_cast<::vl::vint32_t>(1)).Add(static_cast<::vl::vint32_t>(2)).Add(static_cast<::vl::vint32_t>(3)).Add(static_cast<::vl::vint32_t>(4)).Add(static_cast<::vl::vint32_t>(5))).list))).Ref());
		auto ct4 = ::vl::__vwsn::This(hinters.Obj())->CountObservableList(::vl::reflection::description::UnboxParameter<::vl::collections::ObservableList<::vl::vint32_t>>(::vl::__vwsn::Box((::vl::__vwsn::CreateObservableList().Add(static_cast<::vl::vint32_t>(1)).Add(static_cast<::vl::vint32_t>(2)).Add(static_cast<::vl::vint32_t>(3)).Add(static_cast<::vl::vint32_t>(4)).Add(static_cast<::vl::vint32_t>(5))).list)).Ref());
		{
			auto __vwsn_for_begin_x = static_cast<::vl::vint32_t>(1);
			auto __vwsn_for_end_x = static_cast<::vl::vint32_t>(5);
			auto x = __vwsn_for_begin_x;
			while ((x <= __vwsn_for_end_x))
			{
				{
					::vl::__vwsn::This(::vl::__vwsn::UnboxCollection<::vl::reflection::description::IValueList>(::vl::__vwsn::This(hinters.Obj())->GetMyList()).Obj())->Add(::vl::__vwsn::Box(x));
					::vl::__vwsn::This(::vl::__vwsn::UnboxCollection<::vl::reflection::description::IValueObservableList>(::vl::__vwsn::This(hinters.Obj())->GetObservableList()).Obj())->Add(::vl::__vwsn::Box(x));
				}
				(x = (x + static_cast<::vl::vint32_t>(1)));
			}
		}
		auto merge1 = ::vl::reflection::description::Sys::Int32ToInt(static_cast<::vl::vint32_t>(0));
		auto merge2 = ::vl::reflection::description::Sys::Int64ToInt(static_cast<::vl::vint64_t>(static_cast<::vl::vint32_t>(0)));
		auto merge3 = ::vl::reflection::description::Sys::IntToInt32(static_cast<::vl::vint32_t>(0));
		auto merge4 = ::vl::reflection::description::Sys::IntToInt64(static_cast<::vl::vint32_t>(0));
		auto merge5 = ::vl::reflection::description::Sys::UInt32ToUInt(static_cast<::vl::vuint32_t>(static_cast<::vl::vint32_t>(0)));
		auto merge6 = ::vl::reflection::description::Sys::UInt64ToUInt(static_cast<::vl::vuint64_t>(static_cast<::vl::vint32_t>(0)));
		auto merge7 = ::vl::reflection::description::Sys::UIntToUInt32(static_cast<::vl::vuint32_t>(static_cast<::vl::vint32_t>(0)));
		auto merge8 = ::vl::reflection::description::Sys::UIntToUInt64(static_cast<::vl::vuint32_t>(static_cast<::vl::vint32_t>(0)));
		return ((((((((((((((((((((((((((((::vl::WString::Unmanaged(L"[") + ::vl::__vwsn::ToString(a)) + ::vl::WString::Unmanaged(L"][")) + ::vl::__vwsn::ToString(b)) + ::vl::WString::Unmanaged(L"][")) + ::vl::__vwsn::ToString(c)) + ::vl::WString::Unmanaged(L"][")) + ::vl::__vwsn::ToString(d)) + ::vl::WString::Unmanaged(L"][")) + ::vl::__vwsn::ToString(e)) + ::vl::WString::Unmanaged(L"][")) + ::vl::__vwsn::ToString(f)) + ::vl::WString::Unmanaged(L"][")) + ::vl::__vwsn::ToString(g1)) + ::vl::WString::Unmanaged(L"][")) + ::vl::__vwsn::ToString(g2)) + ::vl::WString::Unmanaged(L"][")) + ::vl::__vwsn::ToString(::vl::__vwsn::Unbox<::vl::vint32_t>(::vl::__vwsn::This(::vl::__vwsn::UnboxCollection<::vl::reflection::description::IValueList>(::vl::__vwsn::This(hinters.Obj())->GetMyList()).Obj())->Get(static_cast<::vl::vint32_t>(2))))) + ::vl::WString::Unmanaged(L"][")) + ::vl::__vwsn::ToString(::vl::__vwsn::This(hinters.Obj())->GetObservableList()[static_cast<::vl::vint32_t>(3)])) + ::vl::WString::Unmanaged(L"][")) + ::vl::__vwsn::ToString(ct1)) + ::vl::WString::Unmanaged(L"][")) + ::vl::__vwsn::ToString(ct2)) + ::vl::WString::Unmanaged(L"][")) + ::vl::__vwsn::ToString(ct3)) + ::vl::WString::Unmanaged(L"][")) + ::vl::__vwsn::ToString(ct4)) + ::vl::WString::Unmanaged(L"]"));
	}

	WorkflowHints& WorkflowHints::Instance()
	{
		return Getvl_workflow_global_WorkflowHints().instance;
	}
}

/***********************************************************************
Class (::workflow::hints::Base)
***********************************************************************/

namespace workflow
{
	namespace hints
	{
		Base::Base()
		{
		}

		Base::Base(::vl::vint32_t x)
		{
		}

/***********************************************************************
Class (::workflow::hints::Derived)
***********************************************************************/

		Derived::Derived()
		{
		}

		Derived::Derived(::vl::vint32_t x)
		{
		}

	}
}
#undef GLOBAL_SYMBOL
#undef GLOBAL_NAME
#undef GLOBAL_OBJ

#if defined( _MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif
