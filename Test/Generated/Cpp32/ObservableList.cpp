/***********************************************************************
!!!!!! DO NOT MODIFY !!!!!!

Source: ../Resources/Codegen/ObservableList.txt

This file is generated by Workflow compiler
https://github.com/vczh-libraries
***********************************************************************/

#include "ObservableList.h"

#if defined( _MSC_VER)
#pragma warning(push)
#pragma warning(disable:4250)
#elif defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wparentheses-equality"
#elif defined(__GNUC__)
#pragma GCC diagnostic push
#endif

#define GLOBAL_SYMBOL ::vl_workflow_global::ObservableList::
#define GLOBAL_NAME ::vl_workflow_global::ObservableList::Instance().
#define GLOBAL_OBJ &::vl_workflow_global::ObservableList::Instance()

/***********************************************************************
Global Variables
***********************************************************************/

BEGIN_GLOBAL_STORAGE_CLASS(vl_workflow_global_ObservableList)
	vl_workflow_global::ObservableList instance;
	INITIALIZE_GLOBAL_STORAGE_CLASS

		instance.s = ::vl::WString::Unmanaged(L"");
	FINALIZE_GLOBAL_STORAGE_CLASS

		instance.s = ::vl::WString::Empty;
END_GLOBAL_STORAGE_CLASS(vl_workflow_global_ObservableList)

namespace vl_workflow_global
{
/***********************************************************************
Global Functions
***********************************************************************/

	void ObservableList::Callback(::vl::vint32_t index, ::vl::vint32_t oldCount, ::vl::vint32_t newCount)
	{
		(GLOBAL_NAME s = (GLOBAL_NAME s + ((((((::vl::WString::Unmanaged(L"[") + ::vl::__vwsn::ToString(index)) + ::vl::WString::Unmanaged(L":")) + ::vl::__vwsn::ToString(oldCount)) + ::vl::WString::Unmanaged(L":")) + ::vl::__vwsn::ToString(newCount)) + ::vl::WString::Unmanaged(L"]"))));
	}

	::vl::WString ObservableList::main()
	{
		auto list = (::vl::__vwsn::CreateObservableList().Add(static_cast<::vl::vint32_t>(1)).Add(static_cast<::vl::vint32_t>(2)).Add(static_cast<::vl::vint32_t>(3)).Add(static_cast<::vl::vint32_t>(4)).Add(static_cast<::vl::vint32_t>(5))).list;
		::vl::__vwsn::EventAttach(::vl::__vwsn::This(list.Obj())->ItemChanged, ::vl::Func<void(::vl::vint32_t, ::vl::vint32_t, ::vl::vint32_t)>(GLOBAL_OBJ, &GLOBAL_SYMBOL Callback));
		{
			auto __vwsn_for_enumerable_i = ::vl::Ptr<::vl::reflection::description::IValueEnumerable>((::vl::__vwsn::CreateList().Add(static_cast<::vl::vint32_t>(2)).Add(static_cast<::vl::vint32_t>(4)).Add(static_cast<::vl::vint32_t>(6)).Add(static_cast<::vl::vint32_t>(8)).Add(static_cast<::vl::vint32_t>(10))).list);
			auto __vwsn_for_enumerator_i = ::vl::__vwsn::This(__vwsn_for_enumerable_i.Obj())->CreateEnumerator();
			while (::vl::__vwsn::This(__vwsn_for_enumerator_i.Obj())->Next())
			{
				auto i = ::vl::__vwsn::Unbox<::vl::vint32_t>(::vl::__vwsn::This(__vwsn_for_enumerator_i.Obj())->GetCurrent());
				{
					::vl::__vwsn::This(list.Obj())->Insert((i - static_cast<::vl::vint32_t>(1)), ::vl::__vwsn::Box(i));
				}
			}
		}
		{
			auto __vwsn_for_begin_i = static_cast<::vl::vint32_t>(0);
			auto __vwsn_for_end_i = static_cast<::vl::vint32_t>(4);
			auto i = __vwsn_for_begin_i;
			while ((i <= __vwsn_for_end_i))
			{
				{
					::vl::__vwsn::This(list.Obj())->RemoveAt(i);
				}
				(i = (i + static_cast<::vl::vint32_t>(1)));
			}
		}
		{
			auto __vwsn_for_enumerable_i = ::vl::Ptr<::vl::reflection::description::IValueEnumerable>(list);
			auto __vwsn_for_enumerator_i = ::vl::__vwsn::This(__vwsn_for_enumerable_i.Obj())->CreateEnumerator();
			while (::vl::__vwsn::This(__vwsn_for_enumerator_i.Obj())->Next())
			{
				auto i = ::vl::__vwsn::Unbox<::vl::vint32_t>(::vl::__vwsn::This(__vwsn_for_enumerator_i.Obj())->GetCurrent());
				{
					(GLOBAL_NAME s = (GLOBAL_NAME s + ((::vl::WString::Unmanaged(L"[") + ::vl::__vwsn::ToString(i)) + ::vl::WString::Unmanaged(L"]"))));
				}
			}
		}
		::vl::__vwsn::This(list.Obj())->Clear();
		return GLOBAL_NAME s;
	}

	ObservableList& ObservableList::Instance()
	{
		return Getvl_workflow_global_ObservableList().instance;
	}
}

#undef GLOBAL_SYMBOL
#undef GLOBAL_NAME
#undef GLOBAL_OBJ

#if defined( _MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif
