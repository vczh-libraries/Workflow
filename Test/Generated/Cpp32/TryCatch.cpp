/***********************************************************************
!!!!!! DO NOT MODIFY !!!!!!

Source: ../Resources/Codegen/TryCatch.txt

This file is generated by Workflow compiler
https://github.com/vczh-libraries
***********************************************************************/

#include "TryCatch.h"

#if defined( _MSC_VER)
#pragma warning(push)
#pragma warning(disable:4250)
#elif defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wparentheses-equality"
#elif defined(__GNUC__)
#pragma GCC diagnostic push
#endif

#define GLOBAL_SYMBOL ::vl_workflow_global::TryCatch::
#define GLOBAL_NAME ::vl_workflow_global::TryCatch::Instance().
#define GLOBAL_OBJ &::vl_workflow_global::TryCatch::Instance()

/***********************************************************************
Global Variables
***********************************************************************/

BEGIN_GLOBAL_STORAGE_CLASS(vl_workflow_global_TryCatch)
	vl_workflow_global::TryCatch instance;
	INITIALIZE_GLOBAL_STORAGE_CLASS

		instance.log = ::vl::WString::Unmanaged(L"");
	FINALIZE_GLOBAL_STORAGE_CLASS

		instance.log = ::vl::WString::Empty;
END_GLOBAL_STORAGE_CLASS(vl_workflow_global_TryCatch)

namespace vl_workflow_global
{
/***********************************************************************
Global Functions
***********************************************************************/

	void TryCatch::Test1()
	{
		try
		{
			{
				throw ::vl::Exception(::vl::WString::Unmanaged(L"Test1::catch"));
			}
		}
		catch(const ::vl::Exception& __vwsne_0)
		{
			auto ex = ::vl::reflection::description::IValueException::Create(__vwsne_0.Message());
			{
				(GLOBAL_NAME log = (((GLOBAL_NAME log + ::vl::WString::Unmanaged(L"[")) + ::vl::__vwsn::This(ex.Obj())->GetMessage()) + ::vl::WString::Unmanaged(L"]")));
			}
		}
	}

	void TryCatch::Test2()
	{
		{
			auto __vwsnb_0 = [&]()
			{
				(GLOBAL_NAME log = (GLOBAL_NAME log + ::vl::WString::Unmanaged(L"[Test2::finally]")));
			}
			;
			::vl::__vwsn::RunOnExit<::std::remove_cvref_t<decltype(__vwsnb_0)>> __vwsnb_0_dtor(&__vwsnb_0);
			try
			{
				{
					throw ::vl::Exception(::vl::WString::Unmanaged(L"Test2::catch"));
				}
			}
			catch(const ::vl::Exception& __vwsne_0)
			{
				auto ex = ::vl::reflection::description::IValueException::Create(__vwsne_0.Message());
				{
					(GLOBAL_NAME log = (((GLOBAL_NAME log + ::vl::WString::Unmanaged(L"[")) + ::vl::__vwsn::This(ex.Obj())->GetMessage()) + ::vl::WString::Unmanaged(L"]")));
				}
			}
		}
	}

	void TryCatch::Throw(const ::vl::WString& message)
	{
		throw ::vl::Exception(message);
	}

	void TryCatch::Test3()
	{
		{
			auto __vwsnb_0 = [&]()
			{
				(GLOBAL_NAME log = (GLOBAL_NAME log + ::vl::WString::Unmanaged(L"[Test3::finally2]")));
			}
			;
			::vl::__vwsn::RunOnExit<::std::remove_cvref_t<decltype(__vwsnb_0)>> __vwsnb_0_dtor(&__vwsnb_0);
			try
			{
				{
					{
						auto __vwsnb_1 = [&]()
						{
							(GLOBAL_NAME log = (GLOBAL_NAME log + ::vl::WString::Unmanaged(L"[Test3::finally1]")));
						}
						;
						::vl::__vwsn::RunOnExit<::std::remove_cvref_t<decltype(__vwsnb_1)>> __vwsnb_1_dtor(&__vwsnb_1);
						try
						{
							{
								GLOBAL_NAME Throw(::vl::WString::Unmanaged(L"Test3::catch"));
							}
						}
						catch(const ::vl::Exception& __vwsne_1)
						{
							auto ex = ::vl::reflection::description::IValueException::Create(__vwsne_1.Message());
							{
								(GLOBAL_NAME log = (((GLOBAL_NAME log + ::vl::WString::Unmanaged(L"[")) + ::vl::__vwsn::This(ex.Obj())->GetMessage()) + ::vl::WString::Unmanaged(L"1]")));
								throw;
							}
						}
					}
				}
			}
			catch(const ::vl::Exception& __vwsne_0)
			{
				auto ex = ::vl::reflection::description::IValueException::Create(__vwsne_0.Message());
				{
					(GLOBAL_NAME log = (((GLOBAL_NAME log + ::vl::WString::Unmanaged(L"[")) + ::vl::__vwsn::This(ex.Obj())->GetMessage()) + ::vl::WString::Unmanaged(L"2]")));
				}
			}
		}
	}

	void TryCatch::Test4()
	{
		{
			auto __vwsnb_0 = [&]()
			{
				(GLOBAL_NAME log = (GLOBAL_NAME log + ::vl::WString::Unmanaged(L"[Test4::finally2]")));
			}
			;
			::vl::__vwsn::RunOnExit<::std::remove_cvref_t<decltype(__vwsnb_0)>> __vwsnb_0_dtor(&__vwsnb_0);
			try
			{
				{
					{
						auto __vwsnb_1 = [&]()
						{
							(GLOBAL_NAME log = (GLOBAL_NAME log + ::vl::WString::Unmanaged(L"[Test4::finally1]")));
						}
						;
						::vl::__vwsn::RunOnExit<::std::remove_cvref_t<decltype(__vwsnb_1)>> __vwsnb_1_dtor(&__vwsnb_1);
						try
						{
							{
							}
						}
						catch(const ::vl::Exception& __vwsne_1)
						{
							auto ex = ::vl::reflection::description::IValueException::Create(__vwsne_1.Message());
							{
								(GLOBAL_NAME log = (((GLOBAL_NAME log + ::vl::WString::Unmanaged(L"[")) + ::vl::__vwsn::This(ex.Obj())->GetMessage()) + ::vl::WString::Unmanaged(L"1]")));
								throw;
							}
						}
					}
				}
			}
			catch(const ::vl::Exception& __vwsne_0)
			{
				auto ex = ::vl::reflection::description::IValueException::Create(__vwsne_0.Message());
				{
					(GLOBAL_NAME log = (((GLOBAL_NAME log + ::vl::WString::Unmanaged(L"[")) + ::vl::__vwsn::This(ex.Obj())->GetMessage()) + ::vl::WString::Unmanaged(L"2]")));
				}
			}
		}
	}

	::vl::WString TryCatch::main()
	{
		GLOBAL_NAME Test1();
		GLOBAL_NAME Test2();
		GLOBAL_NAME Test3();
		GLOBAL_NAME Test4();
		return GLOBAL_NAME log;
	}

	TryCatch& TryCatch::Instance()
	{
		return Getvl_workflow_global_TryCatch().instance;
	}
}

#undef GLOBAL_SYMBOL
#undef GLOBAL_NAME
#undef GLOBAL_OBJ

#if defined( _MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif
