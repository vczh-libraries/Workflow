/***********************************************************************
!!!!!! DO NOT MODIFY !!!!!!

Source: ../Resources/Codegen/ClassCtor.txt

This file is generated by Workflow compiler
https://github.com/vczh-libraries
***********************************************************************/

#include "ClassCtor.h"
/* CodePack:BeginIgnore() */
#ifndef VCZH_DEBUG_NO_REFLECTION
/* CodePack:ConditionOff(VCZH_DEBUG_NO_REFLECTION, ClassCtorReflection.h) */
#include "ClassCtorReflection.h"
#endif
/* CodePack:EndIgnore() */

#if defined( _MSC_VER)
#pragma warning(push)
#pragma warning(disable:4250)
#elif defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wparentheses-equality"
#elif defined(__GNUC__)
#pragma GCC diagnostic push
#endif

#define GLOBAL_SYMBOL ::vl_workflow_global::ClassCtor::
#define GLOBAL_NAME ::vl_workflow_global::ClassCtor::Instance().
#define GLOBAL_OBJ &::vl_workflow_global::ClassCtor::Instance()

/***********************************************************************
Global Variables
***********************************************************************/

BEGIN_GLOBAL_STORAGE_CLASS(vl_workflow_global_ClassCtor)
	vl_workflow_global::ClassCtor instance;
	INITIALIZE_GLOBAL_STORAGE_CLASS

		instance.s = ::vl::WString::Unmanaged(L"");
	FINALIZE_GLOBAL_STORAGE_CLASS

		instance.s = ::vl::WString::Empty;
END_GLOBAL_STORAGE_CLASS(vl_workflow_global_ClassCtor)

namespace vl_workflow_global
{
/***********************************************************************
Global Functions
***********************************************************************/

	::vl::WString ClassCtor::main()
	{
		{
			auto a = ::vl::Ptr<::Ctor>(new ::Ctor());
			(GLOBAL_NAME s = (GLOBAL_NAME s + ((((::vl::WString::Unmanaged(L"[") + ::vl::__vwsn::ToString(::vl::__vwsn::This(a.Obj())->GetX())) + ::vl::WString::Unmanaged(L"][")) + ::vl::__vwsn::ToString(::vl::__vwsn::This(a.Obj())->GetValue())) + ::vl::WString::Unmanaged(L"]"))));
		}
		{
			auto a = ::vl::Ptr<::Ctor>(new ::Ctor(static_cast<::vl::vint32_t>(1), true));
			(GLOBAL_NAME s = (GLOBAL_NAME s + ((((::vl::WString::Unmanaged(L"[") + ::vl::__vwsn::ToString(::vl::__vwsn::This(a.Obj())->GetX())) + ::vl::WString::Unmanaged(L"][")) + ::vl::__vwsn::ToString(::vl::__vwsn::This(a.Obj())->GetValue())) + ::vl::WString::Unmanaged(L"]"))));
		}
		{
			auto a = ::vl::Ptr<::Ctor>(new ::Ctor(true, static_cast<::vl::vint32_t>(2)));
			(GLOBAL_NAME s = (GLOBAL_NAME s + ((((::vl::WString::Unmanaged(L"[") + ::vl::__vwsn::ToString(::vl::__vwsn::This(a.Obj())->GetX())) + ::vl::WString::Unmanaged(L"][")) + ::vl::__vwsn::ToString(::vl::__vwsn::This(a.Obj())->GetValue())) + ::vl::WString::Unmanaged(L"]"))));
		}
		{
			auto a = ::vl::Ptr<::Ctor>(new ::Ctor(static_cast<::vl::vint32_t>(1), static_cast<::vl::vint32_t>(2)));
			(GLOBAL_NAME s = (GLOBAL_NAME s + ((((::vl::WString::Unmanaged(L"[") + ::vl::__vwsn::ToString(::vl::__vwsn::This(a.Obj())->GetX())) + ::vl::WString::Unmanaged(L"][")) + ::vl::__vwsn::ToString(::vl::__vwsn::This(a.Obj())->GetValue())) + ::vl::WString::Unmanaged(L"]"))));
		}
		return GLOBAL_NAME s;
	}

	ClassCtor& ClassCtor::Instance()
	{
		return Getvl_workflow_global_ClassCtor().instance;
	}
}

/***********************************************************************
Class (::Base)
***********************************************************************/

Base::Base()
	: x(static_cast<::vl::vint32_t>(0))
{
}

Base::Base(::vl::vint32_t _x)
	: x(static_cast<::vl::vint32_t>(0))
{
	(this->x = _x);
	if ((::vl::__vwsn::This(this)->x != this->x))
	{
		throw ::vl::Exception(::vl::WString::Unmanaged(L"The \"this\" expression is not correctly implemented."));
	}
}

::vl::vint32_t Base::GetX()
{
	if ((::vl::__vwsn::This(this)->x != this->x))
	{
		throw ::vl::Exception(::vl::WString::Unmanaged(L"The \"this\" expression is not correctly implemented."));
	}
	return this->x;
}

void Base::SetX(::vl::vint32_t _x)
{
	if ((this->x != _x))
	{
		(this->x = _x);
		::vl::__vwsn::EventInvoke(this->XChanged)();
	}
}

/***********************************************************************
Class (::Ctor)
***********************************************************************/

Ctor::Ctor()
{
}

Ctor::Ctor(::vl::vint32_t y, bool b)
	: ::Base(y)
{
}

Ctor::Ctor(bool b, ::vl::vint32_t value)
	: ::test::ObservableValue(value, ::vl::Nullable<bool>(b))
{
}

Ctor::Ctor(::vl::vint32_t y, ::vl::vint32_t value)
	: ::Base(y)
	, ::test::ObservableValue(value)
{
}

#undef GLOBAL_SYMBOL
#undef GLOBAL_NAME
#undef GLOBAL_OBJ

#if defined( _MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif
