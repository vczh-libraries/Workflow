/***********************************************************************
!!!!!! DO NOT MODIFY !!!!!!

Source: ../Resources/Codegen/OpCompare.txt

This file is generated by Workflow compiler
https://github.com/vczh-libraries
***********************************************************************/

#include "OpCompare.h"
/* CodePack:BeginIgnore() */
#ifndef VCZH_DEBUG_NO_REFLECTION
/* CodePack:ConditionOff(VCZH_DEBUG_NO_REFLECTION, OpCompareReflection.h) */
#include "OpCompareReflection.h"
#endif
/* CodePack:EndIgnore() */

#if defined( _MSC_VER)
#pragma warning(push)
#pragma warning(disable:4250)
#elif defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wparentheses-equality"
#elif defined(__GNUC__)
#pragma GCC diagnostic push
#endif

#define GLOBAL_SYMBOL ::vl_workflow_global::OpCompare::
#define GLOBAL_NAME ::vl_workflow_global::OpCompare::Instance().
#define GLOBAL_OBJ &::vl_workflow_global::OpCompare::Instance()

/***********************************************************************
Global Variables
***********************************************************************/

BEGIN_GLOBAL_STORAGE_CLASS(vl_workflow_global_OpCompare)
	vl_workflow_global::OpCompare instance;
	INITIALIZE_GLOBAL_STORAGE_CLASS
	FINALIZE_GLOBAL_STORAGE_CLASS
END_GLOBAL_STORAGE_CLASS(vl_workflow_global_OpCompare)

namespace vl_workflow_global
{
/***********************************************************************
Global Functions
***********************************************************************/

	::vl::WString OpCompare::main()
	{
		auto b = false;
		auto i8 = static_cast<::vl::vint8_t>(1);
		auto i16 = static_cast<::vl::vint16_t>(2);
		auto i32 = static_cast<::vl::vint32_t>(4);
		auto i64 = static_cast<::vl::vint64_t>(8L);
		auto u8 = static_cast<::vl::vuint8_t>(1);
		auto u16 = static_cast<::vl::vuint16_t>(2);
		auto u32 = static_cast<::vl::vuint32_t>(4U);
		auto u64 = static_cast<::vl::vuint64_t>(8UL);
		auto f32 = static_cast<float>(1.5f);
		auto f64 = static_cast<double>(3);
		auto s = ::vl::WString::Unmanaged(L"text");
		auto p0 = [&](){ ::test::Point __vwsn_temp__; __vwsn_temp__.x = static_cast<::vl::vint32_t>(0); return __vwsn_temp__; }();
		auto p1 = [&](){ ::test::Point __vwsn_temp__; __vwsn_temp__.y = static_cast<::vl::vint32_t>(0); return __vwsn_temp__; }();
		auto p2 = [&](){ ::test::Point __vwsn_temp__; __vwsn_temp__.y = static_cast<::vl::vint32_t>(0); __vwsn_temp__.x = static_cast<::vl::vint32_t>(0); return __vwsn_temp__; }();
		auto p3 = ::test::Point{};
		auto p4 = [&](){ ::test::Point __vwsn_temp__; __vwsn_temp__.x = static_cast<::vl::vint32_t>(1); __vwsn_temp__.y = static_cast<::vl::vint32_t>(1); return __vwsn_temp__; }();
		auto q1 = ::vl::Nullable<::test::Point>(p2);
		auto q2 = ::vl::Nullable<::test::Point>(p4);
		auto q3 = ::vl::Nullable<::test::Point>();
		auto e1 = ::vl::Nullable<::MyEnum>();
		auto e2 = ::vl::Nullable<::MyEnum>(::MyEnum::Item);
		return ((((((((((((((((((((((::vl::__vwsn::ToString((static_cast<::vl::vint16_t>(i8) < i16)) + ::vl::WString::Unmanaged(L", ")) + ::vl::__vwsn::ToString((static_cast<::vl::vint32_t>(i16) > i32))) + ::vl::WString::Unmanaged(L", ")) + ::vl::__vwsn::ToString((static_cast<::vl::vint64_t>(i32) == i64))) + ::vl::WString::Unmanaged(L", ")) + ((((::vl::__vwsn::ToString((static_cast<::vl::vuint16_t>(u8) <= u16)) + ::vl::WString::Unmanaged(L", ")) + ::vl::__vwsn::ToString((static_cast<::vl::vuint32_t>(u16) >= u32))) + ::vl::WString::Unmanaged(L", ")) + ::vl::__vwsn::ToString((static_cast<::vl::vuint64_t>(u32) != u64)))) + ::vl::WString::Unmanaged(L", ")) + ((((::vl::__vwsn::ToString((static_cast<double>(f32) < f64)) + ::vl::WString::Unmanaged(L", ")) + ::vl::__vwsn::ToString((static_cast<double>(f32) > f64))) + ::vl::WString::Unmanaged(L", ")) + ::vl::__vwsn::ToString((static_cast<double>(f32) == f64)))) + ::vl::WString::Unmanaged(L", ")) + ((::vl::__vwsn::ToString((b == true)) + ::vl::WString::Unmanaged(L", ")) + ::vl::__vwsn::ToString((b != false)))) + ::vl::WString::Unmanaged(L", ")) + ((::vl::__vwsn::ToString((s == ::vl::WString::Unmanaged(L"string"))) + ::vl::WString::Unmanaged(L", ")) + ::vl::__vwsn::ToString((s != ::vl::WString::Unmanaged(L"string"))))) + ::vl::WString::Unmanaged(L", ")) + ((((((::vl::__vwsn::ToString((p0 == p1)) + ::vl::WString::Unmanaged(L", ")) + ::vl::__vwsn::ToString((p1 == p2))) + ::vl::WString::Unmanaged(L", ")) + ::vl::__vwsn::ToString((p2 == p3))) + ::vl::WString::Unmanaged(L", ")) + ::vl::__vwsn::ToString((p3 == p4)))) + ::vl::WString::Unmanaged(L", ")) + ((((::vl::__vwsn::ToString((q1 == q3)) + ::vl::WString::Unmanaged(L", ")) + ::vl::__vwsn::ToString((q2 == q3))) + ::vl::WString::Unmanaged(L", ")) + ::vl::__vwsn::ToString((q3 == q3)))) + ::vl::WString::Unmanaged(L", ")) + ((((::vl::__vwsn::ToString((q1 == ::vl::Nullable<::test::Point>(p2))) + ::vl::WString::Unmanaged(L", ")) + ::vl::__vwsn::ToString((q2 == ::vl::Nullable<::test::Point>(p2)))) + ::vl::WString::Unmanaged(L", ")) + ::vl::__vwsn::ToString((q3 == ::vl::Nullable<::test::Point>(p2))))) + ::vl::WString::Unmanaged(L", ")) + ((((::vl::__vwsn::ToString((q1 == ::vl::Nullable<::test::Point>(p4))) + ::vl::WString::Unmanaged(L", ")) + ::vl::__vwsn::ToString((q2 == ::vl::Nullable<::test::Point>(p4)))) + ::vl::WString::Unmanaged(L", ")) + ::vl::__vwsn::ToString((q3 == ::vl::Nullable<::test::Point>(p4))))) + ::vl::WString::Unmanaged(L", ")) + ((::vl::__vwsn::ToString((e1 == ::vl::Nullable<::MyEnum>(::MyEnum::Item))) + ::vl::WString::Unmanaged(L", ")) + ::vl::__vwsn::ToString((e2 == ::vl::Nullable<::MyEnum>(::MyEnum::Item)))));
	}

	OpCompare& OpCompare::Instance()
	{
		return Getvl_workflow_global_OpCompare().instance;
	}
}

#undef GLOBAL_SYMBOL
#undef GLOBAL_NAME
#undef GLOBAL_OBJ

#if defined( _MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif
