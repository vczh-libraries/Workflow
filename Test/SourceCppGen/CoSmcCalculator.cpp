/***********************************************************************
!!!!!! DO NOT MODIFY !!!!!!

Source: ../Resources/Codegen/CoSmcCalculator.txt

This file is generated by Workflow compiler
https://github.com/vczh-libraries
***********************************************************************/

#include "CoSmcCalculator.h"
/* CodePack:BeginIgnore() */
#ifndef VCZH_DEBUG_NO_REFLECTION
/* CodePack:ConditionOff(VCZH_DEBUG_NO_REFLECTION, CoSmcCalculatorReflection.h) */
#include "CoSmcCalculatorReflection.h"
#endif
/* CodePack:EndIgnore() */

#if defined( _MSC_VER)
#pragma warning(push)
#pragma warning(disable:4250)
#elif defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wparentheses-equality"
#elif defined(__GNUC__)
#pragma GCC diagnostic push
#endif

#define GLOBAL_SYMBOL ::vl_workflow_global::CoSmcCalculator::
#define GLOBAL_NAME ::vl_workflow_global::CoSmcCalculator::Instance().
#define GLOBAL_OBJ &::vl_workflow_global::CoSmcCalculator::Instance()

/***********************************************************************
Global Variables
***********************************************************************/

BEGIN_GLOBAL_STORAGE_CLASS(vl_workflow_global_CoSmcCalculator)
	vl_workflow_global::CoSmcCalculator instance;
	INITIALIZE_GLOBAL_STORAGE_CLASS

		instance.s = ::vl::WString::Unmanaged(L"");
	FINALIZE_GLOBAL_STORAGE_CLASS

		instance.s = ::vl::WString::Empty;
END_GLOBAL_STORAGE_CLASS(vl_workflow_global_CoSmcCalculator)

namespace vl_workflow_global
{
/***********************************************************************
Global Functions
***********************************************************************/

	::vl::WString CoSmcCalculator::main()
	{
		auto c = ::vl::Ptr<::SMCalculator>(new ::SMCalculator());
		(GLOBAL_NAME s = ((::vl::WString::Unmanaged(L"[") + ::vl::__vwsn::This(c.Obj())->GetValue()) + ::vl::WString::Unmanaged(L"]")));
		auto handler = ::vl::__vwsn::EventAttach(::vl::__vwsn::This(c.Obj())->ValueChanged, vl::Func(::vl_workflow_global::__vwsnf1_CoSmcCalculator_main_(c)));
		::vl::__vwsn::This(c.Obj())->Digit(static_cast<::vl::vint>(1));
		::vl::__vwsn::This(c.Obj())->Dot();
		::vl::__vwsn::This(c.Obj())->Digit(static_cast<::vl::vint>(5));
		::vl::__vwsn::This(c.Obj())->Add();
		::vl::__vwsn::This(c.Obj())->Digit(static_cast<::vl::vint>(2));
		::vl::__vwsn::This(c.Obj())->Digit(static_cast<::vl::vint>(1));
		::vl::__vwsn::This(c.Obj())->Dot();
		::vl::__vwsn::This(c.Obj())->Digit(static_cast<::vl::vint>(2));
		::vl::__vwsn::This(c.Obj())->Digit(static_cast<::vl::vint>(5));
		::vl::__vwsn::This(c.Obj())->Mul();
		::vl::__vwsn::This(c.Obj())->Digit(static_cast<::vl::vint>(2));
		::vl::__vwsn::This(c.Obj())->Equal();
		::vl::__vwsn::This(c.Obj())->Clear();
		::vl::__vwsn::EventDetach(::vl::__vwsn::This(c.Obj())->ValueChanged, handler);
		return GLOBAL_NAME s;
	}

	CoSmcCalculator& CoSmcCalculator::Instance()
	{
		return Getvl_workflow_global_CoSmcCalculator().instance;
	}

/***********************************************************************
Closures
***********************************************************************/

	//-------------------------------------------------------------------

	__vwsnf1_CoSmcCalculator_main_::__vwsnf1_CoSmcCalculator_main_(::vl::Ptr<::SMCalculator> __vwsnctor_c)
		:c(__vwsnctor_c)
	{
	}

	void __vwsnf1_CoSmcCalculator_main_::operator()() const
	{
		(GLOBAL_NAME s = ((((::vl::WString::Unmanaged(L"") + GLOBAL_NAME s) + ::vl::WString::Unmanaged(L"[")) + ::vl::__vwsn::This(this->c.Obj())->GetValue()) + ::vl::WString::Unmanaged(L"]")));
	}

	//-------------------------------------------------------------------

	__vwsnc1_CoSmcCalculator_SMCalculator___vwsn_state_CreateCoroutine__vl_reflection_description_ICoroutine::__vwsnc1_CoSmcCalculator_SMCalculator___vwsn_state_CreateCoroutine__vl_reflection_description_ICoroutine(::vl::Ptr<::vl::reflection::description::ICoroutine> __vwsnctor___vwsn_state_previousCoroutine, ::vl::vint __vwsnctor___vwsn_state_startState, ::SMCalculator* __vwsnctor___vwsn_state_stateMachineObject, ::SMCalculator* __vwsnctorthis_0)
		:__vwsn_state_previousCoroutine(__vwsnctor___vwsn_state_previousCoroutine)
		, __vwsn_state_startState(__vwsnctor___vwsn_state_startState)
		, __vwsn_state_stateMachineObject(__vwsnctor___vwsn_state_stateMachineObject)
		, __vwsnthis_0(::vl::__vwsn::This(__vwsnctorthis_0))
	{
		this->__vwsn_co_tempexvar0_ex = ::vl::Ptr<::vl::reflection::description::IValueException>();
		this->__vwsn_co0_i = static_cast<::vl::vint>(0);
		this->__vwsn_co1_switch_0 = static_cast<::vl::vint>(0);
		this->__vwsn_co2_i = static_cast<::vl::vint>(0);
		this->__vwsn_co3_switch_1 = static_cast<::vl::vint>(0);
		this->__vwsn_co4_newNumber = false;
		this->__vwsn_co5_switch_2 = static_cast<::vl::vint>(0);
		this->__vwsn_co6_switch_4 = static_cast<::vl::vint>(0);
		this->__vwsn_co7_state_currentState = static_cast<::vl::vint>(0);
		this->__vwsn_co8_state_state = static_cast<::vl::vint>(0);
		this->__vwsn_co_state_ = static_cast<::vl::vint>(0);
		this->__vwsn_co_state_before_pause_ = (- static_cast<::vl::vint>(1));
		this->__vwsn_prop_Failure = ::vl::Ptr<::vl::reflection::description::IValueException>();
		this->__vwsn_prop_Status = ::vl::reflection::description::CoroutineStatus::Waiting;
	}

	::vl::Ptr<::vl::reflection::description::IValueException> __vwsnc1_CoSmcCalculator_SMCalculator___vwsn_state_CreateCoroutine__vl_reflection_description_ICoroutine::GetFailure()
	{
		return __vwsn_prop_Failure;
	}
	void __vwsnc1_CoSmcCalculator_SMCalculator___vwsn_state_CreateCoroutine__vl_reflection_description_ICoroutine::SetFailure(::vl::Ptr<::vl::reflection::description::IValueException> __vwsn_value_)
	{
		(__vwsn_prop_Failure = __vwsn_value_);
	}

	::vl::reflection::description::CoroutineStatus __vwsnc1_CoSmcCalculator_SMCalculator___vwsn_state_CreateCoroutine__vl_reflection_description_ICoroutine::GetStatus()
	{
		return __vwsn_prop_Status;
	}
	void __vwsnc1_CoSmcCalculator_SMCalculator___vwsn_state_CreateCoroutine__vl_reflection_description_ICoroutine::SetStatus(::vl::reflection::description::CoroutineStatus __vwsn_value_)
	{
		(__vwsn_prop_Status = __vwsn_value_);
	}

	void __vwsnc1_CoSmcCalculator_SMCalculator___vwsn_state_CreateCoroutine__vl_reflection_description_ICoroutine::Resume(bool __vwsn_raise_exception_, ::vl::Ptr<::vl::reflection::description::CoroutineResult> __vwsn_coroutine_output_)
	{
		if ((this->GetStatus() != ::vl::reflection::description::CoroutineStatus::Waiting))
		{
			throw ::vl::Exception(::vl::WString::Unmanaged(L"Resume should be called only when the coroutine is in the waiting status."));
		}
		this->SetStatus(::vl::reflection::description::CoroutineStatus::Executing);
		try
		{
			{
				if ((__vwsn_co_state_before_pause_ != (- static_cast<::vl::vint>(1))))
				{
					if ((! static_cast<bool>(__vwsn_coroutine_output_)))
					{
						(__vwsn_co_state_before_pause_ = (- static_cast<::vl::vint>(1)));
					}
					else if ((! static_cast<bool>(::vl::__vwsn::This(__vwsn_coroutine_output_.Obj())->GetFailure())))
					{
						(__vwsn_co_state_before_pause_ = (- static_cast<::vl::vint>(1)));
					}
					else
					{
						if (((__vwsn_co_state_before_pause_ == static_cast<::vl::vint>(0)) || [&](auto __vwsn_1){ return (static_cast<::vl::vint>(3) <=  __vwsn_1 && __vwsn_1 <= static_cast<::vl::vint>(20)); }(__vwsn_co_state_before_pause_)))
						{
							(__vwsn_co_state_before_pause_ = (- static_cast<::vl::vint>(1)));
							(__vwsn_co_tempexvar0_ex = ::vl::__vwsn::This(__vwsn_coroutine_output_.Obj())->GetFailure());
							(__vwsn_co_state_ = static_cast<::vl::vint>(2));
						}
						else
						{
							(__vwsn_co_state_before_pause_ = (- static_cast<::vl::vint>(1)));
							throw ::vl::Exception(::vl::__vwsn::This(::vl::__vwsn::This(__vwsn_coroutine_output_.Obj())->GetFailure().Obj())->GetMessage());
						}
					}
				}
				while (true)
				{
					if ((__vwsn_co_state_ == static_cast<::vl::vint>(1)))
					{
						this->SetStatus(::vl::reflection::description::CoroutineStatus::Stopped);
						return;
					}
					if ((__vwsn_co_state_ == static_cast<::vl::vint>(2)))
					{
						{
							(::vl::__vwsn::This(this->__vwsn_state_stateMachineObject)->stateMachineCoroutine = this->__vwsn_state_previousCoroutine);
						}
						throw ::vl::Exception(::vl::__vwsn::This(__vwsn_co_tempexvar0_ex.Obj())->GetMessage());
					}
					if ((__vwsn_co_state_ == static_cast<::vl::vint>(21)))
					{
						{
							(::vl::__vwsn::This(this->__vwsn_state_stateMachineObject)->stateMachineCoroutine = this->__vwsn_state_previousCoroutine);
						}
						(__vwsn_co_state_ = static_cast<::vl::vint>(1));
						continue;
					}
					try
					{
						{
							if ((__vwsn_co_state_ == static_cast<::vl::vint>(0)))
							{
								(__vwsn_co8_state_state = __vwsn_state_startState);
								if (true)
								{
									(__vwsn_co_state_ = static_cast<::vl::vint>(4));
									continue;
								}
								(__vwsn_co_state_ = static_cast<::vl::vint>(21));
								continue;
							}
							if ((__vwsn_co_state_ == static_cast<::vl::vint>(3)))
							{
								if (true)
								{
									(__vwsn_co_state_ = static_cast<::vl::vint>(4));
									continue;
								}
								(__vwsn_co_state_ = static_cast<::vl::vint>(21));
								continue;
							}
							if ((__vwsn_co_state_ == static_cast<::vl::vint>(4)))
							{
								(__vwsn_co7_state_currentState = __vwsn_co8_state_state);
								(__vwsn_co8_state_state = (- static_cast<::vl::vint>(1)));
								(__vwsn_co6_switch_4 = __vwsn_co7_state_currentState);
								if ((__vwsn_co6_switch_4 == static_cast<::vl::vint>(1)))
								{
									if ((::vl::__vwsn::This(this->__vwsn_state_stateMachineObject)->stateMachineInput == (- static_cast<::vl::vint>(1))))
									{
										this->SetStatus(::vl::reflection::description::CoroutineStatus::Waiting);
										(__vwsn_co_state_before_pause_ = __vwsn_co_state_);
										(__vwsn_co_state_ = static_cast<::vl::vint>(5));
										return;
									}
									(__vwsn_co_state_ = static_cast<::vl::vint>(5));
									continue;
								}
								if ((__vwsn_co6_switch_4 == static_cast<::vl::vint>(2)))
								{
									(__vwsn_co4_newNumber = ::vl::__vwsn::This(this->__vwsn_state_stateMachineObject)->__vwsn_statesp_Integer_newNumber);
									if ((::vl::__vwsn::This(this->__vwsn_state_stateMachineObject)->stateMachineInput == (- static_cast<::vl::vint>(1))))
									{
										this->SetStatus(::vl::reflection::description::CoroutineStatus::Waiting);
										(__vwsn_co_state_before_pause_ = __vwsn_co_state_);
										(__vwsn_co_state_ = static_cast<::vl::vint>(7));
										return;
									}
									(__vwsn_co_state_ = static_cast<::vl::vint>(7));
									continue;
								}
								if ((__vwsn_co6_switch_4 == static_cast<::vl::vint>(3)))
								{
									(::vl::__vwsn::This(this->__vwsn_state_stateMachineObject)->__vwsn_statesp_Integer_newNumber = true);
									::vl::__vwsn::This(this->__vwsn_state_stateMachineObject)->__vwsn_state_CreateCoroutine(static_cast<::vl::vint>(2));
									(__vwsn_co_state_ = static_cast<::vl::vint>(9));
									continue;
								}
								if ((__vwsn_co6_switch_4 == static_cast<::vl::vint>(4)))
								{
									::vl::__vwsn::This(this->__vwsn_state_stateMachineObject)->__vwsn_state_CreateCoroutine(static_cast<::vl::vint>(3));
									(__vwsn_co_state_ = static_cast<::vl::vint>(16));
									continue;
								}
								if ((__vwsn_co6_switch_4 == static_cast<::vl::vint>(0)))
								{
									(__vwsn_co8_state_state = static_cast<::vl::vint>(4));
									(__vwsn_co_state_ = static_cast<::vl::vint>(3));
									continue;
									(__vwsn_co_state_ = static_cast<::vl::vint>(20));
									continue;
								}
								(__vwsn_co_state_ = static_cast<::vl::vint>(3));
								continue;
							}
							if ((__vwsn_co_state_ == static_cast<::vl::vint>(5)))
							{
								(__vwsn_co1_switch_0 = ::vl::__vwsn::This(this->__vwsn_state_stateMachineObject)->stateMachineInput);
								if ((__vwsn_co1_switch_0 == static_cast<::vl::vint>(0)))
								{
									(::vl::__vwsn::This(this->__vwsn_state_stateMachineObject)->stateMachineInput = (- static_cast<::vl::vint>(1)));
									(__vwsn_co0_i = ::vl::__vwsn::This(this->__vwsn_state_stateMachineObject)->__vwsn_stateip_Digit_i);
									__vwsnthis_0->SetValue((__vwsnthis_0->GetValue() + ::vl::__vwsn::ToString(__vwsn_co0_i)));
									(__vwsn_co8_state_state = static_cast<::vl::vint>(1));
									(__vwsn_co_state_ = static_cast<::vl::vint>(3));
									continue;
									(__vwsn_co_state_ = static_cast<::vl::vint>(6));
									continue;
								}
								(__vwsn_co_state_ = static_cast<::vl::vint>(6));
								continue;
							}
							if ((__vwsn_co_state_ == static_cast<::vl::vint>(6)))
							{
								(__vwsn_co_state_ = static_cast<::vl::vint>(21));
								continue;
								(__vwsn_co_state_ = static_cast<::vl::vint>(3));
								continue;
							}
							if ((__vwsn_co_state_ == static_cast<::vl::vint>(7)))
							{
								(__vwsn_co3_switch_1 = ::vl::__vwsn::This(this->__vwsn_state_stateMachineObject)->stateMachineInput);
								if ((__vwsn_co3_switch_1 == static_cast<::vl::vint>(0)))
								{
									(::vl::__vwsn::This(this->__vwsn_state_stateMachineObject)->stateMachineInput = (- static_cast<::vl::vint>(1)));
									(__vwsn_co2_i = ::vl::__vwsn::This(this->__vwsn_state_stateMachineObject)->__vwsn_stateip_Digit_i);
									if (__vwsn_co4_newNumber)
									{
										__vwsnthis_0->SetValue(::vl::__vwsn::ToString(__vwsn_co2_i));
									}
									else
									{
										__vwsnthis_0->SetValue((__vwsnthis_0->GetValue() + ::vl::__vwsn::ToString(__vwsn_co2_i)));
									}
									(__vwsn_co8_state_state = static_cast<::vl::vint>(1));
									(__vwsn_co_state_ = static_cast<::vl::vint>(3));
									continue;
									(__vwsn_co_state_ = static_cast<::vl::vint>(8));
									continue;
								}
								(__vwsn_co_state_ = static_cast<::vl::vint>(8));
								continue;
							}
							if ((__vwsn_co_state_ == static_cast<::vl::vint>(8)))
							{
								(__vwsn_co_state_ = static_cast<::vl::vint>(21));
								continue;
								(__vwsn_co_state_ = static_cast<::vl::vint>(3));
								continue;
							}
							if ((__vwsn_co_state_ == static_cast<::vl::vint>(9)))
							{
								this->SetStatus(::vl::reflection::description::CoroutineStatus::Waiting);
								(__vwsn_co_state_before_pause_ = __vwsn_co_state_);
								(__vwsn_co_state_ = static_cast<::vl::vint>(10));
								return;
							}
							if ((__vwsn_co_state_ == static_cast<::vl::vint>(10)))
							{
								if ((::vl::__vwsn::This(this->__vwsn_state_stateMachineObject)->stateMachineInput == (- static_cast<::vl::vint>(1))))
								{
									this->SetStatus(::vl::reflection::description::CoroutineStatus::Waiting);
									(__vwsn_co_state_before_pause_ = __vwsn_co_state_);
									(__vwsn_co_state_ = static_cast<::vl::vint>(11));
									return;
								}
								(__vwsn_co_state_ = static_cast<::vl::vint>(11));
								continue;
							}
							if ((__vwsn_co_state_ == static_cast<::vl::vint>(11)))
							{
								(__vwsn_co5_switch_2 = ::vl::__vwsn::This(this->__vwsn_state_stateMachineObject)->stateMachineInput);
								if ((__vwsn_co5_switch_2 == static_cast<::vl::vint>(1)))
								{
									{
										(::vl::__vwsn::This(this->__vwsn_state_stateMachineObject)->stateMachineInput = (- static_cast<::vl::vint>(1)));
										{
											__vwsnthis_0->SetValue((__vwsnthis_0->GetValue() + ::vl::WString::Unmanaged(L".")));
										}
									}
									(__vwsn_co_state_ = static_cast<::vl::vint>(12));
									continue;
								}
								(__vwsn_co_state_ = static_cast<::vl::vint>(13));
								continue;
							}
							if ((__vwsn_co_state_ == static_cast<::vl::vint>(12)))
							{
								(::vl::__vwsn::This(this->__vwsn_state_stateMachineObject)->__vwsn_statesp_Integer_newNumber = false);
								::vl::__vwsn::This(this->__vwsn_state_stateMachineObject)->__vwsn_state_CreateCoroutine(static_cast<::vl::vint>(2));
								(__vwsn_co_state_ = static_cast<::vl::vint>(14));
								continue;
							}
							if ((__vwsn_co_state_ == static_cast<::vl::vint>(13)))
							{
								(__vwsn_co_state_ = static_cast<::vl::vint>(21));
								continue;
								(__vwsn_co_state_ = static_cast<::vl::vint>(12));
								continue;
							}
							if ((__vwsn_co_state_ == static_cast<::vl::vint>(14)))
							{
								this->SetStatus(::vl::reflection::description::CoroutineStatus::Waiting);
								(__vwsn_co_state_before_pause_ = __vwsn_co_state_);
								(__vwsn_co_state_ = static_cast<::vl::vint>(15));
								return;
							}
							if ((__vwsn_co_state_ == static_cast<::vl::vint>(15)))
							{
								(__vwsn_co_state_ = static_cast<::vl::vint>(21));
								continue;
								(__vwsn_co_state_ = static_cast<::vl::vint>(3));
								continue;
							}
							if ((__vwsn_co_state_ == static_cast<::vl::vint>(16)))
							{
								this->SetStatus(::vl::reflection::description::CoroutineStatus::Waiting);
								(__vwsn_co_state_before_pause_ = __vwsn_co_state_);
								(__vwsn_co_state_ = static_cast<::vl::vint>(17));
								return;
							}
							if ((__vwsn_co_state_ == static_cast<::vl::vint>(17)))
							{
								if ((::vl::__vwsn::This(this->__vwsn_state_stateMachineObject)->stateMachineInput == (- static_cast<::vl::vint>(1))))
								{
									this->SetStatus(::vl::reflection::description::CoroutineStatus::Waiting);
									(__vwsn_co_state_before_pause_ = __vwsn_co_state_);
									(__vwsn_co_state_ = static_cast<::vl::vint>(18));
									return;
								}
								(__vwsn_co_state_ = static_cast<::vl::vint>(18));
								continue;
							}
							if ((__vwsn_co_state_ == static_cast<::vl::vint>(18)))
							{
								{
									auto __vwsn_switch_3 = ::vl::__vwsn::This(this->__vwsn_state_stateMachineObject)->stateMachineInput;
									if ((__vwsn_switch_3 == static_cast<::vl::vint>(2)))
									{
										(::vl::__vwsn::This(this->__vwsn_state_stateMachineObject)->stateMachineInput = (- static_cast<::vl::vint>(1)));
										{
											__vwsnthis_0->Calculate();
											(__vwsnthis_0->op = ::vl::WString::Unmanaged(L"+"));
										}
									}
									else if ((__vwsn_switch_3 == static_cast<::vl::vint>(3)))
									{
										(::vl::__vwsn::This(this->__vwsn_state_stateMachineObject)->stateMachineInput = (- static_cast<::vl::vint>(1)));
										{
											__vwsnthis_0->Calculate();
											(__vwsnthis_0->op = ::vl::WString::Unmanaged(L"*"));
										}
									}
									else if ((__vwsn_switch_3 == static_cast<::vl::vint>(4)))
									{
										(::vl::__vwsn::This(this->__vwsn_state_stateMachineObject)->stateMachineInput = (- static_cast<::vl::vint>(1)));
										{
											__vwsnthis_0->Calculate();
											(__vwsnthis_0->op = ::vl::WString::Unmanaged(L"="));
										}
									}
									else if ((__vwsn_switch_3 == static_cast<::vl::vint>(5)))
									{
										(::vl::__vwsn::This(this->__vwsn_state_stateMachineObject)->stateMachineInput = (- static_cast<::vl::vint>(1)));
										{
											(__vwsnthis_0->valueFirst = ::vl::WString::Unmanaged(L""));
											(__vwsnthis_0->op = ::vl::WString::Unmanaged(L""));
											__vwsnthis_0->SetValue(::vl::WString::Unmanaged(L"0"));
										}
									}
									else if ((__vwsn_switch_3 == static_cast<::vl::vint>(0)))
									{
										(::vl::__vwsn::This(this->__vwsn_state_stateMachineObject)->stateMachineInput = (- static_cast<::vl::vint>(1)));
										throw ::vl::Exception(::vl::WString::Unmanaged(L"Method \"Digit\" of class \"SMCalculator\" cannot be called at this moment."));
									}
									else if ((__vwsn_switch_3 == static_cast<::vl::vint>(1)))
									{
										(::vl::__vwsn::This(this->__vwsn_state_stateMachineObject)->stateMachineInput = (- static_cast<::vl::vint>(1)));
										throw ::vl::Exception(::vl::WString::Unmanaged(L"Method \"Dot\" of class \"SMCalculator\" cannot be called at this moment."));
									}
								}
								(__vwsn_co8_state_state = static_cast<::vl::vint>(4));
								(__vwsn_co_state_ = static_cast<::vl::vint>(3));
								continue;
								(__vwsn_co_state_ = static_cast<::vl::vint>(19));
								continue;
							}
							if ((__vwsn_co_state_ == static_cast<::vl::vint>(19)))
							{
								(__vwsn_co_state_ = static_cast<::vl::vint>(21));
								continue;
								(__vwsn_co_state_ = static_cast<::vl::vint>(3));
								continue;
							}
							if ((__vwsn_co_state_ == static_cast<::vl::vint>(20)))
							{
								(__vwsn_co_state_ = static_cast<::vl::vint>(21));
								continue;
								(__vwsn_co_state_ = static_cast<::vl::vint>(3));
								continue;
							}
						}
					}
					catch(const ::vl::Exception& __vwsne_1)
					{
						auto __vwsn_co_ex_ = ::vl::reflection::description::IValueException::Create(__vwsne_1.Message());
						{
							(__vwsn_co_tempexvar0_ex = __vwsn_co_ex_);
							(__vwsn_co_state_ = static_cast<::vl::vint>(2));
							continue;
						}
					}
				}
			}
		}
		catch(const ::vl::Exception& __vwsne_0)
		{
			auto __vwsn_co_ex_ = ::vl::reflection::description::IValueException::Create(__vwsne_0.Message());
			{
				this->SetFailure(__vwsn_co_ex_);
				this->SetStatus(::vl::reflection::description::CoroutineStatus::Stopped);
				if (__vwsn_raise_exception_)
				{
					throw;
				}
			}
		}
	}

}

/***********************************************************************
Class (::SMCalculator)
***********************************************************************/

::vl::WString SMCalculator::GetValue()
{
	return this->__vwsn_prop_Value;
}
void SMCalculator::SetValue(const ::vl::WString& __vwsn_value_)
{
	if ((this->__vwsn_prop_Value != __vwsn_value_))
	{
		(this->__vwsn_prop_Value = __vwsn_value_);
		::vl::__vwsn::EventInvoke(this->ValueChanged)();
	}
}

void SMCalculator::Update(const ::vl::WString& value)
{
	this->SetValue(value);
	(this->valueFirst = value);
}

void SMCalculator::Calculate()
{
	if ((this->valueFirst == ::vl::WString::Unmanaged(L"")))
	{
		(this->valueFirst = this->GetValue());
	}
	else if ((this->op == ::vl::WString::Unmanaged(L"+")))
	{
		this->Update(::vl::__vwsn::ToString((::vl::__vwsn::Parse<double>(this->valueFirst) + ::vl::__vwsn::Parse<double>(this->GetValue()))));
	}
	else if ((this->op == ::vl::WString::Unmanaged(L"*")))
	{
		this->Update(::vl::__vwsn::ToString((::vl::__vwsn::Parse<double>(this->valueFirst) * ::vl::__vwsn::Parse<double>(this->GetValue()))));
	}
	else
	{
		throw ::vl::Exception((::vl::WString::Unmanaged(L"Unrecognized operator: ") + this->op));
	}
}

void SMCalculator::Digit(::vl::vint i)
{
	if ((! ::vl::__vwsn::This(this)->stateMachineInitialized))
	{
		(::vl::__vwsn::This(this)->stateMachineInitialized = true);
		::vl::__vwsn::This(this)->__vwsn_state_CreateCoroutine(static_cast<::vl::vint>(0));
		::vl::__vwsn::This(this)->ResumeStateMachine();
	}
	(::vl::__vwsn::This(this)->stateMachineInput = static_cast<::vl::vint>(0));
	(::vl::__vwsn::This(this)->__vwsn_stateip_Digit_i = i);
	::vl::__vwsn::This(this)->ResumeStateMachine();
}
void SMCalculator::Dot()
{
	if ((! ::vl::__vwsn::This(this)->stateMachineInitialized))
	{
		(::vl::__vwsn::This(this)->stateMachineInitialized = true);
		::vl::__vwsn::This(this)->__vwsn_state_CreateCoroutine(static_cast<::vl::vint>(0));
		::vl::__vwsn::This(this)->ResumeStateMachine();
	}
	(::vl::__vwsn::This(this)->stateMachineInput = static_cast<::vl::vint>(1));
	::vl::__vwsn::This(this)->ResumeStateMachine();
}
void SMCalculator::Add()
{
	if ((! ::vl::__vwsn::This(this)->stateMachineInitialized))
	{
		(::vl::__vwsn::This(this)->stateMachineInitialized = true);
		::vl::__vwsn::This(this)->__vwsn_state_CreateCoroutine(static_cast<::vl::vint>(0));
		::vl::__vwsn::This(this)->ResumeStateMachine();
	}
	(::vl::__vwsn::This(this)->stateMachineInput = static_cast<::vl::vint>(2));
	::vl::__vwsn::This(this)->ResumeStateMachine();
}
void SMCalculator::Mul()
{
	if ((! ::vl::__vwsn::This(this)->stateMachineInitialized))
	{
		(::vl::__vwsn::This(this)->stateMachineInitialized = true);
		::vl::__vwsn::This(this)->__vwsn_state_CreateCoroutine(static_cast<::vl::vint>(0));
		::vl::__vwsn::This(this)->ResumeStateMachine();
	}
	(::vl::__vwsn::This(this)->stateMachineInput = static_cast<::vl::vint>(3));
	::vl::__vwsn::This(this)->ResumeStateMachine();
}
void SMCalculator::Equal()
{
	if ((! ::vl::__vwsn::This(this)->stateMachineInitialized))
	{
		(::vl::__vwsn::This(this)->stateMachineInitialized = true);
		::vl::__vwsn::This(this)->__vwsn_state_CreateCoroutine(static_cast<::vl::vint>(0));
		::vl::__vwsn::This(this)->ResumeStateMachine();
	}
	(::vl::__vwsn::This(this)->stateMachineInput = static_cast<::vl::vint>(4));
	::vl::__vwsn::This(this)->ResumeStateMachine();
}
void SMCalculator::Clear()
{
	if ((! ::vl::__vwsn::This(this)->stateMachineInitialized))
	{
		(::vl::__vwsn::This(this)->stateMachineInitialized = true);
		::vl::__vwsn::This(this)->__vwsn_state_CreateCoroutine(static_cast<::vl::vint>(0));
		::vl::__vwsn::This(this)->ResumeStateMachine();
	}
	(::vl::__vwsn::This(this)->stateMachineInput = static_cast<::vl::vint>(5));
	::vl::__vwsn::This(this)->ResumeStateMachine();
}
void SMCalculator::__vwsn_state_CreateCoroutine(::vl::vint __vwsn_state_startState)
{
	auto __vwsn_state_stateMachineObject = this;
	auto __vwsn_state_previousCoroutine = ::vl::__vwsn::This(__vwsn_state_stateMachineObject)->stateMachineCoroutine;
	(::vl::__vwsn::This(__vwsn_state_stateMachineObject)->stateMachineCoroutine = ::vl::Ptr<::vl::reflection::description::ICoroutine>(new ::vl_workflow_global::__vwsnc1_CoSmcCalculator_SMCalculator___vwsn_state_CreateCoroutine__vl_reflection_description_ICoroutine(__vwsn_state_previousCoroutine, __vwsn_state_startState, __vwsn_state_stateMachineObject, this)));
}

SMCalculator::SMCalculator()
	: valueFirst(::vl::WString::Unmanaged(L""))
	, op(::vl::WString::Unmanaged(L""))
	, __vwsn_prop_Value(::vl::WString::Unmanaged(L"0"))
	, __vwsn_stateip_Digit_i(static_cast<::vl::vint>(0))
	, __vwsn_statesp_Integer_newNumber(false)
{
}

#undef GLOBAL_SYMBOL
#undef GLOBAL_NAME
#undef GLOBAL_OBJ

#if defined( _MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif
